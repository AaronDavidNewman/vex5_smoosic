{"version":3,"file":"vexflow.js","mappings":"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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/metrics.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/glyphs.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/web.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/version.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./entry/vexflow.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let midLine = b + (a - b) / 2;\n    if (midLine % 2 > 0) {\n        midLine = roundN(midLine * 10, 5) / 10;\n    }\n    return midLine;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * @param s\n * @returns `s` with the first letter capitalized.\n */\nexport function upperFirst(s = '') {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n/**\n * Return the sum of an array of numbers.\n */\nexport function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// @author Joshua Koo / @zz85\n// @author @incompleteopus\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Fraction_fractionA, _Fraction_fractionB;\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(compare).simplify();\n        const b = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionB).copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n_a = Fraction;\n// Cached objects for comparisons.\n_Fraction_fractionA = { value: new Fraction() };\n_Fraction_fractionB = { value: new Fraction() };\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nexport class Metrics {\n    /** Use the provided key to look up a FontInfo in CommonMetrics. **/\n    static getFontInfo(key) {\n        return {\n            family: Metrics.get(`${key}.fontFamily`),\n            size: Metrics.get(`${key}.fontSize`) * Metrics.get(`${key}.fontScale`),\n            weight: Metrics.get(`${key}.fontWeight`),\n            style: Metrics.get(`${key}.fontStyle`),\n        };\n    }\n    /**\n     * Use the provided key to look up a value in CommonMetrics.\n     *\n     * @param key is a string separated by periods (e.g., `Stroke.text.fontFamily`).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     *\n     * For the key `Stroke.text.fontFamily`, check all of the following in order:\n     *   1) CommonMetrics.fontFamily\n     *   2) CommonMetrics.Stroke.fontFamily\n     *   3) CommonMetrics.Stroke.text.fontFamily\n     * Retrieve the value from the most specific key (i.e., prefer #3 over #2 over #1 in the above example).\n     */\n    // eslint-disable-next-line\n    static get(key, defaultValue) {\n        var _a;\n        const keyParts = key.split('.');\n        const lastKeyPart = keyParts.pop(); // Use ! because keyParts is not empty, since ''.split('.') still returns [''].\n        // Start from root of CommonMetrics and go down as far as possible.\n        let curr = MetricsDefaults;\n        let retVal = defaultValue;\n        while (curr) {\n            // Update retVal whenever we find a value assigned to a more specific key.\n            retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;\n            const keyPart = keyParts.shift();\n            if (keyPart) {\n                curr = curr[keyPart]; // Go down one level.\n            }\n            else {\n                break;\n            }\n        }\n        return retVal;\n    }\n}\n// eslint-disable-next-line\nexport const MetricsDefaults = {\n    fontFamily: 'Bravura',\n    fontSize: 30,\n    fontScale: 1.0,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    Accidental: {\n        cautionary: {\n            fontSize: 20,\n        },\n        grace: {\n            fontSize: 25,\n        },\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    Annotation: {\n        fontSize: 10,\n    },\n    Bend: {\n        fontSize: 10,\n    },\n    ChordSymbol: {\n        fontSize: 12,\n        spacing: 0.05,\n        subscriptOffset: 0.2,\n        superscriptOffset: -0.4,\n        superSubRatio: 0.6,\n    },\n    FretHandFinger: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n    GraceNote: {\n        fontScale: 2 / 3,\n    },\n    GraceTabNote: {\n        fontScale: 2 / 3,\n    },\n    NoteHead: {\n        minPadding: 2,\n    },\n    PedalMarking: {\n        text: {\n            fontSize: 12,\n            fontStyle: 'italic',\n        },\n    },\n    Repetition: {\n        text: {\n            fontSize: 12,\n            fontWeight: 'bold',\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    Stave: {\n        fontSize: 8,\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    StaveConnector: {\n        text: {\n            fontSize: 16,\n        },\n    },\n    StaveLine: {\n        fontSize: 10,\n    },\n    StaveSection: {\n        fontSize: 10,\n        fontWeight: 'bold',\n    },\n    StaveTempo: {\n        fontSize: 14,\n        glyph: {\n            fontSize: 25,\n        },\n        name: {\n            fontWeight: 'bold',\n        },\n    },\n    StaveText: {\n        fontSize: 16,\n    },\n    StaveTie: {\n        fontSize: 10,\n    },\n    StringNumber: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        verticalPadding: 8,\n        stemPadding: 2,\n        leftPadding: 5,\n        rightPadding: 6,\n    },\n    Stroke: {\n        text: {\n            fontSize: 10,\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n        },\n    },\n    TabNote: {\n        text: {\n            fontSize: 9,\n        },\n    },\n    TabSlide: {\n        fontSize: 10,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    },\n    TabTie: {\n        fontSize: 10,\n    },\n    TextBracket: {\n        fontSize: 15,\n        fontStyle: 'italic',\n    },\n    TextNote: {\n        text: {\n            fontSize: 12,\n        },\n    },\n    Tremolo: {\n        spacing: 7,\n    },\n    Volta: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const newX = this.x < that.x ? this.x : that.x;\n        const newY = this.y < that.y ? this.y : that.y;\n        const newW = Math.max(this.x + this.w, that.x + that.w) - newX;\n        const newH = Math.max(this.y + this.h, that.y + that.h) - newY;\n        this.x = newX;\n        this.y = newY;\n        this.w = newW;\n        this.h = newH;\n        return this;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Metrics } from './metrics';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Metrics.get('fontFamily');\n        size = size !== null && size !== void 0 ? size : Metrics.get('fontSize') + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Metrics.get('fontSize') + 'pt';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Metrics.get('fontFamily');\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * @param fontName\n     * @param woffURL The absolute or relative URL to the woff file.\n     * @param includeWoff2 If true, we assume that a woff2 file is in\n     * the same folder as the woff file, and will append a `2` to the url.\n     */\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\n    // eslint-disable-next-line\n    // @ts-ignore\n    static loadWebFont(fontName, woffURL) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const fontFace = new FontFace(fontName, `url(${woffURL})`);\n            yield fontFace.load();\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    /**\n     * Load the web fonts that are used by your app.\n     * If fontNames is undefined, all fonts in Font.WEB_FONT_FILES will be loaded.\n     *\n     * For example, `flow.html` calls:\n     *   `await Vex.Flow.Font.loadWebFonts();`\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     *\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\n     * for your app.\n     */\n    static loadWebFonts(fontNames) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allFiles = Font.WEB_FONT_FILES;\n            if (!fontNames) {\n                fontNames = Object.keys(allFiles);\n            }\n            const host = Font.WEB_FONT_HOST;\n            for (const fontName of fontNames) {\n                const fontPath = allFiles[fontName];\n                if (fontPath) {\n                    Font.loadWebFont(fontName, host + fontPath);\n                }\n            }\n        });\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Discussion on GDPR concerns:\n * https://www.jsdelivr.com/blog/how-the-german-courts-ruling-on-google-fonts-affects-jsdelivr-and-why-it-is-safe-to-use/\n *\n * You can also self host, and specify your own server URL here.\n */\nFont.WEB_FONT_HOST = 'https://cdn.jsdelivr.net/npm/@vexflow-fonts/';\n/**\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\n * set of fonts to load. See: `Font.loadWebFonts()`.\n */\nFont.WEB_FONT_FILES = {\n    Academico: 'academico/academico.woff2',\n    Bravura: 'bravura/bravura.woff2',\n    'Bravura Text': 'bravuratext/bravuratext.woff2',\n    Edwin: 'edwin/edwin-roman.woff2',\n    'Finale Ash': 'finaleash/finaleash.woff2',\n    'Finale Ash Text': 'finaleashtext/finaleashtext.woff2',\n    'Finale Broadway': 'finalebroadway/finalebroadway.woff2',\n    'Finale Broadway Text': 'finalebroadwaytext/finalebroadwaytext.woff2',\n    'Finale Jazz': 'finalejazz/finalejazz.woff2',\n    'Finale Jazz Text': 'finalejazztext/finalejazztext.woff2',\n    'Finale Maestro': 'finalemaestro/finalemaestro.woff2',\n    'Finale Maestro Text': 'finalemaestrotext/finalemaestrotext-regular.woff2',\n    GonvilleSmufl: 'gonvillesmufl/gonvillesmufl.woff2',\n    Gootville: 'gootville/gootville.woff2',\n    'Gootville Text': 'gootvilletext/gootvilletext.woff2',\n    Leipzig: 'leipzig/leipzig.woff2',\n    Leland: 'leland/leland.woff2',\n    'Leland Text': 'lelandtext/lelandtext.woff2',\n    MuseJazz: 'musejazz/musejazz.woff2',\n    'MuseJazz Text': 'musejazztext/musejazztext.woff2',\n    Nepomuk: 'nepomuk/nepomuk.woff2',\n    Petaluma: 'petaluma/petaluma.woff2',\n    'Petaluma Script': 'petalumascript/petalumascript.woff2',\n    'Petaluma Text': 'petalumatext/petalumatext.woff2',\n    'Roboto Slab': 'robotoslab/robotoslab-regular-400.woff2',\n    Sebastian: 'sebastian/sebastian.woff2',\n    'Sebastian Text': 'sebastiantext/sebastiantext.woff2',\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _Registry_defaultRegistry;\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return __classPrivateFieldGet(Registry, _a, \"f\", _Registry_defaultRegistry);\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        __classPrivateFieldSet(Registry, _a, registry, \"f\", _Registry_defaultRegistry);\n    }\n    static disableDefaultRegistry() {\n        __classPrivateFieldSet(Registry, _a, undefined, \"f\", _Registry_defaultRegistry);\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _b, _c;\n        return (_c = (_b = this.index.id) === null || _b === void 0 ? void 0 : _b[id]) === null || _c === void 0 ? void 0 : _c[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const indexAttr = this.index[attribute];\n        if (indexAttr) {\n            const indexAttrVal = indexAttr[value];\n            if (indexAttrVal) {\n                const keys = Object.keys(indexAttrVal);\n                return keys.map((k) => indexAttrVal[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n_a = Registry;\n_Registry_defaultRegistry = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Element_txtCanvas, _Element_context, _Element_attrs, _Element_fontInfo, _Element_fontScale, _Element_text, _Element_metricsValid, _Element_textMetrics, _Element_height, _Element_width;\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined, prefix, RuntimeError } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n *\n * The Element handles style and font properties for the Element and any child\n * elements, along with working with the Registry to create unique ids.\n *\n * The `text` is a series of unicode characters (including SMuFL codes).\n * The `textFont` property contains information required to style the text (i.e., font family, size, weight, and style).\n * This font family is a comma separated list of fonts.\n * The method `measureText` calculates the `textMetrics`, `boundingBox`, `height` and `width` of the `text`.\n * The method `renderText(...)` will render the text using the provided context and coordinates,\n * taking `xShift` and `yShift` into account.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    // Note: Canvas is node-canvas.\n    // https://www.npmjs.com/package/canvas\n    static setTextMeasurementCanvas(canvas /* | Canvas */) {\n        __classPrivateFieldSet(Element, _a, canvas, \"f\", _Element_txtCanvas);\n    }\n    constructor(category) {\n        var _b;\n        // Element objects keep a list of children that they are responsible for.\n        // Children inherit the style from their parents (see: setGroupStyle(s)).\n        this.children = [];\n        _Element_context.set(this, void 0);\n        _Element_attrs.set(this, void 0);\n        _Element_fontInfo.set(this, void 0);\n        _Element_fontScale.set(this, void 0);\n        _Element_text.set(this, '');\n        _Element_metricsValid.set(this, false);\n        _Element_textMetrics.set(this, {\n            fontBoundingBoxAscent: 0,\n            fontBoundingBoxDescent: 0,\n            actualBoundingBoxAscent: 0,\n            actualBoundingBoxDescent: 0,\n            actualBoundingBoxLeft: 0,\n            actualBoundingBoxRight: 0,\n            width: 0,\n        });\n        _Element_height.set(this, 0);\n        _Element_width.set(this, 0);\n        this.xShift = 0;\n        this.yShift = 0;\n        this.x = 0;\n        this.y = 0;\n        __classPrivateFieldSet(this, _Element_attrs, {\n            id: Element.newID(),\n            type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,\n            class: '',\n        }, \"f\");\n        this.rendered = false;\n        __classPrivateFieldSet(this, _Element_fontInfo, Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type), \"f\");\n        __classPrivateFieldSet(this, _Element_fontScale, Metrics.get(`${__classPrivateFieldGet(this, _Element_attrs, \"f\").type}.fontScale`), \"f\");\n        // If a default registry exist, then register with it right away.\n        (_b = Registry.getDefaultRegistry()) === null || _b === void 0 ? void 0 : _b.register(this);\n    }\n    /**\n     * Adds a child Element to the Element, which lets it inherit the\n     * same style as the parent when setGroupStyle() is called.\n     *\n     * Examples of children are noteheads and stems.  Modifiers such\n     * as Accidentals are generally not set as children.\n     *\n     * Note that StaveNote calls setGroupStyle() when setStyle() is called.\n     */\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\").type;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element's style (see `getStyle()` and `setStyle()`)\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Draw an element. */\n    draw() {\n        throw new RuntimeError('Element', 'Draw not defined');\n    }\n    /** Check if it has a class label (An element can have multiple class labels). */\n    hasClass(className) {\n        var _b;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            return false;\n        return ((_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ').indexOf(className)) !== -1;\n    }\n    /** Add a class label (An element can have multiple class labels). */\n    addClass(className) {\n        var _b;\n        if (this.hasClass(className))\n            return this;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${className}`;\n        else\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${__classPrivateFieldGet(this, _Element_attrs, \"f\").class} ${className}`;\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels). */\n    removeClass(className) {\n        var _b, _c;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = arr.join(' ');\n        }\n        (_c = this.registry) === null || _c === void 0 ? void 0 : _c.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\");\n    }\n    /** Return an attribute, such as 'id', 'type' or 'class'. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(__classPrivateFieldGet(this, _Element_attrs, \"f\").id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute such as 'id', 'class', or 'type'. */\n    setAttribute(name, value) {\n        var _b;\n        const oldID = __classPrivateFieldGet(this, _Element_attrs, \"f\").id;\n        const oldValue = __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n        __classPrivateFieldGet(this, _Element_attrs, \"f\")[name] = value;\n        // Register with old id to support id changes.\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return new BoundingBox(0, -this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Return the context, such as an SVGContext or CanvasContext object. */\n    getContext() {\n        return __classPrivateFieldGet(this, _Element_context, \"f\");\n    }\n    /** Set the context to an SVGContext or CanvasContext object */\n    setContext(context) {\n        __classPrivateFieldSet(this, _Element_context, context, \"f\");\n        return this;\n    }\n    /** Validate and return the rendering context. */\n    checkContext() {\n        return defined(__classPrivateFieldGet(this, _Element_context, \"f\"), 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial') that will be applied\n     * to text (not glyphs).\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string for the text font. */\n    get font() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /**\n     * Set the element's text font family, size, weight, style\n     * (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * This attribute does not determine the font used for musical Glyphs like treble clefs.\n     *\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        const defaultTextFont = Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type);\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            __classPrivateFieldSet(this, _Element_fontInfo, Object.assign(Object.assign({}, defaultTextFont), font), \"f\");\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.fromCSSString(font), \"f\");\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style), \"f\");\n        }\n        return this;\n    }\n    /**\n     * Get the css string describing this Element's text font. e.g.,\n     * 'bold 10pt Arial'.\n     */\n    getFont() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.fontInfo is set.\n        return __classPrivateFieldGet(this, _Element_fontInfo, \"f\");\n    }\n    /** Set the current FontInfo object. */\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    getFontScale() {\n        return __classPrivateFieldGet(this, _Element_fontScale, \"f\");\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /** @returns a CSS font-size string (e.g., '18pt', '12px', '1em'). */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /** @returns the font size in `pt`. */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /** @returns the font size in `px`. */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /** @returns a CSS font-style string (e.g., 'italic'). */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    /** Set the font style. */\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    /** Set the font weight. */\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n    /** Get element width. */\n    getWidth() {\n        return this.width;\n    }\n    get width() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_width, \"f\");\n    }\n    /** Set element width. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    set width(width) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_width, width, \"f\");\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the X coordinate. */\n    getX() {\n        return this.x;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Shift element down `yShift` pixels. Negative values shift up. */\n    setYShift(yShift) {\n        this.yShift = yShift;\n        return this;\n    }\n    /** Get shift element `yShift`. */\n    getYShift() {\n        return this.yShift;\n    }\n    /** Set shift element right `xShift` pixels. Negative values shift left. */\n    setXShift(xShift) {\n        this.xShift = xShift;\n        return this;\n    }\n    /** Get shift element `xShift`. */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Set element text. */\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    set text(text) {\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        __classPrivateFieldSet(this, _Element_text, text, \"f\");\n    }\n    /** Get element text. */\n    getText() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    get text() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    /** Render the element text. */\n    renderText(ctx, xPos, yPos) {\n        ctx.save();\n        ctx.setFont(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n        ctx.fillText(__classPrivateFieldGet(this, _Element_text, \"f\"), xPos + this.x + this.xShift, yPos + this.y + this.yShift);\n        this.children.forEach((child) => {\n            ctx.setFont(__classPrivateFieldGet(child, _Element_fontInfo, \"f\"));\n            ctx.fillText(__classPrivateFieldGet(child, _Element_text, \"f\"), xPos + child.x + child.xShift, yPos + child.y + child.yShift);\n        });\n        ctx.restore();\n    }\n    /** Measure the text using the textFont. */\n    measureText() {\n        // TODO: What about SVG.getBBox()?\n        // https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox\n        let txtCanvas = __classPrivateFieldGet(Element, _a, \"f\", _Element_txtCanvas);\n        // Create the canvas element that will be used to measure text.\n        if (!txtCanvas) {\n            if (typeof document !== 'undefined') {\n                txtCanvas = document.createElement('canvas'); // Defaults to 300 x 150. See: https://www.w3.org/TR/2012/WD-html5-author-20120329/the-canvas-element.html#the-canvas-element\n            }\n            else if (typeof OffscreenCanvas !== 'undefined') {\n                txtCanvas = new OffscreenCanvas(300, 150);\n            }\n            __classPrivateFieldSet(Element, _a, txtCanvas, \"f\", _Element_txtCanvas);\n        }\n        const context = txtCanvas === null || txtCanvas === void 0 ? void 0 : txtCanvas.getContext('2d');\n        if (!context) {\n            // eslint-disable-next-line no-console\n            console.warn('Element: No context for txtCanvas. Returning empty text metrics.');\n            return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n        }\n        context.font = Font.toCSSString(Font.validate(__classPrivateFieldGet(this, _Element_fontInfo, \"f\")));\n        __classPrivateFieldSet(this, _Element_textMetrics, context.measureText(__classPrivateFieldGet(this, _Element_text, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Element_height, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxAscent + __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxDescent, \"f\");\n        __classPrivateFieldSet(this, _Element_width, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").width, \"f\");\n        __classPrivateFieldSet(this, _Element_metricsValid, true, \"f\");\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Get the text metrics. */\n    getTextMetrics() {\n        return this.textMetrics;\n    }\n    get textMetrics() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Get the text height. */\n    getHeight() {\n        return this.height;\n    }\n    get height() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_height, \"f\");\n    }\n    set height(height) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_height, height, \"f\");\n    }\n    setOriginX(x) {\n        const bbox = this.getBoundingBox();\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.xShift = -xShift;\n    }\n    setOriginY(y) {\n        const bbox = this.getBoundingBox();\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.yShift = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n}\n_a = Element, _Element_context = new WeakMap(), _Element_attrs = new WeakMap(), _Element_fontInfo = new WeakMap(), _Element_fontScale = new WeakMap(), _Element_text = new WeakMap(), _Element_metricsValid = new WeakMap(), _Element_textMetrics = new WeakMap(), _Element_height = new WeakMap(), _Element_width = new WeakMap();\nElement.ID = 1000;\n/** Canvas used to measure text. See measureText(): TextMetrics. */\n_Element_txtCanvas = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Modifier_spacingFromNextModifier, _Modifier_modifierContext;\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        _Modifier_spacingFromNextModifier.set(this, void 0);\n        _Modifier_modifierContext.set(this, void 0);\n        this.width = 0;\n        // The `textLine` is reserved space above or below a stave.\n        this.textLine = 0;\n        this.position = Modifier.Position.LEFT;\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, 0, \"f\");\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return __classPrivateFieldGet(this, _Modifier_modifierContext, \"f\");\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(__classPrivateFieldGet(this, _Modifier_modifierContext, \"f\"), 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        __classPrivateFieldSet(this, _Modifier_modifierContext, c, \"f\");\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `textLine` for the modifier. */\n    setTextLine(line) {\n        this.textLine = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.yShift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, x, \"f\");\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return __classPrivateFieldGet(this, _Modifier_spacingFromNextModifier, \"f\");\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.xShift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.xShift -= x;\n        }\n        else {\n            this.xShift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n_Modifier_spacingFromNextModifier = new WeakMap(), _Modifier_modifierContext = new WeakMap();\n","// This file was generated by `glyph_codes.js'\n// The enum includes all SMuFL glyphs, and a few others that VexFlow uses.\n// See the list of SMuFL glyphs:\n//   https://w3c.github.io/smufl/latest/tables/\n//   https://raw.githubusercontent.com/w3c/smufl/gh-pages/metadata/glyphnames.json\n// We renamed the two SMuFL names that start with a digit:\n//   4stringTabClef => fourStringTabClef\n//   6stringTabClef => sixStringTabClef\n//\nexport var Glyphs;\n(function (Glyphs) {\n    ////// SPECIAL GLYPHS ///////////////////////////////////////\n    // Null character\n    Glyphs[\"null\"] = \"\\0\";\n    ////// SMuFL GLYPHS /////////////////////////////////////////\n    // U+E06E  4-string tab clef\n    Glyphs[\"fourStringTabClef\"] = \"\\uE06E\";\n    // U+E06D  6-string tab clef\n    Glyphs[\"sixStringTabClef\"] = \"\\uE06D\";\n    // U+E30D  11 large diesis down, 3° down [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisDown\"] = \"\\uE30D\";\n    // U+E30C  11 large diesis up, (11L), (sharp less 11M), 3° up [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisUp\"] = \"\\uE30C\";\n    // U+E30B  11 medium diesis down, 1°[17 31] 2°46 down, 1/4-tone down\n    Glyphs[\"accSagittal11MediumDiesisDown\"] = \"\\uE30B\";\n    // U+E30A  11 medium diesis up, (11M), 1°[17 31] 2°46 up, 1/4-tone up\n    Glyphs[\"accSagittal11MediumDiesisUp\"] = \"\\uE30A\";\n    // U+E3AB  11:19 large diesis down\n    Glyphs[\"accSagittal11v19LargeDiesisDown\"] = \"\\uE3AB\";\n    // U+E3AA  11:19 large diesis up, (11:19L, apotome less 11:19M)\n    Glyphs[\"accSagittal11v19LargeDiesisUp\"] = \"\\uE3AA\";\n    // U+E3A3  11:19 medium diesis down\n    Glyphs[\"accSagittal11v19MediumDiesisDown\"] = \"\\uE3A3\";\n    // U+E3A2  11:19 medium diesis up, (11:19M, 11M plus 19s)\n    Glyphs[\"accSagittal11v19MediumDiesisUp\"] = \"\\uE3A2\";\n    // U+E397  11:49 comma down\n    Glyphs[\"accSagittal11v49CommaDown\"] = \"\\uE397\";\n    // U+E396  11:49 comma up, (11:49C, 11M less 49C)\n    Glyphs[\"accSagittal11v49CommaUp\"] = \"\\uE396\";\n    // U+E395  143 comma down\n    Glyphs[\"accSagittal143CommaDown\"] = \"\\uE395\";\n    // U+E394  143 comma up, (143C, 13L less 11M)\n    Glyphs[\"accSagittal143CommaUp\"] = \"\\uE394\";\n    // U+E343  17 comma down\n    Glyphs[\"accSagittal17CommaDown\"] = \"\\uE343\";\n    // U+E342  17 comma up, (17C)\n    Glyphs[\"accSagittal17CommaUp\"] = \"\\uE342\";\n    // U+E393  17 kleisma down\n    Glyphs[\"accSagittal17KleismaDown\"] = \"\\uE393\";\n    // U+E392  17 kleisma up, (17k)\n    Glyphs[\"accSagittal17KleismaUp\"] = \"\\uE392\";\n    // U+E399  19 comma down\n    Glyphs[\"accSagittal19CommaDown\"] = \"\\uE399\";\n    // U+E398  19 comma up, (19C)\n    Glyphs[\"accSagittal19CommaUp\"] = \"\\uE398\";\n    // U+E391  19 schisma down\n    Glyphs[\"accSagittal19SchismaDown\"] = \"\\uE391\";\n    // U+E390  19 schisma up, (19s)\n    Glyphs[\"accSagittal19SchismaUp\"] = \"\\uE390\";\n    // U+E3F5  1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal1MinaDown\"] = \"\\uE3F5\";\n    // U+E3F4  1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal1MinaUp\"] = \"\\uE3F4\";\n    // U+E3F9  1 tina down, 7²⋅11⋅19/5-schismina down, 0.17 cents down\n    Glyphs[\"accSagittal1TinaDown\"] = \"\\uE3F9\";\n    // U+E3F8  1 tina up, 7²⋅11⋅19/5-schismina up, 0.17 cents up\n    Glyphs[\"accSagittal1TinaUp\"] = \"\\uE3F8\";\n    // U+E371  23 comma down, 2° down [96 EDO], 1/8-tone down\n    Glyphs[\"accSagittal23CommaDown\"] = \"\\uE371\";\n    // U+E370  23 comma up, (23C), 2° up [96 EDO], 1/8-tone up\n    Glyphs[\"accSagittal23CommaUp\"] = \"\\uE370\";\n    // U+E39F  23 small diesis down\n    Glyphs[\"accSagittal23SmallDiesisDown\"] = \"\\uE39F\";\n    // U+E39E  23 small diesis up, (23S)\n    Glyphs[\"accSagittal23SmallDiesisUp\"] = \"\\uE39E\";\n    // U+E307  25 small diesis down, 2° down [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisDown\"] = \"\\uE307\";\n    // U+E306  25 small diesis up, (25S, ~5:13S, ~37S, 5C plus 5C), 2° up [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisUp\"] = \"\\uE306\";\n    // U+E3F7  2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal2MinasDown\"] = \"\\uE3F7\";\n    // U+E3F6  2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal2MinasUp\"] = \"\\uE3F6\";\n    // U+E3FB  2 tinas down, 1/(7³⋅17)-schismina down, 0.30 cents down\n    Glyphs[\"accSagittal2TinasDown\"] = \"\\uE3FB\";\n    // U+E3FA  2 tinas up, 1/(7³⋅17)-schismina up, 0.30 cents up\n    Glyphs[\"accSagittal2TinasUp\"] = \"\\uE3FA\";\n    // U+E30F  35 large diesis down, 2° down [50 EDO], 5/18-tone down\n    Glyphs[\"accSagittal35LargeDiesisDown\"] = \"\\uE30F\";\n    // U+E30E  35 large diesis up, (35L, ~13L, ~125L, sharp less 35M), 2°50 up\n    Glyphs[\"accSagittal35LargeDiesisUp\"] = \"\\uE30E\";\n    // U+E309  35 medium diesis down, 1°[50] 2°[27] down, 2/9-tone down\n    Glyphs[\"accSagittal35MediumDiesisDown\"] = \"\\uE309\";\n    // U+E308  35 medium diesis up, (35M, ~13M, ~125M, 5C plus 7C), 2/9-tone up\n    Glyphs[\"accSagittal35MediumDiesisUp\"] = \"\\uE308\";\n    // U+E3FD  3 tinas down, 1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal3TinasDown\"] = \"\\uE3FD\";\n    // U+E3FC  3 tinas up, 1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal3TinasUp\"] = \"\\uE3FC\";\n    // U+E3A9  49 large diesis down\n    Glyphs[\"accSagittal49LargeDiesisDown\"] = \"\\uE3A9\";\n    // U+E3A8  49 large diesis up, (49L, ~31L, apotome less 49M)\n    Glyphs[\"accSagittal49LargeDiesisUp\"] = \"\\uE3A8\";\n    // U+E3A5  49 medium diesis down\n    Glyphs[\"accSagittal49MediumDiesisDown\"] = \"\\uE3A5\";\n    // U+E3A4  49 medium diesis up, (49M, ~31M, 7C plus 7C)\n    Glyphs[\"accSagittal49MediumDiesisUp\"] = \"\\uE3A4\";\n    // U+E39D  49 small diesis down\n    Glyphs[\"accSagittal49SmallDiesisDown\"] = \"\\uE39D\";\n    // U+E39C  49 small diesis up, (49S, ~31S)\n    Glyphs[\"accSagittal49SmallDiesisUp\"] = \"\\uE39C\";\n    // U+E3FF  4 tinas down, 5²⋅11²/7-schismina down, 0.57 cents down\n    Glyphs[\"accSagittal4TinasDown\"] = \"\\uE3FF\";\n    // U+E3FE  4 tinas up, 5²⋅11²/7-schismina up, 0.57 cents up\n    Glyphs[\"accSagittal4TinasUp\"] = \"\\uE3FE\";\n    // U+E345  55 comma down, 3° down [96 EDO], 3/16-tone down\n    Glyphs[\"accSagittal55CommaDown\"] = \"\\uE345\";\n    // U+E344  55 comma up, (55C, 11M less 5C), 3°up [96 EDO], 3/16-tone up\n    Glyphs[\"accSagittal55CommaUp\"] = \"\\uE344\";\n    // U+E303  5 comma down, 1° down [22 27 29 34 41 46 53 96 EDOs], 1/12-tone down\n    Glyphs[\"accSagittal5CommaDown\"] = \"\\uE303\";\n    // U+E302  5 comma up, (5C), 1° up [22 27 29 34 41 46 53 96 EDOs], 1/12-tone up\n    Glyphs[\"accSagittal5CommaUp\"] = \"\\uE302\";\n    // U+E401  5 tinas down, 7⁴/25-schismina down, 0.72 cents down\n    Glyphs[\"accSagittal5TinasDown\"] = \"\\uE401\";\n    // U+E400  5 tinas up, 7⁴/25-schismina up, 0.72 cents up\n    Glyphs[\"accSagittal5TinasUp\"] = \"\\uE400\";\n    // U+E349  5:11 small diesis down\n    Glyphs[\"accSagittal5v11SmallDiesisDown\"] = \"\\uE349\";\n    // U+E348  5:11 small diesis up, (5:11S, ~7:13S, ~11:17S, 5:7k plus 7:11C)\n    Glyphs[\"accSagittal5v11SmallDiesisUp\"] = \"\\uE348\";\n    // U+E3AD  5:13 large diesis down\n    Glyphs[\"accSagittal5v13LargeDiesisDown\"] = \"\\uE3AD\";\n    // U+E3AC  5:13 large diesis up, (5:13L, ~37L, apotome less 5:13M)\n    Glyphs[\"accSagittal5v13LargeDiesisUp\"] = \"\\uE3AC\";\n    // U+E3A1  5:13 medium diesis down\n    Glyphs[\"accSagittal5v13MediumDiesisDown\"] = \"\\uE3A1\";\n    // U+E3A0  5:13 medium diesis up, (5:13M, ~37M, 5C plus 13C)\n    Glyphs[\"accSagittal5v13MediumDiesisUp\"] = \"\\uE3A0\";\n    // U+E373  5:19 comma down, 1/20-tone down\n    Glyphs[\"accSagittal5v19CommaDown\"] = \"\\uE373\";\n    // U+E372  5:19 comma up, (5:19C, 5C plus 19s), 1/20-tone up\n    Glyphs[\"accSagittal5v19CommaUp\"] = \"\\uE372\";\n    // U+E375  5:23 small diesis down, 2° down [60 EDO], 1/5-tone down\n    Glyphs[\"accSagittal5v23SmallDiesisDown\"] = \"\\uE375\";\n    // U+E374  5:23 small diesis up, (5:23S, 5C plus 23C), 2° up [60 EDO], 1/5-tone up\n    Glyphs[\"accSagittal5v23SmallDiesisUp\"] = \"\\uE374\";\n    // U+E3A7  5:49 medium diesis down\n    Glyphs[\"accSagittal5v49MediumDiesisDown\"] = \"\\uE3A7\";\n    // U+E3A6  5:49 medium diesis up, (5:49M, half apotome)\n    Glyphs[\"accSagittal5v49MediumDiesisUp\"] = \"\\uE3A6\";\n    // U+E301  5:7 kleisma down\n    Glyphs[\"accSagittal5v7KleismaDown\"] = \"\\uE301\";\n    // U+E300  5:7 kleisma up, (5:7k, ~11:13k, 7C less 5C)\n    Glyphs[\"accSagittal5v7KleismaUp\"] = \"\\uE300\";\n    // U+E403  6 tinas down, 2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal6TinasDown\"] = \"\\uE403\";\n    // U+E402  6 tinas up, 2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal6TinasUp\"] = \"\\uE402\";\n    // U+E305  7 comma down, 1° down [43 EDO], 2° down [72 EDO], 1/6-tone down\n    Glyphs[\"accSagittal7CommaDown\"] = \"\\uE305\";\n    // U+E304  7 comma up, (7C), 1° up [43 EDO], 2° up [72 EDO], 1/6-tone up\n    Glyphs[\"accSagittal7CommaUp\"] = \"\\uE304\";\n    // U+E405  7 tinas down, 7/(5²⋅17)-schismina down, 1.02 cents down\n    Glyphs[\"accSagittal7TinasDown\"] = \"\\uE405\";\n    // U+E404  7 tinas up, 7/(5²⋅17)-schismina up, 1.02 cents up\n    Glyphs[\"accSagittal7TinasUp\"] = \"\\uE404\";\n    // U+E347  7:11 comma down, 1° down [60 EDO], 1/10-tone down\n    Glyphs[\"accSagittal7v11CommaDown\"] = \"\\uE347\";\n    // U+E346  7:11 comma up, (7:11C, ~13:17S, ~29S, 11L less 7C), 1° up [60 EDO]\n    Glyphs[\"accSagittal7v11CommaUp\"] = \"\\uE346\";\n    // U+E341  7:11 kleisma down\n    Glyphs[\"accSagittal7v11KleismaDown\"] = \"\\uE341\";\n    // U+E340  7:11 kleisma up, (7:11k, ~29k)\n    Glyphs[\"accSagittal7v11KleismaUp\"] = \"\\uE340\";\n    // U+E39B  7:19 comma down\n    Glyphs[\"accSagittal7v19CommaDown\"] = \"\\uE39B\";\n    // U+E39A  7:19 comma up, (7:19C, 7C less 19s)\n    Glyphs[\"accSagittal7v19CommaUp\"] = \"\\uE39A\";\n    // U+E407  8 tinas down, 11⋅17/(5²⋅7)-schismina down, 1.14 cents down\n    Glyphs[\"accSagittal8TinasDown\"] = \"\\uE407\";\n    // U+E406  8 tinas up, 11⋅17/(5²⋅7)-schismina up, 1.14 cents up\n    Glyphs[\"accSagittal8TinasUp\"] = \"\\uE406\";\n    // U+E409  9 tinas down, 1/(7²⋅11)-schismina down, 1.26 cents down\n    Glyphs[\"accSagittal9TinasDown\"] = \"\\uE409\";\n    // U+E408  9 tinas up, 1/(7²⋅11)-schismina up, 1.26 cents up\n    Glyphs[\"accSagittal9TinasUp\"] = \"\\uE408\";\n    // U+E3F2  Acute, 5 schisma up (5s), 2 cents up\n    Glyphs[\"accSagittalAcute\"] = \"\\uE3F2\";\n    // U+E335  Double flat, (2 apotomes down)[almost all EDOs], whole-tone down\n    Glyphs[\"accSagittalDoubleFlat\"] = \"\\uE335\";\n    // U+E3E9  Double flat 11:49C-up\n    Glyphs[\"accSagittalDoubleFlat11v49CUp\"] = \"\\uE3E9\";\n    // U+E3EB  Double flat 143C-up\n    Glyphs[\"accSagittalDoubleFlat143CUp\"] = \"\\uE3EB\";\n    // U+E365  Double flat 17C-up\n    Glyphs[\"accSagittalDoubleFlat17CUp\"] = \"\\uE365\";\n    // U+E3ED  Double flat 17k-up\n    Glyphs[\"accSagittalDoubleFlat17kUp\"] = \"\\uE3ED\";\n    // U+E3E7  Double flat 19C-up\n    Glyphs[\"accSagittalDoubleFlat19CUp\"] = \"\\uE3E7\";\n    // U+E3EF  Double flat 19s-up\n    Glyphs[\"accSagittalDoubleFlat19sUp\"] = \"\\uE3EF\";\n    // U+E387  Double flat 23C-up, 14° down [96 EDO], 7/8-tone down\n    Glyphs[\"accSagittalDoubleFlat23CUp\"] = \"\\uE387\";\n    // U+E3E1  Double flat 23S-up\n    Glyphs[\"accSagittalDoubleFlat23SUp\"] = \"\\uE3E1\";\n    // U+E32D  Double flat 25S-up, 8°down [53 EDO]\n    Glyphs[\"accSagittalDoubleFlat25SUp\"] = \"\\uE32D\";\n    // U+E3E3  Double flat 49S-up\n    Glyphs[\"accSagittalDoubleFlat49SUp\"] = \"\\uE3E3\";\n    // U+E363  Double flat 55C-up, 13° down [96 EDO], 13/16-tone down\n    Glyphs[\"accSagittalDoubleFlat55CUp\"] = \"\\uE363\";\n    // U+E331  Double flat 5C-up, 5°[22 29] 7°[34 41] 9°53 down, 11/12 tone down\n    Glyphs[\"accSagittalDoubleFlat5CUp\"] = \"\\uE331\";\n    // U+E35F  Double flat 5:11S-up\n    Glyphs[\"accSagittalDoubleFlat5v11SUp\"] = \"\\uE35F\";\n    // U+E385  Double flat 5:19C-up, 19/20-tone down\n    Glyphs[\"accSagittalDoubleFlat5v19CUp\"] = \"\\uE385\";\n    // U+E383  Double flat 5:23S-up, 8° down [60 EDO], 4/5-tone down\n    Glyphs[\"accSagittalDoubleFlat5v23SUp\"] = \"\\uE383\";\n    // U+E333  Double flat 5:7k-up\n    Glyphs[\"accSagittalDoubleFlat5v7kUp\"] = \"\\uE333\";\n    // U+E32F  Double flat 7C-up, 5° down [43 EDO], 10° down [72 EDO], 5/6-tone down\n    Glyphs[\"accSagittalDoubleFlat7CUp\"] = \"\\uE32F\";\n    // U+E361  Double flat 7:11C-up, 9° down [60 EDO], 9/10-tone down\n    Glyphs[\"accSagittalDoubleFlat7v11CUp\"] = \"\\uE361\";\n    // U+E367  Double flat 7:11k-up\n    Glyphs[\"accSagittalDoubleFlat7v11kUp\"] = \"\\uE367\";\n    // U+E3E5  Double flat 7:19C-up\n    Glyphs[\"accSagittalDoubleFlat7v19CUp\"] = \"\\uE3E5\";\n    // U+E334  Double sharp, (2 apotomes up)[almost all EDOs], whole-tone up\n    Glyphs[\"accSagittalDoubleSharp\"] = \"\\uE334\";\n    // U+E3E8  Double sharp 11:49C-down\n    Glyphs[\"accSagittalDoubleSharp11v49CDown\"] = \"\\uE3E8\";\n    // U+E3EA  Double sharp 143C-down\n    Glyphs[\"accSagittalDoubleSharp143CDown\"] = \"\\uE3EA\";\n    // U+E364  Double sharp 17C-down\n    Glyphs[\"accSagittalDoubleSharp17CDown\"] = \"\\uE364\";\n    // U+E3EC  Double sharp 17k-down\n    Glyphs[\"accSagittalDoubleSharp17kDown\"] = \"\\uE3EC\";\n    // U+E3E6  Double sharp 19C-down\n    Glyphs[\"accSagittalDoubleSharp19CDown\"] = \"\\uE3E6\";\n    // U+E3EE  Double sharp 19s-down\n    Glyphs[\"accSagittalDoubleSharp19sDown\"] = \"\\uE3EE\";\n    // U+E386  Double sharp 23C-down, 14°up [96 EDO], 7/8-tone up\n    Glyphs[\"accSagittalDoubleSharp23CDown\"] = \"\\uE386\";\n    // U+E3E0  Double sharp 23S-down\n    Glyphs[\"accSagittalDoubleSharp23SDown\"] = \"\\uE3E0\";\n    // U+E32C  Double sharp 25S-down, 8°up [53 EDO]\n    Glyphs[\"accSagittalDoubleSharp25SDown\"] = \"\\uE32C\";\n    // U+E3E2  Double sharp 49S-down\n    Glyphs[\"accSagittalDoubleSharp49SDown\"] = \"\\uE3E2\";\n    // U+E362  Double sharp 55C-down, 13° up [96 EDO], 13/16-tone up\n    Glyphs[\"accSagittalDoubleSharp55CDown\"] = \"\\uE362\";\n    // U+E330  Double sharp 5C-down, 5°[22 29] 7°[34 41] 9°53 up, 11/12 tone up\n    Glyphs[\"accSagittalDoubleSharp5CDown\"] = \"\\uE330\";\n    // U+E35E  Double sharp 5:11S-down\n    Glyphs[\"accSagittalDoubleSharp5v11SDown\"] = \"\\uE35E\";\n    // U+E384  Double sharp 5:19C-down, 19/20-tone up\n    Glyphs[\"accSagittalDoubleSharp5v19CDown\"] = \"\\uE384\";\n    // U+E382  Double sharp 5:23S-down, 8° up [60 EDO], 4/5-tone up\n    Glyphs[\"accSagittalDoubleSharp5v23SDown\"] = \"\\uE382\";\n    // U+E332  Double sharp 5:7k-down\n    Glyphs[\"accSagittalDoubleSharp5v7kDown\"] = \"\\uE332\";\n    // U+E32E  Double sharp 7C-down, 5°[43] 10°[72] up, 5/6-tone up\n    Glyphs[\"accSagittalDoubleSharp7CDown\"] = \"\\uE32E\";\n    // U+E360  Double sharp 7:11C-down, 9° up [60 EDO], 9/10-tone up\n    Glyphs[\"accSagittalDoubleSharp7v11CDown\"] = \"\\uE360\";\n    // U+E366  Double sharp 7:11k-down\n    Glyphs[\"accSagittalDoubleSharp7v11kDown\"] = \"\\uE366\";\n    // U+E3E4  Double sharp 7:19C-down\n    Glyphs[\"accSagittalDoubleSharp7v19CDown\"] = \"\\uE3E4\";\n    // U+E319  Flat, (apotome down)[almost all EDOs], 1/2-tone down\n    Glyphs[\"accSagittalFlat\"] = \"\\uE319\";\n    // U+E329  Flat 11L-down, 8° up [46 EDO]\n    Glyphs[\"accSagittalFlat11LDown\"] = \"\\uE329\";\n    // U+E327  Flat 11M-down, 3° down [17 31 EDOs], 7° down [46 EDO], 3/4-tone down\n    Glyphs[\"accSagittalFlat11MDown\"] = \"\\uE327\";\n    // U+E3DB  Flat 11:19L-down\n    Glyphs[\"accSagittalFlat11v19LDown\"] = \"\\uE3DB\";\n    // U+E3D3  Flat 11:19M-down\n    Glyphs[\"accSagittalFlat11v19MDown\"] = \"\\uE3D3\";\n    // U+E3C7  Flat 11:49C-down\n    Glyphs[\"accSagittalFlat11v49CDown\"] = \"\\uE3C7\";\n    // U+E3B9  Flat 11:49C-up\n    Glyphs[\"accSagittalFlat11v49CUp\"] = \"\\uE3B9\";\n    // U+E3C5  Flat 143C-down\n    Glyphs[\"accSagittalFlat143CDown\"] = \"\\uE3C5\";\n    // U+E3BB  Flat 143C-up\n    Glyphs[\"accSagittalFlat143CUp\"] = \"\\uE3BB\";\n    // U+E357  Flat 17C-down\n    Glyphs[\"accSagittalFlat17CDown\"] = \"\\uE357\";\n    // U+E351  Flat 17C-up\n    Glyphs[\"accSagittalFlat17CUp\"] = \"\\uE351\";\n    // U+E3C3  Flat 17k-down\n    Glyphs[\"accSagittalFlat17kDown\"] = \"\\uE3C3\";\n    // U+E3BD  Flat 17k-up\n    Glyphs[\"accSagittalFlat17kUp\"] = \"\\uE3BD\";\n    // U+E3C9  Flat 19C-down\n    Glyphs[\"accSagittalFlat19CDown\"] = \"\\uE3C9\";\n    // U+E3B7  Flat 19C-up\n    Glyphs[\"accSagittalFlat19CUp\"] = \"\\uE3B7\";\n    // U+E3C1  Flat 19s-down\n    Glyphs[\"accSagittalFlat19sDown\"] = \"\\uE3C1\";\n    // U+E3BF  Flat 19s-up\n    Glyphs[\"accSagittalFlat19sUp\"] = \"\\uE3BF\";\n    // U+E37D  Flat 23C-down, 10° down [96 EDO], 5/8-tone down\n    Glyphs[\"accSagittalFlat23CDown\"] = \"\\uE37D\";\n    // U+E37B  Flat 23C-up, 6° down [96 EDO], 3/8-tone down\n    Glyphs[\"accSagittalFlat23CUp\"] = \"\\uE37B\";\n    // U+E3CF  Flat 23S-down\n    Glyphs[\"accSagittalFlat23SDown\"] = \"\\uE3CF\";\n    // U+E3B1  Flat 23S-up\n    Glyphs[\"accSagittalFlat23SUp\"] = \"\\uE3B1\";\n    // U+E323  Flat 25S-down, 7° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SDown\"] = \"\\uE323\";\n    // U+E311  Flat 25S-up, 3° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SUp\"] = \"\\uE311\";\n    // U+E32B  Flat 35L-down, 5° down [50 EDO]\n    Glyphs[\"accSagittalFlat35LDown\"] = \"\\uE32B\";\n    // U+E325  Flat 35M-down, 4° down [50 EDO], 6° down [27 EDO], 13/18-tone down\n    Glyphs[\"accSagittalFlat35MDown\"] = \"\\uE325\";\n    // U+E3D9  Flat 49L-down\n    Glyphs[\"accSagittalFlat49LDown\"] = \"\\uE3D9\";\n    // U+E3D5  Flat 49M-down\n    Glyphs[\"accSagittalFlat49MDown\"] = \"\\uE3D5\";\n    // U+E3CD  Flat 49S-down\n    Glyphs[\"accSagittalFlat49SDown\"] = \"\\uE3CD\";\n    // U+E3B3  Flat 49S-up\n    Glyphs[\"accSagittalFlat49SUp\"] = \"\\uE3B3\";\n    // U+E359  Flat 55C-down, 11° down [96 EDO], 11/16-tone down\n    Glyphs[\"accSagittalFlat55CDown\"] = \"\\uE359\";\n    // U+E34F  Flat 55C-up, 5° down [96 EDO], 5/16-tone down\n    Glyphs[\"accSagittalFlat55CUp\"] = \"\\uE34F\";\n    // U+E31F  Flat 5C-down, 4°[22 29] 5°[27 34 41] 6°[39 46 53] down, 7/12-tone down\n    Glyphs[\"accSagittalFlat5CDown\"] = \"\\uE31F\";\n    // U+E315  Flat 5C-up, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°72 7°[96] down, 5/12-tone down\n    Glyphs[\"accSagittalFlat5CUp\"] = \"\\uE315\";\n    // U+E35D  Flat 5:11S-down\n    Glyphs[\"accSagittalFlat5v11SDown\"] = \"\\uE35D\";\n    // U+E34B  Flat 5:11S-up\n    Glyphs[\"accSagittalFlat5v11SUp\"] = \"\\uE34B\";\n    // U+E3DD  Flat 5:13L-down\n    Glyphs[\"accSagittalFlat5v13LDown\"] = \"\\uE3DD\";\n    // U+E3D1  Flat 5:13M-down\n    Glyphs[\"accSagittalFlat5v13MDown\"] = \"\\uE3D1\";\n    // U+E37F  Flat 5:19C-down, 11/20-tone down\n    Glyphs[\"accSagittalFlat5v19CDown\"] = \"\\uE37F\";\n    // U+E379  Flat 5:19C-up, 9/20-tone down\n    Glyphs[\"accSagittalFlat5v19CUp\"] = \"\\uE379\";\n    // U+E381  Flat 5:23S-down, 7° down [60 EDO], 7/10-tone down\n    Glyphs[\"accSagittalFlat5v23SDown\"] = \"\\uE381\";\n    // U+E377  Flat 5:23S-up, 3° down [60 EDO], 3/10-tone down\n    Glyphs[\"accSagittalFlat5v23SUp\"] = \"\\uE377\";\n    // U+E3D7  Flat 5:49M-down\n    Glyphs[\"accSagittalFlat5v49MDown\"] = \"\\uE3D7\";\n    // U+E31D  Flat 5:7k-down\n    Glyphs[\"accSagittalFlat5v7kDown\"] = \"\\uE31D\";\n    // U+E317  Flat 5:7k-up\n    Glyphs[\"accSagittalFlat5v7kUp\"] = \"\\uE317\";\n    // U+E321  Flat 7C-down, 4° down [43 EDO], 8° down [72 EDO], 2/3-tone down\n    Glyphs[\"accSagittalFlat7CDown\"] = \"\\uE321\";\n    // U+E313  Flat 7C-up, 2° down [43 EDO], 4° down [72 EDO], 1/3-tone down\n    Glyphs[\"accSagittalFlat7CUp\"] = \"\\uE313\";\n    // U+E35B  Flat 7:11C-down, 6° down [60 EDO], 3/5- tone down\n    Glyphs[\"accSagittalFlat7v11CDown\"] = \"\\uE35B\";\n    // U+E34D  Flat 7:11C-up, 4° down [60 EDO], 2/5-tone down\n    Glyphs[\"accSagittalFlat7v11CUp\"] = \"\\uE34D\";\n    // U+E355  Flat 7:11k-down\n    Glyphs[\"accSagittalFlat7v11kDown\"] = \"\\uE355\";\n    // U+E353  Flat 7:11k-up\n    Glyphs[\"accSagittalFlat7v11kUp\"] = \"\\uE353\";\n    // U+E3CB  Flat 7:19C-down\n    Glyphs[\"accSagittalFlat7v19CDown\"] = \"\\uE3CB\";\n    // U+E3B5  Flat 7:19C-up\n    Glyphs[\"accSagittalFlat7v19CUp\"] = \"\\uE3B5\";\n    // U+E40B  Fractional tina down, 77/(5⋅37)-schismina down, 0.08 cents down\n    Glyphs[\"accSagittalFractionalTinaDown\"] = \"\\uE40B\";\n    // U+E40A  Fractional tina up, 77/(5⋅37)-schismina up, 0.08 cents up\n    Glyphs[\"accSagittalFractionalTinaUp\"] = \"\\uE40A\";\n    // U+E3F3  Grave, 5 schisma down, 2 cents down\n    Glyphs[\"accSagittalGrave\"] = \"\\uE3F3\";\n    // U+E3F1  Shaft down, (natural for use with only diacritics down)\n    Glyphs[\"accSagittalShaftDown\"] = \"\\uE3F1\";\n    // U+E3F0  Shaft up, (natural for use with only diacritics up)\n    Glyphs[\"accSagittalShaftUp\"] = \"\\uE3F0\";\n    // U+E318  Sharp, (apotome up)[almost all EDOs], 1/2-tone up\n    Glyphs[\"accSagittalSharp\"] = \"\\uE318\";\n    // U+E328  Sharp 11L-up, 8° up [46 EDO]\n    Glyphs[\"accSagittalSharp11LUp\"] = \"\\uE328\";\n    // U+E326  Sharp 11M-up, 3° up [17 31 EDOs], 7° up [46 EDO], 3/4-tone up\n    Glyphs[\"accSagittalSharp11MUp\"] = \"\\uE326\";\n    // U+E3DA  Sharp 11:19L-up\n    Glyphs[\"accSagittalSharp11v19LUp\"] = \"\\uE3DA\";\n    // U+E3D2  Sharp 11:19M-up\n    Glyphs[\"accSagittalSharp11v19MUp\"] = \"\\uE3D2\";\n    // U+E3B8  Sharp 11:49C-down\n    Glyphs[\"accSagittalSharp11v49CDown\"] = \"\\uE3B8\";\n    // U+E3C6  Sharp 11:49C-up\n    Glyphs[\"accSagittalSharp11v49CUp\"] = \"\\uE3C6\";\n    // U+E3BA  Sharp 143C-down\n    Glyphs[\"accSagittalSharp143CDown\"] = \"\\uE3BA\";\n    // U+E3C4  Sharp 143C-up\n    Glyphs[\"accSagittalSharp143CUp\"] = \"\\uE3C4\";\n    // U+E350  Sharp 17C-down\n    Glyphs[\"accSagittalSharp17CDown\"] = \"\\uE350\";\n    // U+E356  Sharp 17C-up\n    Glyphs[\"accSagittalSharp17CUp\"] = \"\\uE356\";\n    // U+E3BC  Sharp 17k-down\n    Glyphs[\"accSagittalSharp17kDown\"] = \"\\uE3BC\";\n    // U+E3C2  Sharp 17k-up\n    Glyphs[\"accSagittalSharp17kUp\"] = \"\\uE3C2\";\n    // U+E3B6  Sharp 19C-down\n    Glyphs[\"accSagittalSharp19CDown\"] = \"\\uE3B6\";\n    // U+E3C8  Sharp 19C-up\n    Glyphs[\"accSagittalSharp19CUp\"] = \"\\uE3C8\";\n    // U+E3BE  Sharp 19s-down\n    Glyphs[\"accSagittalSharp19sDown\"] = \"\\uE3BE\";\n    // U+E3C0  Sharp 19s-up\n    Glyphs[\"accSagittalSharp19sUp\"] = \"\\uE3C0\";\n    // U+E37A  Sharp 23C-down, 6° up [96 EDO], 3/8-tone up\n    Glyphs[\"accSagittalSharp23CDown\"] = \"\\uE37A\";\n    // U+E37C  Sharp 23C-up, 10° up [96 EDO], 5/8-tone up\n    Glyphs[\"accSagittalSharp23CUp\"] = \"\\uE37C\";\n    // U+E3B0  Sharp 23S-down\n    Glyphs[\"accSagittalSharp23SDown\"] = \"\\uE3B0\";\n    // U+E3CE  Sharp 23S-up\n    Glyphs[\"accSagittalSharp23SUp\"] = \"\\uE3CE\";\n    // U+E310  Sharp 25S-down, 3° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SDown\"] = \"\\uE310\";\n    // U+E322  Sharp 25S-up, 7° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SUp\"] = \"\\uE322\";\n    // U+E32A  Sharp 35L-up, 5° up [50 EDO]\n    Glyphs[\"accSagittalSharp35LUp\"] = \"\\uE32A\";\n    // U+E324  Sharp 35M-up, 4° up [50 EDO], 6° up [27 EDO], 13/18-tone up\n    Glyphs[\"accSagittalSharp35MUp\"] = \"\\uE324\";\n    // U+E3D8  Sharp 49L-up\n    Glyphs[\"accSagittalSharp49LUp\"] = \"\\uE3D8\";\n    // U+E3D4  Sharp 49M-up\n    Glyphs[\"accSagittalSharp49MUp\"] = \"\\uE3D4\";\n    // U+E3B2  Sharp 49S-down\n    Glyphs[\"accSagittalSharp49SDown\"] = \"\\uE3B2\";\n    // U+E3CC  Sharp 49S-up\n    Glyphs[\"accSagittalSharp49SUp\"] = \"\\uE3CC\";\n    // U+E34E  Sharp 55C-down, 5° up [96 EDO], 5/16-tone up\n    Glyphs[\"accSagittalSharp55CDown\"] = \"\\uE34E\";\n    // U+E358  Sharp 55C-up, 11° up [96 EDO], 11/16-tone up\n    Glyphs[\"accSagittalSharp55CUp\"] = \"\\uE358\";\n    // U+E314  Sharp 5C-down, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°[72] 7°[96] up, 5/12-tone up\n    Glyphs[\"accSagittalSharp5CDown\"] = \"\\uE314\";\n    // U+E31E  Sharp 5C-up, 4°[22 29] 5°[27 34 41] 6°[39 46 53] up, 7/12-tone up\n    Glyphs[\"accSagittalSharp5CUp\"] = \"\\uE31E\";\n    // U+E34A  Sharp 5:11S-down\n    Glyphs[\"accSagittalSharp5v11SDown\"] = \"\\uE34A\";\n    // U+E35C  Sharp 5:11S-up\n    Glyphs[\"accSagittalSharp5v11SUp\"] = \"\\uE35C\";\n    // U+E3DC  Sharp 5:13L-up\n    Glyphs[\"accSagittalSharp5v13LUp\"] = \"\\uE3DC\";\n    // U+E3D0  Sharp 5:13M-up\n    Glyphs[\"accSagittalSharp5v13MUp\"] = \"\\uE3D0\";\n    // U+E378  Sharp 5:19C-down, 9/20-tone up\n    Glyphs[\"accSagittalSharp5v19CDown\"] = \"\\uE378\";\n    // U+E37E  Sharp 5:19C-up, 11/20-tone up\n    Glyphs[\"accSagittalSharp5v19CUp\"] = \"\\uE37E\";\n    // U+E376  Sharp 5:23S-down, 3° up [60 EDO], 3/10-tone up\n    Glyphs[\"accSagittalSharp5v23SDown\"] = \"\\uE376\";\n    // U+E380  Sharp 5:23S-up, 7° up [60 EDO], 7/10-tone up\n    Glyphs[\"accSagittalSharp5v23SUp\"] = \"\\uE380\";\n    // U+E3D6  Sharp 5:49M-up, (one and a half apotomes)\n    Glyphs[\"accSagittalSharp5v49MUp\"] = \"\\uE3D6\";\n    // U+E316  Sharp 5:7k-down\n    Glyphs[\"accSagittalSharp5v7kDown\"] = \"\\uE316\";\n    // U+E31C  Sharp 5:7k-up\n    Glyphs[\"accSagittalSharp5v7kUp\"] = \"\\uE31C\";\n    // U+E312  Sharp 7C-down, 2° up [43 EDO], 4° up [72 EDO], 1/3-tone up\n    Glyphs[\"accSagittalSharp7CDown\"] = \"\\uE312\";\n    // U+E320  Sharp 7C-up, 4° up [43 EDO], 8° up [72 EDO], 2/3-tone up\n    Glyphs[\"accSagittalSharp7CUp\"] = \"\\uE320\";\n    // U+E34C  Sharp 7:11C-down, 4° up [60 EDO], 2/5-tone up\n    Glyphs[\"accSagittalSharp7v11CDown\"] = \"\\uE34C\";\n    // U+E35A  Sharp 7:11C-up, 6° up [60 EDO], 3/5- tone up\n    Glyphs[\"accSagittalSharp7v11CUp\"] = \"\\uE35A\";\n    // U+E352  Sharp 7:11k-down\n    Glyphs[\"accSagittalSharp7v11kDown\"] = \"\\uE352\";\n    // U+E354  Sharp 7:11k-up\n    Glyphs[\"accSagittalSharp7v11kUp\"] = \"\\uE354\";\n    // U+E3B4  Sharp 7:19C-down\n    Glyphs[\"accSagittalSharp7v19CDown\"] = \"\\uE3B4\";\n    // U+E3CA  Sharp 7:19C-up\n    Glyphs[\"accSagittalSharp7v19CUp\"] = \"\\uE3CA\";\n    // U+E31A  Unused\n    Glyphs[\"accSagittalUnused1\"] = \"\\uE31A\";\n    // U+E31B  Unused\n    Glyphs[\"accSagittalUnused2\"] = \"\\uE31B\";\n    // U+E3DE  Unused\n    Glyphs[\"accSagittalUnused3\"] = \"\\uE3DE\";\n    // U+E3DF  Unused\n    Glyphs[\"accSagittalUnused4\"] = \"\\uE3DF\";\n    // U+E8CA  Combining accordion coupler dot\n    Glyphs[\"accdnCombDot\"] = \"\\uE8CA\";\n    // U+E8C8  Combining left hand, 2 ranks, empty\n    Glyphs[\"accdnCombLH2RanksEmpty\"] = \"\\uE8C8\";\n    // U+E8C9  Combining left hand, 3 ranks, empty (square)\n    Glyphs[\"accdnCombLH3RanksEmptySquare\"] = \"\\uE8C9\";\n    // U+E8C6  Combining right hand, 3 ranks, empty\n    Glyphs[\"accdnCombRH3RanksEmpty\"] = \"\\uE8C6\";\n    // U+E8C7  Combining right hand, 4 ranks, empty\n    Glyphs[\"accdnCombRH4RanksEmpty\"] = \"\\uE8C7\";\n    // U+E079  Diatonic accordion clef\n    Glyphs[\"accdnDiatonicClef\"] = \"\\uE079\";\n    // U+E8BC  Left hand, 2 ranks, 16' stop (round)\n    Glyphs[\"accdnLH2Ranks16Round\"] = \"\\uE8BC\";\n    // U+E8BD  Left hand, 2 ranks, 8' stop + 16' stop (round)\n    Glyphs[\"accdnLH2Ranks8Plus16Round\"] = \"\\uE8BD\";\n    // U+E8BB  Left hand, 2 ranks, 8' stop (round)\n    Glyphs[\"accdnLH2Ranks8Round\"] = \"\\uE8BB\";\n    // U+E8C0  Left hand, 2 ranks, full master (round)\n    Glyphs[\"accdnLH2RanksFullMasterRound\"] = \"\\uE8C0\";\n    // U+E8BF  Left hand, 2 ranks, master + 16' stop (round)\n    Glyphs[\"accdnLH2RanksMasterPlus16Round\"] = \"\\uE8BF\";\n    // U+E8BE  Left hand, 2 ranks, master (round)\n    Glyphs[\"accdnLH2RanksMasterRound\"] = \"\\uE8BE\";\n    // U+E8C4  Left hand, 3 ranks, 2' stop + 8' stop (square)\n    Glyphs[\"accdnLH3Ranks2Plus8Square\"] = \"\\uE8C4\";\n    // U+E8C2  Left hand, 3 ranks, 2' stop (square)\n    Glyphs[\"accdnLH3Ranks2Square\"] = \"\\uE8C2\";\n    // U+E8C1  Left hand, 3 ranks, 8' stop (square)\n    Glyphs[\"accdnLH3Ranks8Square\"] = \"\\uE8C1\";\n    // U+E8C3  Left hand, 3 ranks, double 8' stop (square)\n    Glyphs[\"accdnLH3RanksDouble8Square\"] = \"\\uE8C3\";\n    // U+E8C5  Left hand, 3 ranks, 2' stop + double 8' stop (tutti) (square)\n    Glyphs[\"accdnLH3RanksTuttiSquare\"] = \"\\uE8C5\";\n    // U+E8CC  Pull\n    Glyphs[\"accdnPull\"] = \"\\uE8CC\";\n    // U+E8CB  Push\n    Glyphs[\"accdnPush\"] = \"\\uE8CB\";\n    // U+E8AC  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop + 16' stop (accordion)\n    Glyphs[\"accdnRH3RanksAccordion\"] = \"\\uE8AC\";\n    // U+E8A8  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop (authentic musette)\n    Glyphs[\"accdnRH3RanksAuthenticMusette\"] = \"\\uE8A8\";\n    // U+E8AB  Right hand, 3 ranks, 8' stop + 16' stop (bandoneón)\n    Glyphs[\"accdnRH3RanksBandoneon\"] = \"\\uE8AB\";\n    // U+E8A4  Right hand, 3 ranks, 16' stop (bassoon)\n    Glyphs[\"accdnRH3RanksBassoon\"] = \"\\uE8A4\";\n    // U+E8A1  Right hand, 3 ranks, 8' stop (clarinet)\n    Glyphs[\"accdnRH3RanksClarinet\"] = \"\\uE8A1\";\n    // U+E8B1  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloLower8ve\"] = \"\\uE8B1\";\n    // U+E8B2  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloUpper8ve\"] = \"\\uE8B2\";\n    // U+E8B3  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksFullFactory\"] = \"\\uE8B3\";\n    // U+E8AA  Right hand, 3 ranks, 4' stop + 8' stop + 16' stop (harmonium)\n    Glyphs[\"accdnRH3RanksHarmonium\"] = \"\\uE8AA\";\n    // U+E8A7  Right hand, 3 ranks, 4' stop + 8' stop + upper tremolo 8' stop (imitation musette)\n    Glyphs[\"accdnRH3RanksImitationMusette\"] = \"\\uE8A7\";\n    // U+E8A3  Right hand, 3 ranks, lower tremolo 8' stop\n    Glyphs[\"accdnRH3RanksLowerTremolo8\"] = \"\\uE8A3\";\n    // U+E8AD  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop + 16' stop (master)\n    Glyphs[\"accdnRH3RanksMaster\"] = \"\\uE8AD\";\n    // U+E8A5  Right hand, 3 ranks, 4' stop + 8' stop (oboe)\n    Glyphs[\"accdnRH3RanksOboe\"] = \"\\uE8A5\";\n    // U+E8A9  Right hand, 3 ranks, 4' stop + 16' stop (organ)\n    Glyphs[\"accdnRH3RanksOrgan\"] = \"\\uE8A9\";\n    // U+E8A0  Right hand, 3 ranks, 4' stop (piccolo)\n    Glyphs[\"accdnRH3RanksPiccolo\"] = \"\\uE8A0\";\n    // U+E8AF  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksTremoloLower8ve\"] = \"\\uE8AF\";\n    // U+E8B0  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTremoloUpper8ve\"] = \"\\uE8B0\";\n    // U+E8AE  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTwoChoirs\"] = \"\\uE8AE\";\n    // U+E8A2  Right hand, 3 ranks, upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksUpperTremolo8\"] = \"\\uE8A2\";\n    // U+E8A6  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop (violin)\n    Glyphs[\"accdnRH3RanksViolin\"] = \"\\uE8A6\";\n    // U+E8B5  Right hand, 4 ranks, alto\n    Glyphs[\"accdnRH4RanksAlto\"] = \"\\uE8B5\";\n    // U+E8BA  Right hand, 4 ranks, bass/alto\n    Glyphs[\"accdnRH4RanksBassAlto\"] = \"\\uE8BA\";\n    // U+E8B7  Right hand, 4 ranks, master\n    Glyphs[\"accdnRH4RanksMaster\"] = \"\\uE8B7\";\n    // U+E8B8  Right hand, 4 ranks, soft bass\n    Glyphs[\"accdnRH4RanksSoftBass\"] = \"\\uE8B8\";\n    // U+E8B9  Right hand, 4 ranks, soft tenor\n    Glyphs[\"accdnRH4RanksSoftTenor\"] = \"\\uE8B9\";\n    // U+E8B4  Right hand, 4 ranks, soprano\n    Glyphs[\"accdnRH4RanksSoprano\"] = \"\\uE8B4\";\n    // U+E8B6  Right hand, 4 ranks, tenor\n    Glyphs[\"accdnRH4RanksTenor\"] = \"\\uE8B6\";\n    // U+E8CD  Ricochet (2 tones)\n    Glyphs[\"accdnRicochet2\"] = \"\\uE8CD\";\n    // U+E8CE  Ricochet (3 tones)\n    Glyphs[\"accdnRicochet3\"] = \"\\uE8CE\";\n    // U+E8CF  Ricochet (4 tones)\n    Glyphs[\"accdnRicochet4\"] = \"\\uE8CF\";\n    // U+E8D0  Ricochet (5 tones)\n    Glyphs[\"accdnRicochet5\"] = \"\\uE8D0\";\n    // U+E8D1  Ricochet (6 tones)\n    Glyphs[\"accdnRicochet6\"] = \"\\uE8D1\";\n    // U+E8D2  Combining ricochet for stem (2 tones)\n    Glyphs[\"accdnRicochetStem2\"] = \"\\uE8D2\";\n    // U+E8D3  Combining ricochet for stem (3 tones)\n    Glyphs[\"accdnRicochetStem3\"] = \"\\uE8D3\";\n    // U+E8D4  Combining ricochet for stem (4 tones)\n    Glyphs[\"accdnRicochetStem4\"] = \"\\uE8D4\";\n    // U+E8D5  Combining ricochet for stem (5 tones)\n    Glyphs[\"accdnRicochetStem5\"] = \"\\uE8D5\";\n    // U+E8D6  Combining ricochet for stem (6 tones)\n    Glyphs[\"accdnRicochetStem6\"] = \"\\uE8D6\";\n    // U+E454  1-comma flat\n    Glyphs[\"accidental1CommaFlat\"] = \"\\uE454\";\n    // U+E450  1-comma sharp\n    Glyphs[\"accidental1CommaSharp\"] = \"\\uE450\";\n    // U+E455  2-comma flat\n    Glyphs[\"accidental2CommaFlat\"] = \"\\uE455\";\n    // U+E451  2-comma sharp\n    Glyphs[\"accidental2CommaSharp\"] = \"\\uE451\";\n    // U+E456  3-comma flat\n    Glyphs[\"accidental3CommaFlat\"] = \"\\uE456\";\n    // U+E452  3-comma sharp\n    Glyphs[\"accidental3CommaSharp\"] = \"\\uE452\";\n    // U+E457  4-comma flat\n    Glyphs[\"accidental4CommaFlat\"] = \"\\uE457\";\n    // U+E453  5-comma sharp\n    Glyphs[\"accidental5CommaSharp\"] = \"\\uE453\";\n    // U+E27B  Arrow down (lower by one quarter-tone)\n    Glyphs[\"accidentalArrowDown\"] = \"\\uE27B\";\n    // U+E27A  Arrow up (raise by one quarter-tone)\n    Glyphs[\"accidentalArrowUp\"] = \"\\uE27A\";\n    // U+E442  Bakiye (flat)\n    Glyphs[\"accidentalBakiyeFlat\"] = \"\\uE442\";\n    // U+E445  Bakiye (sharp)\n    Glyphs[\"accidentalBakiyeSharp\"] = \"\\uE445\";\n    // U+E26C  Accidental bracket, left\n    Glyphs[\"accidentalBracketLeft\"] = \"\\uE26C\";\n    // U+E26D  Accidental bracket, right\n    Glyphs[\"accidentalBracketRight\"] = \"\\uE26D\";\n    // U+E440  Büyük mücenneb (flat)\n    Glyphs[\"accidentalBuyukMucennebFlat\"] = \"\\uE440\";\n    // U+E447  Büyük mücenneb (sharp)\n    Glyphs[\"accidentalBuyukMucennebSharp\"] = \"\\uE447\";\n    // U+E2EF  Combining close curly brace\n    Glyphs[\"accidentalCombiningCloseCurlyBrace\"] = \"\\uE2EF\";\n    // U+E2E6  Combining lower by one 17-limit schisma\n    Glyphs[\"accidentalCombiningLower17Schisma\"] = \"\\uE2E6\";\n    // U+E2E8  Combining lower by one 19-limit schisma\n    Glyphs[\"accidentalCombiningLower19Schisma\"] = \"\\uE2E8\";\n    // U+E2EA  Combining lower by one 23-limit comma\n    Glyphs[\"accidentalCombiningLower23Limit29LimitComma\"] = \"\\uE2EA\";\n    // U+EE50  Combining lower by one 29-limit comma\n    Glyphs[\"accidentalCombiningLower29LimitComma\"] = \"\\uEE50\";\n    // U+E2EC  Combining lower by one 31-limit schisma\n    Glyphs[\"accidentalCombiningLower31Schisma\"] = \"\\uE2EC\";\n    // U+EE52  Combining lower by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningLower37Quartertone\"] = \"\\uEE52\";\n    // U+EE54  Combining lower by one 41-limit comma\n    Glyphs[\"accidentalCombiningLower41Comma\"] = \"\\uEE54\";\n    // U+EE56  Combining lower by one 43-limit comma\n    Glyphs[\"accidentalCombiningLower43Comma\"] = \"\\uEE56\";\n    // U+EE58  Combining lower by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningLower47Quartertone\"] = \"\\uEE58\";\n    // U+E2F7  Combining lower by one 53-limit comma\n    Glyphs[\"accidentalCombiningLower53LimitComma\"] = \"\\uE2F7\";\n    // U+E2EE  Combining open curly brace\n    Glyphs[\"accidentalCombiningOpenCurlyBrace\"] = \"\\uE2EE\";\n    // U+E2E7  Combining raise by one 17-limit schisma\n    Glyphs[\"accidentalCombiningRaise17Schisma\"] = \"\\uE2E7\";\n    // U+E2E9  Combining raise by one 19-limit schisma\n    Glyphs[\"accidentalCombiningRaise19Schisma\"] = \"\\uE2E9\";\n    // U+E2EB  Combining raise by one 23-limit comma\n    Glyphs[\"accidentalCombiningRaise23Limit29LimitComma\"] = \"\\uE2EB\";\n    // U+EE51  Combining raise by one 29-limit comma\n    Glyphs[\"accidentalCombiningRaise29LimitComma\"] = \"\\uEE51\";\n    // U+E2ED  Combining raise by one 31-limit schisma\n    Glyphs[\"accidentalCombiningRaise31Schisma\"] = \"\\uE2ED\";\n    // U+EE53  Combining raise by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningRaise37Quartertone\"] = \"\\uEE53\";\n    // U+EE55  Combining raise by one 41-limit comma\n    Glyphs[\"accidentalCombiningRaise41Comma\"] = \"\\uEE55\";\n    // U+EE57  Combining raise by one 43-limit comma\n    Glyphs[\"accidentalCombiningRaise43Comma\"] = \"\\uEE57\";\n    // U+EE59  Combining raise by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningRaise47Quartertone\"] = \"\\uEE59\";\n    // U+E2F8  Combining raise by one 53-limit comma\n    Glyphs[\"accidentalCombiningRaise53LimitComma\"] = \"\\uE2F8\";\n    // U+E47A  Syntonic/Didymus comma (80:81) down (Bosanquet)\n    Glyphs[\"accidentalCommaSlashDown\"] = \"\\uE47A\";\n    // U+E479  Syntonic/Didymus comma (80:81) up (Bosanquet)\n    Glyphs[\"accidentalCommaSlashUp\"] = \"\\uE479\";\n    // U+E264  Double flat\n    Glyphs[\"accidentalDoubleFlat\"] = \"\\uE264\";\n    // U+ED30  Arabic double flat\n    Glyphs[\"accidentalDoubleFlatArabic\"] = \"\\uED30\";\n    // U+E2F0  Double flat equal tempered semitone\n    Glyphs[\"accidentalDoubleFlatEqualTempered\"] = \"\\uE2F0\";\n    // U+E2C0  Double flat lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowDown\"] = \"\\uE2C0\";\n    // U+E2C5  Double flat raised by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowUp\"] = \"\\uE2C5\";\n    // U+E483  Reversed double flat\n    Glyphs[\"accidentalDoubleFlatReversed\"] = \"\\uE483\";\n    // U+E2D4  Double flat lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsDown\"] = \"\\uE2D4\";\n    // U+E2D9  Double flat raised by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsUp\"] = \"\\uE2D9\";\n    // U+E485  Turned double flat\n    Glyphs[\"accidentalDoubleFlatTurned\"] = \"\\uE485\";\n    // U+E2CA  Double flat lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsDown\"] = \"\\uE2CA\";\n    // U+E2CF  Double flat raised by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsUp\"] = \"\\uE2CF\";\n    // U+E263  Double sharp\n    Glyphs[\"accidentalDoubleSharp\"] = \"\\uE263\";\n    // U+ED38  Arabic double sharp\n    Glyphs[\"accidentalDoubleSharpArabic\"] = \"\\uED38\";\n    // U+E2F4  Double sharp equal tempered semitone\n    Glyphs[\"accidentalDoubleSharpEqualTempered\"] = \"\\uE2F4\";\n    // U+E2C4  Double sharp lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowDown\"] = \"\\uE2C4\";\n    // U+E2C9  Double sharp raised by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowUp\"] = \"\\uE2C9\";\n    // U+E2D8  Double sharp lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsDown\"] = \"\\uE2D8\";\n    // U+E2DD  Double sharp raised by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsUp\"] = \"\\uE2DD\";\n    // U+E2CE  Double sharp lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsDown\"] = \"\\uE2CE\";\n    // U+E2D3  Double sharp raised by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsUp\"] = \"\\uE2D3\";\n    // U+E2FA  Enharmonically reinterpret accidental almost equal to\n    Glyphs[\"accidentalEnharmonicAlmostEqualTo\"] = \"\\uE2FA\";\n    // U+E2FB  Enharmonically reinterpret accidental equals\n    Glyphs[\"accidentalEnharmonicEquals\"] = \"\\uE2FB\";\n    // U+E2F9  Enharmonically reinterpret accidental tilde\n    Glyphs[\"accidentalEnharmonicTilde\"] = \"\\uE2F9\";\n    // U+E296  Filled reversed flat and flat\n    Glyphs[\"accidentalFilledReversedFlatAndFlat\"] = \"\\uE296\";\n    // U+E298  Filled reversed flat and flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowDown\"] = \"\\uE298\";\n    // U+E297  Filled reversed flat and flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowUp\"] = \"\\uE297\";\n    // U+E293  Filled reversed flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatArrowDown\"] = \"\\uE293\";\n    // U+E292  Filled reversed flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatArrowUp\"] = \"\\uE292\";\n    // U+E279  Five-quarter-tones flat\n    Glyphs[\"accidentalFiveQuarterTonesFlatArrowDown\"] = \"\\uE279\";\n    // U+E276  Five-quarter-tones sharp\n    Glyphs[\"accidentalFiveQuarterTonesSharpArrowUp\"] = \"\\uE276\";\n    // U+E260  Flat\n    Glyphs[\"accidentalFlat\"] = \"\\uE260\";\n    // U+ED32  Arabic half-tone flat\n    Glyphs[\"accidentalFlatArabic\"] = \"\\uED32\";\n    // U+E2F1  Flat equal tempered semitone\n    Glyphs[\"accidentalFlatEqualTempered\"] = \"\\uE2F1\";\n    // U+ED53  Lowered flat (Stockhausen)\n    Glyphs[\"accidentalFlatLoweredStockhausen\"] = \"\\uED53\";\n    // U+E2C1  Flat lowered by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowDown\"] = \"\\uE2C1\";\n    // U+E2C6  Flat raised by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowUp\"] = \"\\uE2C6\";\n    // U+ED52  Raised flat (Stockhausen)\n    Glyphs[\"accidentalFlatRaisedStockhausen\"] = \"\\uED52\";\n    // U+ED5C  Repeated flat, note on line (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedLineStockhausen\"] = \"\\uED5C\";\n    // U+ED5B  Repeated flat, note in space (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedSpaceStockhausen\"] = \"\\uED5B\";\n    // U+E2D5  Flat lowered by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsDown\"] = \"\\uE2D5\";\n    // U+E2DA  Flat raised by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsUp\"] = \"\\uE2DA\";\n    // U+E484  Turned flat\n    Glyphs[\"accidentalFlatTurned\"] = \"\\uE484\";\n    // U+E2CB  Flat lowered by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsDown\"] = \"\\uE2CB\";\n    // U+E2D0  Flat raised by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsUp\"] = \"\\uE2D0\";\n    // U+EE65  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaFlatQuarterToneHigher\"] = \"\\uEE65\";\n    // U+EE69  Three quarter-tones lower (Alois Hába)\n    Glyphs[\"accidentalHabaFlatThreeQuarterTonesLower\"] = \"\\uEE69\";\n    // U+EE64  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneHigher\"] = \"\\uEE64\";\n    // U+EE67  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneLower\"] = \"\\uEE67\";\n    // U+EE68  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaSharpQuarterToneLower\"] = \"\\uEE68\";\n    // U+EE66  Three quarter-tones higher (Alois Hába)\n    Glyphs[\"accidentalHabaSharpThreeQuarterTonesHigher\"] = \"\\uEE66\";\n    // U+E29A  Half sharp with arrow down\n    Glyphs[\"accidentalHalfSharpArrowDown\"] = \"\\uE29A\";\n    // U+E299  Half sharp with arrow up\n    Glyphs[\"accidentalHalfSharpArrowUp\"] = \"\\uE299\";\n    // U+E2B6  Thirteen (raise by 65:64)\n    Glyphs[\"accidentalJohnston13\"] = \"\\uE2B6\";\n    // U+E2B7  Inverted 13 (lower by 65:64)\n    Glyphs[\"accidentalJohnston31\"] = \"\\uE2B7\";\n    // U+E2B5  Down arrow (lower by 33:32)\n    Glyphs[\"accidentalJohnstonDown\"] = \"\\uE2B5\";\n    // U+E2B2  Inverted seven (raise by 36:35)\n    Glyphs[\"accidentalJohnstonEl\"] = \"\\uE2B2\";\n    // U+E2B1  Minus (lower by 81:80)\n    Glyphs[\"accidentalJohnstonMinus\"] = \"\\uE2B1\";\n    // U+E2B0  Plus (raise by 81:80)\n    Glyphs[\"accidentalJohnstonPlus\"] = \"\\uE2B0\";\n    // U+E2B3  Seven (lower by 36:35)\n    Glyphs[\"accidentalJohnstonSeven\"] = \"\\uE2B3\";\n    // U+E2B4  Up arrow (raise by 33:32)\n    Glyphs[\"accidentalJohnstonUp\"] = \"\\uE2B4\";\n    // U+E443  Koma (flat)\n    Glyphs[\"accidentalKomaFlat\"] = \"\\uE443\";\n    // U+E444  Koma (sharp)\n    Glyphs[\"accidentalKomaSharp\"] = \"\\uE444\";\n    // U+E460  Koron (quarter tone flat)\n    Glyphs[\"accidentalKoron\"] = \"\\uE460\";\n    // U+E441  Küçük mücenneb (flat)\n    Glyphs[\"accidentalKucukMucennebFlat\"] = \"\\uE441\";\n    // U+E446  Küçük mücenneb (sharp)\n    Glyphs[\"accidentalKucukMucennebSharp\"] = \"\\uE446\";\n    // U+E47D  Large double sharp\n    Glyphs[\"accidentalLargeDoubleSharp\"] = \"\\uE47D\";\n    // U+E2DE  Lower by one septimal comma\n    Glyphs[\"accidentalLowerOneSeptimalComma\"] = \"\\uE2DE\";\n    // U+E2E4  Lower by one tridecimal quartertone\n    Glyphs[\"accidentalLowerOneTridecimalQuartertone\"] = \"\\uE2E4\";\n    // U+E2E2  Lower by one undecimal quartertone\n    Glyphs[\"accidentalLowerOneUndecimalQuartertone\"] = \"\\uE2E2\";\n    // U+E2E0  Lower by two septimal commas\n    Glyphs[\"accidentalLowerTwoSeptimalCommas\"] = \"\\uE2E0\";\n    // U+ED51  Lowered (Stockhausen)\n    Glyphs[\"accidentalLoweredStockhausen\"] = \"\\uED51\";\n    // U+E284  Narrow reversed flat(quarter-tone flat)\n    Glyphs[\"accidentalNarrowReversedFlat\"] = \"\\uE284\";\n    // U+E285  Narrow reversed flat and flat(three-quarter-tones flat)\n    Glyphs[\"accidentalNarrowReversedFlatAndFlat\"] = \"\\uE285\";\n    // U+E261  Natural\n    Glyphs[\"accidentalNatural\"] = \"\\uE261\";\n    // U+ED34  Arabic natural\n    Glyphs[\"accidentalNaturalArabic\"] = \"\\uED34\";\n    // U+E2F2  Natural equal tempered semitone\n    Glyphs[\"accidentalNaturalEqualTempered\"] = \"\\uE2F2\";\n    // U+E267  Natural flat\n    Glyphs[\"accidentalNaturalFlat\"] = \"\\uE267\";\n    // U+ED55  Lowered natural (Stockhausen)\n    Glyphs[\"accidentalNaturalLoweredStockhausen\"] = \"\\uED55\";\n    // U+E2C2  Natural lowered by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowDown\"] = \"\\uE2C2\";\n    // U+E2C7  Natural raised by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowUp\"] = \"\\uE2C7\";\n    // U+ED54  Raised natural (Stockhausen)\n    Glyphs[\"accidentalNaturalRaisedStockhausen\"] = \"\\uED54\";\n    // U+E482  Reversed natural\n    Glyphs[\"accidentalNaturalReversed\"] = \"\\uE482\";\n    // U+E268  Natural sharp\n    Glyphs[\"accidentalNaturalSharp\"] = \"\\uE268\";\n    // U+E2D6  Natural lowered by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsDown\"] = \"\\uE2D6\";\n    // U+E2DB  Natural raised by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsUp\"] = \"\\uE2DB\";\n    // U+E2CC  Natural lowered by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsDown\"] = \"\\uE2CC\";\n    // U+E2D1  Natural raised by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsUp\"] = \"\\uE2D1\";\n    // U+E29C  One and a half sharps with arrow down\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowDown\"] = \"\\uE29C\";\n    // U+E29B  One and a half sharps with arrow up\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowUp\"] = \"\\uE29B\";\n    // U+E48F  One-quarter-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneFlatFerneyhough\"] = \"\\uE48F\";\n    // U+ED59  One-quarter-tone flat (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneFlatStockhausen\"] = \"\\uED59\";\n    // U+E48E  One-quarter-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneSharpFerneyhough\"] = \"\\uE48E\";\n    // U+ED58  One-quarter-tone sharp (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneSharpStockhausen\"] = \"\\uED58\";\n    // U+E48B  One-third-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneFlatFerneyhough\"] = \"\\uE48B\";\n    // U+E48A  One-third-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneSharpFerneyhough\"] = \"\\uE48A\";\n    // U+E26A  Accidental parenthesis, left\n    Glyphs[\"accidentalParensLeft\"] = \"\\uE26A\";\n    // U+E26B  Accidental parenthesis, right\n    Glyphs[\"accidentalParensRight\"] = \"\\uE26B\";\n    // U+E2F5  Lower by one equal tempered quarter-tone\n    Glyphs[\"accidentalQuarterFlatEqualTempered\"] = \"\\uE2F5\";\n    // U+E2F6  Raise by one equal tempered quarter tone\n    Glyphs[\"accidentalQuarterSharpEqualTempered\"] = \"\\uE2F6\";\n    // U+E47F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4\"] = \"\\uE47F\";\n    // U+ED33  Arabic quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArabic\"] = \"\\uED33\";\n    // U+E270  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUp\"] = \"\\uE270\";\n    // U+E480  Filled reversed flat (quarter-tone flat)\n    Glyphs[\"accidentalQuarterToneFlatFilledReversed\"] = \"\\uE480\";\n    // U+E273  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDown\"] = \"\\uE273\";\n    // U+E478  Quarter tone flat (Penderecki)\n    Glyphs[\"accidentalQuarterToneFlatPenderecki\"] = \"\\uE478\";\n    // U+E280  Reversed flat (quarter-tone flat) (Stein)\n    Glyphs[\"accidentalQuarterToneFlatStein\"] = \"\\uE280\";\n    // U+E488  Quarter-tone flat (van Blankenburg)\n    Glyphs[\"accidentalQuarterToneFlatVanBlankenburg\"] = \"\\uE488\";\n    // U+E47E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4\"] = \"\\uE47E\";\n    // U+ED35  Arabic quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArabic\"] = \"\\uED35\";\n    // U+E275  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDown\"] = \"\\uE275\";\n    // U+E472  Quarter tone sharp (Bussotti)\n    Glyphs[\"accidentalQuarterToneSharpBusotti\"] = \"\\uE472\";\n    // U+E272  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUp\"] = \"\\uE272\";\n    // U+E282  Half sharp (quarter-tone sharp) (Stein)\n    Glyphs[\"accidentalQuarterToneSharpStein\"] = \"\\uE282\";\n    // U+E475  Quarter tone sharp with wiggly tail\n    Glyphs[\"accidentalQuarterToneSharpWiggle\"] = \"\\uE475\";\n    // U+E2DF  Raise by one septimal comma\n    Glyphs[\"accidentalRaiseOneSeptimalComma\"] = \"\\uE2DF\";\n    // U+E2E5  Raise by one tridecimal quartertone\n    Glyphs[\"accidentalRaiseOneTridecimalQuartertone\"] = \"\\uE2E5\";\n    // U+E2E3  Raise by one undecimal quartertone\n    Glyphs[\"accidentalRaiseOneUndecimalQuartertone\"] = \"\\uE2E3\";\n    // U+E2E1  Raise by two septimal commas\n    Glyphs[\"accidentalRaiseTwoSeptimalCommas\"] = \"\\uE2E1\";\n    // U+ED50  Raised (Stockhausen)\n    Glyphs[\"accidentalRaisedStockhausen\"] = \"\\uED50\";\n    // U+E295  Reversed flat and flat with arrow down\n    Glyphs[\"accidentalReversedFlatAndFlatArrowDown\"] = \"\\uE295\";\n    // U+E294  Reversed flat and flat with arrow up\n    Glyphs[\"accidentalReversedFlatAndFlatArrowUp\"] = \"\\uE294\";\n    // U+E291  Reversed flat with arrow down\n    Glyphs[\"accidentalReversedFlatArrowDown\"] = \"\\uE291\";\n    // U+E290  Reversed flat with arrow up\n    Glyphs[\"accidentalReversedFlatArrowUp\"] = \"\\uE290\";\n    // U+E262  Sharp\n    Glyphs[\"accidentalSharp\"] = \"\\uE262\";\n    // U+ED36  Arabic half-tone sharp\n    Glyphs[\"accidentalSharpArabic\"] = \"\\uED36\";\n    // U+E2F3  Sharp equal tempered semitone\n    Glyphs[\"accidentalSharpEqualTempered\"] = \"\\uE2F3\";\n    // U+ED57  Lowered sharp (Stockhausen)\n    Glyphs[\"accidentalSharpLoweredStockhausen\"] = \"\\uED57\";\n    // U+E2C3  Sharp lowered by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowDown\"] = \"\\uE2C3\";\n    // U+E2C8  Sharp raised by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowUp\"] = \"\\uE2C8\";\n    // U+E473  One or three quarter tones sharp\n    Glyphs[\"accidentalSharpOneHorizontalStroke\"] = \"\\uE473\";\n    // U+ED56  Raised sharp (Stockhausen)\n    Glyphs[\"accidentalSharpRaisedStockhausen\"] = \"\\uED56\";\n    // U+ED5E  Repeated sharp, note on line (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedLineStockhausen\"] = \"\\uED5E\";\n    // U+ED5D  Repeated sharp, note in space (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedSpaceStockhausen\"] = \"\\uED5D\";\n    // U+E481  Reversed sharp\n    Glyphs[\"accidentalSharpReversed\"] = \"\\uE481\";\n    // U+E269  Sharp sharp\n    Glyphs[\"accidentalSharpSharp\"] = \"\\uE269\";\n    // U+E2D7  Sharp lowered by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsDown\"] = \"\\uE2D7\";\n    // U+E2DC  Sharp raised by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsUp\"] = \"\\uE2DC\";\n    // U+E2CD  Sharp lowered by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsDown\"] = \"\\uE2CD\";\n    // U+E2D2  Sharp raised by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsUp\"] = \"\\uE2D2\";\n    // U+E2A0  1/12 tone low\n    Glyphs[\"accidentalSims12Down\"] = \"\\uE2A0\";\n    // U+E2A3  1/12 tone high\n    Glyphs[\"accidentalSims12Up\"] = \"\\uE2A3\";\n    // U+E2A2  1/4 tone low\n    Glyphs[\"accidentalSims4Down\"] = \"\\uE2A2\";\n    // U+E2A5  1/4 tone high\n    Glyphs[\"accidentalSims4Up\"] = \"\\uE2A5\";\n    // U+E2A1  1/6 tone low\n    Glyphs[\"accidentalSims6Down\"] = \"\\uE2A1\";\n    // U+E2A4  1/6 tone high\n    Glyphs[\"accidentalSims6Up\"] = \"\\uE2A4\";\n    // U+E461  Sori (quarter tone sharp)\n    Glyphs[\"accidentalSori\"] = \"\\uE461\";\n    // U+E477  Byzantine-style Bakiye flat (Tavener)\n    Glyphs[\"accidentalTavenerFlat\"] = \"\\uE477\";\n    // U+E476  Byzantine-style Büyük mücenneb sharp (Tavener)\n    Glyphs[\"accidentalTavenerSharp\"] = \"\\uE476\";\n    // U+ED31  Arabic three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArabic\"] = \"\\uED31\";\n    // U+E271  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDown\"] = \"\\uE271\";\n    // U+E278  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowUp\"] = \"\\uE278\";\n    // U+E489  Three-quarter-tones flat (Couper)\n    Glyphs[\"accidentalThreeQuarterTonesFlatCouper\"] = \"\\uE489\";\n    // U+E486  Three-quarter-tones flat (Grisey)\n    Glyphs[\"accidentalThreeQuarterTonesFlatGrisey\"] = \"\\uE486\";\n    // U+E487  Three-quarter-tones flat (Tartini)\n    Glyphs[\"accidentalThreeQuarterTonesFlatTartini\"] = \"\\uE487\";\n    // U+E281  Reversed flat and flat (three-quarter-tones flat) (Zimmermann)\n    Glyphs[\"accidentalThreeQuarterTonesFlatZimmermann\"] = \"\\uE281\";\n    // U+ED37  Arabic three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArabic\"] = \"\\uED37\";\n    // U+E277  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowDown\"] = \"\\uE277\";\n    // U+E274  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUp\"] = \"\\uE274\";\n    // U+E474  Three quarter tones sharp (Bussotti)\n    Glyphs[\"accidentalThreeQuarterTonesSharpBusotti\"] = \"\\uE474\";\n    // U+E283  One and a half sharps (three-quarter-tones sharp) (Stein)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStein\"] = \"\\uE283\";\n    // U+ED5A  Three-quarter-tones sharp (Stockhausen)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStockhausen\"] = \"\\uED5A\";\n    // U+E266  Triple flat\n    Glyphs[\"accidentalTripleFlat\"] = \"\\uE266\";\n    // U+E265  Triple sharp\n    Glyphs[\"accidentalTripleSharp\"] = \"\\uE265\";\n    // U+E48D  Two-third-tones flat (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesFlatFerneyhough\"] = \"\\uE48D\";\n    // U+E48C  Two-third-tones sharp (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesSharpFerneyhough\"] = \"\\uE48C\";\n    // U+EE61  Accidental down\n    Glyphs[\"accidentalUpsAndDownsDown\"] = \"\\uEE61\";\n    // U+EE63  Accidental less\n    Glyphs[\"accidentalUpsAndDownsLess\"] = \"\\uEE63\";\n    // U+EE62  Accidental more\n    Glyphs[\"accidentalUpsAndDownsMore\"] = \"\\uEE62\";\n    // U+EE60  Accidental up\n    Glyphs[\"accidentalUpsAndDownsUp\"] = \"\\uEE60\";\n    // U+E47C  Wilson minus (5 comma down)\n    Glyphs[\"accidentalWilsonMinus\"] = \"\\uE47C\";\n    // U+E47B  Wilson plus (5 comma up)\n    Glyphs[\"accidentalWilsonPlus\"] = \"\\uE47B\";\n    // U+E434  5/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsFlat\"] = \"\\uE434\";\n    // U+E429  5/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsSharp\"] = \"\\uE429\";\n    // U+E435  11/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsFlat\"] = \"\\uE435\";\n    // U+E42A  11/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsSharp\"] = \"\\uE42A\";\n    // U+E42B  1/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsFlat\"] = \"\\uE42B\";\n    // U+E420  1/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsSharp\"] = \"\\uE420\";\n    // U+E42C  1/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsFlat\"] = \"\\uE42C\";\n    // U+E421  1/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsSharp\"] = \"\\uE421\";\n    // U+E42D  1/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsFlat\"] = \"\\uE42D\";\n    // U+E422  1/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsSharp\"] = \"\\uE422\";\n    // U+E42E  1/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsFlat\"] = \"\\uE42E\";\n    // U+E423  1/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsSharp\"] = \"\\uE423\";\n    // U+E42F  5/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsFlat\"] = \"\\uE42F\";\n    // U+E424  5/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsSharp\"] = \"\\uE424\";\n    // U+E430  1/2 tone flat\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsFlat\"] = \"\\uE430\";\n    // U+E425  1/2 tone sharp\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsSharp\"] = \"\\uE425\";\n    // U+E431  7/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsFlat\"] = \"\\uE431\";\n    // U+E426  7/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsSharp\"] = \"\\uE426\";\n    // U+E432  2/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsFlat\"] = \"\\uE432\";\n    // U+E427  2/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsSharp\"] = \"\\uE427\";\n    // U+E433  3/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsFlat\"] = \"\\uE433\";\n    // U+E428  3/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsSharp\"] = \"\\uE428\";\n    // U+E470  One-third-tone sharp (Xenakis)\n    Glyphs[\"accidentalXenakisOneThirdToneSharp\"] = \"\\uE470\";\n    // U+E471  Two-third-tones sharp (Xenakis)\n    Glyphs[\"accidentalXenakisTwoThirdTonesSharp\"] = \"\\uE471\";\n    // U+E86A  Choralmelodie (Berg)\n    Glyphs[\"analyticsChoralmelodie\"] = \"\\uE86A\";\n    // U+E863  End of stimme\n    Glyphs[\"analyticsEndStimme\"] = \"\\uE863\";\n    // U+E86B  Hauptrhythmus (Berg)\n    Glyphs[\"analyticsHauptrhythmus\"] = \"\\uE86B\";\n    // U+E860  Hauptstimme\n    Glyphs[\"analyticsHauptstimme\"] = \"\\uE860\";\n    // U+E869  Inversion 1\n    Glyphs[\"analyticsInversion1\"] = \"\\uE869\";\n    // U+E861  Nebenstimme\n    Glyphs[\"analyticsNebenstimme\"] = \"\\uE861\";\n    // U+E862  Start of stimme\n    Glyphs[\"analyticsStartStimme\"] = \"\\uE862\";\n    // U+E864  Theme\n    Glyphs[\"analyticsTheme\"] = \"\\uE864\";\n    // U+E868  Theme 1\n    Glyphs[\"analyticsTheme1\"] = \"\\uE868\";\n    // U+E867  Inversion of theme\n    Glyphs[\"analyticsThemeInversion\"] = \"\\uE867\";\n    // U+E865  Retrograde of theme\n    Glyphs[\"analyticsThemeRetrograde\"] = \"\\uE865\";\n    // U+E866  Retrograde inversion of theme\n    Glyphs[\"analyticsThemeRetrogradeInversion\"] = \"\\uE866\";\n    // U+E63C  Arpeggiato\n    Glyphs[\"arpeggiato\"] = \"\\uE63C\";\n    // U+E635  Arpeggiato down\n    Glyphs[\"arpeggiatoDown\"] = \"\\uE635\";\n    // U+E634  Arpeggiato up\n    Glyphs[\"arpeggiatoUp\"] = \"\\uE634\";\n    // U+EB64  Black arrow down (S)\n    Glyphs[\"arrowBlackDown\"] = \"\\uEB64\";\n    // U+EB65  Black arrow down-left (SW)\n    Glyphs[\"arrowBlackDownLeft\"] = \"\\uEB65\";\n    // U+EB63  Black arrow down-right (SE)\n    Glyphs[\"arrowBlackDownRight\"] = \"\\uEB63\";\n    // U+EB66  Black arrow left (W)\n    Glyphs[\"arrowBlackLeft\"] = \"\\uEB66\";\n    // U+EB62  Black arrow right (E)\n    Glyphs[\"arrowBlackRight\"] = \"\\uEB62\";\n    // U+EB60  Black arrow up (N)\n    Glyphs[\"arrowBlackUp\"] = \"\\uEB60\";\n    // U+EB67  Black arrow up-left (NW)\n    Glyphs[\"arrowBlackUpLeft\"] = \"\\uEB67\";\n    // U+EB61  Black arrow up-right (NE)\n    Glyphs[\"arrowBlackUpRight\"] = \"\\uEB61\";\n    // U+EB74  Open arrow down (S)\n    Glyphs[\"arrowOpenDown\"] = \"\\uEB74\";\n    // U+EB75  Open arrow down-left (SW)\n    Glyphs[\"arrowOpenDownLeft\"] = \"\\uEB75\";\n    // U+EB73  Open arrow down-right (SE)\n    Glyphs[\"arrowOpenDownRight\"] = \"\\uEB73\";\n    // U+EB76  Open arrow left (W)\n    Glyphs[\"arrowOpenLeft\"] = \"\\uEB76\";\n    // U+EB72  Open arrow right (E)\n    Glyphs[\"arrowOpenRight\"] = \"\\uEB72\";\n    // U+EB70  Open arrow up (N)\n    Glyphs[\"arrowOpenUp\"] = \"\\uEB70\";\n    // U+EB77  Open arrow up-left (NW)\n    Glyphs[\"arrowOpenUpLeft\"] = \"\\uEB77\";\n    // U+EB71  Open arrow up-right (NE)\n    Glyphs[\"arrowOpenUpRight\"] = \"\\uEB71\";\n    // U+EB6C  White arrow down (S)\n    Glyphs[\"arrowWhiteDown\"] = \"\\uEB6C\";\n    // U+EB6D  White arrow down-left (SW)\n    Glyphs[\"arrowWhiteDownLeft\"] = \"\\uEB6D\";\n    // U+EB6B  White arrow down-right (SE)\n    Glyphs[\"arrowWhiteDownRight\"] = \"\\uEB6B\";\n    // U+EB6E  White arrow left (W)\n    Glyphs[\"arrowWhiteLeft\"] = \"\\uEB6E\";\n    // U+EB6A  White arrow right (E)\n    Glyphs[\"arrowWhiteRight\"] = \"\\uEB6A\";\n    // U+EB68  White arrow up (N)\n    Glyphs[\"arrowWhiteUp\"] = \"\\uEB68\";\n    // U+EB6F  White arrow up-left (NW)\n    Glyphs[\"arrowWhiteUpLeft\"] = \"\\uEB6F\";\n    // U+EB69  White arrow up-right (NE)\n    Glyphs[\"arrowWhiteUpRight\"] = \"\\uEB69\";\n    // U+EB7C  Black arrowhead down (S)\n    Glyphs[\"arrowheadBlackDown\"] = \"\\uEB7C\";\n    // U+EB7D  Black arrowhead down-left (SW)\n    Glyphs[\"arrowheadBlackDownLeft\"] = \"\\uEB7D\";\n    // U+EB7B  Black arrowhead down-right (SE)\n    Glyphs[\"arrowheadBlackDownRight\"] = \"\\uEB7B\";\n    // U+EB7E  Black arrowhead left (W)\n    Glyphs[\"arrowheadBlackLeft\"] = \"\\uEB7E\";\n    // U+EB7A  Black arrowhead right (E)\n    Glyphs[\"arrowheadBlackRight\"] = \"\\uEB7A\";\n    // U+EB78  Black arrowhead up (N)\n    Glyphs[\"arrowheadBlackUp\"] = \"\\uEB78\";\n    // U+EB7F  Black arrowhead up-left (NW)\n    Glyphs[\"arrowheadBlackUpLeft\"] = \"\\uEB7F\";\n    // U+EB79  Black arrowhead up-right (NE)\n    Glyphs[\"arrowheadBlackUpRight\"] = \"\\uEB79\";\n    // U+EB8C  Open arrowhead down (S)\n    Glyphs[\"arrowheadOpenDown\"] = \"\\uEB8C\";\n    // U+EB8D  Open arrowhead down-left (SW)\n    Glyphs[\"arrowheadOpenDownLeft\"] = \"\\uEB8D\";\n    // U+EB8B  Open arrowhead down-right (SE)\n    Glyphs[\"arrowheadOpenDownRight\"] = \"\\uEB8B\";\n    // U+EB8E  Open arrowhead left (W)\n    Glyphs[\"arrowheadOpenLeft\"] = \"\\uEB8E\";\n    // U+EB8A  Open arrowhead right (E)\n    Glyphs[\"arrowheadOpenRight\"] = \"\\uEB8A\";\n    // U+EB88  Open arrowhead up (N)\n    Glyphs[\"arrowheadOpenUp\"] = \"\\uEB88\";\n    // U+EB8F  Open arrowhead up-left (NW)\n    Glyphs[\"arrowheadOpenUpLeft\"] = \"\\uEB8F\";\n    // U+EB89  Open arrowhead up-right (NE)\n    Glyphs[\"arrowheadOpenUpRight\"] = \"\\uEB89\";\n    // U+EB84  White arrowhead down (S)\n    Glyphs[\"arrowheadWhiteDown\"] = \"\\uEB84\";\n    // U+EB85  White arrowhead down-left (SW)\n    Glyphs[\"arrowheadWhiteDownLeft\"] = \"\\uEB85\";\n    // U+EB83  White arrowhead down-right (SE)\n    Glyphs[\"arrowheadWhiteDownRight\"] = \"\\uEB83\";\n    // U+EB86  White arrowhead left (W)\n    Glyphs[\"arrowheadWhiteLeft\"] = \"\\uEB86\";\n    // U+EB82  White arrowhead right (E)\n    Glyphs[\"arrowheadWhiteRight\"] = \"\\uEB82\";\n    // U+EB80  White arrowhead up (N)\n    Glyphs[\"arrowheadWhiteUp\"] = \"\\uEB80\";\n    // U+EB87  White arrowhead up-left (NW)\n    Glyphs[\"arrowheadWhiteUpLeft\"] = \"\\uEB87\";\n    // U+EB81  White arrowhead up-right (NE)\n    Glyphs[\"arrowheadWhiteUpRight\"] = \"\\uEB81\";\n    // U+E4A0  Accent above\n    Glyphs[\"articAccentAbove\"] = \"\\uE4A0\";\n    // U+E4A1  Accent below\n    Glyphs[\"articAccentBelow\"] = \"\\uE4A1\";\n    // U+E4B0  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAbove\"] = \"\\uE4B0\";\n    // U+E4B1  Accent-staccato below\n    Glyphs[\"articAccentStaccatoBelow\"] = \"\\uE4B1\";\n    // U+E4BA  Laissez vibrer (l.v.) above\n    Glyphs[\"articLaissezVibrerAbove\"] = \"\\uE4BA\";\n    // U+E4BB  Laissez vibrer (l.v.) below\n    Glyphs[\"articLaissezVibrerBelow\"] = \"\\uE4BB\";\n    // U+E4AC  Marcato above\n    Glyphs[\"articMarcatoAbove\"] = \"\\uE4AC\";\n    // U+E4AD  Marcato below\n    Glyphs[\"articMarcatoBelow\"] = \"\\uE4AD\";\n    // U+E4AE  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAbove\"] = \"\\uE4AE\";\n    // U+E4AF  Marcato-staccato below\n    Glyphs[\"articMarcatoStaccatoBelow\"] = \"\\uE4AF\";\n    // U+E4BC  Marcato-tenuto above\n    Glyphs[\"articMarcatoTenutoAbove\"] = \"\\uE4BC\";\n    // U+E4BD  Marcato-tenuto below\n    Glyphs[\"articMarcatoTenutoBelow\"] = \"\\uE4BD\";\n    // U+ED40  Soft accent above\n    Glyphs[\"articSoftAccentAbove\"] = \"\\uED40\";\n    // U+ED41  Soft accent below\n    Glyphs[\"articSoftAccentBelow\"] = \"\\uED41\";\n    // U+ED42  Soft accent-staccato above\n    Glyphs[\"articSoftAccentStaccatoAbove\"] = \"\\uED42\";\n    // U+ED43  Soft accent-staccato below\n    Glyphs[\"articSoftAccentStaccatoBelow\"] = \"\\uED43\";\n    // U+ED44  Soft accent-tenuto above\n    Glyphs[\"articSoftAccentTenutoAbove\"] = \"\\uED44\";\n    // U+ED45  Soft accent-tenuto below\n    Glyphs[\"articSoftAccentTenutoBelow\"] = \"\\uED45\";\n    // U+ED46  Soft accent-tenuto-staccato above\n    Glyphs[\"articSoftAccentTenutoStaccatoAbove\"] = \"\\uED46\";\n    // U+ED47  Soft accent-tenuto-staccato below\n    Glyphs[\"articSoftAccentTenutoStaccatoBelow\"] = \"\\uED47\";\n    // U+E4A6  Staccatissimo above\n    Glyphs[\"articStaccatissimoAbove\"] = \"\\uE4A6\";\n    // U+E4A7  Staccatissimo below\n    Glyphs[\"articStaccatissimoBelow\"] = \"\\uE4A7\";\n    // U+E4AA  Staccatissimo stroke above\n    Glyphs[\"articStaccatissimoStrokeAbove\"] = \"\\uE4AA\";\n    // U+E4AB  Staccatissimo stroke below\n    Glyphs[\"articStaccatissimoStrokeBelow\"] = \"\\uE4AB\";\n    // U+E4A8  Staccatissimo wedge above\n    Glyphs[\"articStaccatissimoWedgeAbove\"] = \"\\uE4A8\";\n    // U+E4A9  Staccatissimo wedge below\n    Glyphs[\"articStaccatissimoWedgeBelow\"] = \"\\uE4A9\";\n    // U+E4A2  Staccato above\n    Glyphs[\"articStaccatoAbove\"] = \"\\uE4A2\";\n    // U+E4A3  Staccato below\n    Glyphs[\"articStaccatoBelow\"] = \"\\uE4A3\";\n    // U+E4B6  Stress above\n    Glyphs[\"articStressAbove\"] = \"\\uE4B6\";\n    // U+E4B7  Stress below\n    Glyphs[\"articStressBelow\"] = \"\\uE4B7\";\n    // U+E4A4  Tenuto above\n    Glyphs[\"articTenutoAbove\"] = \"\\uE4A4\";\n    // U+E4B4  Tenuto-accent above\n    Glyphs[\"articTenutoAccentAbove\"] = \"\\uE4B4\";\n    // U+E4B5  Tenuto-accent below\n    Glyphs[\"articTenutoAccentBelow\"] = \"\\uE4B5\";\n    // U+E4A5  Tenuto below\n    Glyphs[\"articTenutoBelow\"] = \"\\uE4A5\";\n    // U+E4B2  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAbove\"] = \"\\uE4B2\";\n    // U+E4B3  Louré (tenuto-staccato) below\n    Glyphs[\"articTenutoStaccatoBelow\"] = \"\\uE4B3\";\n    // U+E4B8  Unstress above\n    Glyphs[\"articUnstressAbove\"] = \"\\uE4B8\";\n    // U+E4B9  Unstress below\n    Glyphs[\"articUnstressBelow\"] = \"\\uE4B9\";\n    // U+E1E7  Augmentation dot\n    Glyphs[\"augmentationDot\"] = \"\\uE1E7\";\n    // U+E036  Dashed barline\n    Glyphs[\"barlineDashed\"] = \"\\uE036\";\n    // U+E037  Dotted barline\n    Glyphs[\"barlineDotted\"] = \"\\uE037\";\n    // U+E031  Double barline\n    Glyphs[\"barlineDouble\"] = \"\\uE031\";\n    // U+E032  Final barline\n    Glyphs[\"barlineFinal\"] = \"\\uE032\";\n    // U+E034  Heavy barline\n    Glyphs[\"barlineHeavy\"] = \"\\uE034\";\n    // U+E035  Heavy double barline\n    Glyphs[\"barlineHeavyHeavy\"] = \"\\uE035\";\n    // U+E033  Reverse final barline\n    Glyphs[\"barlineReverseFinal\"] = \"\\uE033\";\n    // U+E038  Short barline\n    Glyphs[\"barlineShort\"] = \"\\uE038\";\n    // U+E030  Single barline\n    Glyphs[\"barlineSingle\"] = \"\\uE030\";\n    // U+E039  Tick barline\n    Glyphs[\"barlineTick\"] = \"\\uE039\";\n    // U+EAF4  Accel./rit. beam 1 (widest)\n    Glyphs[\"beamAccelRit1\"] = \"\\uEAF4\";\n    // U+EAFD  Accel./rit. beam 10\n    Glyphs[\"beamAccelRit10\"] = \"\\uEAFD\";\n    // U+EAFE  Accel./rit. beam 11\n    Glyphs[\"beamAccelRit11\"] = \"\\uEAFE\";\n    // U+EAFF  Accel./rit. beam 12\n    Glyphs[\"beamAccelRit12\"] = \"\\uEAFF\";\n    // U+EB00  Accel./rit. beam 13\n    Glyphs[\"beamAccelRit13\"] = \"\\uEB00\";\n    // U+EB01  Accel./rit. beam 14\n    Glyphs[\"beamAccelRit14\"] = \"\\uEB01\";\n    // U+EB02  Accel./rit. beam 15 (narrowest)\n    Glyphs[\"beamAccelRit15\"] = \"\\uEB02\";\n    // U+EAF5  Accel./rit. beam 2\n    Glyphs[\"beamAccelRit2\"] = \"\\uEAF5\";\n    // U+EAF6  Accel./rit. beam 3\n    Glyphs[\"beamAccelRit3\"] = \"\\uEAF6\";\n    // U+EAF7  Accel./rit. beam 4\n    Glyphs[\"beamAccelRit4\"] = \"\\uEAF7\";\n    // U+EAF8  Accel./rit. beam 5\n    Glyphs[\"beamAccelRit5\"] = \"\\uEAF8\";\n    // U+EAF9  Accel./rit. beam 6\n    Glyphs[\"beamAccelRit6\"] = \"\\uEAF9\";\n    // U+EAFA  Accel./rit. beam 7\n    Glyphs[\"beamAccelRit7\"] = \"\\uEAFA\";\n    // U+EAFB  Accel./rit. beam 8\n    Glyphs[\"beamAccelRit8\"] = \"\\uEAFB\";\n    // U+EAFC  Accel./rit. beam 9\n    Glyphs[\"beamAccelRit9\"] = \"\\uEAFC\";\n    // U+EB03  Accel./rit. beam terminating line\n    Glyphs[\"beamAccelRitFinal\"] = \"\\uEB03\";\n    // U+E000  Brace\n    Glyphs[\"brace\"] = \"\\uE000\";\n    // U+E002  Bracket\n    Glyphs[\"bracket\"] = \"\\uE002\";\n    // U+E004  Bracket bottom\n    Glyphs[\"bracketBottom\"] = \"\\uE004\";\n    // U+E003  Bracket top\n    Glyphs[\"bracketTop\"] = \"\\uE003\";\n    // U+E5E3  Bend\n    Glyphs[\"brassBend\"] = \"\\uE5E3\";\n    // U+E5D6  Doit, long\n    Glyphs[\"brassDoitLong\"] = \"\\uE5D6\";\n    // U+E5D5  Doit, medium\n    Glyphs[\"brassDoitMedium\"] = \"\\uE5D5\";\n    // U+E5D4  Doit, short\n    Glyphs[\"brassDoitShort\"] = \"\\uE5D4\";\n    // U+E5D9  Lip fall, long\n    Glyphs[\"brassFallLipLong\"] = \"\\uE5D9\";\n    // U+E5D8  Lip fall, medium\n    Glyphs[\"brassFallLipMedium\"] = \"\\uE5D8\";\n    // U+E5D7  Lip fall, short\n    Glyphs[\"brassFallLipShort\"] = \"\\uE5D7\";\n    // U+E5DF  Rough fall, long\n    Glyphs[\"brassFallRoughLong\"] = \"\\uE5DF\";\n    // U+E5DE  Rough fall, medium\n    Glyphs[\"brassFallRoughMedium\"] = \"\\uE5DE\";\n    // U+E5DD  Rough fall, short\n    Glyphs[\"brassFallRoughShort\"] = \"\\uE5DD\";\n    // U+E5DC  Smooth fall, long\n    Glyphs[\"brassFallSmoothLong\"] = \"\\uE5DC\";\n    // U+E5DB  Smooth fall, medium\n    Glyphs[\"brassFallSmoothMedium\"] = \"\\uE5DB\";\n    // U+E5DA  Smooth fall, short\n    Glyphs[\"brassFallSmoothShort\"] = \"\\uE5DA\";\n    // U+E5E1  Flip\n    Glyphs[\"brassFlip\"] = \"\\uE5E1\";\n    // U+E5E8  Harmon mute, stem in\n    Glyphs[\"brassHarmonMuteClosed\"] = \"\\uE5E8\";\n    // U+E5E9  Harmon mute, stem extended, left\n    Glyphs[\"brassHarmonMuteStemHalfLeft\"] = \"\\uE5E9\";\n    // U+E5EA  Harmon mute, stem extended, right\n    Glyphs[\"brassHarmonMuteStemHalfRight\"] = \"\\uE5EA\";\n    // U+E5EB  Harmon mute, stem out\n    Glyphs[\"brassHarmonMuteStemOpen\"] = \"\\uE5EB\";\n    // U+E5E4  Jazz turn\n    Glyphs[\"brassJazzTurn\"] = \"\\uE5E4\";\n    // U+E5D3  Lift, long\n    Glyphs[\"brassLiftLong\"] = \"\\uE5D3\";\n    // U+E5D2  Lift, medium\n    Glyphs[\"brassLiftMedium\"] = \"\\uE5D2\";\n    // U+E5D1  Lift, short\n    Glyphs[\"brassLiftShort\"] = \"\\uE5D1\";\n    // U+E5EE  Smooth lift, long\n    Glyphs[\"brassLiftSmoothLong\"] = \"\\uE5EE\";\n    // U+E5ED  Smooth lift, medium\n    Glyphs[\"brassLiftSmoothMedium\"] = \"\\uE5ED\";\n    // U+E5EC  Smooth lift, short\n    Glyphs[\"brassLiftSmoothShort\"] = \"\\uE5EC\";\n    // U+E5E5  Muted (closed)\n    Glyphs[\"brassMuteClosed\"] = \"\\uE5E5\";\n    // U+E5E6  Half-muted (half-closed)\n    Glyphs[\"brassMuteHalfClosed\"] = \"\\uE5E6\";\n    // U+E5E7  Open\n    Glyphs[\"brassMuteOpen\"] = \"\\uE5E7\";\n    // U+E5E0  Plop\n    Glyphs[\"brassPlop\"] = \"\\uE5E0\";\n    // U+E5D0  Scoop\n    Glyphs[\"brassScoop\"] = \"\\uE5D0\";\n    // U+E5E2  Smear\n    Glyphs[\"brassSmear\"] = \"\\uE5E2\";\n    // U+E5EF  Valve trill\n    Glyphs[\"brassValveTrill\"] = \"\\uE5EF\";\n    // U+E4CE  Breath mark (comma)\n    Glyphs[\"breathMarkComma\"] = \"\\uE4CE\";\n    // U+E4D5  Breath mark (Salzedo)\n    Glyphs[\"breathMarkSalzedo\"] = \"\\uE4D5\";\n    // U+E4CF  Breath mark (tick-like)\n    Glyphs[\"breathMarkTick\"] = \"\\uE4CF\";\n    // U+E4D0  Breath mark (upbow-like)\n    Glyphs[\"breathMarkUpbow\"] = \"\\uE4D0\";\n    // U+E078  Bridge clef\n    Glyphs[\"bridgeClef\"] = \"\\uE078\";\n    // U+E22A  Buzz roll\n    Glyphs[\"buzzRoll\"] = \"\\uE22A\";\n    // U+E05C  C clef\n    Glyphs[\"cClef\"] = \"\\uE05C\";\n    // U+E05D  C clef ottava bassa\n    Glyphs[\"cClef8vb\"] = \"\\uE05D\";\n    // U+E05F  C clef, arrow down\n    Glyphs[\"cClefArrowDown\"] = \"\\uE05F\";\n    // U+E05E  C clef, arrow up\n    Glyphs[\"cClefArrowUp\"] = \"\\uE05E\";\n    // U+E07B  C clef change\n    Glyphs[\"cClefChange\"] = \"\\uE07B\";\n    // U+E061  Combining C clef\n    Glyphs[\"cClefCombining\"] = \"\\uE061\";\n    // U+E075  Reversed C clef\n    Glyphs[\"cClefReversed\"] = \"\\uE075\";\n    // U+E060  C clef (19th century)\n    Glyphs[\"cClefSquare\"] = \"\\uE060\";\n    // U+E4D1  Caesura\n    Glyphs[\"caesura\"] = \"\\uE4D1\";\n    // U+E4D4  Curved caesura\n    Glyphs[\"caesuraCurved\"] = \"\\uE4D4\";\n    // U+E4D3  Short caesura\n    Glyphs[\"caesuraShort\"] = \"\\uE4D3\";\n    // U+E4D7  Single stroke caesura\n    Glyphs[\"caesuraSingleStroke\"] = \"\\uE4D7\";\n    // U+E4D2  Thick caesura\n    Glyphs[\"caesuraThick\"] = \"\\uE4D2\";\n    // U+E9D6  Accentus above\n    Glyphs[\"chantAccentusAbove\"] = \"\\uE9D6\";\n    // U+E9D7  Accentus below\n    Glyphs[\"chantAccentusBelow\"] = \"\\uE9D7\";\n    // U+E994  Punctum auctum, ascending\n    Glyphs[\"chantAuctumAsc\"] = \"\\uE994\";\n    // U+E995  Punctum auctum, descending\n    Glyphs[\"chantAuctumDesc\"] = \"\\uE995\";\n    // U+E9D9  Augmentum (mora)\n    Glyphs[\"chantAugmentum\"] = \"\\uE9D9\";\n    // U+E8F8  Caesura\n    Glyphs[\"chantCaesura\"] = \"\\uE8F8\";\n    // U+E906  Plainchant C clef\n    Glyphs[\"chantCclef\"] = \"\\uE906\";\n    // U+E9D2  Circulus above\n    Glyphs[\"chantCirculusAbove\"] = \"\\uE9D2\";\n    // U+E9D3  Circulus below\n    Glyphs[\"chantCirculusBelow\"] = \"\\uE9D3\";\n    // U+E9BD  Connecting line, ascending 2nd\n    Glyphs[\"chantConnectingLineAsc2nd\"] = \"\\uE9BD\";\n    // U+E9BE  Connecting line, ascending 3rd\n    Glyphs[\"chantConnectingLineAsc3rd\"] = \"\\uE9BE\";\n    // U+E9BF  Connecting line, ascending 4th\n    Glyphs[\"chantConnectingLineAsc4th\"] = \"\\uE9BF\";\n    // U+E9C0  Connecting line, ascending 5th\n    Glyphs[\"chantConnectingLineAsc5th\"] = \"\\uE9C0\";\n    // U+E9C1  Connecting line, ascending 6th\n    Glyphs[\"chantConnectingLineAsc6th\"] = \"\\uE9C1\";\n    // U+EA08  Plainchant custos, stem down, high position\n    Glyphs[\"chantCustosStemDownPosHigh\"] = \"\\uEA08\";\n    // U+EA09  Plainchant custos, stem down, highest position\n    Glyphs[\"chantCustosStemDownPosHighest\"] = \"\\uEA09\";\n    // U+EA07  Plainchant custos, stem down, middle position\n    Glyphs[\"chantCustosStemDownPosMiddle\"] = \"\\uEA07\";\n    // U+EA05  Plainchant custos, stem up, low position\n    Glyphs[\"chantCustosStemUpPosLow\"] = \"\\uEA05\";\n    // U+EA04  Plainchant custos, stem up, lowest position\n    Glyphs[\"chantCustosStemUpPosLowest\"] = \"\\uEA04\";\n    // U+EA06  Plainchant custos, stem up, middle position\n    Glyphs[\"chantCustosStemUpPosMiddle\"] = \"\\uEA06\";\n    // U+E9B3  Punctum deminutum, lower\n    Glyphs[\"chantDeminutumLower\"] = \"\\uE9B3\";\n    // U+E9B2  Punctum deminutum, upper\n    Glyphs[\"chantDeminutumUpper\"] = \"\\uE9B2\";\n    // U+E8F6  Divisio finalis\n    Glyphs[\"chantDivisioFinalis\"] = \"\\uE8F6\";\n    // U+E8F4  Divisio maior\n    Glyphs[\"chantDivisioMaior\"] = \"\\uE8F4\";\n    // U+E8F5  Divisio maxima\n    Glyphs[\"chantDivisioMaxima\"] = \"\\uE8F5\";\n    // U+E8F3  Divisio minima\n    Glyphs[\"chantDivisioMinima\"] = \"\\uE8F3\";\n    // U+E9B4  Entry line, ascending 2nd\n    Glyphs[\"chantEntryLineAsc2nd\"] = \"\\uE9B4\";\n    // U+E9B5  Entry line, ascending 3rd\n    Glyphs[\"chantEntryLineAsc3rd\"] = \"\\uE9B5\";\n    // U+E9B6  Entry line, ascending 4th\n    Glyphs[\"chantEntryLineAsc4th\"] = \"\\uE9B6\";\n    // U+E9B7  Entry line, ascending 5th\n    Glyphs[\"chantEntryLineAsc5th\"] = \"\\uE9B7\";\n    // U+E9B8  Entry line, ascending 6th\n    Glyphs[\"chantEntryLineAsc6th\"] = \"\\uE9B8\";\n    // U+E9D8  Episema\n    Glyphs[\"chantEpisema\"] = \"\\uE9D8\";\n    // U+E902  Plainchant F clef\n    Glyphs[\"chantFclef\"] = \"\\uE902\";\n    // U+E9D0  Ictus above\n    Glyphs[\"chantIctusAbove\"] = \"\\uE9D0\";\n    // U+E9D1  Ictus below\n    Glyphs[\"chantIctusBelow\"] = \"\\uE9D1\";\n    // U+E9B9  Ligated stroke, descending 2nd\n    Glyphs[\"chantLigaturaDesc2nd\"] = \"\\uE9B9\";\n    // U+E9BA  Ligated stroke, descending 3rd\n    Glyphs[\"chantLigaturaDesc3rd\"] = \"\\uE9BA\";\n    // U+E9BB  Ligated stroke, descending 4th\n    Glyphs[\"chantLigaturaDesc4th\"] = \"\\uE9BB\";\n    // U+E9BC  Ligated stroke, descending 5th\n    Glyphs[\"chantLigaturaDesc5th\"] = \"\\uE9BC\";\n    // U+E99C  Oriscus ascending\n    Glyphs[\"chantOriscusAscending\"] = \"\\uE99C\";\n    // U+E99D  Oriscus descending\n    Glyphs[\"chantOriscusDescending\"] = \"\\uE99D\";\n    // U+E99E  Oriscus liquescens\n    Glyphs[\"chantOriscusLiquescens\"] = \"\\uE99E\";\n    // U+E9B0  Podatus, lower\n    Glyphs[\"chantPodatusLower\"] = \"\\uE9B0\";\n    // U+E9B1  Podatus, upper\n    Glyphs[\"chantPodatusUpper\"] = \"\\uE9B1\";\n    // U+E990  Punctum\n    Glyphs[\"chantPunctum\"] = \"\\uE990\";\n    // U+E998  Punctum cavum\n    Glyphs[\"chantPunctumCavum\"] = \"\\uE998\";\n    // U+E9A1  Punctum deminutum\n    Glyphs[\"chantPunctumDeminutum\"] = \"\\uE9A1\";\n    // U+E991  Punctum inclinatum\n    Glyphs[\"chantPunctumInclinatum\"] = \"\\uE991\";\n    // U+E992  Punctum inclinatum auctum\n    Glyphs[\"chantPunctumInclinatumAuctum\"] = \"\\uE992\";\n    // U+E993  Punctum inclinatum deminutum\n    Glyphs[\"chantPunctumInclinatumDeminutum\"] = \"\\uE993\";\n    // U+E999  Punctum linea\n    Glyphs[\"chantPunctumLinea\"] = \"\\uE999\";\n    // U+E99A  Punctum linea cavum\n    Glyphs[\"chantPunctumLineaCavum\"] = \"\\uE99A\";\n    // U+E996  Punctum virga\n    Glyphs[\"chantPunctumVirga\"] = \"\\uE996\";\n    // U+E997  Punctum virga, reversed\n    Glyphs[\"chantPunctumVirgaReversed\"] = \"\\uE997\";\n    // U+E99B  Quilisma\n    Glyphs[\"chantQuilisma\"] = \"\\uE99B\";\n    // U+E9D4  Semicirculus above\n    Glyphs[\"chantSemicirculusAbove\"] = \"\\uE9D4\";\n    // U+E9D5  Semicirculus below\n    Glyphs[\"chantSemicirculusBelow\"] = \"\\uE9D5\";\n    // U+E8F0  Plainchant staff\n    Glyphs[\"chantStaff\"] = \"\\uE8F0\";\n    // U+E8F2  Plainchant staff (narrow)\n    Glyphs[\"chantStaffNarrow\"] = \"\\uE8F2\";\n    // U+E8F1  Plainchant staff (wide)\n    Glyphs[\"chantStaffWide\"] = \"\\uE8F1\";\n    // U+E99F  Strophicus\n    Glyphs[\"chantStrophicus\"] = \"\\uE99F\";\n    // U+E9A0  Strophicus auctus\n    Glyphs[\"chantStrophicusAuctus\"] = \"\\uE9A0\";\n    // U+E9C2  Strophicus liquescens, 2nd\n    Glyphs[\"chantStrophicusLiquescens2nd\"] = \"\\uE9C2\";\n    // U+E9C3  Strophicus liquescens, 3rd\n    Glyphs[\"chantStrophicusLiquescens3rd\"] = \"\\uE9C3\";\n    // U+E9C4  Strophicus liquescens, 4th\n    Glyphs[\"chantStrophicusLiquescens4th\"] = \"\\uE9C4\";\n    // U+E9C5  Strophicus liquescens, 5th\n    Glyphs[\"chantStrophicusLiquescens5th\"] = \"\\uE9C5\";\n    // U+E8F7  Virgula\n    Glyphs[\"chantVirgula\"] = \"\\uE8F7\";\n    // U+E07E  15 for clefs\n    Glyphs[\"clef15\"] = \"\\uE07E\";\n    // U+E07D  8 for clefs\n    Glyphs[\"clef8\"] = \"\\uE07D\";\n    // U+E07F  Combining clef change\n    Glyphs[\"clefChangeCombining\"] = \"\\uE07F\";\n    // U+E048  Coda\n    Glyphs[\"coda\"] = \"\\uE048\";\n    // U+E049  Square coda\n    Glyphs[\"codaSquare\"] = \"\\uE049\";\n    // U+E897  Beat 2, compound time\n    Glyphs[\"conductorBeat2Compound\"] = \"\\uE897\";\n    // U+E894  Beat 2, simple time\n    Glyphs[\"conductorBeat2Simple\"] = \"\\uE894\";\n    // U+E898  Beat 3, compound time\n    Glyphs[\"conductorBeat3Compound\"] = \"\\uE898\";\n    // U+E895  Beat 3, simple time\n    Glyphs[\"conductorBeat3Simple\"] = \"\\uE895\";\n    // U+E899  Beat 4, compound time\n    Glyphs[\"conductorBeat4Compound\"] = \"\\uE899\";\n    // U+E896  Beat 4, simple time\n    Glyphs[\"conductorBeat4Simple\"] = \"\\uE896\";\n    // U+E891  Left-hand beat or cue\n    Glyphs[\"conductorLeftBeat\"] = \"\\uE891\";\n    // U+E892  Right-hand beat or cue\n    Glyphs[\"conductorRightBeat\"] = \"\\uE892\";\n    // U+E890  Strong beat or cue\n    Glyphs[\"conductorStrongBeat\"] = \"\\uE890\";\n    // U+E89A  Unconducted/free passages\n    Glyphs[\"conductorUnconducted\"] = \"\\uE89A\";\n    // U+E893  Weak beat or cue\n    Glyphs[\"conductorWeakBeat\"] = \"\\uE893\";\n    // U+E8E0  Begin beam\n    Glyphs[\"controlBeginBeam\"] = \"\\uE8E0\";\n    // U+E8E6  Begin phrase\n    Glyphs[\"controlBeginPhrase\"] = \"\\uE8E6\";\n    // U+E8E4  Begin slur\n    Glyphs[\"controlBeginSlur\"] = \"\\uE8E4\";\n    // U+E8E2  Begin tie\n    Glyphs[\"controlBeginTie\"] = \"\\uE8E2\";\n    // U+E8E1  End beam\n    Glyphs[\"controlEndBeam\"] = \"\\uE8E1\";\n    // U+E8E7  End phrase\n    Glyphs[\"controlEndPhrase\"] = \"\\uE8E7\";\n    // U+E8E5  End slur\n    Glyphs[\"controlEndSlur\"] = \"\\uE8E5\";\n    // U+E8E3  End tie\n    Glyphs[\"controlEndTie\"] = \"\\uE8E3\";\n    // U+ED64  Double flat\n    Glyphs[\"csymAccidentalDoubleFlat\"] = \"\\uED64\";\n    // U+ED63  Double sharp\n    Glyphs[\"csymAccidentalDoubleSharp\"] = \"\\uED63\";\n    // U+ED60  Flat\n    Glyphs[\"csymAccidentalFlat\"] = \"\\uED60\";\n    // U+ED61  Natural\n    Glyphs[\"csymAccidentalNatural\"] = \"\\uED61\";\n    // U+ED62  Sharp\n    Glyphs[\"csymAccidentalSharp\"] = \"\\uED62\";\n    // U+ED66  Triple flat\n    Glyphs[\"csymAccidentalTripleFlat\"] = \"\\uED66\";\n    // U+ED65  Triple sharp\n    Glyphs[\"csymAccidentalTripleSharp\"] = \"\\uED65\";\n    // U+E87B  Slash for altered bass note\n    Glyphs[\"csymAlteredBassSlash\"] = \"\\uE87B\";\n    // U+E872  Augmented\n    Glyphs[\"csymAugmented\"] = \"\\uE872\";\n    // U+E877  Double-height left bracket\n    Glyphs[\"csymBracketLeftTall\"] = \"\\uE877\";\n    // U+E878  Double-height right bracket\n    Glyphs[\"csymBracketRightTall\"] = \"\\uE878\";\n    // U+E87C  Slash for chord symbols arranged diagonally\n    Glyphs[\"csymDiagonalArrangementSlash\"] = \"\\uE87C\";\n    // U+E870  Diminished\n    Glyphs[\"csymDiminished\"] = \"\\uE870\";\n    // U+E871  Half-diminished\n    Glyphs[\"csymHalfDiminished\"] = \"\\uE871\";\n    // U+E873  Major seventh\n    Glyphs[\"csymMajorSeventh\"] = \"\\uE873\";\n    // U+E874  Minor\n    Glyphs[\"csymMinor\"] = \"\\uE874\";\n    // U+E875  Double-height left parenthesis\n    Glyphs[\"csymParensLeftTall\"] = \"\\uE875\";\n    // U+E879  Triple-height left parenthesis\n    Glyphs[\"csymParensLeftVeryTall\"] = \"\\uE879\";\n    // U+E876  Double-height right parenthesis\n    Glyphs[\"csymParensRightTall\"] = \"\\uE876\";\n    // U+E87A  Triple-height right parenthesis\n    Glyphs[\"csymParensRightVeryTall\"] = \"\\uE87A\";\n    // U+E4D6  Curlew (Britten)\n    Glyphs[\"curlewSign\"] = \"\\uE4D6\";\n    // U+E046  Da capo\n    Glyphs[\"daCapo\"] = \"\\uE046\";\n    // U+E045  Dal segno\n    Glyphs[\"dalSegno\"] = \"\\uE045\";\n    // U+EA3C  Daseian excellentes 1\n    Glyphs[\"daseianExcellentes1\"] = \"\\uEA3C\";\n    // U+EA3D  Daseian excellentes 2\n    Glyphs[\"daseianExcellentes2\"] = \"\\uEA3D\";\n    // U+EA3E  Daseian excellentes 3\n    Glyphs[\"daseianExcellentes3\"] = \"\\uEA3E\";\n    // U+EA3F  Daseian excellentes 4\n    Glyphs[\"daseianExcellentes4\"] = \"\\uEA3F\";\n    // U+EA34  Daseian finales 1\n    Glyphs[\"daseianFinales1\"] = \"\\uEA34\";\n    // U+EA35  Daseian finales 2\n    Glyphs[\"daseianFinales2\"] = \"\\uEA35\";\n    // U+EA36  Daseian finales 3\n    Glyphs[\"daseianFinales3\"] = \"\\uEA36\";\n    // U+EA37  Daseian finales 4\n    Glyphs[\"daseianFinales4\"] = \"\\uEA37\";\n    // U+EA30  Daseian graves 1\n    Glyphs[\"daseianGraves1\"] = \"\\uEA30\";\n    // U+EA31  Daseian graves 2\n    Glyphs[\"daseianGraves2\"] = \"\\uEA31\";\n    // U+EA32  Daseian graves 3\n    Glyphs[\"daseianGraves3\"] = \"\\uEA32\";\n    // U+EA33  Daseian graves 4\n    Glyphs[\"daseianGraves4\"] = \"\\uEA33\";\n    // U+EA40  Daseian residua 1\n    Glyphs[\"daseianResidua1\"] = \"\\uEA40\";\n    // U+EA41  Daseian residua 2\n    Glyphs[\"daseianResidua2\"] = \"\\uEA41\";\n    // U+EA38  Daseian superiores 1\n    Glyphs[\"daseianSuperiores1\"] = \"\\uEA38\";\n    // U+EA39  Daseian superiores 2\n    Glyphs[\"daseianSuperiores2\"] = \"\\uEA39\";\n    // U+EA3A  Daseian superiores 3\n    Glyphs[\"daseianSuperiores3\"] = \"\\uEA3A\";\n    // U+EA3B  Daseian superiores 4\n    Glyphs[\"daseianSuperiores4\"] = \"\\uEA3B\";\n    // U+E234  Double lateral roll (Stevens)\n    Glyphs[\"doubleLateralRollStevens\"] = \"\\uE234\";\n    // U+E5F0  Double-tongue above\n    Glyphs[\"doubleTongueAbove\"] = \"\\uE5F0\";\n    // U+E5F1  Double-tongue below\n    Glyphs[\"doubleTongueBelow\"] = \"\\uE5F1\";\n    // U+E546  Colon separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorColon\"] = \"\\uE546\";\n    // U+E547  Hyphen separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorHyphen\"] = \"\\uE547\";\n    // U+E549  Slash separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSlash\"] = \"\\uE549\";\n    // U+E548  Space separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSpace\"] = \"\\uE548\";\n    // U+E53E  Crescendo\n    Glyphs[\"dynamicCrescendoHairpin\"] = \"\\uE53E\";\n    // U+E53F  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpin\"] = \"\\uE53F\";\n    // U+E52F  ff\n    Glyphs[\"dynamicFF\"] = \"\\uE52F\";\n    // U+E530  fff\n    Glyphs[\"dynamicFFF\"] = \"\\uE530\";\n    // U+E531  ffff\n    Glyphs[\"dynamicFFFF\"] = \"\\uE531\";\n    // U+E532  fffff\n    Glyphs[\"dynamicFFFFF\"] = \"\\uE532\";\n    // U+E533  ffffff\n    Glyphs[\"dynamicFFFFFF\"] = \"\\uE533\";\n    // U+E522  Forte\n    Glyphs[\"dynamicForte\"] = \"\\uE522\";\n    // U+E534  Forte-piano\n    Glyphs[\"dynamicFortePiano\"] = \"\\uE534\";\n    // U+E535  Forzando\n    Glyphs[\"dynamicForzando\"] = \"\\uE535\";\n    // U+E544  Left bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketLeft\"] = \"\\uE544\";\n    // U+E545  Right bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketRight\"] = \"\\uE545\";\n    // U+E542  Left parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisLeft\"] = \"\\uE542\";\n    // U+E543  Right parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisRight\"] = \"\\uE543\";\n    // U+E52D  mf\n    Glyphs[\"dynamicMF\"] = \"\\uE52D\";\n    // U+E52C  mp\n    Glyphs[\"dynamicMP\"] = \"\\uE52C\";\n    // U+E540  Messa di voce\n    Glyphs[\"dynamicMessaDiVoce\"] = \"\\uE540\";\n    // U+E521  Mezzo\n    Glyphs[\"dynamicMezzo\"] = \"\\uE521\";\n    // U+E526  Niente\n    Glyphs[\"dynamicNiente\"] = \"\\uE526\";\n    // U+E541  Niente (for hairpins)\n    Glyphs[\"dynamicNienteForHairpin\"] = \"\\uE541\";\n    // U+E52E  pf\n    Glyphs[\"dynamicPF\"] = \"\\uE52E\";\n    // U+E52B  pp\n    Glyphs[\"dynamicPP\"] = \"\\uE52B\";\n    // U+E52A  ppp\n    Glyphs[\"dynamicPPP\"] = \"\\uE52A\";\n    // U+E529  pppp\n    Glyphs[\"dynamicPPPP\"] = \"\\uE529\";\n    // U+E528  ppppp\n    Glyphs[\"dynamicPPPPP\"] = \"\\uE528\";\n    // U+E527  pppppp\n    Glyphs[\"dynamicPPPPPP\"] = \"\\uE527\";\n    // U+E520  Piano\n    Glyphs[\"dynamicPiano\"] = \"\\uE520\";\n    // U+E523  Rinforzando\n    Glyphs[\"dynamicRinforzando\"] = \"\\uE523\";\n    // U+E53C  Rinforzando 1\n    Glyphs[\"dynamicRinforzando1\"] = \"\\uE53C\";\n    // U+E53D  Rinforzando 2\n    Glyphs[\"dynamicRinforzando2\"] = \"\\uE53D\";\n    // U+E524  Sforzando\n    Glyphs[\"dynamicSforzando\"] = \"\\uE524\";\n    // U+E536  Sforzando 1\n    Glyphs[\"dynamicSforzando1\"] = \"\\uE536\";\n    // U+E538  Sforzando-pianissimo\n    Glyphs[\"dynamicSforzandoPianissimo\"] = \"\\uE538\";\n    // U+E537  Sforzando-piano\n    Glyphs[\"dynamicSforzandoPiano\"] = \"\\uE537\";\n    // U+E539  Sforzato\n    Glyphs[\"dynamicSforzato\"] = \"\\uE539\";\n    // U+E53B  Sforzatissimo\n    Glyphs[\"dynamicSforzatoFF\"] = \"\\uE53B\";\n    // U+E53A  Sforzato-piano\n    Glyphs[\"dynamicSforzatoPiano\"] = \"\\uE53A\";\n    // U+E525  Z\n    Glyphs[\"dynamicZ\"] = \"\\uE525\";\n    // U+EB46  Eight channels (7.1 surround)\n    Glyphs[\"elecAudioChannelsEight\"] = \"\\uEB46\";\n    // U+EB43  Five channels\n    Glyphs[\"elecAudioChannelsFive\"] = \"\\uEB43\";\n    // U+EB42  Four channels\n    Glyphs[\"elecAudioChannelsFour\"] = \"\\uEB42\";\n    // U+EB3E  One channel (mono)\n    Glyphs[\"elecAudioChannelsOne\"] = \"\\uEB3E\";\n    // U+EB45  Seven channels\n    Glyphs[\"elecAudioChannelsSeven\"] = \"\\uEB45\";\n    // U+EB44  Six channels (5.1 surround)\n    Glyphs[\"elecAudioChannelsSix\"] = \"\\uEB44\";\n    // U+EB40  Three channels (frontal)\n    Glyphs[\"elecAudioChannelsThreeFrontal\"] = \"\\uEB40\";\n    // U+EB41  Three channels (surround)\n    Glyphs[\"elecAudioChannelsThreeSurround\"] = \"\\uEB41\";\n    // U+EB3F  Two channels (stereo)\n    Glyphs[\"elecAudioChannelsTwo\"] = \"\\uEB3F\";\n    // U+EB49  Audio in\n    Glyphs[\"elecAudioIn\"] = \"\\uEB49\";\n    // U+EB3C  Mono audio setup\n    Glyphs[\"elecAudioMono\"] = \"\\uEB3C\";\n    // U+EB4A  Audio out\n    Glyphs[\"elecAudioOut\"] = \"\\uEB4A\";\n    // U+EB3D  Stereo audio setup\n    Glyphs[\"elecAudioStereo\"] = \"\\uEB3D\";\n    // U+EB1B  Camera\n    Glyphs[\"elecCamera\"] = \"\\uEB1B\";\n    // U+EB4D  Data in\n    Glyphs[\"elecDataIn\"] = \"\\uEB4D\";\n    // U+EB4E  Data out\n    Glyphs[\"elecDataOut\"] = \"\\uEB4E\";\n    // U+EB13  Disc\n    Glyphs[\"elecDisc\"] = \"\\uEB13\";\n    // U+EB4F  Download\n    Glyphs[\"elecDownload\"] = \"\\uEB4F\";\n    // U+EB2B  Eject\n    Glyphs[\"elecEject\"] = \"\\uEB2B\";\n    // U+EB1F  Fast-forward\n    Glyphs[\"elecFastForward\"] = \"\\uEB1F\";\n    // U+EB11  Headphones\n    Glyphs[\"elecHeadphones\"] = \"\\uEB11\";\n    // U+EB12  Headset\n    Glyphs[\"elecHeadset\"] = \"\\uEB12\";\n    // U+EB47  Line in\n    Glyphs[\"elecLineIn\"] = \"\\uEB47\";\n    // U+EB48  Line out\n    Glyphs[\"elecLineOut\"] = \"\\uEB48\";\n    // U+EB23  Loop\n    Glyphs[\"elecLoop\"] = \"\\uEB23\";\n    // U+EB1A  Loudspeaker\n    Glyphs[\"elecLoudspeaker\"] = \"\\uEB1A\";\n    // U+EB36  MIDI controller 0%\n    Glyphs[\"elecMIDIController0\"] = \"\\uEB36\";\n    // U+EB3B  MIDI controller 100%\n    Glyphs[\"elecMIDIController100\"] = \"\\uEB3B\";\n    // U+EB37  MIDI controller 20%\n    Glyphs[\"elecMIDIController20\"] = \"\\uEB37\";\n    // U+EB38  MIDI controller 40%\n    Glyphs[\"elecMIDIController40\"] = \"\\uEB38\";\n    // U+EB39  MIDI controller 60%\n    Glyphs[\"elecMIDIController60\"] = \"\\uEB39\";\n    // U+EB3A  MIDI controller 80%\n    Glyphs[\"elecMIDIController80\"] = \"\\uEB3A\";\n    // U+EB34  MIDI in\n    Glyphs[\"elecMIDIIn\"] = \"\\uEB34\";\n    // U+EB35  MIDI out\n    Glyphs[\"elecMIDIOut\"] = \"\\uEB35\";\n    // U+EB10  Microphone\n    Glyphs[\"elecMicrophone\"] = \"\\uEB10\";\n    // U+EB28  Mute microphone\n    Glyphs[\"elecMicrophoneMute\"] = \"\\uEB28\";\n    // U+EB29  Unmute microphone\n    Glyphs[\"elecMicrophoneUnmute\"] = \"\\uEB29\";\n    // U+EB15  Mixing console\n    Glyphs[\"elecMixingConsole\"] = \"\\uEB15\";\n    // U+EB18  Monitor\n    Glyphs[\"elecMonitor\"] = \"\\uEB18\";\n    // U+EB26  Mute\n    Glyphs[\"elecMute\"] = \"\\uEB26\";\n    // U+EB1E  Pause\n    Glyphs[\"elecPause\"] = \"\\uEB1E\";\n    // U+EB1C  Play\n    Glyphs[\"elecPlay\"] = \"\\uEB1C\";\n    // U+EB2A  Power on/off\n    Glyphs[\"elecPowerOnOff\"] = \"\\uEB2A\";\n    // U+EB19  Projector\n    Glyphs[\"elecProjector\"] = \"\\uEB19\";\n    // U+EB24  Replay\n    Glyphs[\"elecReplay\"] = \"\\uEB24\";\n    // U+EB20  Rewind\n    Glyphs[\"elecRewind\"] = \"\\uEB20\";\n    // U+EB25  Shuffle\n    Glyphs[\"elecShuffle\"] = \"\\uEB25\";\n    // U+EB22  Skip backwards\n    Glyphs[\"elecSkipBackwards\"] = \"\\uEB22\";\n    // U+EB21  Skip forwards\n    Glyphs[\"elecSkipForwards\"] = \"\\uEB21\";\n    // U+EB1D  Stop\n    Glyphs[\"elecStop\"] = \"\\uEB1D\";\n    // U+EB14  Tape\n    Glyphs[\"elecTape\"] = \"\\uEB14\";\n    // U+EB16  USB connection\n    Glyphs[\"elecUSB\"] = \"\\uEB16\";\n    // U+EB27  Unmute\n    Glyphs[\"elecUnmute\"] = \"\\uEB27\";\n    // U+EB50  Upload\n    Glyphs[\"elecUpload\"] = \"\\uEB50\";\n    // U+EB17  Video camera\n    Glyphs[\"elecVideoCamera\"] = \"\\uEB17\";\n    // U+EB4B  Video in\n    Glyphs[\"elecVideoIn\"] = \"\\uEB4B\";\n    // U+EB4C  Video out\n    Glyphs[\"elecVideoOut\"] = \"\\uEB4C\";\n    // U+EB2C  Combining volume fader\n    Glyphs[\"elecVolumeFader\"] = \"\\uEB2C\";\n    // U+EB2D  Combining volume fader thumb\n    Glyphs[\"elecVolumeFaderThumb\"] = \"\\uEB2D\";\n    // U+EB2E  Volume level 0%\n    Glyphs[\"elecVolumeLevel0\"] = \"\\uEB2E\";\n    // U+EB33  Volume level 100%\n    Glyphs[\"elecVolumeLevel100\"] = \"\\uEB33\";\n    // U+EB2F  Volume level 20%\n    Glyphs[\"elecVolumeLevel20\"] = \"\\uEB2F\";\n    // U+EB30  Volume level 40%\n    Glyphs[\"elecVolumeLevel40\"] = \"\\uEB30\";\n    // U+EB31  Volume level 60%\n    Glyphs[\"elecVolumeLevel60\"] = \"\\uEB31\";\n    // U+EB32  Volume level 80%\n    Glyphs[\"elecVolumeLevel80\"] = \"\\uEB32\";\n    // U+E062  F clef\n    Glyphs[\"fClef\"] = \"\\uE062\";\n    // U+E066  F clef quindicesima alta\n    Glyphs[\"fClef15ma\"] = \"\\uE066\";\n    // U+E063  F clef quindicesima bassa\n    Glyphs[\"fClef15mb\"] = \"\\uE063\";\n    // U+E065  F clef ottava alta\n    Glyphs[\"fClef8va\"] = \"\\uE065\";\n    // U+E064  F clef ottava bassa\n    Glyphs[\"fClef8vb\"] = \"\\uE064\";\n    // U+E068  F clef, arrow down\n    Glyphs[\"fClefArrowDown\"] = \"\\uE068\";\n    // U+E067  F clef, arrow up\n    Glyphs[\"fClefArrowUp\"] = \"\\uE067\";\n    // U+E07C  F clef change\n    Glyphs[\"fClefChange\"] = \"\\uE07C\";\n    // U+E076  Reversed F clef\n    Glyphs[\"fClefReversed\"] = \"\\uE076\";\n    // U+E077  Turned F clef\n    Glyphs[\"fClefTurned\"] = \"\\uE077\";\n    // U+E4C0  Fermata above\n    Glyphs[\"fermataAbove\"] = \"\\uE4C0\";\n    // U+E4C1  Fermata below\n    Glyphs[\"fermataBelow\"] = \"\\uE4C1\";\n    // U+E4C6  Long fermata above\n    Glyphs[\"fermataLongAbove\"] = \"\\uE4C6\";\n    // U+E4C7  Long fermata below\n    Glyphs[\"fermataLongBelow\"] = \"\\uE4C7\";\n    // U+E4CA  Long fermata (Henze) above\n    Glyphs[\"fermataLongHenzeAbove\"] = \"\\uE4CA\";\n    // U+E4CB  Long fermata (Henze) below\n    Glyphs[\"fermataLongHenzeBelow\"] = \"\\uE4CB\";\n    // U+E4C4  Short fermata above\n    Glyphs[\"fermataShortAbove\"] = \"\\uE4C4\";\n    // U+E4C5  Short fermata below\n    Glyphs[\"fermataShortBelow\"] = \"\\uE4C5\";\n    // U+E4CC  Short fermata (Henze) above\n    Glyphs[\"fermataShortHenzeAbove\"] = \"\\uE4CC\";\n    // U+E4CD  Short fermata (Henze) below\n    Glyphs[\"fermataShortHenzeBelow\"] = \"\\uE4CD\";\n    // U+E4C8  Very long fermata above\n    Glyphs[\"fermataVeryLongAbove\"] = \"\\uE4C8\";\n    // U+E4C9  Very long fermata below\n    Glyphs[\"fermataVeryLongBelow\"] = \"\\uE4C9\";\n    // U+E4C2  Very short fermata above\n    Glyphs[\"fermataVeryShortAbove\"] = \"\\uE4C2\";\n    // U+E4C3  Very short fermata below\n    Glyphs[\"fermataVeryShortBelow\"] = \"\\uE4C3\";\n    // U+EA50  Figured bass 0\n    Glyphs[\"figbass0\"] = \"\\uEA50\";\n    // U+EA51  Figured bass 1\n    Glyphs[\"figbass1\"] = \"\\uEA51\";\n    // U+EA52  Figured bass 2\n    Glyphs[\"figbass2\"] = \"\\uEA52\";\n    // U+EA53  Figured bass 2 raised by half-step\n    Glyphs[\"figbass2Raised\"] = \"\\uEA53\";\n    // U+EA54  Figured bass 3\n    Glyphs[\"figbass3\"] = \"\\uEA54\";\n    // U+EA55  Figured bass 4\n    Glyphs[\"figbass4\"] = \"\\uEA55\";\n    // U+EA56  Figured bass 4 raised by half-step\n    Glyphs[\"figbass4Raised\"] = \"\\uEA56\";\n    // U+EA57  Figured bass 5\n    Glyphs[\"figbass5\"] = \"\\uEA57\";\n    // U+EA58  Figured bass 5 raised by half-step\n    Glyphs[\"figbass5Raised1\"] = \"\\uEA58\";\n    // U+EA59  Figured bass 5 raised by half-step 2\n    Glyphs[\"figbass5Raised2\"] = \"\\uEA59\";\n    // U+EA5A  Figured bass diminished 5\n    Glyphs[\"figbass5Raised3\"] = \"\\uEA5A\";\n    // U+EA5B  Figured bass 6\n    Glyphs[\"figbass6\"] = \"\\uEA5B\";\n    // U+EA5C  Figured bass 6 raised by half-step\n    Glyphs[\"figbass6Raised\"] = \"\\uEA5C\";\n    // U+EA6F  Figured bass 6 raised by half-step 2\n    Glyphs[\"figbass6Raised2\"] = \"\\uEA6F\";\n    // U+EA5D  Figured bass 7\n    Glyphs[\"figbass7\"] = \"\\uEA5D\";\n    // U+ECC0  Figured bass 7 diminished\n    Glyphs[\"figbass7Diminished\"] = \"\\uECC0\";\n    // U+EA5E  Figured bass 7 raised by half-step\n    Glyphs[\"figbass7Raised1\"] = \"\\uEA5E\";\n    // U+EA5F  Figured bass 7 lowered by a half-step\n    Glyphs[\"figbass7Raised2\"] = \"\\uEA5F\";\n    // U+EA60  Figured bass 8\n    Glyphs[\"figbass8\"] = \"\\uEA60\";\n    // U+EA61  Figured bass 9\n    Glyphs[\"figbass9\"] = \"\\uEA61\";\n    // U+EA62  Figured bass 9 raised by half-step\n    Glyphs[\"figbass9Raised\"] = \"\\uEA62\";\n    // U+EA68  Figured bass [\n    Glyphs[\"figbassBracketLeft\"] = \"\\uEA68\";\n    // U+EA69  Figured bass ]\n    Glyphs[\"figbassBracketRight\"] = \"\\uEA69\";\n    // U+EA6E  Combining lower\n    Glyphs[\"figbassCombiningLowering\"] = \"\\uEA6E\";\n    // U+EA6D  Combining raise\n    Glyphs[\"figbassCombiningRaising\"] = \"\\uEA6D\";\n    // U+EA63  Figured bass double flat\n    Glyphs[\"figbassDoubleFlat\"] = \"\\uEA63\";\n    // U+EA67  Figured bass double sharp\n    Glyphs[\"figbassDoubleSharp\"] = \"\\uEA67\";\n    // U+EA64  Figured bass flat\n    Glyphs[\"figbassFlat\"] = \"\\uEA64\";\n    // U+EA65  Figured bass natural\n    Glyphs[\"figbassNatural\"] = \"\\uEA65\";\n    // U+EA6A  Figured bass (\n    Glyphs[\"figbassParensLeft\"] = \"\\uEA6A\";\n    // U+EA6B  Figured bass )\n    Glyphs[\"figbassParensRight\"] = \"\\uEA6B\";\n    // U+EA6C  Figured bass +\n    Glyphs[\"figbassPlus\"] = \"\\uEA6C\";\n    // U+EA66  Figured bass sharp\n    Glyphs[\"figbassSharp\"] = \"\\uEA66\";\n    // U+ECC1  Figured bass triple flat\n    Glyphs[\"figbassTripleFlat\"] = \"\\uECC1\";\n    // U+ECC2  Figured bass triple sharp\n    Glyphs[\"figbassTripleSharp\"] = \"\\uECC2\";\n    // U+ED10  Fingering 0 (open string)\n    Glyphs[\"fingering0\"] = \"\\uED10\";\n    // U+ED80  Fingering 0 italic (open string)\n    Glyphs[\"fingering0Italic\"] = \"\\uED80\";\n    // U+ED11  Fingering 1 (thumb)\n    Glyphs[\"fingering1\"] = \"\\uED11\";\n    // U+ED81  Fingering 1 italic (thumb)\n    Glyphs[\"fingering1Italic\"] = \"\\uED81\";\n    // U+ED12  Fingering 2 (index finger)\n    Glyphs[\"fingering2\"] = \"\\uED12\";\n    // U+ED82  Fingering 2 italic (index finger)\n    Glyphs[\"fingering2Italic\"] = \"\\uED82\";\n    // U+ED13  Fingering 3 (middle finger)\n    Glyphs[\"fingering3\"] = \"\\uED13\";\n    // U+ED83  Fingering 3 italic (middle finger)\n    Glyphs[\"fingering3Italic\"] = \"\\uED83\";\n    // U+ED14  Fingering 4 (ring finger)\n    Glyphs[\"fingering4\"] = \"\\uED14\";\n    // U+ED84  Fingering 4 italic (ring finger)\n    Glyphs[\"fingering4Italic\"] = \"\\uED84\";\n    // U+ED15  Fingering 5 (little finger)\n    Glyphs[\"fingering5\"] = \"\\uED15\";\n    // U+ED85  Fingering 5 italic (little finger)\n    Glyphs[\"fingering5Italic\"] = \"\\uED85\";\n    // U+ED24  Fingering 6\n    Glyphs[\"fingering6\"] = \"\\uED24\";\n    // U+ED86  Fingering 6 italic\n    Glyphs[\"fingering6Italic\"] = \"\\uED86\";\n    // U+ED25  Fingering 7\n    Glyphs[\"fingering7\"] = \"\\uED25\";\n    // U+ED87  Fingering 7 italic\n    Glyphs[\"fingering7Italic\"] = \"\\uED87\";\n    // U+ED26  Fingering 8\n    Glyphs[\"fingering8\"] = \"\\uED26\";\n    // U+ED88  Fingering 8 italic\n    Glyphs[\"fingering8Italic\"] = \"\\uED88\";\n    // U+ED27  Fingering 9\n    Glyphs[\"fingering9\"] = \"\\uED27\";\n    // U+ED89  Fingering 9 italic\n    Glyphs[\"fingering9Italic\"] = \"\\uED89\";\n    // U+ED1B  Fingering a (anular; right-hand ring finger for guitar)\n    Glyphs[\"fingeringALower\"] = \"\\uED1B\";\n    // U+ED1C  Fingering c (right-hand little finger for guitar)\n    Glyphs[\"fingeringCLower\"] = \"\\uED1C\";\n    // U+ED1E  Fingering e (right-hand little finger for guitar)\n    Glyphs[\"fingeringELower\"] = \"\\uED1E\";\n    // U+ED19  Fingering i (indicio; right-hand index finger for guitar)\n    Glyphs[\"fingeringILower\"] = \"\\uED19\";\n    // U+ED2A  Fingering left bracket\n    Glyphs[\"fingeringLeftBracket\"] = \"\\uED2A\";\n    // U+ED8C  Fingering left bracket italic\n    Glyphs[\"fingeringLeftBracketItalic\"] = \"\\uED8C\";\n    // U+ED28  Fingering left parenthesis\n    Glyphs[\"fingeringLeftParenthesis\"] = \"\\uED28\";\n    // U+ED8A  Fingering left parenthesis italic\n    Glyphs[\"fingeringLeftParenthesisItalic\"] = \"\\uED8A\";\n    // U+ED1A  Fingering m (medio; right-hand middle finger for guitar)\n    Glyphs[\"fingeringMLower\"] = \"\\uED1A\";\n    // U+ED23  Multiple notes played by thumb or single finger\n    Glyphs[\"fingeringMultipleNotes\"] = \"\\uED23\";\n    // U+ED1F  Fingering o (right-hand little finger for guitar)\n    Glyphs[\"fingeringOLower\"] = \"\\uED1F\";\n    // U+ED17  Fingering p (pulgar; right-hand thumb for guitar)\n    Glyphs[\"fingeringPLower\"] = \"\\uED17\";\n    // U+ED8E  Fingering q (right-hand little finger for guitar)\n    Glyphs[\"fingeringQLower\"] = \"\\uED8E\";\n    // U+ED2B  Fingering right bracket\n    Glyphs[\"fingeringRightBracket\"] = \"\\uED2B\";\n    // U+ED8D  Fingering right bracket italic\n    Glyphs[\"fingeringRightBracketItalic\"] = \"\\uED8D\";\n    // U+ED29  Fingering right parenthesis\n    Glyphs[\"fingeringRightParenthesis\"] = \"\\uED29\";\n    // U+ED8B  Fingering right parenthesis italic\n    Glyphs[\"fingeringRightParenthesisItalic\"] = \"\\uED8B\";\n    // U+ED8F  Fingering s (right-hand little finger for guitar)\n    Glyphs[\"fingeringSLower\"] = \"\\uED8F\";\n    // U+ED2C  Fingering middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDot\"] = \"\\uED2C\";\n    // U+ED2D  Fingering white middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDotWhite\"] = \"\\uED2D\";\n    // U+ED2E  Fingering forward slash separator\n    Glyphs[\"fingeringSeparatorSlash\"] = \"\\uED2E\";\n    // U+ED20  Finger substitution above\n    Glyphs[\"fingeringSubstitutionAbove\"] = \"\\uED20\";\n    // U+ED21  Finger substitution below\n    Glyphs[\"fingeringSubstitutionBelow\"] = \"\\uED21\";\n    // U+ED22  Finger substitution dash\n    Glyphs[\"fingeringSubstitutionDash\"] = \"\\uED22\";\n    // U+ED18  Fingering t (right-hand thumb for guitar)\n    Glyphs[\"fingeringTLower\"] = \"\\uED18\";\n    // U+ED16  Fingering T (left-hand thumb for guitar)\n    Glyphs[\"fingeringTUpper\"] = \"\\uED16\";\n    // U+ED1D  Fingering x (right-hand little finger for guitar)\n    Glyphs[\"fingeringXLower\"] = \"\\uED1D\";\n    // U+E24F  Combining flag 8 (1024th) below\n    Glyphs[\"flag1024thDown\"] = \"\\uE24F\";\n    // U+E24E  Combining flag 8 (1024th) above\n    Glyphs[\"flag1024thUp\"] = \"\\uE24E\";\n    // U+E249  Combining flag 5 (128th) below\n    Glyphs[\"flag128thDown\"] = \"\\uE249\";\n    // U+E248  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUp\"] = \"\\uE248\";\n    // U+E243  Combining flag 2 (16th) below\n    Glyphs[\"flag16thDown\"] = \"\\uE243\";\n    // U+E242  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUp\"] = \"\\uE242\";\n    // U+E24B  Combining flag 6 (256th) below\n    Glyphs[\"flag256thDown\"] = \"\\uE24B\";\n    // U+E24A  Combining flag 6 (256th) above\n    Glyphs[\"flag256thUp\"] = \"\\uE24A\";\n    // U+E245  Combining flag 3 (32nd) below\n    Glyphs[\"flag32ndDown\"] = \"\\uE245\";\n    // U+E244  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUp\"] = \"\\uE244\";\n    // U+E24D  Combining flag 7 (512th) below\n    Glyphs[\"flag512thDown\"] = \"\\uE24D\";\n    // U+E24C  Combining flag 7 (512th) above\n    Glyphs[\"flag512thUp\"] = \"\\uE24C\";\n    // U+E247  Combining flag 4 (64th) below\n    Glyphs[\"flag64thDown\"] = \"\\uE247\";\n    // U+E246  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUp\"] = \"\\uE246\";\n    // U+E241  Combining flag 1 (8th) below\n    Glyphs[\"flag8thDown\"] = \"\\uE241\";\n    // U+E240  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUp\"] = \"\\uE240\";\n    // U+E251  Internal combining flag below\n    Glyphs[\"flagInternalDown\"] = \"\\uE251\";\n    // U+E250  Internal combining flag above\n    Glyphs[\"flagInternalUp\"] = \"\\uE250\";\n    // U+E850  3-string fretboard\n    Glyphs[\"fretboard3String\"] = \"\\uE850\";\n    // U+E851  3-string fretboard at nut\n    Glyphs[\"fretboard3StringNut\"] = \"\\uE851\";\n    // U+E852  4-string fretboard\n    Glyphs[\"fretboard4String\"] = \"\\uE852\";\n    // U+E853  4-string fretboard at nut\n    Glyphs[\"fretboard4StringNut\"] = \"\\uE853\";\n    // U+E854  5-string fretboard\n    Glyphs[\"fretboard5String\"] = \"\\uE854\";\n    // U+E855  5-string fretboard at nut\n    Glyphs[\"fretboard5StringNut\"] = \"\\uE855\";\n    // U+E856  6-string fretboard\n    Glyphs[\"fretboard6String\"] = \"\\uE856\";\n    // U+E857  6-string fretboard at nut\n    Glyphs[\"fretboard6StringNut\"] = \"\\uE857\";\n    // U+E858  Fingered fret (filled circle)\n    Glyphs[\"fretboardFilledCircle\"] = \"\\uE858\";\n    // U+E85A  Open string (O)\n    Glyphs[\"fretboardO\"] = \"\\uE85A\";\n    // U+E859  String not played (X)\n    Glyphs[\"fretboardX\"] = \"\\uE859\";\n    // U+EA93  Function theory angle bracket left\n    Glyphs[\"functionAngleLeft\"] = \"\\uEA93\";\n    // U+EA94  Function theory angle bracket right\n    Glyphs[\"functionAngleRight\"] = \"\\uEA94\";\n    // U+EA8F  Function theory bracket left\n    Glyphs[\"functionBracketLeft\"] = \"\\uEA8F\";\n    // U+EA90  Function theory bracket right\n    Glyphs[\"functionBracketRight\"] = \"\\uEA90\";\n    // U+EA81  Function theory dominant of dominant\n    Glyphs[\"functionDD\"] = \"\\uEA81\";\n    // U+EA80  Function theory minor dominant\n    Glyphs[\"functionDLower\"] = \"\\uEA80\";\n    // U+EA7F  Function theory major dominant\n    Glyphs[\"functionDUpper\"] = \"\\uEA7F\";\n    // U+EA78  Function theory 8\n    Glyphs[\"functionEight\"] = \"\\uEA78\";\n    // U+EA99  Function theory F\n    Glyphs[\"functionFUpper\"] = \"\\uEA99\";\n    // U+EA75  Function theory 5\n    Glyphs[\"functionFive\"] = \"\\uEA75\";\n    // U+EA74  Function theory 4\n    Glyphs[\"functionFour\"] = \"\\uEA74\";\n    // U+EA84  Function theory g\n    Glyphs[\"functionGLower\"] = \"\\uEA84\";\n    // U+EA83  Function theory G\n    Glyphs[\"functionGUpper\"] = \"\\uEA83\";\n    // U+EA7C  Function theory greater than\n    Glyphs[\"functionGreaterThan\"] = \"\\uEA7C\";\n    // U+EA9B  Function theory i\n    Glyphs[\"functionILower\"] = \"\\uEA9B\";\n    // U+EA9A  Function theory I\n    Glyphs[\"functionIUpper\"] = \"\\uEA9A\";\n    // U+EA9D  Function theory k\n    Glyphs[\"functionKLower\"] = \"\\uEA9D\";\n    // U+EA9C  Function theory K\n    Glyphs[\"functionKUpper\"] = \"\\uEA9C\";\n    // U+EA9F  Function theory l\n    Glyphs[\"functionLLower\"] = \"\\uEA9F\";\n    // U+EA9E  Function theory L\n    Glyphs[\"functionLUpper\"] = \"\\uEA9E\";\n    // U+EA7A  Function theory less than\n    Glyphs[\"functionLessThan\"] = \"\\uEA7A\";\n    // U+ED01  Function theory m\n    Glyphs[\"functionMLower\"] = \"\\uED01\";\n    // U+ED00  Function theory M\n    Glyphs[\"functionMUpper\"] = \"\\uED00\";\n    // U+EA7B  Function theory minus\n    Glyphs[\"functionMinus\"] = \"\\uEA7B\";\n    // U+EA86  Function theory n\n    Glyphs[\"functionNLower\"] = \"\\uEA86\";\n    // U+EA85  Function theory N\n    Glyphs[\"functionNUpper\"] = \"\\uEA85\";\n    // U+ED02  Function theory superscript N\n    Glyphs[\"functionNUpperSuperscript\"] = \"\\uED02\";\n    // U+EA79  Function theory 9\n    Glyphs[\"functionNine\"] = \"\\uEA79\";\n    // U+EA71  Function theory 1\n    Glyphs[\"functionOne\"] = \"\\uEA71\";\n    // U+EA88  Function theory p\n    Glyphs[\"functionPLower\"] = \"\\uEA88\";\n    // U+EA87  Function theory P\n    Glyphs[\"functionPUpper\"] = \"\\uEA87\";\n    // U+EA91  Function theory parenthesis left\n    Glyphs[\"functionParensLeft\"] = \"\\uEA91\";\n    // U+EA92  Function theory parenthesis right\n    Glyphs[\"functionParensRight\"] = \"\\uEA92\";\n    // U+EA98  Function theory prefix plus\n    Glyphs[\"functionPlus\"] = \"\\uEA98\";\n    // U+ED03  Function theory r\n    Glyphs[\"functionRLower\"] = \"\\uED03\";\n    // U+EA95  Function theory repetition 1\n    Glyphs[\"functionRepetition1\"] = \"\\uEA95\";\n    // U+EA96  Function theory repetition 2\n    Glyphs[\"functionRepetition2\"] = \"\\uEA96\";\n    // U+EA97  Function theory prefix ring\n    Glyphs[\"functionRing\"] = \"\\uEA97\";\n    // U+EA8A  Function theory minor subdominant\n    Glyphs[\"functionSLower\"] = \"\\uEA8A\";\n    // U+EA7E  Function theory minor subdominant of subdominant\n    Glyphs[\"functionSSLower\"] = \"\\uEA7E\";\n    // U+EA7D  Function theory major subdominant of subdominant\n    Glyphs[\"functionSSUpper\"] = \"\\uEA7D\";\n    // U+EA89  Function theory major subdominant\n    Glyphs[\"functionSUpper\"] = \"\\uEA89\";\n    // U+EA77  Function theory 7\n    Glyphs[\"functionSeven\"] = \"\\uEA77\";\n    // U+EA76  Function theory 6\n    Glyphs[\"functionSix\"] = \"\\uEA76\";\n    // U+EA82  Function theory double dominant seventh\n    Glyphs[\"functionSlashedDD\"] = \"\\uEA82\";\n    // U+EA8C  Function theory minor tonic\n    Glyphs[\"functionTLower\"] = \"\\uEA8C\";\n    // U+EA8B  Function theory tonic\n    Glyphs[\"functionTUpper\"] = \"\\uEA8B\";\n    // U+EA73  Function theory 3\n    Glyphs[\"functionThree\"] = \"\\uEA73\";\n    // U+EA72  Function theory 2\n    Glyphs[\"functionTwo\"] = \"\\uEA72\";\n    // U+EA8E  Function theory v\n    Glyphs[\"functionVLower\"] = \"\\uEA8E\";\n    // U+EA8D  Function theory V\n    Glyphs[\"functionVUpper\"] = \"\\uEA8D\";\n    // U+EA70  Function theory 0\n    Glyphs[\"functionZero\"] = \"\\uEA70\";\n    // U+E050  G clef\n    Glyphs[\"gClef\"] = \"\\uE050\";\n    // U+E054  G clef quindicesima alta\n    Glyphs[\"gClef15ma\"] = \"\\uE054\";\n    // U+E051  G clef quindicesima bassa\n    Glyphs[\"gClef15mb\"] = \"\\uE051\";\n    // U+E053  G clef ottava alta\n    Glyphs[\"gClef8va\"] = \"\\uE053\";\n    // U+E052  G clef ottava bassa\n    Glyphs[\"gClef8vb\"] = \"\\uE052\";\n    // U+E056  G clef ottava bassa with C clef\n    Glyphs[\"gClef8vbCClef\"] = \"\\uE056\";\n    // U+E055  G clef ottava bassa (old style)\n    Glyphs[\"gClef8vbOld\"] = \"\\uE055\";\n    // U+E057  G clef, optionally ottava bassa\n    Glyphs[\"gClef8vbParens\"] = \"\\uE057\";\n    // U+E05B  G clef, arrow down\n    Glyphs[\"gClefArrowDown\"] = \"\\uE05B\";\n    // U+E05A  G clef, arrow up\n    Glyphs[\"gClefArrowUp\"] = \"\\uE05A\";\n    // U+E07A  G clef change\n    Glyphs[\"gClefChange\"] = \"\\uE07A\";\n    // U+E059  Combining G clef, number above\n    Glyphs[\"gClefLigatedNumberAbove\"] = \"\\uE059\";\n    // U+E058  Combining G clef, number below\n    Glyphs[\"gClefLigatedNumberBelow\"] = \"\\uE058\";\n    // U+E073  Reversed G clef\n    Glyphs[\"gClefReversed\"] = \"\\uE073\";\n    // U+E074  Turned G clef\n    Glyphs[\"gClefTurned\"] = \"\\uE074\";\n    // U+E586  Glissando down\n    Glyphs[\"glissandoDown\"] = \"\\uE586\";\n    // U+E585  Glissando up\n    Glyphs[\"glissandoUp\"] = \"\\uE585\";\n    // U+E561  Slashed grace note stem down\n    Glyphs[\"graceNoteAcciaccaturaStemDown\"] = \"\\uE561\";\n    // U+E560  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUp\"] = \"\\uE560\";\n    // U+E563  Grace note stem down\n    Glyphs[\"graceNoteAppoggiaturaStemDown\"] = \"\\uE563\";\n    // U+E562  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUp\"] = \"\\uE562\";\n    // U+E565  Slash for stem down grace note\n    Glyphs[\"graceNoteSlashStemDown\"] = \"\\uE565\";\n    // U+E564  Slash for stem up grace note\n    Glyphs[\"graceNoteSlashStemUp\"] = \"\\uE564\";\n    // U+E848  Full barré\n    Glyphs[\"guitarBarreFull\"] = \"\\uE848\";\n    // U+E849  Half barré\n    Glyphs[\"guitarBarreHalf\"] = \"\\uE849\";\n    // U+E83F  Closed wah/volume pedal\n    Glyphs[\"guitarClosePedal\"] = \"\\uE83F\";\n    // U+E843  Fade in\n    Glyphs[\"guitarFadeIn\"] = \"\\uE843\";\n    // U+E844  Fade out\n    Glyphs[\"guitarFadeOut\"] = \"\\uE844\";\n    // U+E842  Golpe (tapping the pick guard)\n    Glyphs[\"guitarGolpe\"] = \"\\uE842\";\n    // U+E83E  Half-open wah/volume pedal\n    Glyphs[\"guitarHalfOpenPedal\"] = \"\\uE83E\";\n    // U+E840  Left-hand tapping\n    Glyphs[\"guitarLeftHandTapping\"] = \"\\uE840\";\n    // U+E83D  Open wah/volume pedal\n    Glyphs[\"guitarOpenPedal\"] = \"\\uE83D\";\n    // U+E841  Right-hand tapping\n    Glyphs[\"guitarRightHandTapping\"] = \"\\uE841\";\n    // U+E832  Guitar shake\n    Glyphs[\"guitarShake\"] = \"\\uE832\";\n    // U+E833  String number 0\n    Glyphs[\"guitarString0\"] = \"\\uE833\";\n    // U+E834  String number 1\n    Glyphs[\"guitarString1\"] = \"\\uE834\";\n    // U+E84A  String number 10\n    Glyphs[\"guitarString10\"] = \"\\uE84A\";\n    // U+E84B  String number 11\n    Glyphs[\"guitarString11\"] = \"\\uE84B\";\n    // U+E84C  String number 12\n    Glyphs[\"guitarString12\"] = \"\\uE84C\";\n    // U+E84D  String number 13\n    Glyphs[\"guitarString13\"] = \"\\uE84D\";\n    // U+E835  String number 2\n    Glyphs[\"guitarString2\"] = \"\\uE835\";\n    // U+E836  String number 3\n    Glyphs[\"guitarString3\"] = \"\\uE836\";\n    // U+E837  String number 4\n    Glyphs[\"guitarString4\"] = \"\\uE837\";\n    // U+E838  String number 5\n    Glyphs[\"guitarString5\"] = \"\\uE838\";\n    // U+E839  String number 6\n    Glyphs[\"guitarString6\"] = \"\\uE839\";\n    // U+E83A  String number 7\n    Glyphs[\"guitarString7\"] = \"\\uE83A\";\n    // U+E83B  String number 8\n    Glyphs[\"guitarString8\"] = \"\\uE83B\";\n    // U+E83C  String number 9\n    Glyphs[\"guitarString9\"] = \"\\uE83C\";\n    // U+E847  Strum direction down\n    Glyphs[\"guitarStrumDown\"] = \"\\uE847\";\n    // U+E846  Strum direction up\n    Glyphs[\"guitarStrumUp\"] = \"\\uE846\";\n    // U+E831  Guitar vibrato bar dip\n    Glyphs[\"guitarVibratoBarDip\"] = \"\\uE831\";\n    // U+E830  Guitar vibrato bar scoop\n    Glyphs[\"guitarVibratoBarScoop\"] = \"\\uE830\";\n    // U+EAB2  Vibrato wiggle segment\n    Glyphs[\"guitarVibratoStroke\"] = \"\\uEAB2\";\n    // U+E845  Volume swell\n    Glyphs[\"guitarVolumeSwell\"] = \"\\uE845\";\n    // U+EAB3  Wide vibrato wiggle segment\n    Glyphs[\"guitarWideVibratoStroke\"] = \"\\uEAB3\";\n    // U+E81F  Belltree\n    Glyphs[\"handbellsBelltree\"] = \"\\uE81F\";\n    // U+E81E  Damp 3\n    Glyphs[\"handbellsDamp3\"] = \"\\uE81E\";\n    // U+E81B  Echo\n    Glyphs[\"handbellsEcho1\"] = \"\\uE81B\";\n    // U+E81C  Echo 2\n    Glyphs[\"handbellsEcho2\"] = \"\\uE81C\";\n    // U+E81D  Gyro\n    Glyphs[\"handbellsGyro\"] = \"\\uE81D\";\n    // U+E812  Hand martellato\n    Glyphs[\"handbellsHandMartellato\"] = \"\\uE812\";\n    // U+E815  Mallet, bell on table\n    Glyphs[\"handbellsMalletBellOnTable\"] = \"\\uE815\";\n    // U+E814  Mallet, bell suspended\n    Glyphs[\"handbellsMalletBellSuspended\"] = \"\\uE814\";\n    // U+E816  Mallet lift\n    Glyphs[\"handbellsMalletLft\"] = \"\\uE816\";\n    // U+E810  Martellato\n    Glyphs[\"handbellsMartellato\"] = \"\\uE810\";\n    // U+E811  Martellato lift\n    Glyphs[\"handbellsMartellatoLift\"] = \"\\uE811\";\n    // U+E813  Muted martellato\n    Glyphs[\"handbellsMutedMartellato\"] = \"\\uE813\";\n    // U+E817  Pluck lift\n    Glyphs[\"handbellsPluckLift\"] = \"\\uE817\";\n    // U+E81A  Swing\n    Glyphs[\"handbellsSwing\"] = \"\\uE81A\";\n    // U+E819  Swing down\n    Glyphs[\"handbellsSwingDown\"] = \"\\uE819\";\n    // U+E818  Swing up\n    Glyphs[\"handbellsSwingUp\"] = \"\\uE818\";\n    // U+E821  Table pair of handbells\n    Glyphs[\"handbellsTablePairBells\"] = \"\\uE821\";\n    // U+E820  Table single handbell\n    Glyphs[\"handbellsTableSingleBell\"] = \"\\uE820\";\n    // U+E68F  Metal rod pictogram\n    Glyphs[\"harpMetalRod\"] = \"\\uE68F\";\n    // U+E681  Harp pedal centered (natural)\n    Glyphs[\"harpPedalCentered\"] = \"\\uE681\";\n    // U+E683  Harp pedal divider\n    Glyphs[\"harpPedalDivider\"] = \"\\uE683\";\n    // U+E682  Harp pedal lowered (sharp)\n    Glyphs[\"harpPedalLowered\"] = \"\\uE682\";\n    // U+E680  Harp pedal raised (flat)\n    Glyphs[\"harpPedalRaised\"] = \"\\uE680\";\n    // U+E695  Ascending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianAscending\"] = \"\\uE695\";\n    // U+E696  Descending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianDescending\"] = \"\\uE696\";\n    // U+E69A  Damp above (Salzedo)\n    Glyphs[\"harpSalzedoDampAbove\"] = \"\\uE69A\";\n    // U+E699  Damp below (Salzedo)\n    Glyphs[\"harpSalzedoDampBelow\"] = \"\\uE699\";\n    // U+E698  Damp with both hands (Salzedo)\n    Glyphs[\"harpSalzedoDampBothHands\"] = \"\\uE698\";\n    // U+E697  Damp only low strings (Salzedo)\n    Glyphs[\"harpSalzedoDampLowStrings\"] = \"\\uE697\";\n    // U+E68D  Fluidic sounds, left hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsLeft\"] = \"\\uE68D\";\n    // U+E68E  Fluidic sounds, right hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsRight\"] = \"\\uE68E\";\n    // U+E69C  Isolated sounds (Salzedo)\n    Glyphs[\"harpSalzedoIsolatedSounds\"] = \"\\uE69C\";\n    // U+E688  Metallic sounds (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSounds\"] = \"\\uE688\";\n    // U+E69B  Metallic sounds, one string (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSoundsOneString\"] = \"\\uE69B\";\n    // U+E68C  Muffle totally (Salzedo)\n    Glyphs[\"harpSalzedoMuffleTotally\"] = \"\\uE68C\";\n    // U+E685  Oboic flux (Salzedo)\n    Glyphs[\"harpSalzedoOboicFlux\"] = \"\\uE685\";\n    // U+E68A  Play at upper end of strings (Salzedo)\n    Glyphs[\"harpSalzedoPlayUpperEnd\"] = \"\\uE68A\";\n    // U+E684  Slide with suppleness (Salzedo)\n    Glyphs[\"harpSalzedoSlideWithSuppleness\"] = \"\\uE684\";\n    // U+E69D  Snare drum effect (Salzedo)\n    Glyphs[\"harpSalzedoSnareDrum\"] = \"\\uE69D\";\n    // U+E689  Tam-tam sounds (Salzedo)\n    Glyphs[\"harpSalzedoTamTamSounds\"] = \"\\uE689\";\n    // U+E686  Thunder effect (Salzedo)\n    Glyphs[\"harpSalzedoThunderEffect\"] = \"\\uE686\";\n    // U+E68B  Timpanic sounds (Salzedo)\n    Glyphs[\"harpSalzedoTimpanicSounds\"] = \"\\uE68B\";\n    // U+E687  Whistling sounds (Salzedo)\n    Glyphs[\"harpSalzedoWhistlingSounds\"] = \"\\uE687\";\n    // U+E694  Combining string noise for stem\n    Glyphs[\"harpStringNoiseStem\"] = \"\\uE694\";\n    // U+E690  Tuning key pictogram\n    Glyphs[\"harpTuningKey\"] = \"\\uE690\";\n    // U+E693  Retune strings for glissando\n    Glyphs[\"harpTuningKeyGlissando\"] = \"\\uE693\";\n    // U+E691  Use handle of tuning key pictogram\n    Glyphs[\"harpTuningKeyHandle\"] = \"\\uE691\";\n    // U+E692  Use shank of tuning key pictogram\n    Glyphs[\"harpTuningKeyShank\"] = \"\\uE692\";\n    // U+ED70  Indian drum clef\n    Glyphs[\"indianDrumClef\"] = \"\\uED70\";\n    // U+EDE2  Back-chug\n    Glyphs[\"kahnBackChug\"] = \"\\uEDE2\";\n    // U+EDD8  Back-flap\n    Glyphs[\"kahnBackFlap\"] = \"\\uEDD8\";\n    // U+EDE1  Back-riff\n    Glyphs[\"kahnBackRiff\"] = \"\\uEDE1\";\n    // U+EDDA  Back-rip\n    Glyphs[\"kahnBackRip\"] = \"\\uEDDA\";\n    // U+EDC6  Ball-change\n    Glyphs[\"kahnBallChange\"] = \"\\uEDC6\";\n    // U+EDCD  Ball-dig\n    Glyphs[\"kahnBallDig\"] = \"\\uEDCD\";\n    // U+EDA7  Brush-backward\n    Glyphs[\"kahnBrushBackward\"] = \"\\uEDA7\";\n    // U+EDA6  Brush-forward\n    Glyphs[\"kahnBrushForward\"] = \"\\uEDA6\";\n    // U+EDDD  Chug\n    Glyphs[\"kahnChug\"] = \"\\uEDDD\";\n    // U+EDB8  Clap\n    Glyphs[\"kahnClap\"] = \"\\uEDB8\";\n    // U+EDBA  Double-snap\n    Glyphs[\"kahnDoubleSnap\"] = \"\\uEDBA\";\n    // U+EDEB  Double-wing\n    Glyphs[\"kahnDoubleWing\"] = \"\\uEDEB\";\n    // U+EDB2  Draw-step\n    Glyphs[\"kahnDrawStep\"] = \"\\uEDB2\";\n    // U+EDB3  Draw-tap\n    Glyphs[\"kahnDrawTap\"] = \"\\uEDB3\";\n    // U+EDCF  Flam\n    Glyphs[\"kahnFlam\"] = \"\\uEDCF\";\n    // U+EDD5  Flap\n    Glyphs[\"kahnFlap\"] = \"\\uEDD5\";\n    // U+EDD7  Flap-step\n    Glyphs[\"kahnFlapStep\"] = \"\\uEDD7\";\n    // U+EDA9  Flat\n    Glyphs[\"kahnFlat\"] = \"\\uEDA9\";\n    // U+EDB0  Flea-hop\n    Glyphs[\"kahnFleaHop\"] = \"\\uEDB0\";\n    // U+EDB1  Flea-tap\n    Glyphs[\"kahnFleaTap\"] = \"\\uEDB1\";\n    // U+EDA8  Grace-tap\n    Glyphs[\"kahnGraceTap\"] = \"\\uEDA8\";\n    // U+EDD1  Grace-tap-change\n    Glyphs[\"kahnGraceTapChange\"] = \"\\uEDD1\";\n    // U+EDD0  Grace-tap-hop\n    Glyphs[\"kahnGraceTapHop\"] = \"\\uEDD0\";\n    // U+EDD3  Grace-tap-stamp\n    Glyphs[\"kahnGraceTapStamp\"] = \"\\uEDD3\";\n    // U+EDAA  Heel\n    Glyphs[\"kahnHeel\"] = \"\\uEDAA\";\n    // U+EDC9  Heel-change\n    Glyphs[\"kahnHeelChange\"] = \"\\uEDC9\";\n    // U+EDBB  Heel-click\n    Glyphs[\"kahnHeelClick\"] = \"\\uEDBB\";\n    // U+EDB6  Heel-drop\n    Glyphs[\"kahnHeelDrop\"] = \"\\uEDB6\";\n    // U+EDC4  Heel-step\n    Glyphs[\"kahnHeelStep\"] = \"\\uEDC4\";\n    // U+EDCB  Heel-tap\n    Glyphs[\"kahnHeelTap\"] = \"\\uEDCB\";\n    // U+EDA2  Hop\n    Glyphs[\"kahnHop\"] = \"\\uEDA2\";\n    // U+EDA5  Jump-apart\n    Glyphs[\"kahnJumpApart\"] = \"\\uEDA5\";\n    // U+EDA4  Jump-together\n    Glyphs[\"kahnJumpTogether\"] = \"\\uEDA4\";\n    // U+EDAD  Knee-inward\n    Glyphs[\"kahnKneeInward\"] = \"\\uEDAD\";\n    // U+EDAC  Knee-outward\n    Glyphs[\"kahnKneeOutward\"] = \"\\uEDAC\";\n    // U+EDA3  Leap\n    Glyphs[\"kahnLeap\"] = \"\\uEDA3\";\n    // U+EDD2  Leap-flat-foot\n    Glyphs[\"kahnLeapFlatFoot\"] = \"\\uEDD2\";\n    // U+EDD4  Leap-heel-click\n    Glyphs[\"kahnLeapHeelClick\"] = \"\\uEDD4\";\n    // U+EDBF  Left-catch\n    Glyphs[\"kahnLeftCatch\"] = \"\\uEDBF\";\n    // U+EDBD  Left-cross\n    Glyphs[\"kahnLeftCross\"] = \"\\uEDBD\";\n    // U+EDEE  Left-foot\n    Glyphs[\"kahnLeftFoot\"] = \"\\uEDEE\";\n    // U+EDC1  Left-toe-strike\n    Glyphs[\"kahnLeftToeStrike\"] = \"\\uEDC1\";\n    // U+EDF0  Left-turn\n    Glyphs[\"kahnLeftTurn\"] = \"\\uEDF0\";\n    // U+EDEC  Over-the-top\n    Glyphs[\"kahnOverTheTop\"] = \"\\uEDEC\";\n    // U+EDED  Over-the-top-tap\n    Glyphs[\"kahnOverTheTopTap\"] = \"\\uEDED\";\n    // U+EDE3  Pull\n    Glyphs[\"kahnPull\"] = \"\\uEDE3\";\n    // U+EDDE  Push\n    Glyphs[\"kahnPush\"] = \"\\uEDDE\";\n    // U+EDE0  Riff\n    Glyphs[\"kahnRiff\"] = \"\\uEDE0\";\n    // U+EDE7  Riffle\n    Glyphs[\"kahnRiffle\"] = \"\\uEDE7\";\n    // U+EDC0  Right-catch\n    Glyphs[\"kahnRightCatch\"] = \"\\uEDC0\";\n    // U+EDBE  Right-cross\n    Glyphs[\"kahnRightCross\"] = \"\\uEDBE\";\n    // U+EDEF  Right-foot\n    Glyphs[\"kahnRightFoot\"] = \"\\uEDEF\";\n    // U+EDC2  Right-toe-strike\n    Glyphs[\"kahnRightToeStrike\"] = \"\\uEDC2\";\n    // U+EDF1  Right-turn\n    Glyphs[\"kahnRightTurn\"] = \"\\uEDF1\";\n    // U+EDD6  Rip\n    Glyphs[\"kahnRip\"] = \"\\uEDD6\";\n    // U+EDE8  Ripple\n    Glyphs[\"kahnRipple\"] = \"\\uEDE8\";\n    // U+EDAE  Scrape\n    Glyphs[\"kahnScrape\"] = \"\\uEDAE\";\n    // U+EDDC  Scuff\n    Glyphs[\"kahnScuff\"] = \"\\uEDDC\";\n    // U+EDE6  Scuffle\n    Glyphs[\"kahnScuffle\"] = \"\\uEDE6\";\n    // U+EDE5  Shuffle\n    Glyphs[\"kahnShuffle\"] = \"\\uEDE5\";\n    // U+EDCE  Slam\n    Glyphs[\"kahnSlam\"] = \"\\uEDCE\";\n    // U+EDD9  Slap\n    Glyphs[\"kahnSlap\"] = \"\\uEDD9\";\n    // U+EDB4  Slide-step\n    Glyphs[\"kahnSlideStep\"] = \"\\uEDB4\";\n    // U+EDB5  Slide-tap\n    Glyphs[\"kahnSlideTap\"] = \"\\uEDB5\";\n    // U+EDB9  Snap\n    Glyphs[\"kahnSnap\"] = \"\\uEDB9\";\n    // U+EDC3  Stamp\n    Glyphs[\"kahnStamp\"] = \"\\uEDC3\";\n    // U+EDC8  Stamp-stamp\n    Glyphs[\"kahnStampStamp\"] = \"\\uEDC8\";\n    // U+EDA0  Step\n    Glyphs[\"kahnStep\"] = \"\\uEDA0\";\n    // U+EDC7  Step-stamp\n    Glyphs[\"kahnStepStamp\"] = \"\\uEDC7\";\n    // U+EDCA  Stomp\n    Glyphs[\"kahnStomp\"] = \"\\uEDCA\";\n    // U+EDDB  Stomp-brush\n    Glyphs[\"kahnStompBrush\"] = \"\\uEDDB\";\n    // U+EDA1  Tap\n    Glyphs[\"kahnTap\"] = \"\\uEDA1\";\n    // U+EDAB  Toe\n    Glyphs[\"kahnToe\"] = \"\\uEDAB\";\n    // U+EDBC  Toe-click\n    Glyphs[\"kahnToeClick\"] = \"\\uEDBC\";\n    // U+EDB7  Toe-drop\n    Glyphs[\"kahnToeDrop\"] = \"\\uEDB7\";\n    // U+EDC5  Toe-step\n    Glyphs[\"kahnToeStep\"] = \"\\uEDC5\";\n    // U+EDCC  Toe-tap\n    Glyphs[\"kahnToeTap\"] = \"\\uEDCC\";\n    // U+EDAF  Trench\n    Glyphs[\"kahnTrench\"] = \"\\uEDAF\";\n    // U+EDE9  Wing\n    Glyphs[\"kahnWing\"] = \"\\uEDE9\";\n    // U+EDEA  Wing-change\n    Glyphs[\"kahnWingChange\"] = \"\\uEDEA\";\n    // U+EDE4  Zank\n    Glyphs[\"kahnZank\"] = \"\\uEDE4\";\n    // U+EDDF  Zink\n    Glyphs[\"kahnZink\"] = \"\\uEDDF\";\n    // U+E668  Clavichord bebung, 2 finger movements (above)\n    Glyphs[\"keyboardBebung2DotsAbove\"] = \"\\uE668\";\n    // U+E669  Clavichord bebung, 2 finger movements (below)\n    Glyphs[\"keyboardBebung2DotsBelow\"] = \"\\uE669\";\n    // U+E66A  Clavichord bebung, 3 finger movements (above)\n    Glyphs[\"keyboardBebung3DotsAbove\"] = \"\\uE66A\";\n    // U+E66B  Clavichord bebung, 3 finger movements (below)\n    Glyphs[\"keyboardBebung3DotsBelow\"] = \"\\uE66B\";\n    // U+E66C  Clavichord bebung, 4 finger movements (above)\n    Glyphs[\"keyboardBebung4DotsAbove\"] = \"\\uE66C\";\n    // U+E66D  Clavichord bebung, 4 finger movements (below)\n    Glyphs[\"keyboardBebung4DotsBelow\"] = \"\\uE66D\";\n    // U+E65E  Left pedal pictogram\n    Glyphs[\"keyboardLeftPedalPictogram\"] = \"\\uE65E\";\n    // U+E65F  Middle pedal pictogram\n    Glyphs[\"keyboardMiddlePedalPictogram\"] = \"\\uE65F\";\n    // U+E653  Pedal d\n    Glyphs[\"keyboardPedalD\"] = \"\\uE653\";\n    // U+E654  Pedal dot\n    Glyphs[\"keyboardPedalDot\"] = \"\\uE654\";\n    // U+E652  Pedal e\n    Glyphs[\"keyboardPedalE\"] = \"\\uE652\";\n    // U+E656  Half-pedal mark\n    Glyphs[\"keyboardPedalHalf\"] = \"\\uE656\";\n    // U+E65B  Half pedal mark 1\n    Glyphs[\"keyboardPedalHalf2\"] = \"\\uE65B\";\n    // U+E65C  Half pedal mark 2\n    Glyphs[\"keyboardPedalHalf3\"] = \"\\uE65C\";\n    // U+E661  Pedal heel 1\n    Glyphs[\"keyboardPedalHeel1\"] = \"\\uE661\";\n    // U+E662  Pedal heel 2\n    Glyphs[\"keyboardPedalHeel2\"] = \"\\uE662\";\n    // U+E663  Pedal heel 3 (Davis)\n    Glyphs[\"keyboardPedalHeel3\"] = \"\\uE663\";\n    // U+E674  Pedal heel to toe\n    Glyphs[\"keyboardPedalHeelToToe\"] = \"\\uE674\";\n    // U+E666  Pedal heel or toe\n    Glyphs[\"keyboardPedalHeelToe\"] = \"\\uE666\";\n    // U+E673  Pedal hook end\n    Glyphs[\"keyboardPedalHookEnd\"] = \"\\uE673\";\n    // U+E672  Pedal hook start\n    Glyphs[\"keyboardPedalHookStart\"] = \"\\uE672\";\n    // U+E658  Pedal hyphen\n    Glyphs[\"keyboardPedalHyphen\"] = \"\\uE658\";\n    // U+E651  Pedal P\n    Glyphs[\"keyboardPedalP\"] = \"\\uE651\";\n    // U+E676  Left parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensLeft\"] = \"\\uE676\";\n    // U+E677  Right parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensRight\"] = \"\\uE677\";\n    // U+E650  Pedal mark\n    Glyphs[\"keyboardPedalPed\"] = \"\\uE650\";\n    // U+E65A  Pedal S\n    Glyphs[\"keyboardPedalS\"] = \"\\uE65A\";\n    // U+E659  Sostenuto pedal mark\n    Glyphs[\"keyboardPedalSost\"] = \"\\uE659\";\n    // U+E664  Pedal toe 1\n    Glyphs[\"keyboardPedalToe1\"] = \"\\uE664\";\n    // U+E665  Pedal toe 2\n    Glyphs[\"keyboardPedalToe2\"] = \"\\uE665\";\n    // U+E675  Pedal toe to heel\n    Glyphs[\"keyboardPedalToeToHeel\"] = \"\\uE675\";\n    // U+E655  Pedal up mark\n    Glyphs[\"keyboardPedalUp\"] = \"\\uE655\";\n    // U+E657  Pedal up notch\n    Glyphs[\"keyboardPedalUpNotch\"] = \"\\uE657\";\n    // U+E65D  Pedal up special\n    Glyphs[\"keyboardPedalUpSpecial\"] = \"\\uE65D\";\n    // U+E670  Play with left hand\n    Glyphs[\"keyboardPlayWithLH\"] = \"\\uE670\";\n    // U+E671  Play with left hand (end)\n    Glyphs[\"keyboardPlayWithLHEnd\"] = \"\\uE671\";\n    // U+E66E  Play with right hand\n    Glyphs[\"keyboardPlayWithRH\"] = \"\\uE66E\";\n    // U+E66F  Play with right hand (end)\n    Glyphs[\"keyboardPlayWithRHEnd\"] = \"\\uE66F\";\n    // U+E667  Pluck strings inside piano (Maderna)\n    Glyphs[\"keyboardPluckInside\"] = \"\\uE667\";\n    // U+E660  Right pedal pictogram\n    Glyphs[\"keyboardRightPedalPictogram\"] = \"\\uE660\";\n    // U+EC3E  Kievan flat\n    Glyphs[\"kievanAccidentalFlat\"] = \"\\uEC3E\";\n    // U+EC3D  Kievan sharp\n    Glyphs[\"kievanAccidentalSharp\"] = \"\\uEC3D\";\n    // U+EC3C  Kievan augmentation dot\n    Glyphs[\"kievanAugmentationDot\"] = \"\\uEC3C\";\n    // U+EC30  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClef\"] = \"\\uEC30\";\n    // U+EC31  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbol\"] = \"\\uEC31\";\n    // U+EC3A  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDown\"] = \"\\uEC3A\";\n    // U+EC39  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUp\"] = \"\\uEC39\";\n    // U+EC3B  Kievan beam\n    Glyphs[\"kievanNoteBeam\"] = \"\\uEC3B\";\n    // U+EC35  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLine\"] = \"\\uEC35\";\n    // U+EC36  Kievan half note (in staff space)\n    Glyphs[\"kievanNoteHalfStaffSpace\"] = \"\\uEC36\";\n    // U+EC38  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDown\"] = \"\\uEC38\";\n    // U+EC37  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUp\"] = \"\\uEC37\";\n    // U+EC32  Kievan reciting note\n    Glyphs[\"kievanNoteReciting\"] = \"\\uEC32\";\n    // U+EC33  Kievan whole note\n    Glyphs[\"kievanNoteWhole\"] = \"\\uEC33\";\n    // U+EC34  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinal\"] = \"\\uEC34\";\n    // U+EC40  Do hand sign\n    Glyphs[\"kodalyHandDo\"] = \"\\uEC40\";\n    // U+EC43  Fa hand sign\n    Glyphs[\"kodalyHandFa\"] = \"\\uEC43\";\n    // U+EC45  La hand sign\n    Glyphs[\"kodalyHandLa\"] = \"\\uEC45\";\n    // U+EC42  Mi hand sign\n    Glyphs[\"kodalyHandMi\"] = \"\\uEC42\";\n    // U+EC41  Re hand sign\n    Glyphs[\"kodalyHandRe\"] = \"\\uEC41\";\n    // U+EC44  So hand sign\n    Glyphs[\"kodalyHandSo\"] = \"\\uEC44\";\n    // U+EC46  Ti hand sign\n    Glyphs[\"kodalyHandTi\"] = \"\\uEC46\";\n    // U+E04C  Left repeat sign within bar\n    Glyphs[\"leftRepeatSmall\"] = \"\\uE04C\";\n    // U+E022  Leger line\n    Glyphs[\"legerLine\"] = \"\\uE022\";\n    // U+E024  Leger line (narrow)\n    Glyphs[\"legerLineNarrow\"] = \"\\uE024\";\n    // U+E023  Leger line (wide)\n    Glyphs[\"legerLineWide\"] = \"\\uE023\";\n    // U+EBA4  Lute tablature end repeat barline\n    Glyphs[\"luteBarlineEndRepeat\"] = \"\\uEBA4\";\n    // U+EBA5  Lute tablature final barline\n    Glyphs[\"luteBarlineFinal\"] = \"\\uEBA5\";\n    // U+EBA3  Lute tablature start repeat barline\n    Glyphs[\"luteBarlineStartRepeat\"] = \"\\uEBA3\";\n    // U+EBAB  16th note (semiquaver) duration sign\n    Glyphs[\"luteDuration16th\"] = \"\\uEBAB\";\n    // U+EBAC  32nd note (demisemiquaver) duration sign\n    Glyphs[\"luteDuration32nd\"] = \"\\uEBAC\";\n    // U+EBAA  Eighth note (quaver) duration sign\n    Glyphs[\"luteDuration8th\"] = \"\\uEBAA\";\n    // U+EBA6  Double whole note (breve) duration sign\n    Glyphs[\"luteDurationDoubleWhole\"] = \"\\uEBA6\";\n    // U+EBA8  Half note (minim) duration sign\n    Glyphs[\"luteDurationHalf\"] = \"\\uEBA8\";\n    // U+EBA9  Quarter note (crotchet) duration sign\n    Glyphs[\"luteDurationQuarter\"] = \"\\uEBA9\";\n    // U+EBA7  Whole note (semibreve) duration sign\n    Glyphs[\"luteDurationWhole\"] = \"\\uEBA7\";\n    // U+EBAE  Right-hand fingering, first finger\n    Glyphs[\"luteFingeringRHFirst\"] = \"\\uEBAE\";\n    // U+EBAF  Right-hand fingering, second finger\n    Glyphs[\"luteFingeringRHSecond\"] = \"\\uEBAF\";\n    // U+EBB0  Right-hand fingering, third finger\n    Glyphs[\"luteFingeringRHThird\"] = \"\\uEBB0\";\n    // U+EBAD  Right-hand fingering, thumb\n    Glyphs[\"luteFingeringRHThumb\"] = \"\\uEBAD\";\n    // U+EBD0  10th course (diapason)\n    Glyphs[\"luteFrench10thCourse\"] = \"\\uEBD0\";\n    // U+EBCD  Seventh course (diapason)\n    Glyphs[\"luteFrench7thCourse\"] = \"\\uEBCD\";\n    // U+EBCE  Eighth course (diapason)\n    Glyphs[\"luteFrench8thCourse\"] = \"\\uEBCE\";\n    // U+EBCF  Ninth course (diapason)\n    Glyphs[\"luteFrench9thCourse\"] = \"\\uEBCF\";\n    // U+EBD5  Appoggiatura from above\n    Glyphs[\"luteFrenchAppoggiaturaAbove\"] = \"\\uEBD5\";\n    // U+EBD4  Appoggiatura from below\n    Glyphs[\"luteFrenchAppoggiaturaBelow\"] = \"\\uEBD4\";\n    // U+EBC0  Open string (a)\n    Glyphs[\"luteFrenchFretA\"] = \"\\uEBC0\";\n    // U+EBC1  First fret (b)\n    Glyphs[\"luteFrenchFretB\"] = \"\\uEBC1\";\n    // U+EBC2  Second fret (c)\n    Glyphs[\"luteFrenchFretC\"] = \"\\uEBC2\";\n    // U+EBC3  Third fret (d)\n    Glyphs[\"luteFrenchFretD\"] = \"\\uEBC3\";\n    // U+EBC4  Fourth fret (e)\n    Glyphs[\"luteFrenchFretE\"] = \"\\uEBC4\";\n    // U+EBC5  Fifth fret (f)\n    Glyphs[\"luteFrenchFretF\"] = \"\\uEBC5\";\n    // U+EBC6  Sixth fret (g)\n    Glyphs[\"luteFrenchFretG\"] = \"\\uEBC6\";\n    // U+EBC7  Seventh fret (h)\n    Glyphs[\"luteFrenchFretH\"] = \"\\uEBC7\";\n    // U+EBC8  Eighth fret (i)\n    Glyphs[\"luteFrenchFretI\"] = \"\\uEBC8\";\n    // U+EBC9  Ninth fret (k)\n    Glyphs[\"luteFrenchFretK\"] = \"\\uEBC9\";\n    // U+EBCA  10th fret (l)\n    Glyphs[\"luteFrenchFretL\"] = \"\\uEBCA\";\n    // U+EBCB  11th fret (m)\n    Glyphs[\"luteFrenchFretM\"] = \"\\uEBCB\";\n    // U+EBCC  12th fret (n)\n    Glyphs[\"luteFrenchFretN\"] = \"\\uEBCC\";\n    // U+EBD3  Inverted mordent\n    Glyphs[\"luteFrenchMordentInverted\"] = \"\\uEBD3\";\n    // U+EBD2  Mordent with lower auxiliary\n    Glyphs[\"luteFrenchMordentLower\"] = \"\\uEBD2\";\n    // U+EBD1  Mordent with upper auxiliary\n    Glyphs[\"luteFrenchMordentUpper\"] = \"\\uEBD1\";\n    // U+EC00  5th course, 1st fret (a)\n    Glyphs[\"luteGermanALower\"] = \"\\uEC00\";\n    // U+EC17  6th course, 1st fret (A)\n    Glyphs[\"luteGermanAUpper\"] = \"\\uEC17\";\n    // U+EC01  4th course, 1st fret (b)\n    Glyphs[\"luteGermanBLower\"] = \"\\uEC01\";\n    // U+EC18  6th course, 2nd fret (B)\n    Glyphs[\"luteGermanBUpper\"] = \"\\uEC18\";\n    // U+EC02  3rd course, 1st fret (c)\n    Glyphs[\"luteGermanCLower\"] = \"\\uEC02\";\n    // U+EC19  6th course, 3rd fret (C)\n    Glyphs[\"luteGermanCUpper\"] = \"\\uEC19\";\n    // U+EC03  2nd course, 1st fret (d)\n    Glyphs[\"luteGermanDLower\"] = \"\\uEC03\";\n    // U+EC1A  6th course, 4th fret (D)\n    Glyphs[\"luteGermanDUpper\"] = \"\\uEC1A\";\n    // U+EC04  1st course, 1st fret (e)\n    Glyphs[\"luteGermanELower\"] = \"\\uEC04\";\n    // U+EC1B  6th course, 5th fret (E)\n    Glyphs[\"luteGermanEUpper\"] = \"\\uEC1B\";\n    // U+EC05  5th course, 2nd fret (f)\n    Glyphs[\"luteGermanFLower\"] = \"\\uEC05\";\n    // U+EC1C  6th course, 6th fret (F)\n    Glyphs[\"luteGermanFUpper\"] = \"\\uEC1C\";\n    // U+EC06  4th course, 2nd fret (g)\n    Glyphs[\"luteGermanGLower\"] = \"\\uEC06\";\n    // U+EC1D  6th course, 7th fret (G)\n    Glyphs[\"luteGermanGUpper\"] = \"\\uEC1D\";\n    // U+EC07  3rd course, 2nd fret (h)\n    Glyphs[\"luteGermanHLower\"] = \"\\uEC07\";\n    // U+EC1E  6th course, 8th fret (H)\n    Glyphs[\"luteGermanHUpper\"] = \"\\uEC1E\";\n    // U+EC08  2nd course, 2nd fret (i)\n    Glyphs[\"luteGermanILower\"] = \"\\uEC08\";\n    // U+EC1F  6th course, 9th fret (I)\n    Glyphs[\"luteGermanIUpper\"] = \"\\uEC1F\";\n    // U+EC09  1st course, 2nd fret (k)\n    Glyphs[\"luteGermanKLower\"] = \"\\uEC09\";\n    // U+EC20  6th course, 10th fret (K)\n    Glyphs[\"luteGermanKUpper\"] = \"\\uEC20\";\n    // U+EC0A  5th course, 3rd fret (l)\n    Glyphs[\"luteGermanLLower\"] = \"\\uEC0A\";\n    // U+EC21  6th course, 11th fret (L)\n    Glyphs[\"luteGermanLUpper\"] = \"\\uEC21\";\n    // U+EC0B  4th course, 3rd fret (m)\n    Glyphs[\"luteGermanMLower\"] = \"\\uEC0B\";\n    // U+EC22  6th course, 12th fret (M)\n    Glyphs[\"luteGermanMUpper\"] = \"\\uEC22\";\n    // U+EC0C  3rd course, 3rd fret (n)\n    Glyphs[\"luteGermanNLower\"] = \"\\uEC0C\";\n    // U+EC23  6th course, 13th fret (N)\n    Glyphs[\"luteGermanNUpper\"] = \"\\uEC23\";\n    // U+EC0D  2nd course, 3rd fret (o)\n    Glyphs[\"luteGermanOLower\"] = \"\\uEC0D\";\n    // U+EC0E  1st course, 3rd fret (p)\n    Glyphs[\"luteGermanPLower\"] = \"\\uEC0E\";\n    // U+EC0F  5th course, 4th fret (q)\n    Glyphs[\"luteGermanQLower\"] = \"\\uEC0F\";\n    // U+EC10  4th course, 4th fret (r)\n    Glyphs[\"luteGermanRLower\"] = \"\\uEC10\";\n    // U+EC11  3rd course, 4th fret (s)\n    Glyphs[\"luteGermanSLower\"] = \"\\uEC11\";\n    // U+EC12  2nd course, 4th fret (t)\n    Glyphs[\"luteGermanTLower\"] = \"\\uEC12\";\n    // U+EC13  1st course, 4th fret (v)\n    Glyphs[\"luteGermanVLower\"] = \"\\uEC13\";\n    // U+EC14  5th course, 5th fret (x)\n    Glyphs[\"luteGermanXLower\"] = \"\\uEC14\";\n    // U+EC15  4th course, 5th fret (y)\n    Glyphs[\"luteGermanYLower\"] = \"\\uEC15\";\n    // U+EC16  3rd course, 5th fret (z)\n    Glyphs[\"luteGermanZLower\"] = \"\\uEC16\";\n    // U+EBF1  C sol fa ut clef\n    Glyphs[\"luteItalianClefCSolFaUt\"] = \"\\uEBF1\";\n    // U+EBF0  F fa ut clef\n    Glyphs[\"luteItalianClefFFaUt\"] = \"\\uEBF0\";\n    // U+EBE0  Open string (0)\n    Glyphs[\"luteItalianFret0\"] = \"\\uEBE0\";\n    // U+EBE1  First fret (1)\n    Glyphs[\"luteItalianFret1\"] = \"\\uEBE1\";\n    // U+EBE2  Second fret (2)\n    Glyphs[\"luteItalianFret2\"] = \"\\uEBE2\";\n    // U+EBE3  Third fret (3)\n    Glyphs[\"luteItalianFret3\"] = \"\\uEBE3\";\n    // U+EBE4  Fourth fret (4)\n    Glyphs[\"luteItalianFret4\"] = \"\\uEBE4\";\n    // U+EBE5  Fifth fret (5)\n    Glyphs[\"luteItalianFret5\"] = \"\\uEBE5\";\n    // U+EBE6  Sixth fret (6)\n    Glyphs[\"luteItalianFret6\"] = \"\\uEBE6\";\n    // U+EBE7  Seventh fret (7)\n    Glyphs[\"luteItalianFret7\"] = \"\\uEBE7\";\n    // U+EBE8  Eighth fret (8)\n    Glyphs[\"luteItalianFret8\"] = \"\\uEBE8\";\n    // U+EBE9  Ninth fret (9)\n    Glyphs[\"luteItalianFret9\"] = \"\\uEBE9\";\n    // U+EBF4  Hold finger in place\n    Glyphs[\"luteItalianHoldFinger\"] = \"\\uEBF4\";\n    // U+EBF3  Hold note\n    Glyphs[\"luteItalianHoldNote\"] = \"\\uEBF3\";\n    // U+EBF5  Release finger\n    Glyphs[\"luteItalianReleaseFinger\"] = \"\\uEBF5\";\n    // U+EBEA  Fast tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoFast\"] = \"\\uEBEA\";\n    // U+EBEC  Neither fast nor slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoNeitherFastNorSlow\"] = \"\\uEBEC\";\n    // U+EBED  Slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoSlow\"] = \"\\uEBED\";\n    // U+EBEB  Somewhat fast tempo indication (de Narvaez)\n    Glyphs[\"luteItalianTempoSomewhatFast\"] = \"\\uEBEB\";\n    // U+EBEE  Very slow indication (de Narvaez)\n    Glyphs[\"luteItalianTempoVerySlow\"] = \"\\uEBEE\";\n    // U+EBEF  Triple time indication\n    Glyphs[\"luteItalianTimeTriple\"] = \"\\uEBEF\";\n    // U+EBF2  Single-finger tremolo or mordent\n    Glyphs[\"luteItalianTremolo\"] = \"\\uEBF2\";\n    // U+EBF6  Vibrato (verre cassé)\n    Glyphs[\"luteItalianVibrato\"] = \"\\uEBF6\";\n    // U+EBA0  Lute tablature staff, 6 courses\n    Glyphs[\"luteStaff6Lines\"] = \"\\uEBA0\";\n    // U+EBA2  Lute tablature staff, 6 courses (narrow)\n    Glyphs[\"luteStaff6LinesNarrow\"] = \"\\uEBA2\";\n    // U+EBA1  Lute tablature staff, 6 courses (wide)\n    Glyphs[\"luteStaff6LinesWide\"] = \"\\uEBA1\";\n    // U+E551  Elision\n    Glyphs[\"lyricsElision\"] = \"\\uE551\";\n    // U+E550  Narrow elision\n    Glyphs[\"lyricsElisionNarrow\"] = \"\\uE550\";\n    // U+E552  Wide elision\n    Glyphs[\"lyricsElisionWide\"] = \"\\uE552\";\n    // U+E553  Baseline hyphen\n    Glyphs[\"lyricsHyphenBaseline\"] = \"\\uE553\";\n    // U+E554  Non-breaking baseline hyphen\n    Glyphs[\"lyricsHyphenBaselineNonBreaking\"] = \"\\uE554\";\n    // U+E555  Text repeats\n    Glyphs[\"lyricsTextRepeat\"] = \"\\uE555\";\n    // U+E9E1  Flat, hard b (mi)\n    Glyphs[\"medRenFlatHardB\"] = \"\\uE9E1\";\n    // U+E9E0  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftB\"] = \"\\uE9E0\";\n    // U+E9E4  Flat with dot\n    Glyphs[\"medRenFlatWithDot\"] = \"\\uE9E4\";\n    // U+EA24  G clef (Corpus Monodicum)\n    Glyphs[\"medRenGClefCMN\"] = \"\\uEA24\";\n    // U+EA22  Liquescence\n    Glyphs[\"medRenLiquescenceCMN\"] = \"\\uEA22\";\n    // U+EA26  Liquescent ascending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentAscCMN\"] = \"\\uEA26\";\n    // U+EA27  Liquescent descending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentDescCMN\"] = \"\\uEA27\";\n    // U+E9E2  Natural\n    Glyphs[\"medRenNatural\"] = \"\\uE9E2\";\n    // U+E9E5  Natural with interrupted cross\n    Glyphs[\"medRenNaturalWithCross\"] = \"\\uE9E5\";\n    // U+EA2A  Oriscus (Corpus Monodicum)\n    Glyphs[\"medRenOriscusCMN\"] = \"\\uEA2A\";\n    // U+EA23  Plica\n    Glyphs[\"medRenPlicaCMN\"] = \"\\uEA23\";\n    // U+EA25  Punctum (Corpus Monodicum)\n    Glyphs[\"medRenPunctumCMN\"] = \"\\uEA25\";\n    // U+EA28  Quilisma (Corpus Monodicum)\n    Glyphs[\"medRenQuilismaCMN\"] = \"\\uEA28\";\n    // U+E9E3  Croix\n    Glyphs[\"medRenSharpCroix\"] = \"\\uE9E3\";\n    // U+EA29  Strophicus (Corpus Monodicum)\n    Glyphs[\"medRenStrophicusCMN\"] = \"\\uEA29\";\n    // U+EA10  Alteration sign\n    Glyphs[\"mensuralAlterationSign\"] = \"\\uEA10\";\n    // U+E952  Black mensural brevis\n    Glyphs[\"mensuralBlackBrevis\"] = \"\\uE952\";\n    // U+E956  Black mensural void brevis\n    Glyphs[\"mensuralBlackBrevisVoid\"] = \"\\uE956\";\n    // U+E95A  Black mensural dragma\n    Glyphs[\"mensuralBlackDragma\"] = \"\\uE95A\";\n    // U+E951  Black mensural longa\n    Glyphs[\"mensuralBlackLonga\"] = \"\\uE951\";\n    // U+E950  Black mensural maxima\n    Glyphs[\"mensuralBlackMaxima\"] = \"\\uE950\";\n    // U+E954  Black mensural minima\n    Glyphs[\"mensuralBlackMinima\"] = \"\\uE954\";\n    // U+E958  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoid\"] = \"\\uE958\";\n    // U+E953  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevis\"] = \"\\uE953\";\n    // U+E959  Black mensural semibrevis caudata\n    Glyphs[\"mensuralBlackSemibrevisCaudata\"] = \"\\uE959\";\n    // U+E95B  Black mensural oblique semibrevis\n    Glyphs[\"mensuralBlackSemibrevisOblique\"] = \"\\uE95B\";\n    // U+E957  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoid\"] = \"\\uE957\";\n    // U+E955  Black mensural semiminima\n    Glyphs[\"mensuralBlackSemiminima\"] = \"\\uE955\";\n    // U+E905  Mensural C clef\n    Glyphs[\"mensuralCclef\"] = \"\\uE905\";\n    // U+E90A  Petrucci C clef, high position\n    Glyphs[\"mensuralCclefPetrucciPosHigh\"] = \"\\uE90A\";\n    // U+E90B  Petrucci C clef, highest position\n    Glyphs[\"mensuralCclefPetrucciPosHighest\"] = \"\\uE90B\";\n    // U+E908  Petrucci C clef, low position\n    Glyphs[\"mensuralCclefPetrucciPosLow\"] = \"\\uE908\";\n    // U+E907  Petrucci C clef, lowest position\n    Glyphs[\"mensuralCclefPetrucciPosLowest\"] = \"\\uE907\";\n    // U+E909  Petrucci C clef, middle position\n    Glyphs[\"mensuralCclefPetrucciPosMiddle\"] = \"\\uE909\";\n    // U+EA0F  Coloration end, round\n    Glyphs[\"mensuralColorationEndRound\"] = \"\\uEA0F\";\n    // U+EA0D  Coloration end, square\n    Glyphs[\"mensuralColorationEndSquare\"] = \"\\uEA0D\";\n    // U+EA0E  Coloration start, round\n    Glyphs[\"mensuralColorationStartRound\"] = \"\\uEA0E\";\n    // U+EA0C  Coloration start, square\n    Glyphs[\"mensuralColorationStartSquare\"] = \"\\uEA0C\";\n    // U+E940  Combining stem diagonal\n    Glyphs[\"mensuralCombStemDiagonal\"] = \"\\uE940\";\n    // U+E93F  Combining stem down\n    Glyphs[\"mensuralCombStemDown\"] = \"\\uE93F\";\n    // U+E948  Combining stem with extended flag down\n    Glyphs[\"mensuralCombStemDownFlagExtended\"] = \"\\uE948\";\n    // U+E946  Combining stem with flared flag down\n    Glyphs[\"mensuralCombStemDownFlagFlared\"] = \"\\uE946\";\n    // U+E94C  Combining stem with fusa flag down\n    Glyphs[\"mensuralCombStemDownFlagFusa\"] = \"\\uE94C\";\n    // U+E944  Combining stem with flag left down\n    Glyphs[\"mensuralCombStemDownFlagLeft\"] = \"\\uE944\";\n    // U+E942  Combining stem with flag right down\n    Glyphs[\"mensuralCombStemDownFlagRight\"] = \"\\uE942\";\n    // U+E94A  Combining stem with semiminima flag down\n    Glyphs[\"mensuralCombStemDownFlagSemiminima\"] = \"\\uE94A\";\n    // U+E93E  Combining stem up\n    Glyphs[\"mensuralCombStemUp\"] = \"\\uE93E\";\n    // U+E947  Combining stem with extended flag up\n    Glyphs[\"mensuralCombStemUpFlagExtended\"] = \"\\uE947\";\n    // U+E945  Combining stem with flared flag up\n    Glyphs[\"mensuralCombStemUpFlagFlared\"] = \"\\uE945\";\n    // U+E94B  Combining stem with fusa flag up\n    Glyphs[\"mensuralCombStemUpFlagFusa\"] = \"\\uE94B\";\n    // U+E943  Combining stem with flag left up\n    Glyphs[\"mensuralCombStemUpFlagLeft\"] = \"\\uE943\";\n    // U+E941  Combining stem with flag right up\n    Glyphs[\"mensuralCombStemUpFlagRight\"] = \"\\uE941\";\n    // U+E949  Combining stem with semiminima flag up\n    Glyphs[\"mensuralCombStemUpFlagSemiminima\"] = \"\\uE949\";\n    // U+EA0A  Checkmark custos\n    Glyphs[\"mensuralCustosCheckmark\"] = \"\\uEA0A\";\n    // U+EA03  Mensural custos down\n    Glyphs[\"mensuralCustosDown\"] = \"\\uEA03\";\n    // U+EA0B  Turn-like custos\n    Glyphs[\"mensuralCustosTurn\"] = \"\\uEA0B\";\n    // U+EA02  Mensural custos up\n    Glyphs[\"mensuralCustosUp\"] = \"\\uEA02\";\n    // U+E903  Mensural F clef\n    Glyphs[\"mensuralFclef\"] = \"\\uE903\";\n    // U+E904  Petrucci F clef\n    Glyphs[\"mensuralFclefPetrucci\"] = \"\\uE904\";\n    // U+E900  Mensural G clef\n    Glyphs[\"mensuralGclef\"] = \"\\uE900\";\n    // U+E901  Petrucci G clef\n    Glyphs[\"mensuralGclefPetrucci\"] = \"\\uE901\";\n    // U+E92D  Modus imperfectum, vertical\n    Glyphs[\"mensuralModusImperfectumVert\"] = \"\\uE92D\";\n    // U+E92C  Modus perfectum, vertical\n    Glyphs[\"mensuralModusPerfectumVert\"] = \"\\uE92C\";\n    // U+E934  Longa/brevis notehead, black\n    Glyphs[\"mensuralNoteheadLongaBlack\"] = \"\\uE934\";\n    // U+E936  Longa/brevis notehead, black and void\n    Glyphs[\"mensuralNoteheadLongaBlackVoid\"] = \"\\uE936\";\n    // U+E935  Longa/brevis notehead, void\n    Glyphs[\"mensuralNoteheadLongaVoid\"] = \"\\uE935\";\n    // U+E937  Longa/brevis notehead, white\n    Glyphs[\"mensuralNoteheadLongaWhite\"] = \"\\uE937\";\n    // U+E930  Maxima notehead, black\n    Glyphs[\"mensuralNoteheadMaximaBlack\"] = \"\\uE930\";\n    // U+E932  Maxima notehead, black and void\n    Glyphs[\"mensuralNoteheadMaximaBlackVoid\"] = \"\\uE932\";\n    // U+E931  Maxima notehead, void\n    Glyphs[\"mensuralNoteheadMaximaVoid\"] = \"\\uE931\";\n    // U+E933  Maxima notehead, white\n    Glyphs[\"mensuralNoteheadMaximaWhite\"] = \"\\uE933\";\n    // U+E93C  Minima notehead, white\n    Glyphs[\"mensuralNoteheadMinimaWhite\"] = \"\\uE93C\";\n    // U+E938  Semibrevis notehead, black\n    Glyphs[\"mensuralNoteheadSemibrevisBlack\"] = \"\\uE938\";\n    // U+E93A  Semibrevis notehead, black and void\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoid\"] = \"\\uE93A\";\n    // U+E93B  Semibrevis notehead, black and void (turned)\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoidTurned\"] = \"\\uE93B\";\n    // U+E939  Semibrevis notehead, void\n    Glyphs[\"mensuralNoteheadSemibrevisVoid\"] = \"\\uE939\";\n    // U+E93D  Semiminima/fusa notehead, white\n    Glyphs[\"mensuralNoteheadSemiminimaWhite\"] = \"\\uE93D\";\n    // U+E970  Oblique form, ascending 2nd, black\n    Glyphs[\"mensuralObliqueAsc2ndBlack\"] = \"\\uE970\";\n    // U+E972  Oblique form, ascending 2nd, black and void\n    Glyphs[\"mensuralObliqueAsc2ndBlackVoid\"] = \"\\uE972\";\n    // U+E971  Oblique form, ascending 2nd, void\n    Glyphs[\"mensuralObliqueAsc2ndVoid\"] = \"\\uE971\";\n    // U+E973  Oblique form, ascending 2nd, white\n    Glyphs[\"mensuralObliqueAsc2ndWhite\"] = \"\\uE973\";\n    // U+E974  Oblique form, ascending 3rd, black\n    Glyphs[\"mensuralObliqueAsc3rdBlack\"] = \"\\uE974\";\n    // U+E976  Oblique form, ascending 3rd, black and void\n    Glyphs[\"mensuralObliqueAsc3rdBlackVoid\"] = \"\\uE976\";\n    // U+E975  Oblique form, ascending 3rd, void\n    Glyphs[\"mensuralObliqueAsc3rdVoid\"] = \"\\uE975\";\n    // U+E977  Oblique form, ascending 3rd, white\n    Glyphs[\"mensuralObliqueAsc3rdWhite\"] = \"\\uE977\";\n    // U+E978  Oblique form, ascending 4th, black\n    Glyphs[\"mensuralObliqueAsc4thBlack\"] = \"\\uE978\";\n    // U+E97A  Oblique form, ascending 4th, black and void\n    Glyphs[\"mensuralObliqueAsc4thBlackVoid\"] = \"\\uE97A\";\n    // U+E979  Oblique form, ascending 4th, void\n    Glyphs[\"mensuralObliqueAsc4thVoid\"] = \"\\uE979\";\n    // U+E97B  Oblique form, ascending 4th, white\n    Glyphs[\"mensuralObliqueAsc4thWhite\"] = \"\\uE97B\";\n    // U+E97C  Oblique form, ascending 5th, black\n    Glyphs[\"mensuralObliqueAsc5thBlack\"] = \"\\uE97C\";\n    // U+E97E  Oblique form, ascending 5th, black and void\n    Glyphs[\"mensuralObliqueAsc5thBlackVoid\"] = \"\\uE97E\";\n    // U+E97D  Oblique form, ascending 5th, void\n    Glyphs[\"mensuralObliqueAsc5thVoid\"] = \"\\uE97D\";\n    // U+E97F  Oblique form, ascending 5th, white\n    Glyphs[\"mensuralObliqueAsc5thWhite\"] = \"\\uE97F\";\n    // U+E980  Oblique form, descending 2nd, black\n    Glyphs[\"mensuralObliqueDesc2ndBlack\"] = \"\\uE980\";\n    // U+E982  Oblique form, descending 2nd, black and void\n    Glyphs[\"mensuralObliqueDesc2ndBlackVoid\"] = \"\\uE982\";\n    // U+E981  Oblique form, descending 2nd, void\n    Glyphs[\"mensuralObliqueDesc2ndVoid\"] = \"\\uE981\";\n    // U+E983  Oblique form, descending 2nd, white\n    Glyphs[\"mensuralObliqueDesc2ndWhite\"] = \"\\uE983\";\n    // U+E984  Oblique form, descending 3rd, black\n    Glyphs[\"mensuralObliqueDesc3rdBlack\"] = \"\\uE984\";\n    // U+E986  Oblique form, descending 3rd, black and void\n    Glyphs[\"mensuralObliqueDesc3rdBlackVoid\"] = \"\\uE986\";\n    // U+E985  Oblique form, descending 3rd, void\n    Glyphs[\"mensuralObliqueDesc3rdVoid\"] = \"\\uE985\";\n    // U+E987  Oblique form, descending 3rd, white\n    Glyphs[\"mensuralObliqueDesc3rdWhite\"] = \"\\uE987\";\n    // U+E988  Oblique form, descending 4th, black\n    Glyphs[\"mensuralObliqueDesc4thBlack\"] = \"\\uE988\";\n    // U+E98A  Oblique form, descending 4th, black and void\n    Glyphs[\"mensuralObliqueDesc4thBlackVoid\"] = \"\\uE98A\";\n    // U+E989  Oblique form, descending 4th, void\n    Glyphs[\"mensuralObliqueDesc4thVoid\"] = \"\\uE989\";\n    // U+E98B  Oblique form, descending 4th, white\n    Glyphs[\"mensuralObliqueDesc4thWhite\"] = \"\\uE98B\";\n    // U+E98C  Oblique form, descending 5th, black\n    Glyphs[\"mensuralObliqueDesc5thBlack\"] = \"\\uE98C\";\n    // U+E98E  Oblique form, descending 5th, black and void\n    Glyphs[\"mensuralObliqueDesc5thBlackVoid\"] = \"\\uE98E\";\n    // U+E98D  Oblique form, descending 5th, void\n    Glyphs[\"mensuralObliqueDesc5thVoid\"] = \"\\uE98D\";\n    // U+E98F  Oblique form, descending 5th, white\n    Glyphs[\"mensuralObliqueDesc5thWhite\"] = \"\\uE98F\";\n    // U+E910  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1\"] = \"\\uE910\";\n    // U+E919  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10\"] = \"\\uE919\";\n    // U+E91A  Tempus imperfectum cum prolatione imperfecta diminution 5\n    Glyphs[\"mensuralProlation11\"] = \"\\uE91A\";\n    // U+E911  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2\"] = \"\\uE911\";\n    // U+E912  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3\"] = \"\\uE912\";\n    // U+E913  Tempus perfectum cum prolatione perfecta diminution 2 (9/16)\n    Glyphs[\"mensuralProlation4\"] = \"\\uE913\";\n    // U+E914  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5\"] = \"\\uE914\";\n    // U+E915  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6\"] = \"\\uE915\";\n    // U+E916  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7\"] = \"\\uE916\";\n    // U+E917  Tempus imperfectum cum prolatione imperfecta diminution 2 (6/16)\n    Glyphs[\"mensuralProlation8\"] = \"\\uE917\";\n    // U+E918  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9\"] = \"\\uE918\";\n    // U+E920  Combining dot\n    Glyphs[\"mensuralProlationCombiningDot\"] = \"\\uE920\";\n    // U+E924  Combining void dot\n    Glyphs[\"mensuralProlationCombiningDotVoid\"] = \"\\uE924\";\n    // U+E925  Combining vertical stroke\n    Glyphs[\"mensuralProlationCombiningStroke\"] = \"\\uE925\";\n    // U+E922  Combining three dots horizontal\n    Glyphs[\"mensuralProlationCombiningThreeDots\"] = \"\\uE922\";\n    // U+E923  Combining three dots triangular\n    Glyphs[\"mensuralProlationCombiningThreeDotsTri\"] = \"\\uE923\";\n    // U+E921  Combining two dots\n    Glyphs[\"mensuralProlationCombiningTwoDots\"] = \"\\uE921\";\n    // U+E926  Mensural proportion 1\n    Glyphs[\"mensuralProportion1\"] = \"\\uE926\";\n    // U+E927  Mensural proportion 2\n    Glyphs[\"mensuralProportion2\"] = \"\\uE927\";\n    // U+E928  Mensural proportion 3\n    Glyphs[\"mensuralProportion3\"] = \"\\uE928\";\n    // U+E929  Mensural proportion 4\n    Glyphs[\"mensuralProportion4\"] = \"\\uE929\";\n    // U+EE90  Mensural proportion 5\n    Glyphs[\"mensuralProportion5\"] = \"\\uEE90\";\n    // U+EE91  Mensural proportion 6\n    Glyphs[\"mensuralProportion6\"] = \"\\uEE91\";\n    // U+EE92  Mensural proportion 7\n    Glyphs[\"mensuralProportion7\"] = \"\\uEE92\";\n    // U+EE93  Mensural proportion 8\n    Glyphs[\"mensuralProportion8\"] = \"\\uEE93\";\n    // U+EE94  Mensural proportion 9\n    Glyphs[\"mensuralProportion9\"] = \"\\uEE94\";\n    // U+E92B  Mensural proportion major\n    Glyphs[\"mensuralProportionMajor\"] = \"\\uE92B\";\n    // U+E92A  Mensural proportion minor\n    Glyphs[\"mensuralProportionMinor\"] = \"\\uE92A\";\n    // U+E91C  Proportio dupla 1\n    Glyphs[\"mensuralProportionProportioDupla1\"] = \"\\uE91C\";\n    // U+E91D  Proportio dupla 2\n    Glyphs[\"mensuralProportionProportioDupla2\"] = \"\\uE91D\";\n    // U+E91F  Proportio quadrupla\n    Glyphs[\"mensuralProportionProportioQuadrupla\"] = \"\\uE91F\";\n    // U+E91E  Proportio tripla\n    Glyphs[\"mensuralProportionProportioTripla\"] = \"\\uE91E\";\n    // U+E91B  Tempus perfectum\n    Glyphs[\"mensuralProportionTempusPerfectum\"] = \"\\uE91B\";\n    // U+E9F3  Brevis rest\n    Glyphs[\"mensuralRestBrevis\"] = \"\\uE9F3\";\n    // U+E9F7  Fusa rest\n    Glyphs[\"mensuralRestFusa\"] = \"\\uE9F7\";\n    // U+E9F2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfecta\"] = \"\\uE9F2\";\n    // U+E9F1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfecta\"] = \"\\uE9F1\";\n    // U+E9F0  Maxima rest\n    Glyphs[\"mensuralRestMaxima\"] = \"\\uE9F0\";\n    // U+E9F5  Minima rest\n    Glyphs[\"mensuralRestMinima\"] = \"\\uE9F5\";\n    // U+E9F4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevis\"] = \"\\uE9F4\";\n    // U+E9F8  Semifusa rest\n    Glyphs[\"mensuralRestSemifusa\"] = \"\\uE9F8\";\n    // U+E9F6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminima\"] = \"\\uE9F6\";\n    // U+EA01  Signum congruentiae down\n    Glyphs[\"mensuralSignumDown\"] = \"\\uEA01\";\n    // U+EA00  Signum congruentiae up\n    Glyphs[\"mensuralSignumUp\"] = \"\\uEA00\";\n    // U+E92F  Tempus imperfectum, horizontal\n    Glyphs[\"mensuralTempusImperfectumHoriz\"] = \"\\uE92F\";\n    // U+E92E  Tempus perfectum, horizontal\n    Glyphs[\"mensuralTempusPerfectumHoriz\"] = \"\\uE92E\";\n    // U+E95E  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevis\"] = \"\\uE95E\";\n    // U+E961  White mensural fusa\n    Glyphs[\"mensuralWhiteFusa\"] = \"\\uE961\";\n    // U+E95D  White mensural longa\n    Glyphs[\"mensuralWhiteLonga\"] = \"\\uE95D\";\n    // U+E95C  White mensural maxima\n    Glyphs[\"mensuralWhiteMaxima\"] = \"\\uE95C\";\n    // U+E95F  White mensural minima\n    Glyphs[\"mensuralWhiteMinima\"] = \"\\uE95F\";\n    // U+E962  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevis\"] = \"\\uE962\";\n    // U+E960  White mensural semiminima\n    Glyphs[\"mensuralWhiteSemiminima\"] = \"\\uE960\";\n    // U+ECB7  Augmentation dot\n    Glyphs[\"metAugmentationDot\"] = \"\\uECB7\";\n    // U+ECB6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote1024thDown\"] = \"\\uECB6\";\n    // U+ECB5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote1024thUp\"] = \"\\uECB5\";\n    // U+ECB0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"metNote128thDown\"] = \"\\uECB0\";\n    // U+ECAF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"metNote128thUp\"] = \"\\uECAF\";\n    // U+ECAA  16th note (semiquaver) stem down\n    Glyphs[\"metNote16thDown\"] = \"\\uECAA\";\n    // U+ECA9  16th note (semiquaver) stem up\n    Glyphs[\"metNote16thUp\"] = \"\\uECA9\";\n    // U+ECB2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote256thDown\"] = \"\\uECB2\";\n    // U+ECB1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote256thUp\"] = \"\\uECB1\";\n    // U+ECAC  32nd note (demisemiquaver) stem down\n    Glyphs[\"metNote32ndDown\"] = \"\\uECAC\";\n    // U+ECAB  32nd note (demisemiquaver) stem up\n    Glyphs[\"metNote32ndUp\"] = \"\\uECAB\";\n    // U+ECB4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote512thDown\"] = \"\\uECB4\";\n    // U+ECB3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote512thUp\"] = \"\\uECB3\";\n    // U+ECAE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"metNote64thDown\"] = \"\\uECAE\";\n    // U+ECAD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"metNote64thUp\"] = \"\\uECAD\";\n    // U+ECA8  Eighth note (quaver) stem down\n    Glyphs[\"metNote8thDown\"] = \"\\uECA8\";\n    // U+ECA7  Eighth note (quaver) stem up\n    Glyphs[\"metNote8thUp\"] = \"\\uECA7\";\n    // U+ECA0  Double whole note (breve)\n    Glyphs[\"metNoteDoubleWhole\"] = \"\\uECA0\";\n    // U+ECA1  Double whole note (square)\n    Glyphs[\"metNoteDoubleWholeSquare\"] = \"\\uECA1\";\n    // U+ECA4  Half note (minim) stem down\n    Glyphs[\"metNoteHalfDown\"] = \"\\uECA4\";\n    // U+ECA3  Half note (minim) stem up\n    Glyphs[\"metNoteHalfUp\"] = \"\\uECA3\";\n    // U+ECA6  Quarter note (crotchet) stem down\n    Glyphs[\"metNoteQuarterDown\"] = \"\\uECA6\";\n    // U+ECA5  Quarter note (crotchet) stem up\n    Glyphs[\"metNoteQuarterUp\"] = \"\\uECA5\";\n    // U+ECA2  Whole note (semibreve)\n    Glyphs[\"metNoteWhole\"] = \"\\uECA2\";\n    // U+EC63  Left-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowLeft\"] = \"\\uEC63\";\n    // U+EC64  Right-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowRight\"] = \"\\uEC64\";\n    // U+EC61  Do not copy\n    Glyphs[\"miscDoNotCopy\"] = \"\\uEC61\";\n    // U+EC60  Do not photocopy\n    Glyphs[\"miscDoNotPhotocopy\"] = \"\\uEC60\";\n    // U+EC62  Eyeglasses\n    Glyphs[\"miscEyeglasses\"] = \"\\uEC62\";\n    // U+E1E6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note1024thDown\"] = \"\\uE1E6\";\n    // U+E1E5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note1024thUp\"] = \"\\uE1E5\";\n    // U+E1E0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"note128thDown\"] = \"\\uE1E0\";\n    // U+E1DF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUp\"] = \"\\uE1DF\";\n    // U+E1DA  16th note (semiquaver) stem down\n    Glyphs[\"note16thDown\"] = \"\\uE1DA\";\n    // U+E1D9  16th note (semiquaver) stem up\n    Glyphs[\"note16thUp\"] = \"\\uE1D9\";\n    // U+E1E2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"note256thDown\"] = \"\\uE1E2\";\n    // U+E1E1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"note256thUp\"] = \"\\uE1E1\";\n    // U+E1DC  32nd note (demisemiquaver) stem down\n    Glyphs[\"note32ndDown\"] = \"\\uE1DC\";\n    // U+E1DB  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUp\"] = \"\\uE1DB\";\n    // U+E1E4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note512thDown\"] = \"\\uE1E4\";\n    // U+E1E3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note512thUp\"] = \"\\uE1E3\";\n    // U+E1DE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"note64thDown\"] = \"\\uE1DE\";\n    // U+E1DD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUp\"] = \"\\uE1DD\";\n    // U+E1D8  Eighth note (quaver) stem down\n    Glyphs[\"note8thDown\"] = \"\\uE1D8\";\n    // U+E1D7  Eighth note (quaver) stem up\n    Glyphs[\"note8thUp\"] = \"\\uE1D7\";\n    // U+E197  A (black note)\n    Glyphs[\"noteABlack\"] = \"\\uE197\";\n    // U+E196  A flat (black note)\n    Glyphs[\"noteAFlatBlack\"] = \"\\uE196\";\n    // U+E17F  A flat (half note)\n    Glyphs[\"noteAFlatHalf\"] = \"\\uE17F\";\n    // U+E168  A flat (whole note)\n    Glyphs[\"noteAFlatWhole\"] = \"\\uE168\";\n    // U+E180  A (half note)\n    Glyphs[\"noteAHalf\"] = \"\\uE180\";\n    // U+E198  A sharp (black note)\n    Glyphs[\"noteASharpBlack\"] = \"\\uE198\";\n    // U+E181  A sharp (half note)\n    Glyphs[\"noteASharpHalf\"] = \"\\uE181\";\n    // U+E16A  A sharp (whole note)\n    Glyphs[\"noteASharpWhole\"] = \"\\uE16A\";\n    // U+E169  A (whole note)\n    Glyphs[\"noteAWhole\"] = \"\\uE169\";\n    // U+E19A  B (black note)\n    Glyphs[\"noteBBlack\"] = \"\\uE19A\";\n    // U+E199  B flat (black note)\n    Glyphs[\"noteBFlatBlack\"] = \"\\uE199\";\n    // U+E182  B flat (half note)\n    Glyphs[\"noteBFlatHalf\"] = \"\\uE182\";\n    // U+E16B  B flat (whole note)\n    Glyphs[\"noteBFlatWhole\"] = \"\\uE16B\";\n    // U+E183  B (half note)\n    Glyphs[\"noteBHalf\"] = \"\\uE183\";\n    // U+E19B  B sharp (black note)\n    Glyphs[\"noteBSharpBlack\"] = \"\\uE19B\";\n    // U+E184  B sharp (half note)\n    Glyphs[\"noteBSharpHalf\"] = \"\\uE184\";\n    // U+E16D  B sharp (whole note)\n    Glyphs[\"noteBSharpWhole\"] = \"\\uE16D\";\n    // U+E16C  B (whole note)\n    Glyphs[\"noteBWhole\"] = \"\\uE16C\";\n    // U+E19D  C (black note)\n    Glyphs[\"noteCBlack\"] = \"\\uE19D\";\n    // U+E19C  C flat (black note)\n    Glyphs[\"noteCFlatBlack\"] = \"\\uE19C\";\n    // U+E185  C flat (half note)\n    Glyphs[\"noteCFlatHalf\"] = \"\\uE185\";\n    // U+E16E  C flat (whole note)\n    Glyphs[\"noteCFlatWhole\"] = \"\\uE16E\";\n    // U+E186  C (half note)\n    Glyphs[\"noteCHalf\"] = \"\\uE186\";\n    // U+E19E  C sharp (black note)\n    Glyphs[\"noteCSharpBlack\"] = \"\\uE19E\";\n    // U+E187  C sharp (half note)\n    Glyphs[\"noteCSharpHalf\"] = \"\\uE187\";\n    // U+E170  C sharp (whole note)\n    Glyphs[\"noteCSharpWhole\"] = \"\\uE170\";\n    // U+E16F  C (whole note)\n    Glyphs[\"noteCWhole\"] = \"\\uE16F\";\n    // U+E1A0  D (black note)\n    Glyphs[\"noteDBlack\"] = \"\\uE1A0\";\n    // U+E19F  D flat (black note)\n    Glyphs[\"noteDFlatBlack\"] = \"\\uE19F\";\n    // U+E188  D flat (half note)\n    Glyphs[\"noteDFlatHalf\"] = \"\\uE188\";\n    // U+E171  D flat (whole note)\n    Glyphs[\"noteDFlatWhole\"] = \"\\uE171\";\n    // U+E189  D (half note)\n    Glyphs[\"noteDHalf\"] = \"\\uE189\";\n    // U+E1A1  D sharp (black note)\n    Glyphs[\"noteDSharpBlack\"] = \"\\uE1A1\";\n    // U+E18A  D sharp (half note)\n    Glyphs[\"noteDSharpHalf\"] = \"\\uE18A\";\n    // U+E173  D sharp (whole note)\n    Glyphs[\"noteDSharpWhole\"] = \"\\uE173\";\n    // U+E172  D (whole note)\n    Glyphs[\"noteDWhole\"] = \"\\uE172\";\n    // U+EEF2  Di (black note)\n    Glyphs[\"noteDiBlack\"] = \"\\uEEF2\";\n    // U+EEE9  Di (half note)\n    Glyphs[\"noteDiHalf\"] = \"\\uEEE9\";\n    // U+EEE0  Di (whole note)\n    Glyphs[\"noteDiWhole\"] = \"\\uEEE0\";\n    // U+E160  Do (black note)\n    Glyphs[\"noteDoBlack\"] = \"\\uE160\";\n    // U+E158  Do (half note)\n    Glyphs[\"noteDoHalf\"] = \"\\uE158\";\n    // U+E150  Do (whole note)\n    Glyphs[\"noteDoWhole\"] = \"\\uE150\";\n    // U+E1D0  Double whole note (breve)\n    Glyphs[\"noteDoubleWhole\"] = \"\\uE1D0\";\n    // U+E1D1  Double whole note (square)\n    Glyphs[\"noteDoubleWholeSquare\"] = \"\\uE1D1\";\n    // U+E1A3  E (black note)\n    Glyphs[\"noteEBlack\"] = \"\\uE1A3\";\n    // U+E1A2  E flat (black note)\n    Glyphs[\"noteEFlatBlack\"] = \"\\uE1A2\";\n    // U+E18B  E flat (half note)\n    Glyphs[\"noteEFlatHalf\"] = \"\\uE18B\";\n    // U+E174  E flat (whole note)\n    Glyphs[\"noteEFlatWhole\"] = \"\\uE174\";\n    // U+E18C  E (half note)\n    Glyphs[\"noteEHalf\"] = \"\\uE18C\";\n    // U+E1A4  E sharp (black note)\n    Glyphs[\"noteESharpBlack\"] = \"\\uE1A4\";\n    // U+E18D  E sharp (half note)\n    Glyphs[\"noteESharpHalf\"] = \"\\uE18D\";\n    // U+E176  E sharp (whole note)\n    Glyphs[\"noteESharpWhole\"] = \"\\uE176\";\n    // U+E175  E (whole note)\n    Glyphs[\"noteEWhole\"] = \"\\uE175\";\n    // U+E1AF  Empty black note\n    Glyphs[\"noteEmptyBlack\"] = \"\\uE1AF\";\n    // U+E1AE  Empty half note\n    Glyphs[\"noteEmptyHalf\"] = \"\\uE1AE\";\n    // U+E1AD  Empty whole note\n    Glyphs[\"noteEmptyWhole\"] = \"\\uE1AD\";\n    // U+E1A6  F (black note)\n    Glyphs[\"noteFBlack\"] = \"\\uE1A6\";\n    // U+E1A5  F flat (black note)\n    Glyphs[\"noteFFlatBlack\"] = \"\\uE1A5\";\n    // U+E18E  F flat (half note)\n    Glyphs[\"noteFFlatHalf\"] = \"\\uE18E\";\n    // U+E177  F flat (whole note)\n    Glyphs[\"noteFFlatWhole\"] = \"\\uE177\";\n    // U+E18F  F (half note)\n    Glyphs[\"noteFHalf\"] = \"\\uE18F\";\n    // U+E1A7  F sharp (black note)\n    Glyphs[\"noteFSharpBlack\"] = \"\\uE1A7\";\n    // U+E190  F sharp (half note)\n    Glyphs[\"noteFSharpHalf\"] = \"\\uE190\";\n    // U+E179  F sharp (whole note)\n    Glyphs[\"noteFSharpWhole\"] = \"\\uE179\";\n    // U+E178  F (whole note)\n    Glyphs[\"noteFWhole\"] = \"\\uE178\";\n    // U+E163  Fa (black note)\n    Glyphs[\"noteFaBlack\"] = \"\\uE163\";\n    // U+E15B  Fa (half note)\n    Glyphs[\"noteFaHalf\"] = \"\\uE15B\";\n    // U+E153  Fa (whole note)\n    Glyphs[\"noteFaWhole\"] = \"\\uE153\";\n    // U+EEF6  Fi (black note)\n    Glyphs[\"noteFiBlack\"] = \"\\uEEF6\";\n    // U+EEED  Fi (half note)\n    Glyphs[\"noteFiHalf\"] = \"\\uEEED\";\n    // U+EEE4  Fi (whole note)\n    Glyphs[\"noteFiWhole\"] = \"\\uEEE4\";\n    // U+E1A9  G (black note)\n    Glyphs[\"noteGBlack\"] = \"\\uE1A9\";\n    // U+E1A8  G flat (black note)\n    Glyphs[\"noteGFlatBlack\"] = \"\\uE1A8\";\n    // U+E191  G flat (half note)\n    Glyphs[\"noteGFlatHalf\"] = \"\\uE191\";\n    // U+E17A  G flat (whole note)\n    Glyphs[\"noteGFlatWhole\"] = \"\\uE17A\";\n    // U+E192  G (half note)\n    Glyphs[\"noteGHalf\"] = \"\\uE192\";\n    // U+E1AA  G sharp (black note)\n    Glyphs[\"noteGSharpBlack\"] = \"\\uE1AA\";\n    // U+E193  G sharp (half note)\n    Glyphs[\"noteGSharpHalf\"] = \"\\uE193\";\n    // U+E17C  G sharp (whole note)\n    Glyphs[\"noteGSharpWhole\"] = \"\\uE17C\";\n    // U+E17B  G (whole note)\n    Glyphs[\"noteGWhole\"] = \"\\uE17B\";\n    // U+E1AB  H (black note)\n    Glyphs[\"noteHBlack\"] = \"\\uE1AB\";\n    // U+E194  H (half note)\n    Glyphs[\"noteHHalf\"] = \"\\uE194\";\n    // U+E1AC  H sharp (black note)\n    Glyphs[\"noteHSharpBlack\"] = \"\\uE1AC\";\n    // U+E195  H sharp (half note)\n    Glyphs[\"noteHSharpHalf\"] = \"\\uE195\";\n    // U+E17E  H sharp (whole note)\n    Glyphs[\"noteHSharpWhole\"] = \"\\uE17E\";\n    // U+E17D  H (whole note)\n    Glyphs[\"noteHWhole\"] = \"\\uE17D\";\n    // U+E1D4  Half note (minim) stem down\n    Glyphs[\"noteHalfDown\"] = \"\\uE1D4\";\n    // U+E1D3  Half note (minim) stem up\n    Glyphs[\"noteHalfUp\"] = \"\\uE1D3\";\n    // U+E165  La (black note)\n    Glyphs[\"noteLaBlack\"] = \"\\uE165\";\n    // U+E15D  La (half note)\n    Glyphs[\"noteLaHalf\"] = \"\\uE15D\";\n    // U+E155  La (whole note)\n    Glyphs[\"noteLaWhole\"] = \"\\uE155\";\n    // U+EEF9  Le (black note)\n    Glyphs[\"noteLeBlack\"] = \"\\uEEF9\";\n    // U+EEF0  Le (half note)\n    Glyphs[\"noteLeHalf\"] = \"\\uEEF0\";\n    // U+EEE7  Le (whole note)\n    Glyphs[\"noteLeWhole\"] = \"\\uEEE7\";\n    // U+EEF8  Li (black note)\n    Glyphs[\"noteLiBlack\"] = \"\\uEEF8\";\n    // U+EEEF  Li (half note)\n    Glyphs[\"noteLiHalf\"] = \"\\uEEEF\";\n    // U+EEE6  Li (whole note)\n    Glyphs[\"noteLiWhole\"] = \"\\uEEE6\";\n    // U+EEF5  Me (black note)\n    Glyphs[\"noteMeBlack\"] = \"\\uEEF5\";\n    // U+EEEC  Me (half note)\n    Glyphs[\"noteMeHalf\"] = \"\\uEEEC\";\n    // U+EEE3  Me (whole note)\n    Glyphs[\"noteMeWhole\"] = \"\\uEEE3\";\n    // U+E162  Mi (black note)\n    Glyphs[\"noteMiBlack\"] = \"\\uE162\";\n    // U+E15A  Mi (half note)\n    Glyphs[\"noteMiHalf\"] = \"\\uE15A\";\n    // U+E152  Mi (whole note)\n    Glyphs[\"noteMiWhole\"] = \"\\uE152\";\n    // U+E1D6  Quarter note (crotchet) stem down\n    Glyphs[\"noteQuarterDown\"] = \"\\uE1D6\";\n    // U+E1D5  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUp\"] = \"\\uE1D5\";\n    // U+EEF4  Ra (black note)\n    Glyphs[\"noteRaBlack\"] = \"\\uEEF4\";\n    // U+EEEB  Ra (half note)\n    Glyphs[\"noteRaHalf\"] = \"\\uEEEB\";\n    // U+EEE2  Ra (whole note)\n    Glyphs[\"noteRaWhole\"] = \"\\uEEE2\";\n    // U+E161  Re (black note)\n    Glyphs[\"noteReBlack\"] = \"\\uE161\";\n    // U+E159  Re (half note)\n    Glyphs[\"noteReHalf\"] = \"\\uE159\";\n    // U+E151  Re (whole note)\n    Glyphs[\"noteReWhole\"] = \"\\uE151\";\n    // U+EEF3  Ri (black note)\n    Glyphs[\"noteRiBlack\"] = \"\\uEEF3\";\n    // U+EEEA  Ri (half note)\n    Glyphs[\"noteRiHalf\"] = \"\\uEEEA\";\n    // U+EEE1  Ri (whole note)\n    Glyphs[\"noteRiWhole\"] = \"\\uEEE1\";\n    // U+EEF7  Se (black note)\n    Glyphs[\"noteSeBlack\"] = \"\\uEEF7\";\n    // U+EEEE  Se (half note)\n    Glyphs[\"noteSeHalf\"] = \"\\uEEEE\";\n    // U+EEE5  Se (whole note)\n    Glyphs[\"noteSeWhole\"] = \"\\uEEE5\";\n    // U+E1C9  Arrowhead left black (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftBlack\"] = \"\\uE1C9\";\n    // U+ECDC  Arrowhead left double whole (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftDoubleWhole\"] = \"\\uECDC\";\n    // U+E1C8  Arrowhead left white (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftWhite\"] = \"\\uE1C8\";\n    // U+E1B9  Diamond black (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondBlack\"] = \"\\uE1B9\";\n    // U+ECD4  Diamond double whole (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondDoubleWhole\"] = \"\\uECD4\";\n    // U+E1B8  Diamond white (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondWhite\"] = \"\\uE1B8\";\n    // U+E1C5  Isosceles triangle black (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleBlack\"] = \"\\uE1C5\";\n    // U+ECDA  Isosceles triangle double whole (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleDoubleWhole\"] = \"\\uECDA\";\n    // U+E1C4  Isosceles triangle white (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleWhite\"] = \"\\uE1C4\";\n    // U+E1C1  Inverted keystone black (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneBlack\"] = \"\\uE1C1\";\n    // U+ECD8  Inverted keystone double whole (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneDoubleWhole\"] = \"\\uECD8\";\n    // U+E1C0  Inverted keystone white (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneWhite\"] = \"\\uE1C0\";\n    // U+E1BD  Moon black (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonBlack\"] = \"\\uE1BD\";\n    // U+ECD6  Moon double whole (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonDoubleWhole\"] = \"\\uECD6\";\n    // U+E1C7  Moon left black (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftBlack\"] = \"\\uE1C7\";\n    // U+ECDB  Moon left double whole (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftDoubleWhole\"] = \"\\uECDB\";\n    // U+E1C6  Moon left white (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftWhite\"] = \"\\uE1C6\";\n    // U+E1BC  Moon white (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonWhite\"] = \"\\uE1BC\";\n    // U+E1C3  Quarter moon black (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonBlack\"] = \"\\uE1C3\";\n    // U+ECD9  Quarter moon double whole (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonDoubleWhole\"] = \"\\uECD9\";\n    // U+E1C2  Quarter moon white (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonWhite\"] = \"\\uE1C2\";\n    // U+E1B1  Round black (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundBlack\"] = \"\\uE1B1\";\n    // U+ECD0  Round double whole (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundDoubleWhole\"] = \"\\uECD0\";\n    // U+E1B0  Round white (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundWhite\"] = \"\\uE1B0\";\n    // U+E1B3  Square black (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareBlack\"] = \"\\uE1B3\";\n    // U+ECD1  Square double whole (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareDoubleWhole\"] = \"\\uECD1\";\n    // U+E1B2  Square white (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareWhite\"] = \"\\uE1B2\";\n    // U+E1B7  Triangle left black (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftBlack\"] = \"\\uE1B7\";\n    // U+ECD3  Triangle left double whole (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftDoubleWhole\"] = \"\\uECD3\";\n    // U+E1B6  Triangle left white (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftWhite\"] = \"\\uE1B6\";\n    // U+E1B5  Triangle right black (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightBlack\"] = \"\\uE1B5\";\n    // U+ECD2  Triangle right double whole (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightDoubleWhole\"] = \"\\uECD2\";\n    // U+E1B4  Triangle right white (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightWhite\"] = \"\\uE1B4\";\n    // U+E1BF  Triangle-round black (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundBlack\"] = \"\\uE1BF\";\n    // U+ECD7  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundDoubleWhole\"] = \"\\uECD7\";\n    // U+E1CB  Triangle-round left black (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftBlack\"] = \"\\uE1CB\";\n    // U+ECDD  Triangle-round left double whole (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftDoubleWhole\"] = \"\\uECDD\";\n    // U+E1CA  Triangle-round left white (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftWhite\"] = \"\\uE1CA\";\n    // U+E1BE  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundWhite\"] = \"\\uE1BE\";\n    // U+E1BB  Triangle up black (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpBlack\"] = \"\\uE1BB\";\n    // U+ECD5  Triangle up double whole (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpDoubleWhole\"] = \"\\uECD5\";\n    // U+E1BA  Triangle up white (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpWhite\"] = \"\\uE1BA\";\n    // U+E167  Si (black note)\n    Glyphs[\"noteSiBlack\"] = \"\\uE167\";\n    // U+E15F  Si (half note)\n    Glyphs[\"noteSiHalf\"] = \"\\uE15F\";\n    // U+E157  Si (whole note)\n    Glyphs[\"noteSiWhole\"] = \"\\uE157\";\n    // U+E164  So (black note)\n    Glyphs[\"noteSoBlack\"] = \"\\uE164\";\n    // U+E15C  So (half note)\n    Glyphs[\"noteSoHalf\"] = \"\\uE15C\";\n    // U+E154  So (whole note)\n    Glyphs[\"noteSoWhole\"] = \"\\uE154\";\n    // U+EEFA  Te (black note)\n    Glyphs[\"noteTeBlack\"] = \"\\uEEFA\";\n    // U+EEF1  Te (half note)\n    Glyphs[\"noteTeHalf\"] = \"\\uEEF1\";\n    // U+EEE8  Te (whole note)\n    Glyphs[\"noteTeWhole\"] = \"\\uEEE8\";\n    // U+E166  Ti (black note)\n    Glyphs[\"noteTiBlack\"] = \"\\uE166\";\n    // U+E15E  Ti (half note)\n    Glyphs[\"noteTiHalf\"] = \"\\uE15E\";\n    // U+E156  Ti (whole note)\n    Glyphs[\"noteTiWhole\"] = \"\\uE156\";\n    // U+E1D2  Whole note (semibreve)\n    Glyphs[\"noteWhole\"] = \"\\uE1D2\";\n    // U+E0A4  Black notehead\n    Glyphs[\"noteheadBlack\"] = \"\\uE0A4\";\n    // U+E0F7  Circle slash notehead\n    Glyphs[\"noteheadCircleSlash\"] = \"\\uE0F7\";\n    // U+E0B3  Circle X notehead\n    Glyphs[\"noteheadCircleX\"] = \"\\uE0B3\";\n    // U+E0B0  Circle X double whole\n    Glyphs[\"noteheadCircleXDoubleWhole\"] = \"\\uE0B0\";\n    // U+E0B2  Circle X half\n    Glyphs[\"noteheadCircleXHalf\"] = \"\\uE0B2\";\n    // U+E0B1  Circle X whole\n    Glyphs[\"noteheadCircleXWhole\"] = \"\\uE0B1\";\n    // U+E0E4  Circled black notehead\n    Glyphs[\"noteheadCircledBlack\"] = \"\\uE0E4\";\n    // U+E0E8  Black notehead in large circle\n    Glyphs[\"noteheadCircledBlackLarge\"] = \"\\uE0E8\";\n    // U+E0E7  Circled double whole notehead\n    Glyphs[\"noteheadCircledDoubleWhole\"] = \"\\uE0E7\";\n    // U+E0EB  Double whole notehead in large circle\n    Glyphs[\"noteheadCircledDoubleWholeLarge\"] = \"\\uE0EB\";\n    // U+E0E5  Circled half notehead\n    Glyphs[\"noteheadCircledHalf\"] = \"\\uE0E5\";\n    // U+E0E9  Half notehead in large circle\n    Glyphs[\"noteheadCircledHalfLarge\"] = \"\\uE0E9\";\n    // U+E0E6  Circled whole notehead\n    Glyphs[\"noteheadCircledWhole\"] = \"\\uE0E6\";\n    // U+E0EA  Whole notehead in large circle\n    Glyphs[\"noteheadCircledWholeLarge\"] = \"\\uE0EA\";\n    // U+E0EC  Cross notehead in large circle\n    Glyphs[\"noteheadCircledXLarge\"] = \"\\uE0EC\";\n    // U+E124  Double whole note cluster, 2nd\n    Glyphs[\"noteheadClusterDoubleWhole2nd\"] = \"\\uE124\";\n    // U+E128  Double whole note cluster, 3rd\n    Glyphs[\"noteheadClusterDoubleWhole3rd\"] = \"\\uE128\";\n    // U+E12E  Combining double whole note cluster, bottom\n    Glyphs[\"noteheadClusterDoubleWholeBottom\"] = \"\\uE12E\";\n    // U+E12D  Combining double whole note cluster, middle\n    Glyphs[\"noteheadClusterDoubleWholeMiddle\"] = \"\\uE12D\";\n    // U+E12C  Combining double whole note cluster, top\n    Glyphs[\"noteheadClusterDoubleWholeTop\"] = \"\\uE12C\";\n    // U+E126  Half note cluster, 2nd\n    Glyphs[\"noteheadClusterHalf2nd\"] = \"\\uE126\";\n    // U+E12A  Half note cluster, 3rd\n    Glyphs[\"noteheadClusterHalf3rd\"] = \"\\uE12A\";\n    // U+E134  Combining half note cluster, bottom\n    Glyphs[\"noteheadClusterHalfBottom\"] = \"\\uE134\";\n    // U+E133  Combining half note cluster, middle\n    Glyphs[\"noteheadClusterHalfMiddle\"] = \"\\uE133\";\n    // U+E132  Combining half note cluster, top\n    Glyphs[\"noteheadClusterHalfTop\"] = \"\\uE132\";\n    // U+E127  Quarter note cluster, 2nd\n    Glyphs[\"noteheadClusterQuarter2nd\"] = \"\\uE127\";\n    // U+E12B  Quarter note cluster, 3rd\n    Glyphs[\"noteheadClusterQuarter3rd\"] = \"\\uE12B\";\n    // U+E137  Combining quarter note cluster, bottom\n    Glyphs[\"noteheadClusterQuarterBottom\"] = \"\\uE137\";\n    // U+E136  Combining quarter note cluster, middle\n    Glyphs[\"noteheadClusterQuarterMiddle\"] = \"\\uE136\";\n    // U+E135  Combining quarter note cluster, top\n    Glyphs[\"noteheadClusterQuarterTop\"] = \"\\uE135\";\n    // U+E123  Cluster notehead black (round)\n    Glyphs[\"noteheadClusterRoundBlack\"] = \"\\uE123\";\n    // U+E122  Cluster notehead white (round)\n    Glyphs[\"noteheadClusterRoundWhite\"] = \"\\uE122\";\n    // U+E121  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlack\"] = \"\\uE121\";\n    // U+E120  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhite\"] = \"\\uE120\";\n    // U+E125  Whole note cluster, 2nd\n    Glyphs[\"noteheadClusterWhole2nd\"] = \"\\uE125\";\n    // U+E129  Whole note cluster, 3rd\n    Glyphs[\"noteheadClusterWhole3rd\"] = \"\\uE129\";\n    // U+E131  Combining whole note cluster, bottom\n    Glyphs[\"noteheadClusterWholeBottom\"] = \"\\uE131\";\n    // U+E130  Combining whole note cluster, middle\n    Glyphs[\"noteheadClusterWholeMiddle\"] = \"\\uE130\";\n    // U+E12F  Combining whole note cluster, top\n    Glyphs[\"noteheadClusterWholeTop\"] = \"\\uE12F\";\n    // U+EEAE  4/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesHalf\"] = \"\\uEEAE\";\n    // U+EEAD  8/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesWhole\"] = \"\\uEEAD\";\n    // U+EEAF  2/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhSeriesBlack\"] = \"\\uEEAF\";\n    // U+EEB5  2/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesBlack\"] = \"\\uEEB5\";\n    // U+EEB4  4/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesHalf\"] = \"\\uEEB4\";\n    // U+EEB3  8/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesWhole\"] = \"\\uEEB3\";\n    // U+EEA6  1/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesBlack\"] = \"\\uEEA6\";\n    // U+EEA5  2/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesHalf\"] = \"\\uEEA5\";\n    // U+EEA4  4/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesWhole\"] = \"\\uEEA4\";\n    // U+EEAC  2/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesBlack\"] = \"\\uEEAC\";\n    // U+EEAB  4/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesHalf\"] = \"\\uEEAB\";\n    // U+EEAA  8/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesWhole\"] = \"\\uEEAA\";\n    // U+EEA9  1/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesBlack\"] = \"\\uEEA9\";\n    // U+EEA8  2/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesHalf\"] = \"\\uEEA8\";\n    // U+EEA7  4/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesWhole\"] = \"\\uEEA7\";\n    // U+EEA3  1/6 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesBlack\"] = \"\\uEEA3\";\n    // U+EEA2  1/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesHalf\"] = \"\\uEEA2\";\n    // U+EEA1  2/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesWhole\"] = \"\\uEEA1\";\n    // U+EEB2  2/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesBlack\"] = \"\\uEEB2\";\n    // U+EEB1  4/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesHalf\"] = \"\\uEEB1\";\n    // U+EEB0  8/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesWhole\"] = \"\\uEEB0\";\n    // U+E0DB  Diamond black notehead\n    Glyphs[\"noteheadDiamondBlack\"] = \"\\uE0DB\";\n    // U+E0E2  Diamond black notehead (old)\n    Glyphs[\"noteheadDiamondBlackOld\"] = \"\\uE0E2\";\n    // U+E0DC  Diamond black notehead (wide)\n    Glyphs[\"noteheadDiamondBlackWide\"] = \"\\uE0DC\";\n    // U+E139  Black diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterBlack2nd\"] = \"\\uE139\";\n    // U+E13B  Black diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterBlack3rd\"] = \"\\uE13B\";\n    // U+E141  Combining black diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterBlackBottom\"] = \"\\uE141\";\n    // U+E140  Combining black diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterBlackMiddle\"] = \"\\uE140\";\n    // U+E13F  Combining black diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterBlackTop\"] = \"\\uE13F\";\n    // U+E138  White diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterWhite2nd\"] = \"\\uE138\";\n    // U+E13A  White diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterWhite3rd\"] = \"\\uE13A\";\n    // U+E13E  Combining white diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterWhiteBottom\"] = \"\\uE13E\";\n    // U+E13D  Combining white diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterWhiteMiddle\"] = \"\\uE13D\";\n    // U+E13C  Combining white diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterWhiteTop\"] = \"\\uE13C\";\n    // U+E0D7  Diamond double whole notehead\n    Glyphs[\"noteheadDiamondDoubleWhole\"] = \"\\uE0D7\";\n    // U+E0DF  Diamond double whole notehead (old)\n    Glyphs[\"noteheadDiamondDoubleWholeOld\"] = \"\\uE0DF\";\n    // U+E0D9  Diamond half notehead\n    Glyphs[\"noteheadDiamondHalf\"] = \"\\uE0D9\";\n    // U+E0E3  Half-filled diamond notehead\n    Glyphs[\"noteheadDiamondHalfFilled\"] = \"\\uE0E3\";\n    // U+E0E1  Diamond half notehead (old)\n    Glyphs[\"noteheadDiamondHalfOld\"] = \"\\uE0E1\";\n    // U+E0DA  Diamond half notehead (wide)\n    Glyphs[\"noteheadDiamondHalfWide\"] = \"\\uE0DA\";\n    // U+E0FC  Open diamond notehead\n    Glyphs[\"noteheadDiamondOpen\"] = \"\\uE0FC\";\n    // U+E0DD  Diamond white notehead\n    Glyphs[\"noteheadDiamondWhite\"] = \"\\uE0DD\";\n    // U+E0DE  Diamond white notehead (wide)\n    Glyphs[\"noteheadDiamondWhiteWide\"] = \"\\uE0DE\";\n    // U+E0D8  Diamond whole notehead\n    Glyphs[\"noteheadDiamondWhole\"] = \"\\uE0D8\";\n    // U+E0E0  Diamond whole notehead (old)\n    Glyphs[\"noteheadDiamondWholeOld\"] = \"\\uE0E0\";\n    // U+E0A0  Double whole (breve) notehead\n    Glyphs[\"noteheadDoubleWhole\"] = \"\\uE0A0\";\n    // U+E0A1  Double whole (breve) notehead (square)\n    Glyphs[\"noteheadDoubleWholeSquare\"] = \"\\uE0A1\";\n    // U+E0B4  Double whole notehead with X\n    Glyphs[\"noteheadDoubleWholeWithX\"] = \"\\uE0B4\";\n    // U+E0A3  Half (minim) notehead\n    Glyphs[\"noteheadHalf\"] = \"\\uE0A3\";\n    // U+E0FB  Filled half (minim) notehead\n    Glyphs[\"noteheadHalfFilled\"] = \"\\uE0FB\";\n    // U+E0B6  Half notehead with X\n    Glyphs[\"noteheadHalfWithX\"] = \"\\uE0B6\";\n    // U+E0F8  Heavy X notehead\n    Glyphs[\"noteheadHeavyX\"] = \"\\uE0F8\";\n    // U+E0F9  Heavy X with hat notehead\n    Glyphs[\"noteheadHeavyXHat\"] = \"\\uE0F9\";\n    // U+E0F4  Large arrow down (lowest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowDownBlack\"] = \"\\uE0F4\";\n    // U+E0F1  Large arrow down (lowest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowDownDoubleWhole\"] = \"\\uE0F1\";\n    // U+E0F3  Large arrow down (lowest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowDownHalf\"] = \"\\uE0F3\";\n    // U+E0F2  Large arrow down (lowest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowDownWhole\"] = \"\\uE0F2\";\n    // U+E0F0  Large arrow up (highest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowUpBlack\"] = \"\\uE0F0\";\n    // U+E0ED  Large arrow up (highest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowUpDoubleWhole\"] = \"\\uE0ED\";\n    // U+E0EF  Large arrow up (highest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowUpHalf\"] = \"\\uE0EF\";\n    // U+E0EE  Large arrow up (highest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowUpWhole\"] = \"\\uE0EE\";\n    // U+E0CB  Moon notehead black\n    Glyphs[\"noteheadMoonBlack\"] = \"\\uE0CB\";\n    // U+E0CA  Moon notehead white\n    Glyphs[\"noteheadMoonWhite\"] = \"\\uE0CA\";\n    // U+EEA0  Sine notehead (Nancarrow)\n    Glyphs[\"noteheadNancarrowSine\"] = \"\\uEEA0\";\n    // U+E0A5  Null notehead\n    Glyphs[\"noteheadNull\"] = \"\\uE0A5\";\n    // U+E0CE  Parenthesis notehead\n    Glyphs[\"noteheadParenthesis\"] = \"\\uE0CE\";\n    // U+E0F5  Opening parenthesis\n    Glyphs[\"noteheadParenthesisLeft\"] = \"\\uE0F5\";\n    // U+E0F6  Closing parenthesis\n    Glyphs[\"noteheadParenthesisRight\"] = \"\\uE0F6\";\n    // U+E0AF  Plus notehead black\n    Glyphs[\"noteheadPlusBlack\"] = \"\\uE0AF\";\n    // U+E0AC  Plus notehead double whole\n    Glyphs[\"noteheadPlusDoubleWhole\"] = \"\\uE0AC\";\n    // U+E0AE  Plus notehead half\n    Glyphs[\"noteheadPlusHalf\"] = \"\\uE0AE\";\n    // U+E0AD  Plus notehead whole\n    Glyphs[\"noteheadPlusWhole\"] = \"\\uE0AD\";\n    // U+E144  Combining black rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterBlackBottom\"] = \"\\uE144\";\n    // U+E143  Combining black rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterBlackMiddle\"] = \"\\uE143\";\n    // U+E142  Combining black rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterBlackTop\"] = \"\\uE142\";\n    // U+E147  Combining white rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterWhiteBottom\"] = \"\\uE147\";\n    // U+E146  Combining white rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterWhiteMiddle\"] = \"\\uE146\";\n    // U+E145  Combining white rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterWhiteTop\"] = \"\\uE145\";\n    // U+E113  Round black notehead\n    Glyphs[\"noteheadRoundBlack\"] = \"\\uE113\";\n    // U+E11C  Round black notehead, double slashed\n    Glyphs[\"noteheadRoundBlackDoubleSlashed\"] = \"\\uE11C\";\n    // U+E110  Large round black notehead\n    Glyphs[\"noteheadRoundBlackLarge\"] = \"\\uE110\";\n    // U+E118  Round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashed\"] = \"\\uE118\";\n    // U+E116  Large round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashedLarge\"] = \"\\uE116\";\n    // U+E114  Round white notehead\n    Glyphs[\"noteheadRoundWhite\"] = \"\\uE114\";\n    // U+E11D  Round white notehead, double slashed\n    Glyphs[\"noteheadRoundWhiteDoubleSlashed\"] = \"\\uE11D\";\n    // U+E111  Large round white notehead\n    Glyphs[\"noteheadRoundWhiteLarge\"] = \"\\uE111\";\n    // U+E119  Round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashed\"] = \"\\uE119\";\n    // U+E117  Large round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashedLarge\"] = \"\\uE117\";\n    // U+E115  Round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDot\"] = \"\\uE115\";\n    // U+E112  Large round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDotLarge\"] = \"\\uE112\";\n    // U+E104  Large white diamond\n    Glyphs[\"noteheadSlashDiamondWhite\"] = \"\\uE104\";\n    // U+E101  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEnds\"] = \"\\uE101\";\n    // U+E108  Muted slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsMuted\"] = \"\\uE108\";\n    // U+E100  Slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEnds\"] = \"\\uE100\";\n    // U+E107  Muted slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsMuted\"] = \"\\uE107\";\n    // U+E105  Small slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsSmall\"] = \"\\uE105\";\n    // U+E10A  White slash double whole\n    Glyphs[\"noteheadSlashWhiteDoubleWhole\"] = \"\\uE10A\";\n    // U+E103  White slash half\n    Glyphs[\"noteheadSlashWhiteHalf\"] = \"\\uE103\";\n    // U+E109  Muted white slash\n    Glyphs[\"noteheadSlashWhiteMuted\"] = \"\\uE109\";\n    // U+E102  White slash whole\n    Glyphs[\"noteheadSlashWhiteWhole\"] = \"\\uE102\";\n    // U+E106  Large X notehead\n    Glyphs[\"noteheadSlashX\"] = \"\\uE106\";\n    // U+E0CF  Slashed black notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedBlack1\"] = \"\\uE0CF\";\n    // U+E0D0  Slashed black notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedBlack2\"] = \"\\uE0D0\";\n    // U+E0D5  Slashed double whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedDoubleWhole1\"] = \"\\uE0D5\";\n    // U+E0D6  Slashed double whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedDoubleWhole2\"] = \"\\uE0D6\";\n    // U+E0D1  Slashed half notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedHalf1\"] = \"\\uE0D1\";\n    // U+E0D2  Slashed half notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedHalf2\"] = \"\\uE0D2\";\n    // U+E0D3  Slashed whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedWhole1\"] = \"\\uE0D3\";\n    // U+E0D4  Slashed whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedWhole2\"] = \"\\uE0D4\";\n    // U+E0B9  Square notehead black\n    Glyphs[\"noteheadSquareBlack\"] = \"\\uE0B9\";\n    // U+E11A  Large square black notehead\n    Glyphs[\"noteheadSquareBlackLarge\"] = \"\\uE11A\";\n    // U+E11B  Large square white notehead\n    Glyphs[\"noteheadSquareBlackWhite\"] = \"\\uE11B\";\n    // U+E0B8  Square notehead white\n    Glyphs[\"noteheadSquareWhite\"] = \"\\uE0B8\";\n    // U+E0C7  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlack\"] = \"\\uE0C7\";\n    // U+E0C3  Triangle notehead down double whole\n    Glyphs[\"noteheadTriangleDownDoubleWhole\"] = \"\\uE0C3\";\n    // U+E0C5  Triangle notehead down half\n    Glyphs[\"noteheadTriangleDownHalf\"] = \"\\uE0C5\";\n    // U+E0C6  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhite\"] = \"\\uE0C6\";\n    // U+E0C4  Triangle notehead down whole\n    Glyphs[\"noteheadTriangleDownWhole\"] = \"\\uE0C4\";\n    // U+E0C0  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlack\"] = \"\\uE0C0\";\n    // U+E0BF  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhite\"] = \"\\uE0BF\";\n    // U+E0C2  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlack\"] = \"\\uE0C2\";\n    // U+E0C1  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhite\"] = \"\\uE0C1\";\n    // U+E0CD  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlack\"] = \"\\uE0CD\";\n    // U+E0CC  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhite\"] = \"\\uE0CC\";\n    // U+E0BE  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlack\"] = \"\\uE0BE\";\n    // U+E0BA  Triangle notehead up double whole\n    Glyphs[\"noteheadTriangleUpDoubleWhole\"] = \"\\uE0BA\";\n    // U+E0BC  Triangle notehead up half\n    Glyphs[\"noteheadTriangleUpHalf\"] = \"\\uE0BC\";\n    // U+E0C9  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlack\"] = \"\\uE0C9\";\n    // U+E0C8  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhite\"] = \"\\uE0C8\";\n    // U+E0BD  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhite\"] = \"\\uE0BD\";\n    // U+E0BB  Triangle notehead up whole\n    Glyphs[\"noteheadTriangleUpWhole\"] = \"\\uE0BB\";\n    // U+E0B7  Void notehead with X\n    Glyphs[\"noteheadVoidWithX\"] = \"\\uE0B7\";\n    // U+E0A2  Whole (semibreve) notehead\n    Glyphs[\"noteheadWhole\"] = \"\\uE0A2\";\n    // U+E0FA  Filled whole (semibreve) notehead\n    Glyphs[\"noteheadWholeFilled\"] = \"\\uE0FA\";\n    // U+E0B5  Whole notehead with X\n    Glyphs[\"noteheadWholeWithX\"] = \"\\uE0B5\";\n    // U+E0A9  X notehead black\n    Glyphs[\"noteheadXBlack\"] = \"\\uE0A9\";\n    // U+E0A6  X notehead double whole\n    Glyphs[\"noteheadXDoubleWhole\"] = \"\\uE0A6\";\n    // U+E0A8  X notehead half\n    Glyphs[\"noteheadXHalf\"] = \"\\uE0A8\";\n    // U+E0AA  Ornate X notehead\n    Glyphs[\"noteheadXOrnate\"] = \"\\uE0AA\";\n    // U+E0AB  Ornate X notehead in ellipse\n    Glyphs[\"noteheadXOrnateEllipse\"] = \"\\uE0AB\";\n    // U+E0A7  X notehead whole\n    Glyphs[\"noteheadXWhole\"] = \"\\uE0A7\";\n    // U+EC91  a (baseline)\n    Glyphs[\"octaveBaselineA\"] = \"\\uEC91\";\n    // U+EC93  b (baseline)\n    Glyphs[\"octaveBaselineB\"] = \"\\uEC93\";\n    // U+EC95  m (baseline)\n    Glyphs[\"octaveBaselineM\"] = \"\\uEC95\";\n    // U+EC97  v (baseline)\n    Glyphs[\"octaveBaselineV\"] = \"\\uEC97\";\n    // U+E51F  Bassa\n    Glyphs[\"octaveBassa\"] = \"\\uE51F\";\n    // U+EC90  Loco\n    Glyphs[\"octaveLoco\"] = \"\\uEC90\";\n    // U+E51A  Left parenthesis for octave signs\n    Glyphs[\"octaveParensLeft\"] = \"\\uE51A\";\n    // U+E51B  Right parenthesis for octave signs\n    Glyphs[\"octaveParensRight\"] = \"\\uE51B\";\n    // U+EC92  a (superscript)\n    Glyphs[\"octaveSuperscriptA\"] = \"\\uEC92\";\n    // U+EC94  b (superscript)\n    Glyphs[\"octaveSuperscriptB\"] = \"\\uEC94\";\n    // U+EC96  m (superscript)\n    Glyphs[\"octaveSuperscriptM\"] = \"\\uEC96\";\n    // U+EC98  v (superscript)\n    Glyphs[\"octaveSuperscriptV\"] = \"\\uEC98\";\n    // U+E233  One-handed roll (Stevens)\n    Glyphs[\"oneHandedRollStevens\"] = \"\\uE233\";\n    // U+EE2E  Two Fusae\n    Glyphs[\"organGerman2Fusae\"] = \"\\uEE2E\";\n    // U+EE2C  Two Minimae\n    Glyphs[\"organGerman2Minimae\"] = \"\\uEE2C\";\n    // U+EE19  Combining double octave line above\n    Glyphs[\"organGerman2OctaveUp\"] = \"\\uEE19\";\n    // U+EE2F  Two Semifusae\n    Glyphs[\"organGerman2Semifusae\"] = \"\\uEE2F\";\n    // U+EE2D  Two Semiminimae\n    Glyphs[\"organGerman2Semiminimae\"] = \"\\uEE2D\";\n    // U+EE32  Three Fusae\n    Glyphs[\"organGerman3Fusae\"] = \"\\uEE32\";\n    // U+EE30  Three Minimae\n    Glyphs[\"organGerman3Minimae\"] = \"\\uEE30\";\n    // U+EE33  Three Semifusae\n    Glyphs[\"organGerman3Semifusae\"] = \"\\uEE33\";\n    // U+EE31  Three Semiminimae\n    Glyphs[\"organGerman3Semiminimae\"] = \"\\uEE31\";\n    // U+EE36  Four Fusae\n    Glyphs[\"organGerman4Fusae\"] = \"\\uEE36\";\n    // U+EE34  Four Minimae\n    Glyphs[\"organGerman4Minimae\"] = \"\\uEE34\";\n    // U+EE37  Four Semifusae\n    Glyphs[\"organGerman4Semifusae\"] = \"\\uEE37\";\n    // U+EE35  Four Semiminimae\n    Glyphs[\"organGerman4Semiminimae\"] = \"\\uEE35\";\n    // U+EE3A  Five Fusae\n    Glyphs[\"organGerman5Fusae\"] = \"\\uEE3A\";\n    // U+EE38  Five Minimae\n    Glyphs[\"organGerman5Minimae\"] = \"\\uEE38\";\n    // U+EE3B  Five Semifusae\n    Glyphs[\"organGerman5Semifusae\"] = \"\\uEE3B\";\n    // U+EE39  Five Semiminimae\n    Glyphs[\"organGerman5Semiminimae\"] = \"\\uEE39\";\n    // U+EE3E  Six Fusae\n    Glyphs[\"organGerman6Fusae\"] = \"\\uEE3E\";\n    // U+EE3C  Six Minimae\n    Glyphs[\"organGerman6Minimae\"] = \"\\uEE3C\";\n    // U+EE3F  Six Semifusae\n    Glyphs[\"organGerman6Semifusae\"] = \"\\uEE3F\";\n    // U+EE3D  Six Semiminimae\n    Glyphs[\"organGerman6Semiminimae\"] = \"\\uEE3D\";\n    // U+EE15  German organ tablature small A\n    Glyphs[\"organGermanALower\"] = \"\\uEE15\";\n    // U+EE09  German organ tablature great A\n    Glyphs[\"organGermanAUpper\"] = \"\\uEE09\";\n    // U+EE1C  Rhythm Dot\n    Glyphs[\"organGermanAugmentationDot\"] = \"\\uEE1C\";\n    // U+EE16  German organ tablature small B\n    Glyphs[\"organGermanBLower\"] = \"\\uEE16\";\n    // U+EE0A  German organ tablature great B\n    Glyphs[\"organGermanBUpper\"] = \"\\uEE0A\";\n    // U+EE25  Brevis (Binary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis2\"] = \"\\uEE25\";\n    // U+EE24  Brevis (Ternary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis3\"] = \"\\uEE24\";\n    // U+EE1E  Minima Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerMinimaRest\"] = \"\\uEE1E\";\n    // U+EE26  Semibrevis Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevis\"] = \"\\uEE26\";\n    // U+EE1D  Semibrevis Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevisRest\"] = \"\\uEE1D\";\n    // U+EE0C  German organ tablature small C\n    Glyphs[\"organGermanCLower\"] = \"\\uEE0C\";\n    // U+EE00  German organ tablature great C\n    Glyphs[\"organGermanCUpper\"] = \"\\uEE00\";\n    // U+EE0D  German organ tablature small Cis\n    Glyphs[\"organGermanCisLower\"] = \"\\uEE0D\";\n    // U+EE01  German organ tablature great Cis\n    Glyphs[\"organGermanCisUpper\"] = \"\\uEE01\";\n    // U+EE0E  German organ tablature small D\n    Glyphs[\"organGermanDLower\"] = \"\\uEE0E\";\n    // U+EE02  German organ tablature great D\n    Glyphs[\"organGermanDUpper\"] = \"\\uEE02\";\n    // U+EE0F  German organ tablature small Dis\n    Glyphs[\"organGermanDisLower\"] = \"\\uEE0F\";\n    // U+EE03  German organ tablature great Dis\n    Glyphs[\"organGermanDisUpper\"] = \"\\uEE03\";\n    // U+EE10  German organ tablature small E\n    Glyphs[\"organGermanELower\"] = \"\\uEE10\";\n    // U+EE04  German organ tablature great E\n    Glyphs[\"organGermanEUpper\"] = \"\\uEE04\";\n    // U+EE11  German organ tablature small F\n    Glyphs[\"organGermanFLower\"] = \"\\uEE11\";\n    // U+EE05  German organ tablature great F\n    Glyphs[\"organGermanFUpper\"] = \"\\uEE05\";\n    // U+EE12  German organ tablature small Fis\n    Glyphs[\"organGermanFisLower\"] = \"\\uEE12\";\n    // U+EE06  German organ tablature great Fis\n    Glyphs[\"organGermanFisUpper\"] = \"\\uEE06\";\n    // U+EE2A  Fusa\n    Glyphs[\"organGermanFusa\"] = \"\\uEE2A\";\n    // U+EE22  Fusa Rest\n    Glyphs[\"organGermanFusaRest\"] = \"\\uEE22\";\n    // U+EE13  German organ tablature small G\n    Glyphs[\"organGermanGLower\"] = \"\\uEE13\";\n    // U+EE07  German organ tablature great G\n    Glyphs[\"organGermanGUpper\"] = \"\\uEE07\";\n    // U+EE14  German organ tablature small Gis\n    Glyphs[\"organGermanGisLower\"] = \"\\uEE14\";\n    // U+EE08  German organ tablature great Gis\n    Glyphs[\"organGermanGisUpper\"] = \"\\uEE08\";\n    // U+EE17  German organ tablature small H\n    Glyphs[\"organGermanHLower\"] = \"\\uEE17\";\n    // U+EE0B  German organ tablature great H\n    Glyphs[\"organGermanHUpper\"] = \"\\uEE0B\";\n    // U+EE28  Minima\n    Glyphs[\"organGermanMinima\"] = \"\\uEE28\";\n    // U+EE20  Minima Rest\n    Glyphs[\"organGermanMinimaRest\"] = \"\\uEE20\";\n    // U+EE1A  Combining single octave line below\n    Glyphs[\"organGermanOctaveDown\"] = \"\\uEE1A\";\n    // U+EE18  Combining single octave line above\n    Glyphs[\"organGermanOctaveUp\"] = \"\\uEE18\";\n    // U+EE27  Semibrevis\n    Glyphs[\"organGermanSemibrevis\"] = \"\\uEE27\";\n    // U+EE1F  Semibrevis Rest\n    Glyphs[\"organGermanSemibrevisRest\"] = \"\\uEE1F\";\n    // U+EE2B  Semifusa\n    Glyphs[\"organGermanSemifusa\"] = \"\\uEE2B\";\n    // U+EE23  Semifusa Rest\n    Glyphs[\"organGermanSemifusaRest\"] = \"\\uEE23\";\n    // U+EE29  Semiminima\n    Glyphs[\"organGermanSemiminima\"] = \"\\uEE29\";\n    // U+EE21  Semiminima Rest\n    Glyphs[\"organGermanSemiminimaRest\"] = \"\\uEE21\";\n    // U+EE1B  Tie\n    Glyphs[\"organGermanTie\"] = \"\\uEE1B\";\n    // U+E59A  Ornament bottom left concave stroke\n    Glyphs[\"ornamentBottomLeftConcaveStroke\"] = \"\\uE59A\";\n    // U+E59B  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLarge\"] = \"\\uE59B\";\n    // U+E59C  Ornament bottom left convex stroke\n    Glyphs[\"ornamentBottomLeftConvexStroke\"] = \"\\uE59C\";\n    // U+E5A7  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStroke\"] = \"\\uE5A7\";\n    // U+E5A8  Ornament bottom right convex stroke\n    Glyphs[\"ornamentBottomRightConvexStroke\"] = \"\\uE5A8\";\n    // U+E581  Comma\n    Glyphs[\"ornamentComma\"] = \"\\uE581\";\n    // U+E57E  Double oblique straight lines NW-SE\n    Glyphs[\"ornamentDoubleObliqueLinesAfterNote\"] = \"\\uE57E\";\n    // U+E57D  Double oblique straight lines SW-NE\n    Glyphs[\"ornamentDoubleObliqueLinesBeforeNote\"] = \"\\uE57D\";\n    // U+E578  Curve below\n    Glyphs[\"ornamentDownCurve\"] = \"\\uE578\";\n    // U+E56F  Haydn ornament\n    Glyphs[\"ornamentHaydn\"] = \"\\uE56F\";\n    // U+E592  Ornament high left concave stroke\n    Glyphs[\"ornamentHighLeftConcaveStroke\"] = \"\\uE592\";\n    // U+E593  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStroke\"] = \"\\uE593\";\n    // U+E5A2  Ornament high right concave stroke\n    Glyphs[\"ornamentHighRightConcaveStroke\"] = \"\\uE5A2\";\n    // U+E5A3  Ornament high right convex stroke\n    Glyphs[\"ornamentHighRightConvexStroke\"] = \"\\uE5A3\";\n    // U+E576  Hook after note\n    Glyphs[\"ornamentHookAfterNote\"] = \"\\uE576\";\n    // U+E575  Hook before note\n    Glyphs[\"ornamentHookBeforeNote\"] = \"\\uE575\";\n    // U+E572  Left-facing half circle\n    Glyphs[\"ornamentLeftFacingHalfCircle\"] = \"\\uE572\";\n    // U+E574  Left-facing hook\n    Glyphs[\"ornamentLeftFacingHook\"] = \"\\uE574\";\n    // U+E597  Ornament left +\n    Glyphs[\"ornamentLeftPlus\"] = \"\\uE597\";\n    // U+E596  Ornament left shake t\n    Glyphs[\"ornamentLeftShakeT\"] = \"\\uE596\";\n    // U+E594  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStroke\"] = \"\\uE594\";\n    // U+E595  Ornament left vertical stroke with cross (+)\n    Glyphs[\"ornamentLeftVerticalStrokeWithCross\"] = \"\\uE595\";\n    // U+E598  Ornament low left concave stroke\n    Glyphs[\"ornamentLowLeftConcaveStroke\"] = \"\\uE598\";\n    // U+E599  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStroke\"] = \"\\uE599\";\n    // U+E5A5  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStroke\"] = \"\\uE5A5\";\n    // U+E5A6  Ornament low right convex stroke\n    Glyphs[\"ornamentLowRightConvexStroke\"] = \"\\uE5A6\";\n    // U+E59F  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStroke\"] = \"\\uE59F\";\n    // U+E56D  Mordent\n    Glyphs[\"ornamentMordent\"] = \"\\uE56D\";\n    // U+E57C  Oblique straight line NW-SE\n    Glyphs[\"ornamentObliqueLineAfterNote\"] = \"\\uE57C\";\n    // U+E57B  Oblique straight line SW-NE\n    Glyphs[\"ornamentObliqueLineBeforeNote\"] = \"\\uE57B\";\n    // U+E580  Oblique straight line tilted NW-SE\n    Glyphs[\"ornamentObliqueLineHorizAfterNote\"] = \"\\uE580\";\n    // U+E57F  Oblique straight line tilted SW-NE\n    Glyphs[\"ornamentObliqueLineHorizBeforeNote\"] = \"\\uE57F\";\n    // U+EA21  Oriscus\n    Glyphs[\"ornamentOriscus\"] = \"\\uEA21\";\n    // U+E588  Pincé (Couperin)\n    Glyphs[\"ornamentPinceCouperin\"] = \"\\uE588\";\n    // U+E570  Port de voix\n    Glyphs[\"ornamentPortDeVoixV\"] = \"\\uE570\";\n    // U+E5B2  Supported appoggiatura trill\n    Glyphs[\"ornamentPrecompAppoggTrill\"] = \"\\uE5B2\";\n    // U+E5B3  Supported appoggiatura trill with two-note suffix\n    Glyphs[\"ornamentPrecompAppoggTrillSuffix\"] = \"\\uE5B3\";\n    // U+E5BE  Cadence\n    Glyphs[\"ornamentPrecompCadence\"] = \"\\uE5BE\";\n    // U+E5C1  Cadence with upper prefix\n    Glyphs[\"ornamentPrecompCadenceUpperPrefix\"] = \"\\uE5C1\";\n    // U+E5C2  Cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompCadenceUpperPrefixTurn\"] = \"\\uE5C2\";\n    // U+E5BF  Cadence with turn\n    Glyphs[\"ornamentPrecompCadenceWithTurn\"] = \"\\uE5BF\";\n    // U+E5B1  Descending slide\n    Glyphs[\"ornamentPrecompDescendingSlide\"] = \"\\uE5B1\";\n    // U+E5C0  Double cadence with lower prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceLowerPrefix\"] = \"\\uE5C0\";\n    // U+E5C3  Double cadence with upper prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefix\"] = \"\\uE5C3\";\n    // U+E5C4  Double cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefixTurn\"] = \"\\uE5C4\";\n    // U+E5C7  Inverted mordent with upper prefix\n    Glyphs[\"ornamentPrecompInvertedMordentUpperPrefix\"] = \"\\uE5C7\";\n    // U+E5C5  Mordent with release\n    Glyphs[\"ornamentPrecompMordentRelease\"] = \"\\uE5C5\";\n    // U+E5C6  Mordent with upper prefix\n    Glyphs[\"ornamentPrecompMordentUpperPrefix\"] = \"\\uE5C6\";\n    // U+E5BC  Pre-beat port de voix followed by multiple mordent (Dandrieu)\n    Glyphs[\"ornamentPrecompPortDeVoixMordent\"] = \"\\uE5BC\";\n    // U+E5B0  Slide\n    Glyphs[\"ornamentPrecompSlide\"] = \"\\uE5B0\";\n    // U+E5B8  Slide-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompSlideTrillBach\"] = \"\\uE5B8\";\n    // U+E5B5  Slide-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompSlideTrillDAnglebert\"] = \"\\uE5B5\";\n    // U+E5B6  Slide-trill with one-note suffix (Marpurg)\n    Glyphs[\"ornamentPrecompSlideTrillMarpurg\"] = \"\\uE5B6\";\n    // U+E5B9  Slide-trill (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillMuffat\"] = \"\\uE5B9\";\n    // U+E5BA  Slide-trill with two-note suffix (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillSuffixMuffat\"] = \"\\uE5BA\";\n    // U+E5C8  Trill with lower suffix\n    Glyphs[\"ornamentPrecompTrillLowerSuffix\"] = \"\\uE5C8\";\n    // U+E5BB  Trill with two-note suffix (Dandrieu)\n    Glyphs[\"ornamentPrecompTrillSuffixDandrieu\"] = \"\\uE5BB\";\n    // U+E5BD  Trill with mordent\n    Glyphs[\"ornamentPrecompTrillWithMordent\"] = \"\\uE5BD\";\n    // U+E5B7  Turn-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompTurnTrillBach\"] = \"\\uE5B7\";\n    // U+E5B4  Turn-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompTurnTrillDAnglebert\"] = \"\\uE5B4\";\n    // U+EA20  Quilisma\n    Glyphs[\"ornamentQuilisma\"] = \"\\uEA20\";\n    // U+E571  Right-facing half circle\n    Glyphs[\"ornamentRightFacingHalfCircle\"] = \"\\uE571\";\n    // U+E573  Right-facing hook\n    Glyphs[\"ornamentRightFacingHook\"] = \"\\uE573\";\n    // U+E5A4  Ornament right vertical stroke\n    Glyphs[\"ornamentRightVerticalStroke\"] = \"\\uE5A4\";\n    // U+E587  Schleifer (long mordent)\n    Glyphs[\"ornamentSchleifer\"] = \"\\uE587\";\n    // U+E582  Shake\n    Glyphs[\"ornamentShake3\"] = \"\\uE582\";\n    // U+E584  Shake (Muffat)\n    Glyphs[\"ornamentShakeMuffat1\"] = \"\\uE584\";\n    // U+E57A  Short oblique straight line NW-SE\n    Glyphs[\"ornamentShortObliqueLineAfterNote\"] = \"\\uE57A\";\n    // U+E579  Short oblique straight line SW-NE\n    Glyphs[\"ornamentShortObliqueLineBeforeNote\"] = \"\\uE579\";\n    // U+E56C  Short trill\n    Glyphs[\"ornamentShortTrill\"] = \"\\uE56C\";\n    // U+E590  Ornament top left concave stroke\n    Glyphs[\"ornamentTopLeftConcaveStroke\"] = \"\\uE590\";\n    // U+E591  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStroke\"] = \"\\uE591\";\n    // U+E5A0  Ornament top right concave stroke\n    Glyphs[\"ornamentTopRightConcaveStroke\"] = \"\\uE5A0\";\n    // U+E5A1  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStroke\"] = \"\\uE5A1\";\n    // U+E56E  Tremblement\n    Glyphs[\"ornamentTremblement\"] = \"\\uE56E\";\n    // U+E589  Tremblement appuyé (Couperin)\n    Glyphs[\"ornamentTremblementCouperin\"] = \"\\uE589\";\n    // U+E566  Trill\n    Glyphs[\"ornamentTrill\"] = \"\\uE566\";\n    // U+E567  Turn\n    Glyphs[\"ornamentTurn\"] = \"\\uE567\";\n    // U+E568  Inverted turn\n    Glyphs[\"ornamentTurnInverted\"] = \"\\uE568\";\n    // U+E569  Turn with slash\n    Glyphs[\"ornamentTurnSlash\"] = \"\\uE569\";\n    // U+E56A  Turn up\n    Glyphs[\"ornamentTurnUp\"] = \"\\uE56A\";\n    // U+E56B  Inverted turn up\n    Glyphs[\"ornamentTurnUpS\"] = \"\\uE56B\";\n    // U+E577  Curve above\n    Glyphs[\"ornamentUpCurve\"] = \"\\uE577\";\n    // U+E583  Vertical line\n    Glyphs[\"ornamentVerticalLine\"] = \"\\uE583\";\n    // U+E59D  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEnd\"] = \"\\uE59D\";\n    // U+E59E  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEnd\"] = \"\\uE59E\";\n    // U+E510  Ottava\n    Glyphs[\"ottava\"] = \"\\uE510\";\n    // U+E511  Ottava alta\n    Glyphs[\"ottavaAlta\"] = \"\\uE511\";\n    // U+E512  Ottava bassa\n    Glyphs[\"ottavaBassa\"] = \"\\uE512\";\n    // U+E513  Ottava bassa (ba)\n    Glyphs[\"ottavaBassaBa\"] = \"\\uE513\";\n    // U+E51C  Ottava bassa (8vb)\n    Glyphs[\"ottavaBassaVb\"] = \"\\uE51C\";\n    // U+E22B  Penderecki unmeasured tremolo\n    Glyphs[\"pendereckiTremolo\"] = \"\\uE22B\";\n    // U+E717  Agogo\n    Glyphs[\"pictAgogo\"] = \"\\uE717\";\n    // U+E712  Almglocken\n    Glyphs[\"pictAlmglocken\"] = \"\\uE712\";\n    // U+E701  Anvil\n    Glyphs[\"pictAnvil\"] = \"\\uE701\";\n    // U+E6C3  Bamboo tube chimes\n    Glyphs[\"pictBambooChimes\"] = \"\\uE6C3\";\n    // U+E6FB  Bamboo scraper\n    Glyphs[\"pictBambooScraper\"] = \"\\uE6FB\";\n    // U+E6D4  Bass drum\n    Glyphs[\"pictBassDrum\"] = \"\\uE6D4\";\n    // U+E6D5  Bass drum on side\n    Glyphs[\"pictBassDrumOnSide\"] = \"\\uE6D5\";\n    // U+E7DE  Bow\n    Glyphs[\"pictBeaterBow\"] = \"\\uE7DE\";\n    // U+E7EB  Box for percussion beater\n    Glyphs[\"pictBeaterBox\"] = \"\\uE7EB\";\n    // U+E7DA  Brass mallets down\n    Glyphs[\"pictBeaterBrassMalletsDown\"] = \"\\uE7DA\";\n    // U+E7EE  Brass mallets left\n    Glyphs[\"pictBeaterBrassMalletsLeft\"] = \"\\uE7EE\";\n    // U+E7ED  Brass mallets right\n    Glyphs[\"pictBeaterBrassMalletsRight\"] = \"\\uE7ED\";\n    // U+E7D9  Brass mallets up\n    Glyphs[\"pictBeaterBrassMalletsUp\"] = \"\\uE7D9\";\n    // U+E7EA  Combining dashed circle for round beaters (plated)\n    Glyphs[\"pictBeaterCombiningDashedCircle\"] = \"\\uE7EA\";\n    // U+E7E9  Combining parentheses for round beaters (padded)\n    Glyphs[\"pictBeaterCombiningParentheses\"] = \"\\uE7E9\";\n    // U+E7A1  Double bass drum stick down\n    Glyphs[\"pictBeaterDoubleBassDrumDown\"] = \"\\uE7A1\";\n    // U+E7A0  Double bass drum stick up\n    Glyphs[\"pictBeaterDoubleBassDrumUp\"] = \"\\uE7A0\";\n    // U+E7E4  Finger\n    Glyphs[\"pictBeaterFinger\"] = \"\\uE7E4\";\n    // U+E7E6  Fingernails\n    Glyphs[\"pictBeaterFingernails\"] = \"\\uE7E6\";\n    // U+E7E5  Fist\n    Glyphs[\"pictBeaterFist\"] = \"\\uE7E5\";\n    // U+E7DD  Guiro scraper\n    Glyphs[\"pictBeaterGuiroScraper\"] = \"\\uE7DD\";\n    // U+E7E1  Hammer\n    Glyphs[\"pictBeaterHammer\"] = \"\\uE7E1\";\n    // U+E7D0  Metal hammer, down\n    Glyphs[\"pictBeaterHammerMetalDown\"] = \"\\uE7D0\";\n    // U+E7CF  Metal hammer, up\n    Glyphs[\"pictBeaterHammerMetalUp\"] = \"\\uE7CF\";\n    // U+E7CE  Plastic hammer, down\n    Glyphs[\"pictBeaterHammerPlasticDown\"] = \"\\uE7CE\";\n    // U+E7CD  Plastic hammer, up\n    Glyphs[\"pictBeaterHammerPlasticUp\"] = \"\\uE7CD\";\n    // U+E7CC  Wooden hammer, down\n    Glyphs[\"pictBeaterHammerWoodDown\"] = \"\\uE7CC\";\n    // U+E7CB  Wooden hammer, up\n    Glyphs[\"pictBeaterHammerWoodUp\"] = \"\\uE7CB\";\n    // U+E7E3  Hand\n    Glyphs[\"pictBeaterHand\"] = \"\\uE7E3\";\n    // U+E79D  Hard bass drum stick down\n    Glyphs[\"pictBeaterHardBassDrumDown\"] = \"\\uE79D\";\n    // U+E79C  Hard bass drum stick up\n    Glyphs[\"pictBeaterHardBassDrumUp\"] = \"\\uE79C\";\n    // U+E785  Hard glockenspiel stick down\n    Glyphs[\"pictBeaterHardGlockenspielDown\"] = \"\\uE785\";\n    // U+E787  Hard glockenspiel stick left\n    Glyphs[\"pictBeaterHardGlockenspielLeft\"] = \"\\uE787\";\n    // U+E786  Hard glockenspiel stick right\n    Glyphs[\"pictBeaterHardGlockenspielRight\"] = \"\\uE786\";\n    // U+E784  Hard glockenspiel stick up\n    Glyphs[\"pictBeaterHardGlockenspielUp\"] = \"\\uE784\";\n    // U+E791  Hard timpani stick down\n    Glyphs[\"pictBeaterHardTimpaniDown\"] = \"\\uE791\";\n    // U+E793  Hard timpani stick left\n    Glyphs[\"pictBeaterHardTimpaniLeft\"] = \"\\uE793\";\n    // U+E792  Hard timpani stick right\n    Glyphs[\"pictBeaterHardTimpaniRight\"] = \"\\uE792\";\n    // U+E790  Hard timpani stick up\n    Glyphs[\"pictBeaterHardTimpaniUp\"] = \"\\uE790\";\n    // U+E779  Hard xylophone stick down\n    Glyphs[\"pictBeaterHardXylophoneDown\"] = \"\\uE779\";\n    // U+E77B  Hard xylophone stick left\n    Glyphs[\"pictBeaterHardXylophoneLeft\"] = \"\\uE77B\";\n    // U+E77A  Hard xylophone stick right\n    Glyphs[\"pictBeaterHardXylophoneRight\"] = \"\\uE77A\";\n    // U+E778  Hard xylophone stick up\n    Glyphs[\"pictBeaterHardXylophoneUp\"] = \"\\uE778\";\n    // U+E7AB  Hard yarn beater down\n    Glyphs[\"pictBeaterHardYarnDown\"] = \"\\uE7AB\";\n    // U+E7AD  Hard yarn beater left\n    Glyphs[\"pictBeaterHardYarnLeft\"] = \"\\uE7AD\";\n    // U+E7AC  Hard yarn beater right\n    Glyphs[\"pictBeaterHardYarnRight\"] = \"\\uE7AC\";\n    // U+E7AA  Hard yarn beater up\n    Glyphs[\"pictBeaterHardYarnUp\"] = \"\\uE7AA\";\n    // U+E7D4  Jazz sticks down\n    Glyphs[\"pictBeaterJazzSticksDown\"] = \"\\uE7D4\";\n    // U+E7D3  Jazz sticks up\n    Glyphs[\"pictBeaterJazzSticksUp\"] = \"\\uE7D3\";\n    // U+E7E2  Knitting needle\n    Glyphs[\"pictBeaterKnittingNeedle\"] = \"\\uE7E2\";\n    // U+E7DF  Chime hammer up\n    Glyphs[\"pictBeaterMallet\"] = \"\\uE7DF\";\n    // U+E7EC  Chime hammer down\n    Glyphs[\"pictBeaterMalletDown\"] = \"\\uE7EC\";\n    // U+E79B  Medium bass drum stick down\n    Glyphs[\"pictBeaterMediumBassDrumDown\"] = \"\\uE79B\";\n    // U+E79A  Medium bass drum stick up\n    Glyphs[\"pictBeaterMediumBassDrumUp\"] = \"\\uE79A\";\n    // U+E78D  Medium timpani stick down\n    Glyphs[\"pictBeaterMediumTimpaniDown\"] = \"\\uE78D\";\n    // U+E78F  Medium timpani stick left\n    Glyphs[\"pictBeaterMediumTimpaniLeft\"] = \"\\uE78F\";\n    // U+E78E  Medium timpani stick right\n    Glyphs[\"pictBeaterMediumTimpaniRight\"] = \"\\uE78E\";\n    // U+E78C  Medium timpani stick up\n    Glyphs[\"pictBeaterMediumTimpaniUp\"] = \"\\uE78C\";\n    // U+E775  Medium xylophone stick down\n    Glyphs[\"pictBeaterMediumXylophoneDown\"] = \"\\uE775\";\n    // U+E777  Medium xylophone stick left\n    Glyphs[\"pictBeaterMediumXylophoneLeft\"] = \"\\uE777\";\n    // U+E776  Medium xylophone stick right\n    Glyphs[\"pictBeaterMediumXylophoneRight\"] = \"\\uE776\";\n    // U+E774  Medium xylophone stick up\n    Glyphs[\"pictBeaterMediumXylophoneUp\"] = \"\\uE774\";\n    // U+E7A7  Medium yarn beater down\n    Glyphs[\"pictBeaterMediumYarnDown\"] = \"\\uE7A7\";\n    // U+E7A9  Medium yarn beater left\n    Glyphs[\"pictBeaterMediumYarnLeft\"] = \"\\uE7A9\";\n    // U+E7A8  Medium yarn beater right\n    Glyphs[\"pictBeaterMediumYarnRight\"] = \"\\uE7A8\";\n    // U+E7A6  Medium yarn beater up\n    Glyphs[\"pictBeaterMediumYarnUp\"] = \"\\uE7A6\";\n    // U+E79F  Metal bass drum stick down\n    Glyphs[\"pictBeaterMetalBassDrumDown\"] = \"\\uE79F\";\n    // U+E79E  Metal bass drum stick up\n    Glyphs[\"pictBeaterMetalBassDrumUp\"] = \"\\uE79E\";\n    // U+E7C8  Metal beater down\n    Glyphs[\"pictBeaterMetalDown\"] = \"\\uE7C8\";\n    // U+E7E0  Metal hammer\n    Glyphs[\"pictBeaterMetalHammer\"] = \"\\uE7E0\";\n    // U+E7CA  Metal beater, left\n    Glyphs[\"pictBeaterMetalLeft\"] = \"\\uE7CA\";\n    // U+E7C9  Metal beater, right\n    Glyphs[\"pictBeaterMetalRight\"] = \"\\uE7C9\";\n    // U+E7C7  Metal beater, up\n    Glyphs[\"pictBeaterMetalUp\"] = \"\\uE7C7\";\n    // U+E7D2  Snare sticks down\n    Glyphs[\"pictBeaterSnareSticksDown\"] = \"\\uE7D2\";\n    // U+E7D1  Snare sticks up\n    Glyphs[\"pictBeaterSnareSticksUp\"] = \"\\uE7D1\";\n    // U+E799  Soft bass drum stick down\n    Glyphs[\"pictBeaterSoftBassDrumDown\"] = \"\\uE799\";\n    // U+E798  Soft bass drum stick up\n    Glyphs[\"pictBeaterSoftBassDrumUp\"] = \"\\uE798\";\n    // U+E781  Soft glockenspiel stick down\n    Glyphs[\"pictBeaterSoftGlockenspielDown\"] = \"\\uE781\";\n    // U+E783  Soft glockenspiel stick left\n    Glyphs[\"pictBeaterSoftGlockenspielLeft\"] = \"\\uE783\";\n    // U+E782  Soft glockenspiel stick right\n    Glyphs[\"pictBeaterSoftGlockenspielRight\"] = \"\\uE782\";\n    // U+E780  Soft glockenspiel stick up\n    Glyphs[\"pictBeaterSoftGlockenspielUp\"] = \"\\uE780\";\n    // U+E789  Soft timpani stick down\n    Glyphs[\"pictBeaterSoftTimpaniDown\"] = \"\\uE789\";\n    // U+E78B  Soft timpani stick left\n    Glyphs[\"pictBeaterSoftTimpaniLeft\"] = \"\\uE78B\";\n    // U+E78A  Soft timpani stick right\n    Glyphs[\"pictBeaterSoftTimpaniRight\"] = \"\\uE78A\";\n    // U+E788  Soft timpani stick up\n    Glyphs[\"pictBeaterSoftTimpaniUp\"] = \"\\uE788\";\n    // U+E7DB  Soft xylophone beaters\n    Glyphs[\"pictBeaterSoftXylophone\"] = \"\\uE7DB\";\n    // U+E771  Soft xylophone stick down\n    Glyphs[\"pictBeaterSoftXylophoneDown\"] = \"\\uE771\";\n    // U+E773  Soft xylophone stick left\n    Glyphs[\"pictBeaterSoftXylophoneLeft\"] = \"\\uE773\";\n    // U+E772  Soft xylophone stick right\n    Glyphs[\"pictBeaterSoftXylophoneRight\"] = \"\\uE772\";\n    // U+E770  Soft xylophone stick up\n    Glyphs[\"pictBeaterSoftXylophoneUp\"] = \"\\uE770\";\n    // U+E7A3  Soft yarn beater down\n    Glyphs[\"pictBeaterSoftYarnDown\"] = \"\\uE7A3\";\n    // U+E7A5  Soft yarn beater left\n    Glyphs[\"pictBeaterSoftYarnLeft\"] = \"\\uE7A5\";\n    // U+E7A4  Soft yarn beater right\n    Glyphs[\"pictBeaterSoftYarnRight\"] = \"\\uE7A4\";\n    // U+E7A2  Soft yarn beater up\n    Glyphs[\"pictBeaterSoftYarnUp\"] = \"\\uE7A2\";\n    // U+E7DC  Spoon-shaped wooden mallet\n    Glyphs[\"pictBeaterSpoonWoodenMallet\"] = \"\\uE7DC\";\n    // U+E7AF  Superball beater down\n    Glyphs[\"pictBeaterSuperballDown\"] = \"\\uE7AF\";\n    // U+E7B1  Superball beater left\n    Glyphs[\"pictBeaterSuperballLeft\"] = \"\\uE7B1\";\n    // U+E7B0  Superball beater right\n    Glyphs[\"pictBeaterSuperballRight\"] = \"\\uE7B0\";\n    // U+E7AE  Superball beater up\n    Glyphs[\"pictBeaterSuperballUp\"] = \"\\uE7AE\";\n    // U+E7D6  Triangle beater down\n    Glyphs[\"pictBeaterTriangleDown\"] = \"\\uE7D6\";\n    // U+E7EF  Triangle beater plain\n    Glyphs[\"pictBeaterTrianglePlain\"] = \"\\uE7EF\";\n    // U+E7D5  Triangle beater up\n    Glyphs[\"pictBeaterTriangleUp\"] = \"\\uE7D5\";\n    // U+E7D8  Wire brushes down\n    Glyphs[\"pictBeaterWireBrushesDown\"] = \"\\uE7D8\";\n    // U+E7D7  Wire brushes up\n    Glyphs[\"pictBeaterWireBrushesUp\"] = \"\\uE7D7\";\n    // U+E795  Wood timpani stick down\n    Glyphs[\"pictBeaterWoodTimpaniDown\"] = \"\\uE795\";\n    // U+E797  Wood timpani stick left\n    Glyphs[\"pictBeaterWoodTimpaniLeft\"] = \"\\uE797\";\n    // U+E796  Wood timpani stick right\n    Glyphs[\"pictBeaterWoodTimpaniRight\"] = \"\\uE796\";\n    // U+E794  Wood timpani stick up\n    Glyphs[\"pictBeaterWoodTimpaniUp\"] = \"\\uE794\";\n    // U+E77D  Wood xylophone stick down\n    Glyphs[\"pictBeaterWoodXylophoneDown\"] = \"\\uE77D\";\n    // U+E77F  Wood xylophone stick left\n    Glyphs[\"pictBeaterWoodXylophoneLeft\"] = \"\\uE77F\";\n    // U+E77E  Wood xylophone stick right\n    Glyphs[\"pictBeaterWoodXylophoneRight\"] = \"\\uE77E\";\n    // U+E77C  Wood xylophone stick up\n    Glyphs[\"pictBeaterWoodXylophoneUp\"] = \"\\uE77C\";\n    // U+E714  Bell\n    Glyphs[\"pictBell\"] = \"\\uE714\";\n    // U+E72A  Bell of cymbal\n    Glyphs[\"pictBellOfCymbal\"] = \"\\uE72A\";\n    // U+E713  Bell plate\n    Glyphs[\"pictBellPlate\"] = \"\\uE713\";\n    // U+E71A  Bell tree\n    Glyphs[\"pictBellTree\"] = \"\\uE71A\";\n    // U+E751  Bird whistle\n    Glyphs[\"pictBirdWhistle\"] = \"\\uE751\";\n    // U+E6F7  Board clapper\n    Glyphs[\"pictBoardClapper\"] = \"\\uE6F7\";\n    // U+E6DD  Bongos\n    Glyphs[\"pictBongos\"] = \"\\uE6DD\";\n    // U+E6E1  Brake drum\n    Glyphs[\"pictBrakeDrum\"] = \"\\uE6E1\";\n    // U+E743  Cabasa\n    Glyphs[\"pictCabasa\"] = \"\\uE743\";\n    // U+E761  Cannon\n    Glyphs[\"pictCannon\"] = \"\\uE761\";\n    // U+E755  Car horn\n    Glyphs[\"pictCarHorn\"] = \"\\uE755\";\n    // U+E6F8  Castanets\n    Glyphs[\"pictCastanets\"] = \"\\uE6F8\";\n    // U+E6F9  Castanets with handle\n    Glyphs[\"pictCastanetsWithHandle\"] = \"\\uE6F9\";\n    // U+E6B0  Celesta\n    Glyphs[\"pictCelesta\"] = \"\\uE6B0\";\n    // U+E716  Cencerro\n    Glyphs[\"pictCencerro\"] = \"\\uE716\";\n    // U+E7FE  Center (Weinberg)\n    Glyphs[\"pictCenter1\"] = \"\\uE7FE\";\n    // U+E7FF  Center (Ghent)\n    Glyphs[\"pictCenter2\"] = \"\\uE7FF\";\n    // U+E800  Center (Caltabiano)\n    Glyphs[\"pictCenter3\"] = \"\\uE800\";\n    // U+E748  Chain rattle\n    Glyphs[\"pictChainRattle\"] = \"\\uE748\";\n    // U+E6C2  Chimes\n    Glyphs[\"pictChimes\"] = \"\\uE6C2\";\n    // U+E726  Chinese cymbal\n    Glyphs[\"pictChineseCymbal\"] = \"\\uE726\";\n    // U+E805  Choke (Weinberg)\n    Glyphs[\"pictChokeCymbal\"] = \"\\uE805\";\n    // U+E6F2  Claves\n    Glyphs[\"pictClaves\"] = \"\\uE6F2\";\n    // U+E7E7  Coins\n    Glyphs[\"pictCoins\"] = \"\\uE7E7\";\n    // U+E6DE  Conga\n    Glyphs[\"pictConga\"] = \"\\uE6DE\";\n    // U+E711  Cow bell\n    Glyphs[\"pictCowBell\"] = \"\\uE711\";\n    // U+E720  Crash cymbals\n    Glyphs[\"pictCrashCymbals\"] = \"\\uE720\";\n    // U+E6AE  Crotales\n    Glyphs[\"pictCrotales\"] = \"\\uE6AE\";\n    // U+E80C  Combining crush for stem\n    Glyphs[\"pictCrushStem\"] = \"\\uE80C\";\n    // U+E6E4  Cuica\n    Glyphs[\"pictCuica\"] = \"\\uE6E4\";\n    // U+E728  Cymbal tongs\n    Glyphs[\"pictCymbalTongs\"] = \"\\uE728\";\n    // U+E7F9  Damp\n    Glyphs[\"pictDamp1\"] = \"\\uE7F9\";\n    // U+E7FA  Damp 2\n    Glyphs[\"pictDamp2\"] = \"\\uE7FA\";\n    // U+E7FB  Damp 3\n    Glyphs[\"pictDamp3\"] = \"\\uE7FB\";\n    // U+E7FC  Damp 4\n    Glyphs[\"pictDamp4\"] = \"\\uE7FC\";\n    // U+E80D  Combining X for stem (dead note)\n    Glyphs[\"pictDeadNoteStem\"] = \"\\uE80D\";\n    // U+E7E8  Drum stick\n    Glyphs[\"pictDrumStick\"] = \"\\uE7E8\";\n    // U+E757  Duck call\n    Glyphs[\"pictDuckCall\"] = \"\\uE757\";\n    // U+E729  Edge of cymbal\n    Glyphs[\"pictEdgeOfCymbal\"] = \"\\uE729\";\n    // U+E6A9  Empty trapezoid\n    Glyphs[\"pictEmptyTrap\"] = \"\\uE6A9\";\n    // U+E727  Finger cymbals\n    Glyphs[\"pictFingerCymbals\"] = \"\\uE727\";\n    // U+E740  Flexatone\n    Glyphs[\"pictFlexatone\"] = \"\\uE740\";\n    // U+E6F5  Football rattle\n    Glyphs[\"pictFootballRatchet\"] = \"\\uE6F5\";\n    // U+E765  Glass harmonica\n    Glyphs[\"pictGlassHarmonica\"] = \"\\uE765\";\n    // U+E764  Glass harp\n    Glyphs[\"pictGlassHarp\"] = \"\\uE764\";\n    // U+E6C6  Glass plate chimes\n    Glyphs[\"pictGlassPlateChimes\"] = \"\\uE6C6\";\n    // U+E6C5  Glass tube chimes\n    Glyphs[\"pictGlassTubeChimes\"] = \"\\uE6C5\";\n    // U+E6A0  Glockenspiel\n    Glyphs[\"pictGlsp\"] = \"\\uE6A0\";\n    // U+E6AA  Glockenspiel (Smith Brindle)\n    Glyphs[\"pictGlspSmithBrindle\"] = \"\\uE6AA\";\n    // U+E6E2  Goblet drum (djembe, dumbek)\n    Glyphs[\"pictGobletDrum\"] = \"\\uE6E2\";\n    // U+E732  Gong\n    Glyphs[\"pictGong\"] = \"\\uE732\";\n    // U+E733  Gong with button (nipple)\n    Glyphs[\"pictGongWithButton\"] = \"\\uE733\";\n    // U+E6F3  Guiro\n    Glyphs[\"pictGuiro\"] = \"\\uE6F3\";\n    // U+E7C4  Hard gum beater, down\n    Glyphs[\"pictGumHardDown\"] = \"\\uE7C4\";\n    // U+E7C6  Hard gum beater, left\n    Glyphs[\"pictGumHardLeft\"] = \"\\uE7C6\";\n    // U+E7C5  Hard gum beater, right\n    Glyphs[\"pictGumHardRight\"] = \"\\uE7C5\";\n    // U+E7C3  Hard gum beater, up\n    Glyphs[\"pictGumHardUp\"] = \"\\uE7C3\";\n    // U+E7C0  Medium gum beater, down\n    Glyphs[\"pictGumMediumDown\"] = \"\\uE7C0\";\n    // U+E7C2  Medium gum beater, left\n    Glyphs[\"pictGumMediumLeft\"] = \"\\uE7C2\";\n    // U+E7C1  Medium gum beater, right\n    Glyphs[\"pictGumMediumRight\"] = \"\\uE7C1\";\n    // U+E7BF  Medium gum beater, up\n    Glyphs[\"pictGumMediumUp\"] = \"\\uE7BF\";\n    // U+E7BC  Soft gum beater, down\n    Glyphs[\"pictGumSoftDown\"] = \"\\uE7BC\";\n    // U+E7BE  Soft gum beater, left\n    Glyphs[\"pictGumSoftLeft\"] = \"\\uE7BE\";\n    // U+E7BD  Soft gum beater, right\n    Glyphs[\"pictGumSoftRight\"] = \"\\uE7BD\";\n    // U+E7BB  Soft gum beater, up\n    Glyphs[\"pictGumSoftUp\"] = \"\\uE7BB\";\n    // U+E7F6  Half-open\n    Glyphs[\"pictHalfOpen1\"] = \"\\uE7F6\";\n    // U+E7F7  Half-open 2 (Weinberg)\n    Glyphs[\"pictHalfOpen2\"] = \"\\uE7F7\";\n    // U+E715  Handbell\n    Glyphs[\"pictHandbell\"] = \"\\uE715\";\n    // U+E722  Hi-hat\n    Glyphs[\"pictHiHat\"] = \"\\uE722\";\n    // U+E723  Hi-hat cymbals on stand\n    Glyphs[\"pictHiHatOnStand\"] = \"\\uE723\";\n    // U+E767  Jaw harp\n    Glyphs[\"pictJawHarp\"] = \"\\uE767\";\n    // U+E719  Jingle bells\n    Glyphs[\"pictJingleBells\"] = \"\\uE719\";\n    // U+E756  Klaxon horn\n    Glyphs[\"pictKlaxonHorn\"] = \"\\uE756\";\n    // U+E807  Right hand (Agostini)\n    Glyphs[\"pictLeftHandCircle\"] = \"\\uE807\";\n    // U+E763  Lion's roar\n    Glyphs[\"pictLionsRoar\"] = \"\\uE763\";\n    // U+E6B1  Lithophone\n    Glyphs[\"pictLithophone\"] = \"\\uE6B1\";\n    // U+E6DF  Log drum\n    Glyphs[\"pictLogDrum\"] = \"\\uE6DF\";\n    // U+E75A  Lotus flute\n    Glyphs[\"pictLotusFlute\"] = \"\\uE75A\";\n    // U+E6A6  Marimba\n    Glyphs[\"pictMar\"] = \"\\uE6A6\";\n    // U+E6AC  Marimba (Smith Brindle)\n    Glyphs[\"pictMarSmithBrindle\"] = \"\\uE6AC\";\n    // U+E741  Maraca\n    Glyphs[\"pictMaraca\"] = \"\\uE741\";\n    // U+E742  Maracas\n    Glyphs[\"pictMaracas\"] = \"\\uE742\";\n    // U+E759  Megaphone\n    Glyphs[\"pictMegaphone\"] = \"\\uE759\";\n    // U+E6C8  Metal plate chimes\n    Glyphs[\"pictMetalPlateChimes\"] = \"\\uE6C8\";\n    // U+E6C7  Metal tube chimes\n    Glyphs[\"pictMetalTubeChimes\"] = \"\\uE6C7\";\n    // U+E766  Musical saw\n    Glyphs[\"pictMusicalSaw\"] = \"\\uE766\";\n    // U+E804  Normal position (Caltabiano)\n    Glyphs[\"pictNormalPosition\"] = \"\\uE804\";\n    // U+E7F4  On rim\n    Glyphs[\"pictOnRim\"] = \"\\uE7F4\";\n    // U+E7F8  Open\n    Glyphs[\"pictOpen\"] = \"\\uE7F8\";\n    // U+E7F5  Closed / rim shot\n    Glyphs[\"pictOpenRimShot\"] = \"\\uE7F5\";\n    // U+E760  Pistol shot\n    Glyphs[\"pictPistolShot\"] = \"\\uE760\";\n    // U+E752  Police whistle\n    Glyphs[\"pictPoliceWhistle\"] = \"\\uE752\";\n    // U+E6FA  Quijada (jawbone)\n    Glyphs[\"pictQuijada\"] = \"\\uE6FA\";\n    // U+E747  Rainstick\n    Glyphs[\"pictRainstick\"] = \"\\uE747\";\n    // U+E6F4  Ratchet\n    Glyphs[\"pictRatchet\"] = \"\\uE6F4\";\n    // U+E6FC  Reco-reco\n    Glyphs[\"pictRecoReco\"] = \"\\uE6FC\";\n    // U+E806  Left hand (Agostini)\n    Glyphs[\"pictRightHandSquare\"] = \"\\uE806\";\n    // U+E801  Rim or edge (Weinberg)\n    Glyphs[\"pictRim1\"] = \"\\uE801\";\n    // U+E802  Rim (Ghent)\n    Glyphs[\"pictRim2\"] = \"\\uE802\";\n    // U+E803  Rim (Caltabiano)\n    Glyphs[\"pictRim3\"] = \"\\uE803\";\n    // U+E7FD  Rim shot for stem\n    Glyphs[\"pictRimShotOnStem\"] = \"\\uE7FD\";\n    // U+E762  Sandpaper blocks\n    Glyphs[\"pictSandpaperBlocks\"] = \"\\uE762\";\n    // U+E7F3  Scrape around rim (counter-clockwise)\n    Glyphs[\"pictScrapeAroundRim\"] = \"\\uE7F3\";\n    // U+E80E  Scrape around rim (clockwise)\n    Glyphs[\"pictScrapeAroundRimClockwise\"] = \"\\uE80E\";\n    // U+E7F1  Scrape from center to edge\n    Glyphs[\"pictScrapeCenterToEdge\"] = \"\\uE7F1\";\n    // U+E7F2  Scrape from edge to center\n    Glyphs[\"pictScrapeEdgeToCenter\"] = \"\\uE7F2\";\n    // U+E718  Shell bells\n    Glyphs[\"pictShellBells\"] = \"\\uE718\";\n    // U+E6C4  Shell chimes\n    Glyphs[\"pictShellChimes\"] = \"\\uE6C4\";\n    // U+E753  Siren\n    Glyphs[\"pictSiren\"] = \"\\uE753\";\n    // U+E746  Sistrum\n    Glyphs[\"pictSistrum\"] = \"\\uE746\";\n    // U+E724  Sizzle cymbal\n    Glyphs[\"pictSizzleCymbal\"] = \"\\uE724\";\n    // U+E710  Sleigh bell\n    Glyphs[\"pictSleighBell\"] = \"\\uE710\";\n    // U+E734  Slide brush on gong\n    Glyphs[\"pictSlideBrushOnGong\"] = \"\\uE734\";\n    // U+E750  Slide whistle\n    Glyphs[\"pictSlideWhistle\"] = \"\\uE750\";\n    // U+E6E0  Slit drum\n    Glyphs[\"pictSlitDrum\"] = \"\\uE6E0\";\n    // U+E6D1  Snare drum\n    Glyphs[\"pictSnareDrum\"] = \"\\uE6D1\";\n    // U+E6D3  Military snare drum\n    Glyphs[\"pictSnareDrumMilitary\"] = \"\\uE6D3\";\n    // U+E6D2  Snare drum, snares off\n    Glyphs[\"pictSnareDrumSnaresOff\"] = \"\\uE6D2\";\n    // U+E6AF  Steel drums\n    Glyphs[\"pictSteelDrums\"] = \"\\uE6AF\";\n    // U+E7F0  Stick shot\n    Glyphs[\"pictStickShot\"] = \"\\uE7F0\";\n    // U+E7B2  Superball\n    Glyphs[\"pictSuperball\"] = \"\\uE7B2\";\n    // U+E721  Suspended cymbal\n    Glyphs[\"pictSuspendedCymbal\"] = \"\\uE721\";\n    // U+E808  Combining swish for stem\n    Glyphs[\"pictSwishStem\"] = \"\\uE808\";\n    // U+E6E3  Indian tabla\n    Glyphs[\"pictTabla\"] = \"\\uE6E3\";\n    // U+E730  Tam-tam\n    Glyphs[\"pictTamTam\"] = \"\\uE730\";\n    // U+E731  Tam-tam with beater (Smith Brindle)\n    Glyphs[\"pictTamTamWithBeater\"] = \"\\uE731\";\n    // U+E6DB  Tambourine\n    Glyphs[\"pictTambourine\"] = \"\\uE6DB\";\n    // U+E6F1  Temple blocks\n    Glyphs[\"pictTempleBlocks\"] = \"\\uE6F1\";\n    // U+E6D6  Tenor drum\n    Glyphs[\"pictTenorDrum\"] = \"\\uE6D6\";\n    // U+E744  Thundersheet\n    Glyphs[\"pictThundersheet\"] = \"\\uE744\";\n    // U+E6DC  Timbales\n    Glyphs[\"pictTimbales\"] = \"\\uE6DC\";\n    // U+E6D0  Timpani\n    Glyphs[\"pictTimpani\"] = \"\\uE6D0\";\n    // U+E6D7  Tom-tom\n    Glyphs[\"pictTomTom\"] = \"\\uE6D7\";\n    // U+E6D8  Chinese tom-tom\n    Glyphs[\"pictTomTomChinese\"] = \"\\uE6D8\";\n    // U+E6DA  Indo-American tom tom\n    Glyphs[\"pictTomTomIndoAmerican\"] = \"\\uE6DA\";\n    // U+E6D9  Japanese tom-tom\n    Glyphs[\"pictTomTomJapanese\"] = \"\\uE6D9\";\n    // U+E700  Triangle\n    Glyphs[\"pictTriangle\"] = \"\\uE700\";\n    // U+E6B2  Tubaphone\n    Glyphs[\"pictTubaphone\"] = \"\\uE6B2\";\n    // U+E6C0  Tubular bells\n    Glyphs[\"pictTubularBells\"] = \"\\uE6C0\";\n    // U+E80A  Combining turn left for stem\n    Glyphs[\"pictTurnLeftStem\"] = \"\\uE80A\";\n    // U+E80B  Combining turn left or right for stem\n    Glyphs[\"pictTurnRightLeftStem\"] = \"\\uE80B\";\n    // U+E809  Combining turn right for stem\n    Glyphs[\"pictTurnRightStem\"] = \"\\uE809\";\n    // U+E6A7  Vibraphone\n    Glyphs[\"pictVib\"] = \"\\uE6A7\";\n    // U+E6A8  Metallophone (vibraphone motor off)\n    Glyphs[\"pictVibMotorOff\"] = \"\\uE6A8\";\n    // U+E6AD  Vibraphone (Smith Brindle)\n    Glyphs[\"pictVibSmithBrindle\"] = \"\\uE6AD\";\n    // U+E745  Vibraslap\n    Glyphs[\"pictVibraslap\"] = \"\\uE745\";\n    // U+E725  Vietnamese hat cymbal\n    Glyphs[\"pictVietnameseHat\"] = \"\\uE725\";\n    // U+E6F6  Whip\n    Glyphs[\"pictWhip\"] = \"\\uE6F6\";\n    // U+E6C1  Wind chimes (glass)\n    Glyphs[\"pictWindChimesGlass\"] = \"\\uE6C1\";\n    // U+E754  Wind machine\n    Glyphs[\"pictWindMachine\"] = \"\\uE754\";\n    // U+E758  Wind whistle (or mouth siren)\n    Glyphs[\"pictWindWhistle\"] = \"\\uE758\";\n    // U+E6F0  Wood block\n    Glyphs[\"pictWoodBlock\"] = \"\\uE6F0\";\n    // U+E7B4  Wound beater, hard core down\n    Glyphs[\"pictWoundHardDown\"] = \"\\uE7B4\";\n    // U+E7B6  Wound beater, hard core left\n    Glyphs[\"pictWoundHardLeft\"] = \"\\uE7B6\";\n    // U+E7B5  Wound beater, hard core right\n    Glyphs[\"pictWoundHardRight\"] = \"\\uE7B5\";\n    // U+E7B3  Wound beater, hard core up\n    Glyphs[\"pictWoundHardUp\"] = \"\\uE7B3\";\n    // U+E7B8  Wound beater, soft core down\n    Glyphs[\"pictWoundSoftDown\"] = \"\\uE7B8\";\n    // U+E7BA  Wound beater, soft core left\n    Glyphs[\"pictWoundSoftLeft\"] = \"\\uE7BA\";\n    // U+E7B9  Wound beater, soft core right\n    Glyphs[\"pictWoundSoftRight\"] = \"\\uE7B9\";\n    // U+E7B7  Wound beater, soft core up\n    Glyphs[\"pictWoundSoftUp\"] = \"\\uE7B7\";\n    // U+E6A1  Xylophone\n    Glyphs[\"pictXyl\"] = \"\\uE6A1\";\n    // U+E6A3  Bass xylophone\n    Glyphs[\"pictXylBass\"] = \"\\uE6A3\";\n    // U+E6AB  Xylophone (Smith Brindle)\n    Glyphs[\"pictXylSmithBrindle\"] = \"\\uE6AB\";\n    // U+E6A2  Tenor xylophone\n    Glyphs[\"pictXylTenor\"] = \"\\uE6A2\";\n    // U+E6A5  Trough tenor xylophone\n    Glyphs[\"pictXylTenorTrough\"] = \"\\uE6A5\";\n    // U+E6A4  Trough xylophone\n    Glyphs[\"pictXylTrough\"] = \"\\uE6A4\";\n    // U+E632  Buzz pizzicato\n    Glyphs[\"pluckedBuzzPizzicato\"] = \"\\uE632\";\n    // U+E638  Damp\n    Glyphs[\"pluckedDamp\"] = \"\\uE638\";\n    // U+E639  Damp all\n    Glyphs[\"pluckedDampAll\"] = \"\\uE639\";\n    // U+E63B  Damp for stem\n    Glyphs[\"pluckedDampOnStem\"] = \"\\uE63B\";\n    // U+E637  Fingernail flick\n    Glyphs[\"pluckedFingernailFlick\"] = \"\\uE637\";\n    // U+E633  Left-hand pizzicato\n    Glyphs[\"pluckedLeftHandPizzicato\"] = \"\\uE633\";\n    // U+E63A  Plectrum\n    Glyphs[\"pluckedPlectrum\"] = \"\\uE63A\";\n    // U+E631  Snap pizzicato above\n    Glyphs[\"pluckedSnapPizzicatoAbove\"] = \"\\uE631\";\n    // U+E630  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelow\"] = \"\\uE630\";\n    // U+E636  With fingernails\n    Glyphs[\"pluckedWithFingernails\"] = \"\\uE636\";\n    // U+E514  Quindicesima\n    Glyphs[\"quindicesima\"] = \"\\uE514\";\n    // U+E515  Quindicesima alta\n    Glyphs[\"quindicesimaAlta\"] = \"\\uE515\";\n    // U+E516  Quindicesima bassa\n    Glyphs[\"quindicesimaBassa\"] = \"\\uE516\";\n    // U+E51D  Quindicesima bassa (mb)\n    Glyphs[\"quindicesimaBassaMb\"] = \"\\uE51D\";\n    // U+E500  Repeat last bar\n    Glyphs[\"repeat1Bar\"] = \"\\uE500\";\n    // U+E501  Repeat last two bars\n    Glyphs[\"repeat2Bars\"] = \"\\uE501\";\n    // U+E502  Repeat last four bars\n    Glyphs[\"repeat4Bars\"] = \"\\uE502\";\n    // U+E505  Repeat bar lower dot\n    Glyphs[\"repeatBarLowerDot\"] = \"\\uE505\";\n    // U+E504  Repeat bar slash\n    Glyphs[\"repeatBarSlash\"] = \"\\uE504\";\n    // U+E503  Repeat bar upper dot\n    Glyphs[\"repeatBarUpperDot\"] = \"\\uE503\";\n    // U+E044  Single repeat dot\n    Glyphs[\"repeatDot\"] = \"\\uE044\";\n    // U+E043  Repeat dots\n    Glyphs[\"repeatDots\"] = \"\\uE043\";\n    // U+E040  Left (start) repeat sign\n    Glyphs[\"repeatLeft\"] = \"\\uE040\";\n    // U+E041  Right (end) repeat sign\n    Glyphs[\"repeatRight\"] = \"\\uE041\";\n    // U+E042  Right and left repeat sign\n    Glyphs[\"repeatRightLeft\"] = \"\\uE042\";\n    // U+E4ED  1024th rest\n    Glyphs[\"rest1024th\"] = \"\\uE4ED\";\n    // U+E4EA  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128th\"] = \"\\uE4EA\";\n    // U+E4E7  16th (semiquaver) rest\n    Glyphs[\"rest16th\"] = \"\\uE4E7\";\n    // U+E4EB  256th rest\n    Glyphs[\"rest256th\"] = \"\\uE4EB\";\n    // U+E4E8  32nd (demisemiquaver) rest\n    Glyphs[\"rest32nd\"] = \"\\uE4E8\";\n    // U+E4EC  512th rest\n    Glyphs[\"rest512th\"] = \"\\uE4EC\";\n    // U+E4E9  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64th\"] = \"\\uE4E9\";\n    // U+E4E6  Eighth (quaver) rest\n    Glyphs[\"rest8th\"] = \"\\uE4E6\";\n    // U+E4E2  Double whole (breve) rest\n    Glyphs[\"restDoubleWhole\"] = \"\\uE4E2\";\n    // U+E4F3  Double whole rest on leger lines\n    Glyphs[\"restDoubleWholeLegerLine\"] = \"\\uE4F3\";\n    // U+E4EE  Multiple measure rest\n    Glyphs[\"restHBar\"] = \"\\uE4EE\";\n    // U+E4EF  H-bar, left half\n    Glyphs[\"restHBarLeft\"] = \"\\uE4EF\";\n    // U+E4F0  H-bar, middle\n    Glyphs[\"restHBarMiddle\"] = \"\\uE4F0\";\n    // U+E4F1  H-bar, right half\n    Glyphs[\"restHBarRight\"] = \"\\uE4F1\";\n    // U+E4E4  Half (minim) rest\n    Glyphs[\"restHalf\"] = \"\\uE4E4\";\n    // U+E4F5  Half rest on leger line\n    Glyphs[\"restHalfLegerLine\"] = \"\\uE4F5\";\n    // U+E4E1  Longa rest\n    Glyphs[\"restLonga\"] = \"\\uE4E1\";\n    // U+E4E0  Maxima rest\n    Glyphs[\"restMaxima\"] = \"\\uE4E0\";\n    // U+E4E5  Quarter (crotchet) rest\n    Glyphs[\"restQuarter\"] = \"\\uE4E5\";\n    // U+E4F2  Old-style quarter (crotchet) rest\n    Glyphs[\"restQuarterOld\"] = \"\\uE4F2\";\n    // U+E4F6  Z-style quarter (crotchet) rest\n    Glyphs[\"restQuarterZ\"] = \"\\uE4F6\";\n    // U+E4E3  Whole (semibreve) rest\n    Glyphs[\"restWhole\"] = \"\\uE4E3\";\n    // U+E4F4  Whole rest on leger line\n    Glyphs[\"restWholeLegerLine\"] = \"\\uE4F4\";\n    // U+E001  Reversed brace\n    Glyphs[\"reversedBrace\"] = \"\\uE001\";\n    // U+E006  Reversed bracket bottom\n    Glyphs[\"reversedBracketBottom\"] = \"\\uE006\";\n    // U+E005  Reversed bracket top\n    Glyphs[\"reversedBracketTop\"] = \"\\uE005\";\n    // U+E04D  Right repeat sign within bar\n    Glyphs[\"rightRepeatSmall\"] = \"\\uE04D\";\n    // U+EF00  Scale degree 1\n    Glyphs[\"scaleDegree1\"] = \"\\uEF00\";\n    // U+EF01  Scale degree 2\n    Glyphs[\"scaleDegree2\"] = \"\\uEF01\";\n    // U+EF02  Scale degree 3\n    Glyphs[\"scaleDegree3\"] = \"\\uEF02\";\n    // U+EF03  Scale degree 4\n    Glyphs[\"scaleDegree4\"] = \"\\uEF03\";\n    // U+EF04  Scale degree 5\n    Glyphs[\"scaleDegree5\"] = \"\\uEF04\";\n    // U+EF05  Scale degree 6\n    Glyphs[\"scaleDegree6\"] = \"\\uEF05\";\n    // U+EF06  Scale degree 7\n    Glyphs[\"scaleDegree7\"] = \"\\uEF06\";\n    // U+EF07  Scale degree 8\n    Glyphs[\"scaleDegree8\"] = \"\\uEF07\";\n    // U+EF08  Scale degree 9\n    Glyphs[\"scaleDegree9\"] = \"\\uEF08\";\n    // U+E06F  Schäffer clef\n    Glyphs[\"schaefferClef\"] = \"\\uE06F\";\n    // U+E072  Schäffer F clef to G clef change\n    Glyphs[\"schaefferFClefToGClef\"] = \"\\uE072\";\n    // U+E071  Schäffer G clef to F clef change\n    Glyphs[\"schaefferGClefToFClef\"] = \"\\uE071\";\n    // U+E070  Schäffer previous clef\n    Glyphs[\"schaefferPreviousClef\"] = \"\\uE070\";\n    // U+E047  Segno\n    Glyphs[\"segno\"] = \"\\uE047\";\n    // U+E04A  Segno (serpent)\n    Glyphs[\"segnoSerpent1\"] = \"\\uE04A\";\n    // U+E04B  Segno (serpent with vertical lines)\n    Glyphs[\"segnoSerpent2\"] = \"\\uE04B\";\n    // U+E06B  Semi-pitched percussion clef 1\n    Glyphs[\"semipitchedPercussionClef1\"] = \"\\uE06B\";\n    // U+E06C  Semi-pitched percussion clef 2\n    Glyphs[\"semipitchedPercussionClef2\"] = \"\\uE06C\";\n    // U+EC52  Flat\n    Glyphs[\"smnFlat\"] = \"\\uEC52\";\n    // U+EC53  Flat (white)\n    Glyphs[\"smnFlatWhite\"] = \"\\uEC53\";\n    // U+EC57  Double flat history sign\n    Glyphs[\"smnHistoryDoubleFlat\"] = \"\\uEC57\";\n    // U+EC55  Double sharp history sign\n    Glyphs[\"smnHistoryDoubleSharp\"] = \"\\uEC55\";\n    // U+EC56  Flat history sign\n    Glyphs[\"smnHistoryFlat\"] = \"\\uEC56\";\n    // U+EC54  Sharp history sign\n    Glyphs[\"smnHistorySharp\"] = \"\\uEC54\";\n    // U+EC58  Natural (N)\n    Glyphs[\"smnNatural\"] = \"\\uEC58\";\n    // U+EC50  Sharp stem up\n    Glyphs[\"smnSharp\"] = \"\\uEC50\";\n    // U+EC59  Sharp stem down\n    Glyphs[\"smnSharpDown\"] = \"\\uEC59\";\n    // U+EC51  Sharp (white) stem up\n    Glyphs[\"smnSharpWhite\"] = \"\\uEC51\";\n    // U+EC5A  Sharp (white) stem down\n    Glyphs[\"smnSharpWhiteDown\"] = \"\\uEC5A\";\n    // U+E00A  Split bar divider (bar spans a system break)\n    Glyphs[\"splitBarDivider\"] = \"\\uE00A\";\n    // U+E010  1-line staff\n    Glyphs[\"staff1Line\"] = \"\\uE010\";\n    // U+E01C  1-line staff (narrow)\n    Glyphs[\"staff1LineNarrow\"] = \"\\uE01C\";\n    // U+E016  1-line staff (wide)\n    Glyphs[\"staff1LineWide\"] = \"\\uE016\";\n    // U+E011  2-line staff\n    Glyphs[\"staff2Lines\"] = \"\\uE011\";\n    // U+E01D  2-line staff (narrow)\n    Glyphs[\"staff2LinesNarrow\"] = \"\\uE01D\";\n    // U+E017  2-line staff (wide)\n    Glyphs[\"staff2LinesWide\"] = \"\\uE017\";\n    // U+E012  3-line staff\n    Glyphs[\"staff3Lines\"] = \"\\uE012\";\n    // U+E01E  3-line staff (narrow)\n    Glyphs[\"staff3LinesNarrow\"] = \"\\uE01E\";\n    // U+E018  3-line staff (wide)\n    Glyphs[\"staff3LinesWide\"] = \"\\uE018\";\n    // U+E013  4-line staff\n    Glyphs[\"staff4Lines\"] = \"\\uE013\";\n    // U+E01F  4-line staff (narrow)\n    Glyphs[\"staff4LinesNarrow\"] = \"\\uE01F\";\n    // U+E019  4-line staff (wide)\n    Glyphs[\"staff4LinesWide\"] = \"\\uE019\";\n    // U+E014  5-line staff\n    Glyphs[\"staff5Lines\"] = \"\\uE014\";\n    // U+E020  5-line staff (narrow)\n    Glyphs[\"staff5LinesNarrow\"] = \"\\uE020\";\n    // U+E01A  5-line staff (wide)\n    Glyphs[\"staff5LinesWide\"] = \"\\uE01A\";\n    // U+E015  6-line staff\n    Glyphs[\"staff6Lines\"] = \"\\uE015\";\n    // U+E021  6-line staff (narrow)\n    Glyphs[\"staff6LinesNarrow\"] = \"\\uE021\";\n    // U+E01B  6-line staff (wide)\n    Glyphs[\"staff6LinesWide\"] = \"\\uE01B\";\n    // U+E00B  Staff divide arrow down\n    Glyphs[\"staffDivideArrowDown\"] = \"\\uE00B\";\n    // U+E00C  Staff divide arrow up\n    Glyphs[\"staffDivideArrowUp\"] = \"\\uE00C\";\n    // U+E00D  Staff divide arrows\n    Glyphs[\"staffDivideArrowUpDown\"] = \"\\uE00D\";\n    // U+EB98  Lower 1 staff position\n    Glyphs[\"staffPosLower1\"] = \"\\uEB98\";\n    // U+EB99  Lower 2 staff positions\n    Glyphs[\"staffPosLower2\"] = \"\\uEB99\";\n    // U+EB9A  Lower 3 staff positions\n    Glyphs[\"staffPosLower3\"] = \"\\uEB9A\";\n    // U+EB9B  Lower 4 staff positions\n    Glyphs[\"staffPosLower4\"] = \"\\uEB9B\";\n    // U+EB9C  Lower 5 staff positions\n    Glyphs[\"staffPosLower5\"] = \"\\uEB9C\";\n    // U+EB9D  Lower 6 staff positions\n    Glyphs[\"staffPosLower6\"] = \"\\uEB9D\";\n    // U+EB9E  Lower 7 staff positions\n    Glyphs[\"staffPosLower7\"] = \"\\uEB9E\";\n    // U+EB9F  Lower 8 staff positions\n    Glyphs[\"staffPosLower8\"] = \"\\uEB9F\";\n    // U+EB90  Raise 1 staff position\n    Glyphs[\"staffPosRaise1\"] = \"\\uEB90\";\n    // U+EB91  Raise 2 staff positions\n    Glyphs[\"staffPosRaise2\"] = \"\\uEB91\";\n    // U+EB92  Raise 3 staff positions\n    Glyphs[\"staffPosRaise3\"] = \"\\uEB92\";\n    // U+EB93  Raise 4 staff positions\n    Glyphs[\"staffPosRaise4\"] = \"\\uEB93\";\n    // U+EB94  Raise 5 staff positions\n    Glyphs[\"staffPosRaise5\"] = \"\\uEB94\";\n    // U+EB95  Raise 6 staff positions\n    Glyphs[\"staffPosRaise6\"] = \"\\uEB95\";\n    // U+EB96  Raise 7 staff positions\n    Glyphs[\"staffPosRaise7\"] = \"\\uEB96\";\n    // U+EB97  Raise 8 staff positions\n    Glyphs[\"staffPosRaise8\"] = \"\\uEB97\";\n    // U+E210  Combining stem\n    Glyphs[\"stem\"] = \"\\uE210\";\n    // U+E215  Combining bow on bridge stem\n    Glyphs[\"stemBowOnBridge\"] = \"\\uE215\";\n    // U+E216  Combining bow on tailpiece stem\n    Glyphs[\"stemBowOnTailpiece\"] = \"\\uE216\";\n    // U+E217  Combining buzz roll stem\n    Glyphs[\"stemBuzzRoll\"] = \"\\uE217\";\n    // U+E218  Combining damp stem\n    Glyphs[\"stemDamp\"] = \"\\uE218\";\n    // U+E21F  Combining harp string noise stem\n    Glyphs[\"stemHarpStringNoise\"] = \"\\uE21F\";\n    // U+E21A  Combining multiphonics (black) stem\n    Glyphs[\"stemMultiphonicsBlack\"] = \"\\uE21A\";\n    // U+E21C  Combining multiphonics (black and white) stem\n    Glyphs[\"stemMultiphonicsBlackWhite\"] = \"\\uE21C\";\n    // U+E21B  Combining multiphonics (white) stem\n    Glyphs[\"stemMultiphonicsWhite\"] = \"\\uE21B\";\n    // U+E213  Combining Penderecki unmeasured tremolo stem\n    Glyphs[\"stemPendereckiTremolo\"] = \"\\uE213\";\n    // U+E21E  Combining rim shot stem\n    Glyphs[\"stemRimShot\"] = \"\\uE21E\";\n    // U+E211  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesang\"] = \"\\uE211\";\n    // U+E214  Combining sul ponticello (bow behind bridge) stem\n    Glyphs[\"stemSulPonticello\"] = \"\\uE214\";\n    // U+E21D  Combining sussurando stem\n    Glyphs[\"stemSussurando\"] = \"\\uE21D\";\n    // U+E212  Combining swished stem\n    Glyphs[\"stemSwished\"] = \"\\uE212\";\n    // U+E219  Combining vibrato pulse accent (Saunders) stem\n    Glyphs[\"stemVibratoPulse\"] = \"\\uE219\";\n    // U+E232  Stockhausen irregular tremolo (\"Morsen\", like Morse code)\n    Glyphs[\"stockhausenTremolo\"] = \"\\uE232\";\n    // U+E618  Bow behind bridge (sul ponticello)\n    Glyphs[\"stringsBowBehindBridge\"] = \"\\uE618\";\n    // U+E62A  Bow behind bridge on four strings\n    Glyphs[\"stringsBowBehindBridgeFourStrings\"] = \"\\uE62A\";\n    // U+E627  Bow behind bridge on one string\n    Glyphs[\"stringsBowBehindBridgeOneString\"] = \"\\uE627\";\n    // U+E629  Bow behind bridge on three strings\n    Glyphs[\"stringsBowBehindBridgeThreeStrings\"] = \"\\uE629\";\n    // U+E628  Bow behind bridge on two strings\n    Glyphs[\"stringsBowBehindBridgeTwoStrings\"] = \"\\uE628\";\n    // U+E619  Bow on top of bridge\n    Glyphs[\"stringsBowOnBridge\"] = \"\\uE619\";\n    // U+E61A  Bow on tailpiece\n    Glyphs[\"stringsBowOnTailpiece\"] = \"\\uE61A\";\n    // U+E626  Change bow direction, indeterminate\n    Glyphs[\"stringsChangeBowDirection\"] = \"\\uE626\";\n    // U+E610  Down bow\n    Glyphs[\"stringsDownBow\"] = \"\\uE610\";\n    // U+EE82  Down bow, away from body\n    Glyphs[\"stringsDownBowAwayFromBody\"] = \"\\uEE82\";\n    // U+EE84  Down bow, beyond bridge\n    Glyphs[\"stringsDownBowBeyondBridge\"] = \"\\uEE84\";\n    // U+EE80  Down bow, towards body\n    Glyphs[\"stringsDownBowTowardsBody\"] = \"\\uEE80\";\n    // U+E611  Turned down bow\n    Glyphs[\"stringsDownBowTurned\"] = \"\\uE611\";\n    // U+E622  Fouetté\n    Glyphs[\"stringsFouette\"] = \"\\uE622\";\n    // U+E615  Half-harmonic\n    Glyphs[\"stringsHalfHarmonic\"] = \"\\uE615\";\n    // U+E614  Harmonic\n    Glyphs[\"stringsHarmonic\"] = \"\\uE614\";\n    // U+E620  Jeté (gettato) above\n    Glyphs[\"stringsJeteAbove\"] = \"\\uE620\";\n    // U+E621  Jeté (gettato) below\n    Glyphs[\"stringsJeteBelow\"] = \"\\uE621\";\n    // U+E617  Mute off\n    Glyphs[\"stringsMuteOff\"] = \"\\uE617\";\n    // U+E616  Mute on\n    Glyphs[\"stringsMuteOn\"] = \"\\uE616\";\n    // U+E61B  Overpressure, down bow\n    Glyphs[\"stringsOverpressureDownBow\"] = \"\\uE61B\";\n    // U+E61F  Overpressure, no bow direction\n    Glyphs[\"stringsOverpressureNoDirection\"] = \"\\uE61F\";\n    // U+E61D  Overpressure possibile, down bow\n    Glyphs[\"stringsOverpressurePossibileDownBow\"] = \"\\uE61D\";\n    // U+E61E  Overpressure possibile, up bow\n    Glyphs[\"stringsOverpressurePossibileUpBow\"] = \"\\uE61E\";\n    // U+E61C  Overpressure, up bow\n    Glyphs[\"stringsOverpressureUpBow\"] = \"\\uE61C\";\n    // U+EE88  Scrape, circular clockwise\n    Glyphs[\"stringsScrapeCircularClockwise\"] = \"\\uEE88\";\n    // U+EE89  Scrape, circular counter-clockwise\n    Glyphs[\"stringsScrapeCircularCounterclockwise\"] = \"\\uEE89\";\n    // U+EE86  Scrape, parallel inward\n    Glyphs[\"stringsScrapeParallelInward\"] = \"\\uEE86\";\n    // U+EE87  Scrape, parallel outward\n    Glyphs[\"stringsScrapeParallelOutward\"] = \"\\uEE87\";\n    // U+E624  Thumb position\n    Glyphs[\"stringsThumbPosition\"] = \"\\uE624\";\n    // U+E625  Turned thumb position\n    Glyphs[\"stringsThumbPositionTurned\"] = \"\\uE625\";\n    // U+EE8A  Triple chop, inward\n    Glyphs[\"stringsTripleChopInward\"] = \"\\uEE8A\";\n    // U+EE8B  Triple chop, outward\n    Glyphs[\"stringsTripleChopOutward\"] = \"\\uEE8B\";\n    // U+E612  Up bow\n    Glyphs[\"stringsUpBow\"] = \"\\uE612\";\n    // U+EE83  Up bow, away from body\n    Glyphs[\"stringsUpBowAwayFromBody\"] = \"\\uEE83\";\n    // U+EE85  Up bow, beyond bridge\n    Glyphs[\"stringsUpBowBeyondBridge\"] = \"\\uEE85\";\n    // U+EE81  Up bow, towards body\n    Glyphs[\"stringsUpBowTowardsBody\"] = \"\\uEE81\";\n    // U+E613  Turned up bow\n    Glyphs[\"stringsUpBowTurned\"] = \"\\uE613\";\n    // U+E623  Vibrato pulse accent (Saunders) for stem\n    Glyphs[\"stringsVibratoPulse\"] = \"\\uE623\";\n    // U+EE72  Swiss rudiments doublé black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackDouble\"] = \"\\uEE72\";\n    // U+EE70  Swiss rudiments flam black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackFlam\"] = \"\\uEE70\";\n    // U+EE73  Swiss rudiments doublé half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfDouble\"] = \"\\uEE73\";\n    // U+EE71  Swiss rudiments flam half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfFlam\"] = \"\\uEE71\";\n    // U+E007  System divider\n    Glyphs[\"systemDivider\"] = \"\\uE007\";\n    // U+E009  Extra long system divider\n    Glyphs[\"systemDividerExtraLong\"] = \"\\uE009\";\n    // U+E008  Long system divider\n    Glyphs[\"systemDividerLong\"] = \"\\uE008\";\n    // U+E1FC  Augmentation dot\n    Glyphs[\"textAugmentationDot\"] = \"\\uE1FC\";\n    // U+E1F5  Black note, fractional 16th beam, long stem\n    Glyphs[\"textBlackNoteFrac16thLongStem\"] = \"\\uE1F5\";\n    // U+E1F4  Black note, fractional 16th beam, short stem\n    Glyphs[\"textBlackNoteFrac16thShortStem\"] = \"\\uE1F4\";\n    // U+E1F6  Black note, fractional 32nd beam, long stem\n    Glyphs[\"textBlackNoteFrac32ndLongStem\"] = \"\\uE1F6\";\n    // U+E1F3  Black note, fractional 8th beam, long stem\n    Glyphs[\"textBlackNoteFrac8thLongStem\"] = \"\\uE1F3\";\n    // U+E1F2  Black note, fractional 8th beam, short stem\n    Glyphs[\"textBlackNoteFrac8thShortStem\"] = \"\\uE1F2\";\n    // U+E1F1  Black note, long stem\n    Glyphs[\"textBlackNoteLongStem\"] = \"\\uE1F1\";\n    // U+E1F0  Black note, short stem\n    Glyphs[\"textBlackNoteShortStem\"] = \"\\uE1F0\";\n    // U+E1FA  Continuing 16th beam for long stem\n    Glyphs[\"textCont16thBeamLongStem\"] = \"\\uE1FA\";\n    // U+E1F9  Continuing 16th beam for short stem\n    Glyphs[\"textCont16thBeamShortStem\"] = \"\\uE1F9\";\n    // U+E1FB  Continuing 32nd beam for long stem\n    Glyphs[\"textCont32ndBeamLongStem\"] = \"\\uE1FB\";\n    // U+E1F8  Continuing 8th beam for long stem\n    Glyphs[\"textCont8thBeamLongStem\"] = \"\\uE1F8\";\n    // U+E1F7  Continuing 8th beam for short stem\n    Glyphs[\"textCont8thBeamShortStem\"] = \"\\uE1F7\";\n    // U+E209  Headless black note, fractional 16th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thLongStem\"] = \"\\uE209\";\n    // U+E208  Headless black note, fractional 16th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thShortStem\"] = \"\\uE208\";\n    // U+E20A  Headless black note, fractional 32nd beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac32ndLongStem\"] = \"\\uE20A\";\n    // U+E207  Headless black note, fractional 8th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thLongStem\"] = \"\\uE207\";\n    // U+E206  Headless black note, fractional 8th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thShortStem\"] = \"\\uE206\";\n    // U+E205  Headless black note, long stem\n    Glyphs[\"textHeadlessBlackNoteLongStem\"] = \"\\uE205\";\n    // U+E204  Headless black note, short stem\n    Glyphs[\"textHeadlessBlackNoteShortStem\"] = \"\\uE204\";\n    // U+E1FD  Tie\n    Glyphs[\"textTie\"] = \"\\uE1FD\";\n    // U+E202  Tuplet number 3 for long stem\n    Glyphs[\"textTuplet3LongStem\"] = \"\\uE202\";\n    // U+E1FF  Tuplet number 3 for short stem\n    Glyphs[\"textTuplet3ShortStem\"] = \"\\uE1FF\";\n    // U+E203  Tuplet bracket end for long stem\n    Glyphs[\"textTupletBracketEndLongStem\"] = \"\\uE203\";\n    // U+E200  Tuplet bracket end for short stem\n    Glyphs[\"textTupletBracketEndShortStem\"] = \"\\uE200\";\n    // U+E201  Tuplet bracket start for long stem\n    Glyphs[\"textTupletBracketStartLongStem\"] = \"\\uE201\";\n    // U+E1FE  Tuplet bracket start for short stem\n    Glyphs[\"textTupletBracketStartShortStem\"] = \"\\uE1FE\";\n    // U+E080  Time signature 0\n    Glyphs[\"timeSig0\"] = \"\\uE080\";\n    // U+ECF0  Reversed time signature 0\n    Glyphs[\"timeSig0Reversed\"] = \"\\uECF0\";\n    // U+ECE0  Turned time signature 0\n    Glyphs[\"timeSig0Turned\"] = \"\\uECE0\";\n    // U+E081  Time signature 1\n    Glyphs[\"timeSig1\"] = \"\\uE081\";\n    // U+ECF1  Reversed time signature 1\n    Glyphs[\"timeSig1Reversed\"] = \"\\uECF1\";\n    // U+ECE1  Turned time signature 1\n    Glyphs[\"timeSig1Turned\"] = \"\\uECE1\";\n    // U+E082  Time signature 2\n    Glyphs[\"timeSig2\"] = \"\\uE082\";\n    // U+ECF2  Reversed time signature 2\n    Glyphs[\"timeSig2Reversed\"] = \"\\uECF2\";\n    // U+ECE2  Turned time signature 2\n    Glyphs[\"timeSig2Turned\"] = \"\\uECE2\";\n    // U+E083  Time signature 3\n    Glyphs[\"timeSig3\"] = \"\\uE083\";\n    // U+ECF3  Reversed time signature 3\n    Glyphs[\"timeSig3Reversed\"] = \"\\uECF3\";\n    // U+ECE3  Turned time signature 3\n    Glyphs[\"timeSig3Turned\"] = \"\\uECE3\";\n    // U+E084  Time signature 4\n    Glyphs[\"timeSig4\"] = \"\\uE084\";\n    // U+ECF4  Reversed time signature 4\n    Glyphs[\"timeSig4Reversed\"] = \"\\uECF4\";\n    // U+ECE4  Turned time signature 4\n    Glyphs[\"timeSig4Turned\"] = \"\\uECE4\";\n    // U+E085  Time signature 5\n    Glyphs[\"timeSig5\"] = \"\\uE085\";\n    // U+ECF5  Reversed time signature 5\n    Glyphs[\"timeSig5Reversed\"] = \"\\uECF5\";\n    // U+ECE5  Turned time signature 5\n    Glyphs[\"timeSig5Turned\"] = \"\\uECE5\";\n    // U+E086  Time signature 6\n    Glyphs[\"timeSig6\"] = \"\\uE086\";\n    // U+ECF6  Reversed time signature 6\n    Glyphs[\"timeSig6Reversed\"] = \"\\uECF6\";\n    // U+ECE6  Turned time signature 6\n    Glyphs[\"timeSig6Turned\"] = \"\\uECE6\";\n    // U+E087  Time signature 7\n    Glyphs[\"timeSig7\"] = \"\\uE087\";\n    // U+ECF7  Reversed time signature 7\n    Glyphs[\"timeSig7Reversed\"] = \"\\uECF7\";\n    // U+ECE7  Turned time signature 7\n    Glyphs[\"timeSig7Turned\"] = \"\\uECE7\";\n    // U+E088  Time signature 8\n    Glyphs[\"timeSig8\"] = \"\\uE088\";\n    // U+ECF8  Reversed time signature 8\n    Glyphs[\"timeSig8Reversed\"] = \"\\uECF8\";\n    // U+ECE8  Turned time signature 8\n    Glyphs[\"timeSig8Turned\"] = \"\\uECE8\";\n    // U+E089  Time signature 9\n    Glyphs[\"timeSig9\"] = \"\\uE089\";\n    // U+ECF9  Reversed time signature 9\n    Glyphs[\"timeSig9Reversed\"] = \"\\uECF9\";\n    // U+ECE9  Turned time signature 9\n    Glyphs[\"timeSig9Turned\"] = \"\\uECE9\";\n    // U+EC80  Left bracket for whole time signature\n    Glyphs[\"timeSigBracketLeft\"] = \"\\uEC80\";\n    // U+EC82  Left bracket for numerator only\n    Glyphs[\"timeSigBracketLeftSmall\"] = \"\\uEC82\";\n    // U+EC81  Right bracket for whole time signature\n    Glyphs[\"timeSigBracketRight\"] = \"\\uEC81\";\n    // U+EC83  Right bracket for numerator only\n    Glyphs[\"timeSigBracketRightSmall\"] = \"\\uEC83\";\n    // U+E09F  Control character for denominator digit\n    Glyphs[\"timeSigCombDenominator\"] = \"\\uE09F\";\n    // U+E09E  Control character for numerator digit\n    Glyphs[\"timeSigCombNumerator\"] = \"\\uE09E\";\n    // U+E096  Time signature comma\n    Glyphs[\"timeSigComma\"] = \"\\uE096\";\n    // U+E08A  Common time\n    Glyphs[\"timeSigCommon\"] = \"\\uE08A\";\n    // U+ECFA  Reversed common time\n    Glyphs[\"timeSigCommonReversed\"] = \"\\uECFA\";\n    // U+ECEA  Turned common time\n    Glyphs[\"timeSigCommonTurned\"] = \"\\uECEA\";\n    // U+EC85  Cut time (Bach)\n    Glyphs[\"timeSigCut2\"] = \"\\uEC85\";\n    // U+EC86  Cut triple time (9/8)\n    Glyphs[\"timeSigCut3\"] = \"\\uEC86\";\n    // U+E08B  Cut time\n    Glyphs[\"timeSigCutCommon\"] = \"\\uE08B\";\n    // U+ECFB  Reversed cut time\n    Glyphs[\"timeSigCutCommonReversed\"] = \"\\uECFB\";\n    // U+ECEB  Turned cut time\n    Glyphs[\"timeSigCutCommonTurned\"] = \"\\uECEB\";\n    // U+E08F  Time signature equals\n    Glyphs[\"timeSigEquals\"] = \"\\uE08F\";\n    // U+E098  Time signature fraction ½\n    Glyphs[\"timeSigFractionHalf\"] = \"\\uE098\";\n    // U+E09A  Time signature fraction ⅓\n    Glyphs[\"timeSigFractionOneThird\"] = \"\\uE09A\";\n    // U+E097  Time signature fraction ¼\n    Glyphs[\"timeSigFractionQuarter\"] = \"\\uE097\";\n    // U+E099  Time signature fraction ¾\n    Glyphs[\"timeSigFractionThreeQuarters\"] = \"\\uE099\";\n    // U+E09B  Time signature fraction ⅔\n    Glyphs[\"timeSigFractionTwoThirds\"] = \"\\uE09B\";\n    // U+E08E  Time signature fraction slash\n    Glyphs[\"timeSigFractionalSlash\"] = \"\\uE08E\";\n    // U+E090  Time signature minus\n    Glyphs[\"timeSigMinus\"] = \"\\uE090\";\n    // U+E091  Time signature multiply\n    Glyphs[\"timeSigMultiply\"] = \"\\uE091\";\n    // U+E09D  Open time signature (Penderecki)\n    Glyphs[\"timeSigOpenPenderecki\"] = \"\\uE09D\";\n    // U+E094  Left parenthesis for whole time signature\n    Glyphs[\"timeSigParensLeft\"] = \"\\uE094\";\n    // U+E092  Left parenthesis for numerator only\n    Glyphs[\"timeSigParensLeftSmall\"] = \"\\uE092\";\n    // U+E095  Right parenthesis for whole time signature\n    Glyphs[\"timeSigParensRight\"] = \"\\uE095\";\n    // U+E093  Right parenthesis for numerator only\n    Glyphs[\"timeSigParensRightSmall\"] = \"\\uE093\";\n    // U+E08C  Time signature +\n    Glyphs[\"timeSigPlus\"] = \"\\uE08C\";\n    // U+E08D  Time signature + (for numerators)\n    Glyphs[\"timeSigPlusSmall\"] = \"\\uE08D\";\n    // U+EC84  Time signature slash separator\n    Glyphs[\"timeSigSlash\"] = \"\\uEC84\";\n    // U+E09C  Open time signature\n    Glyphs[\"timeSigX\"] = \"\\uE09C\";\n    // U+E220  Combining tremolo 1\n    Glyphs[\"tremolo1\"] = \"\\uE220\";\n    // U+E221  Combining tremolo 2\n    Glyphs[\"tremolo2\"] = \"\\uE221\";\n    // U+E222  Combining tremolo 3\n    Glyphs[\"tremolo3\"] = \"\\uE222\";\n    // U+E223  Combining tremolo 4\n    Glyphs[\"tremolo4\"] = \"\\uE223\";\n    // U+E224  Combining tremolo 5\n    Glyphs[\"tremolo5\"] = \"\\uE224\";\n    // U+E22E  Divide measured tremolo by 2\n    Glyphs[\"tremoloDivisiDots2\"] = \"\\uE22E\";\n    // U+E22F  Divide measured tremolo by 3\n    Glyphs[\"tremoloDivisiDots3\"] = \"\\uE22F\";\n    // U+E230  Divide measured tremolo by 4\n    Glyphs[\"tremoloDivisiDots4\"] = \"\\uE230\";\n    // U+E231  Divide measured tremolo by 6\n    Glyphs[\"tremoloDivisiDots6\"] = \"\\uE231\";\n    // U+E225  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1\"] = \"\\uE225\";\n    // U+E226  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2\"] = \"\\uE226\";\n    // U+E227  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3\"] = \"\\uE227\";\n    // U+E228  Fingered tremolo 4\n    Glyphs[\"tremoloFingered4\"] = \"\\uE228\";\n    // U+E229  Fingered tremolo 5\n    Glyphs[\"tremoloFingered5\"] = \"\\uE229\";\n    // U+E5F2  Triple-tongue above\n    Glyphs[\"tripleTongueAbove\"] = \"\\uE5F2\";\n    // U+E5F3  Triple-tongue below\n    Glyphs[\"tripleTongueBelow\"] = \"\\uE5F3\";\n    // U+E880  Tuplet 0\n    Glyphs[\"tuplet0\"] = \"\\uE880\";\n    // U+E881  Tuplet 1\n    Glyphs[\"tuplet1\"] = \"\\uE881\";\n    // U+E882  Tuplet 2\n    Glyphs[\"tuplet2\"] = \"\\uE882\";\n    // U+E883  Tuplet 3\n    Glyphs[\"tuplet3\"] = \"\\uE883\";\n    // U+E884  Tuplet 4\n    Glyphs[\"tuplet4\"] = \"\\uE884\";\n    // U+E885  Tuplet 5\n    Glyphs[\"tuplet5\"] = \"\\uE885\";\n    // U+E886  Tuplet 6\n    Glyphs[\"tuplet6\"] = \"\\uE886\";\n    // U+E887  Tuplet 7\n    Glyphs[\"tuplet7\"] = \"\\uE887\";\n    // U+E888  Tuplet 8\n    Glyphs[\"tuplet8\"] = \"\\uE888\";\n    // U+E889  Tuplet 9\n    Glyphs[\"tuplet9\"] = \"\\uE889\";\n    // U+E88A  Tuplet colon\n    Glyphs[\"tupletColon\"] = \"\\uE88A\";\n    // U+E22C  Wieniawski unmeasured tremolo\n    Glyphs[\"unmeasuredTremolo\"] = \"\\uE22C\";\n    // U+E22D  Wieniawski unmeasured tremolo (simpler)\n    Glyphs[\"unmeasuredTremoloSimple\"] = \"\\uE22D\";\n    // U+E069  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1\"] = \"\\uE069\";\n    // U+E06A  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2\"] = \"\\uE06A\";\n    // U+E517  Ventiduesima\n    Glyphs[\"ventiduesima\"] = \"\\uE517\";\n    // U+E518  Ventiduesima alta\n    Glyphs[\"ventiduesimaAlta\"] = \"\\uE518\";\n    // U+E519  Ventiduesima bassa\n    Glyphs[\"ventiduesimaBassa\"] = \"\\uE519\";\n    // U+E51E  Ventiduesima bassa (mb)\n    Glyphs[\"ventiduesimaBassaMb\"] = \"\\uE51E\";\n    // U+E649  Finger click (Stockhausen)\n    Glyphs[\"vocalFingerClickStockhausen\"] = \"\\uE649\";\n    // U+E64B  Halb gesungen (semi-sprechgesang)\n    Glyphs[\"vocalHalbGesungen\"] = \"\\uE64B\";\n    // U+E640  Mouth closed\n    Glyphs[\"vocalMouthClosed\"] = \"\\uE640\";\n    // U+E642  Mouth open\n    Glyphs[\"vocalMouthOpen\"] = \"\\uE642\";\n    // U+E644  Mouth pursed\n    Glyphs[\"vocalMouthPursed\"] = \"\\uE644\";\n    // U+E641  Mouth slightly open\n    Glyphs[\"vocalMouthSlightlyOpen\"] = \"\\uE641\";\n    // U+E643  Mouth wide open\n    Glyphs[\"vocalMouthWideOpen\"] = \"\\uE643\";\n    // U+E647  Nasal voice\n    Glyphs[\"vocalNasalVoice\"] = \"\\uE647\";\n    // U+E645  Sprechgesang\n    Glyphs[\"vocalSprechgesang\"] = \"\\uE645\";\n    // U+E648  Tongue click (Stockhausen)\n    Glyphs[\"vocalTongueClickStockhausen\"] = \"\\uE648\";\n    // U+E64A  Tongue and finger click (Stockhausen)\n    Glyphs[\"vocalTongueFingerClickStockhausen\"] = \"\\uE64A\";\n    // U+E646  Combining sussurando for stem\n    Glyphs[\"vocalsSussurando\"] = \"\\uE646\";\n    // U+EAAA  Arpeggiato wiggle segment, downwards\n    Glyphs[\"wiggleArpeggiatoDown\"] = \"\\uEAAA\";\n    // U+EAAE  Arpeggiato arrowhead down\n    Glyphs[\"wiggleArpeggiatoDownArrow\"] = \"\\uEAAE\";\n    // U+EAAC  Arpeggiato downward swash\n    Glyphs[\"wiggleArpeggiatoDownSwash\"] = \"\\uEAAC\";\n    // U+EAA9  Arpeggiato wiggle segment, upwards\n    Glyphs[\"wiggleArpeggiatoUp\"] = \"\\uEAA9\";\n    // U+EAAD  Arpeggiato arrowhead up\n    Glyphs[\"wiggleArpeggiatoUpArrow\"] = \"\\uEAAD\";\n    // U+EAAB  Arpeggiato upward swash\n    Glyphs[\"wiggleArpeggiatoUpSwash\"] = \"\\uEAAB\";\n    // U+EAC9  Circular motion segment\n    Glyphs[\"wiggleCircular\"] = \"\\uEAC9\";\n    // U+EAC0  Constant circular motion segment\n    Glyphs[\"wiggleCircularConstant\"] = \"\\uEAC0\";\n    // U+EAC1  Constant circular motion segment (flipped)\n    Glyphs[\"wiggleCircularConstantFlipped\"] = \"\\uEAC1\";\n    // U+EAC3  Constant circular motion segment (flipped, large)\n    Glyphs[\"wiggleCircularConstantFlippedLarge\"] = \"\\uEAC3\";\n    // U+EAC2  Constant circular motion segment (large)\n    Glyphs[\"wiggleCircularConstantLarge\"] = \"\\uEAC2\";\n    // U+EACB  Circular motion end\n    Glyphs[\"wiggleCircularEnd\"] = \"\\uEACB\";\n    // U+EAC8  Circular motion segment, large\n    Glyphs[\"wiggleCircularLarge\"] = \"\\uEAC8\";\n    // U+EAC7  Circular motion segment, larger\n    Glyphs[\"wiggleCircularLarger\"] = \"\\uEAC7\";\n    // U+EAC6  Circular motion segment, larger still\n    Glyphs[\"wiggleCircularLargerStill\"] = \"\\uEAC6\";\n    // U+EAC5  Circular motion segment, largest\n    Glyphs[\"wiggleCircularLargest\"] = \"\\uEAC5\";\n    // U+EACA  Circular motion segment, small\n    Glyphs[\"wiggleCircularSmall\"] = \"\\uEACA\";\n    // U+EAC4  Circular motion start\n    Glyphs[\"wiggleCircularStart\"] = \"\\uEAC4\";\n    // U+EAAF  Glissando wiggle segment\n    Glyphs[\"wiggleGlissando\"] = \"\\uEAAF\";\n    // U+EABD  Group glissando 1\n    Glyphs[\"wiggleGlissandoGroup1\"] = \"\\uEABD\";\n    // U+EABE  Group glissando 2\n    Glyphs[\"wiggleGlissandoGroup2\"] = \"\\uEABE\";\n    // U+EABF  Group glissando 3\n    Glyphs[\"wiggleGlissandoGroup3\"] = \"\\uEABF\";\n    // U+EAF0  Quasi-random squiggle 1\n    Glyphs[\"wiggleRandom1\"] = \"\\uEAF0\";\n    // U+EAF1  Quasi-random squiggle 2\n    Glyphs[\"wiggleRandom2\"] = \"\\uEAF1\";\n    // U+EAF2  Quasi-random squiggle 3\n    Glyphs[\"wiggleRandom3\"] = \"\\uEAF2\";\n    // U+EAF3  Quasi-random squiggle 4\n    Glyphs[\"wiggleRandom4\"] = \"\\uEAF3\";\n    // U+EABB  Sawtooth line segment\n    Glyphs[\"wiggleSawtooth\"] = \"\\uEABB\";\n    // U+EABA  Narrow sawtooth line segment\n    Glyphs[\"wiggleSawtoothNarrow\"] = \"\\uEABA\";\n    // U+EABC  Wide sawtooth line segment\n    Glyphs[\"wiggleSawtoothWide\"] = \"\\uEABC\";\n    // U+EAB8  Square wave line segment\n    Glyphs[\"wiggleSquareWave\"] = \"\\uEAB8\";\n    // U+EAB7  Narrow square wave line segment\n    Glyphs[\"wiggleSquareWaveNarrow\"] = \"\\uEAB7\";\n    // U+EAB9  Wide square wave line segment\n    Glyphs[\"wiggleSquareWaveWide\"] = \"\\uEAB9\";\n    // U+EAA4  Trill wiggle segment\n    Glyphs[\"wiggleTrill\"] = \"\\uEAA4\";\n    // U+EAA3  Trill wiggle segment, fast\n    Glyphs[\"wiggleTrillFast\"] = \"\\uEAA3\";\n    // U+EAA2  Trill wiggle segment, faster\n    Glyphs[\"wiggleTrillFaster\"] = \"\\uEAA2\";\n    // U+EAA1  Trill wiggle segment, faster still\n    Glyphs[\"wiggleTrillFasterStill\"] = \"\\uEAA1\";\n    // U+EAA0  Trill wiggle segment, fastest\n    Glyphs[\"wiggleTrillFastest\"] = \"\\uEAA0\";\n    // U+EAA5  Trill wiggle segment, slow\n    Glyphs[\"wiggleTrillSlow\"] = \"\\uEAA5\";\n    // U+EAA6  Trill wiggle segment, slower\n    Glyphs[\"wiggleTrillSlower\"] = \"\\uEAA6\";\n    // U+EAA7  Trill wiggle segment, slower still\n    Glyphs[\"wiggleTrillSlowerStill\"] = \"\\uEAA7\";\n    // U+EAA8  Trill wiggle segment, slowest\n    Glyphs[\"wiggleTrillSlowest\"] = \"\\uEAA8\";\n    // U+EAEE  Vibrato largest, slower\n    Glyphs[\"wiggleVIbratoLargestSlower\"] = \"\\uEAEE\";\n    // U+EAE0  Vibrato medium, slower\n    Glyphs[\"wiggleVIbratoMediumSlower\"] = \"\\uEAE0\";\n    // U+EAB0  Vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibrato\"] = \"\\uEAB0\";\n    // U+EAE5  Vibrato large, fast\n    Glyphs[\"wiggleVibratoLargeFast\"] = \"\\uEAE5\";\n    // U+EAE4  Vibrato large, faster\n    Glyphs[\"wiggleVibratoLargeFaster\"] = \"\\uEAE4\";\n    // U+EAE3  Vibrato large, faster still\n    Glyphs[\"wiggleVibratoLargeFasterStill\"] = \"\\uEAE3\";\n    // U+EAE2  Vibrato large, fastest\n    Glyphs[\"wiggleVibratoLargeFastest\"] = \"\\uEAE2\";\n    // U+EAE6  Vibrato large, slow\n    Glyphs[\"wiggleVibratoLargeSlow\"] = \"\\uEAE6\";\n    // U+EAE7  Vibrato large, slower\n    Glyphs[\"wiggleVibratoLargeSlower\"] = \"\\uEAE7\";\n    // U+EAE8  Vibrato large, slowest\n    Glyphs[\"wiggleVibratoLargeSlowest\"] = \"\\uEAE8\";\n    // U+EAEC  Vibrato largest, fast\n    Glyphs[\"wiggleVibratoLargestFast\"] = \"\\uEAEC\";\n    // U+EAEB  Vibrato largest, faster\n    Glyphs[\"wiggleVibratoLargestFaster\"] = \"\\uEAEB\";\n    // U+EAEA  Vibrato largest, faster still\n    Glyphs[\"wiggleVibratoLargestFasterStill\"] = \"\\uEAEA\";\n    // U+EAE9  Vibrato largest, fastest\n    Glyphs[\"wiggleVibratoLargestFastest\"] = \"\\uEAE9\";\n    // U+EAED  Vibrato largest, slow\n    Glyphs[\"wiggleVibratoLargestSlow\"] = \"\\uEAED\";\n    // U+EAEF  Vibrato largest, slowest\n    Glyphs[\"wiggleVibratoLargestSlowest\"] = \"\\uEAEF\";\n    // U+EADE  Vibrato medium, fast\n    Glyphs[\"wiggleVibratoMediumFast\"] = \"\\uEADE\";\n    // U+EADD  Vibrato medium, faster\n    Glyphs[\"wiggleVibratoMediumFaster\"] = \"\\uEADD\";\n    // U+EADC  Vibrato medium, faster still\n    Glyphs[\"wiggleVibratoMediumFasterStill\"] = \"\\uEADC\";\n    // U+EADB  Vibrato medium, fastest\n    Glyphs[\"wiggleVibratoMediumFastest\"] = \"\\uEADB\";\n    // U+EADF  Vibrato medium, slow\n    Glyphs[\"wiggleVibratoMediumSlow\"] = \"\\uEADF\";\n    // U+EAE1  Vibrato medium, slowest\n    Glyphs[\"wiggleVibratoMediumSlowest\"] = \"\\uEAE1\";\n    // U+EAD7  Vibrato small, fast\n    Glyphs[\"wiggleVibratoSmallFast\"] = \"\\uEAD7\";\n    // U+EAD6  Vibrato small, faster\n    Glyphs[\"wiggleVibratoSmallFaster\"] = \"\\uEAD6\";\n    // U+EAD5  Vibrato small, faster still\n    Glyphs[\"wiggleVibratoSmallFasterStill\"] = \"\\uEAD5\";\n    // U+EAD4  Vibrato small, fastest\n    Glyphs[\"wiggleVibratoSmallFastest\"] = \"\\uEAD4\";\n    // U+EAD8  Vibrato small, slow\n    Glyphs[\"wiggleVibratoSmallSlow\"] = \"\\uEAD8\";\n    // U+EAD9  Vibrato small, slower\n    Glyphs[\"wiggleVibratoSmallSlower\"] = \"\\uEAD9\";\n    // U+EADA  Vibrato small, slowest\n    Glyphs[\"wiggleVibratoSmallSlowest\"] = \"\\uEADA\";\n    // U+EAD0  Vibrato smallest, fast\n    Glyphs[\"wiggleVibratoSmallestFast\"] = \"\\uEAD0\";\n    // U+EACF  Vibrato smallest, faster\n    Glyphs[\"wiggleVibratoSmallestFaster\"] = \"\\uEACF\";\n    // U+EACE  Vibrato smallest, faster still\n    Glyphs[\"wiggleVibratoSmallestFasterStill\"] = \"\\uEACE\";\n    // U+EACD  Vibrato smallest, fastest\n    Glyphs[\"wiggleVibratoSmallestFastest\"] = \"\\uEACD\";\n    // U+EAD1  Vibrato smallest, slow\n    Glyphs[\"wiggleVibratoSmallestSlow\"] = \"\\uEAD1\";\n    // U+EAD2  Vibrato smallest, slower\n    Glyphs[\"wiggleVibratoSmallestSlower\"] = \"\\uEAD2\";\n    // U+EAD3  Vibrato smallest, slowest\n    Glyphs[\"wiggleVibratoSmallestSlowest\"] = \"\\uEAD3\";\n    // U+EACC  Vibrato start\n    Glyphs[\"wiggleVibratoStart\"] = \"\\uEACC\";\n    // U+EAB1  Wide vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibratoWide\"] = \"\\uEAB1\";\n    // U+EAB5  Wavy line segment\n    Glyphs[\"wiggleWavy\"] = \"\\uEAB5\";\n    // U+EAB4  Narrow wavy line segment\n    Glyphs[\"wiggleWavyNarrow\"] = \"\\uEAB4\";\n    // U+EAB6  Wide wavy line segment\n    Glyphs[\"wiggleWavyWide\"] = \"\\uEAB6\";\n    // U+E5F4  Closed hole\n    Glyphs[\"windClosedHole\"] = \"\\uE5F4\";\n    // U+E5FB  Flatter embouchure\n    Glyphs[\"windFlatEmbouchure\"] = \"\\uE5FB\";\n    // U+E5F6  Half-closed hole\n    Glyphs[\"windHalfClosedHole1\"] = \"\\uE5F6\";\n    // U+E5F7  Half-closed hole 2\n    Glyphs[\"windHalfClosedHole2\"] = \"\\uE5F7\";\n    // U+E5F8  Half-open hole\n    Glyphs[\"windHalfClosedHole3\"] = \"\\uE5F8\";\n    // U+E5FE  Somewhat relaxed embouchure\n    Glyphs[\"windLessRelaxedEmbouchure\"] = \"\\uE5FE\";\n    // U+E600  Somewhat tight embouchure\n    Glyphs[\"windLessTightEmbouchure\"] = \"\\uE600\";\n    // U+E60A  Mouthpiece or hand pop\n    Glyphs[\"windMouthpiecePop\"] = \"\\uE60A\";\n    // U+E607  Combining multiphonics (black) for stem\n    Glyphs[\"windMultiphonicsBlackStem\"] = \"\\uE607\";\n    // U+E609  Combining multiphonics (black and white) for stem\n    Glyphs[\"windMultiphonicsBlackWhiteStem\"] = \"\\uE609\";\n    // U+E608  Combining multiphonics (white) for stem\n    Glyphs[\"windMultiphonicsWhiteStem\"] = \"\\uE608\";\n    // U+E5F9  Open hole\n    Glyphs[\"windOpenHole\"] = \"\\uE5F9\";\n    // U+E606  Much more reed (push inwards)\n    Glyphs[\"windReedPositionIn\"] = \"\\uE606\";\n    // U+E604  Normal reed position\n    Glyphs[\"windReedPositionNormal\"] = \"\\uE604\";\n    // U+E605  Very little reed (pull outwards)\n    Glyphs[\"windReedPositionOut\"] = \"\\uE605\";\n    // U+E5FD  Relaxed embouchure\n    Glyphs[\"windRelaxedEmbouchure\"] = \"\\uE5FD\";\n    // U+E60B  Rim only\n    Glyphs[\"windRimOnly\"] = \"\\uE60B\";\n    // U+E5FC  Sharper embouchure\n    Glyphs[\"windSharpEmbouchure\"] = \"\\uE5FC\";\n    // U+E603  Very tight embouchure / strong air pressure\n    Glyphs[\"windStrongAirPressure\"] = \"\\uE603\";\n    // U+E5F5  Three-quarters closed hole\n    Glyphs[\"windThreeQuartersClosedHole\"] = \"\\uE5F5\";\n    // U+E5FF  Tight embouchure\n    Glyphs[\"windTightEmbouchure\"] = \"\\uE5FF\";\n    // U+E5FA  Trill key\n    Glyphs[\"windTrillKey\"] = \"\\uE5FA\";\n    // U+E601  Very tight embouchure\n    Glyphs[\"windVeryTightEmbouchure\"] = \"\\uE601\";\n    // U+E602  Very relaxed embouchure / weak air-pressure\n    Glyphs[\"windWeakAirPressure\"] = \"\\uE602\";\n})(Glyphs || (Glyphs = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonicalNotes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get rootValues() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indexes of the root notes.*/\n    static get rootIndexes() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonicalNotes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonicIntervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonicAccidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { rootIndex: 0, intVal: 0 },\n            cn: { rootIndex: 0, intVal: 0 },\n            'c#': { rootIndex: 0, intVal: 1 },\n            'c##': { rootIndex: 0, intVal: 2 },\n            cb: { rootIndex: 0, intVal: 11 },\n            cbb: { rootIndex: 0, intVal: 10 },\n            d: { rootIndex: 1, intVal: 2 },\n            dn: { rootIndex: 1, intVal: 2 },\n            'd#': { rootIndex: 1, intVal: 3 },\n            'd##': { rootIndex: 1, intVal: 4 },\n            db: { rootIndex: 1, intVal: 1 },\n            dbb: { rootIndex: 1, intVal: 0 },\n            e: { rootIndex: 2, intVal: 4 },\n            en: { rootIndex: 2, intVal: 4 },\n            'e#': { rootIndex: 2, intVal: 5 },\n            'e##': { rootIndex: 2, intVal: 6 },\n            eb: { rootIndex: 2, intVal: 3 },\n            ebb: { rootIndex: 2, intVal: 2 },\n            f: { rootIndex: 3, intVal: 5 },\n            fn: { rootIndex: 3, intVal: 5 },\n            'f#': { rootIndex: 3, intVal: 6 },\n            'f##': { rootIndex: 3, intVal: 7 },\n            fb: { rootIndex: 3, intVal: 4 },\n            fbb: { rootIndex: 3, intVal: 3 },\n            g: { rootIndex: 4, intVal: 7 },\n            gn: { rootIndex: 4, intVal: 7 },\n            'g#': { rootIndex: 4, intVal: 8 },\n            'g##': { rootIndex: 4, intVal: 9 },\n            gb: { rootIndex: 4, intVal: 6 },\n            gbb: { rootIndex: 4, intVal: 5 },\n            a: { rootIndex: 5, intVal: 9 },\n            an: { rootIndex: 5, intVal: 9 },\n            'a#': { rootIndex: 5, intVal: 10 },\n            'a##': { rootIndex: 5, intVal: 11 },\n            ab: { rootIndex: 5, intVal: 8 },\n            abb: { rootIndex: 5, intVal: 7 },\n            b: { rootIndex: 6, intVal: 11 },\n            bn: { rootIndex: 6, intVal: 11 },\n            'b#': { rootIndex: 6, intVal: 0 },\n            'b##': { rootIndex: 6, intVal: 1 },\n            bb: { rootIndex: 6, intVal: 10 },\n            bbb: { rootIndex: 6, intVal: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonicalNotes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonicIntervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.intVal;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonicalNotes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonicIntervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverseInterval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverseInterval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.rootIndexes[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Fraction } from './fraction';\nimport { Glyphs } from './glyphs';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { accidental: 'b', num: 1 },\n    Dm: { accidental: 'b', num: 1 },\n    Bb: { accidental: 'b', num: 2 },\n    Gm: { accidental: 'b', num: 2 },\n    Eb: { accidental: 'b', num: 3 },\n    Cm: { accidental: 'b', num: 3 },\n    Ab: { accidental: 'b', num: 4 },\n    Fm: { accidental: 'b', num: 4 },\n    Db: { accidental: 'b', num: 5 },\n    Bbm: { accidental: 'b', num: 5 },\n    Gb: { accidental: 'b', num: 6 },\n    Ebm: { accidental: 'b', num: 6 },\n    Cb: { accidental: 'b', num: 7 },\n    Abm: { accidental: 'b', num: 7 },\n    G: { accidental: '#', num: 1 },\n    Em: { accidental: '#', num: 1 },\n    D: { accidental: '#', num: 2 },\n    Bm: { accidental: '#', num: 2 },\n    A: { accidental: '#', num: 3 },\n    'F#m': { accidental: '#', num: 3 },\n    E: { accidental: '#', num: 4 },\n    'C#m': { accidental: '#', num: 4 },\n    B: { accidental: '#', num: 5 },\n    'G#m': { accidental: '#', num: 5 },\n    'F#': { accidental: '#', num: 6 },\n    'D#m': { accidental: '#', num: 6 },\n    'C#': { accidental: '#', num: 7 },\n    'A#m': { accidental: '#', num: 7 },\n};\nconst clefs = {\n    treble: { lineShift: 0 },\n    bass: { lineShift: 6 },\n    tenor: { lineShift: 4 },\n    alto: { lineShift: 3 },\n    soprano: { lineShift: 1 },\n    percussion: { lineShift: 0 },\n    'mezzo-soprano': { lineShift: 2 },\n    'baritone-c': { lineShift: 5 },\n    'baritone-f': { lineShift: 5 },\n    subbass: { lineShift: 7 },\n    french: { lineShift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, intVal: 0 },\n    CN: { index: 0, intVal: 0 },\n    'C#': { index: 0, intVal: 1 },\n    'C##': { index: 0, intVal: 2 },\n    CB: { index: 0, intVal: 11 },\n    CBB: { index: 0, intVal: 10 },\n    D: { index: 1, intVal: 2 },\n    DN: { index: 1, intVal: 2 },\n    'D#': { index: 1, intVal: 3 },\n    'D##': { index: 1, intVal: 4 },\n    DB: { index: 1, intVal: 1 },\n    DBB: { index: 1, intVal: 0 },\n    E: { index: 2, intVal: 4 },\n    EN: { index: 2, intVal: 4 },\n    'E#': { index: 2, intVal: 5 },\n    'E##': { index: 2, intVal: 6 },\n    EB: { index: 2, intVal: 3 },\n    EBB: { index: 2, intVal: 2 },\n    F: { index: 3, intVal: 5 },\n    FN: { index: 3, intVal: 5 },\n    'F#': { index: 3, intVal: 6 },\n    'F##': { index: 3, intVal: 7 },\n    FB: { index: 3, intVal: 4 },\n    FBB: { index: 3, intVal: 3 },\n    G: { index: 4, intVal: 7 },\n    GN: { index: 4, intVal: 7 },\n    'G#': { index: 4, intVal: 8 },\n    'G##': { index: 4, intVal: 9 },\n    GB: { index: 4, intVal: 6 },\n    GBB: { index: 4, intVal: 5 },\n    A: { index: 5, intVal: 9 },\n    AN: { index: 5, intVal: 9 },\n    'A#': { index: 5, intVal: 10 },\n    'A##': { index: 5, intVal: 11 },\n    AB: { index: 5, intVal: 8 },\n    ABB: { index: 5, intVal: 7 },\n    B: { index: 6, intVal: 11 },\n    BN: { index: 6, intVal: 11 },\n    'B#': { index: 6, intVal: 12 },\n    'B##': { index: 6, intVal: 13 },\n    BB: { index: 6, intVal: 10 },\n    BBB: { index: 6, intVal: 9 },\n    R: { index: 6 },\n    X: { index: 6 },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': '\\ue262' /*accidentalSharp*/,\n    '##': '\\ue263' /*accidentalDoubleSharp*/,\n    b: '\\ue260' /*accidentalFlat*/,\n    bb: '\\ue264' /*accidentalDoubleFlat*/,\n    n: '\\ue261' /*accidentalNatural*/,\n    '{': '\\ue26a' /*accidentalParensLeft*/,\n    '}': '\\ue26b' /*accidentalParensRight*/,\n    db: '\\ue281' /*accidentalThreeQuarterTonesFlatZimmermann*/,\n    d: '\\ue280' /*accidentalQuarterToneFlatStein*/,\n    '++': '\\ue283' /*accidentalThreeQuarterTonesSharpStein*/,\n    '+': '\\ue282' /*accidentalQuarterToneSharpStein*/,\n    '+-': '\\ue446' /*accidentalKucukMucennebSharp*/,\n    bs: '\\ue442' /*accidentalBakiyeFlat*/,\n    bss: '\\ue440' /*accidentalBuyukMucennebFlat*/,\n    o: '\\ue461' /*accidentalSori*/,\n    k: '\\ue460' /*accidentalKoron*/,\n    bbs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    '++-': '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    ashs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    afhf: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        secondOnBottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spacedOutTetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spacedOutPentachord: [1, 2, 3, 2, 1],\n        verySpacedOutPentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spacedOutHexachord: [1, 3, 2, 1, 3, 2],\n        verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: '\\ue1e7' /*augmentationDot*/, betweenLines: true },\n    av: {\n        aboveCode: '\\ue4a6' /*articStaccatissimoAbove*/,\n        belowCode: '\\ue4a7' /*articStaccatissimoBelow*/,\n        betweenLines: true,\n    },\n    'a>': {\n        aboveCode: '\\ue4a0' /*articAccentAbove*/,\n        belowCode: '\\ue4a1' /*articAccentBelow*/,\n        betweenLines: true,\n    },\n    'a-': {\n        aboveCode: '\\ue4a4' /*articTenutoAbove*/,\n        belowCode: '\\ue4a5' /*articTenutoBelow*/,\n        betweenLines: true,\n    },\n    'a^': {\n        aboveCode: '\\ue4ac' /*articMarcatoAbove*/,\n        belowCode: '\\ue4ad' /*articMarcatoBelow*/,\n        betweenLines: false,\n    },\n    'a+': { code: '\\ue633' /*pluckedLeftHandPizzicato*/, betweenLines: false },\n    ao: {\n        aboveCode: '\\ue631' /*pluckedSnapPizzicatoAbove*/,\n        belowCode: '\\ue630' /*pluckedSnapPizzicatoBelow*/,\n        betweenLines: false,\n    },\n    ah: { code: '\\ue614' /*stringsHarmonic*/, betweenLines: false },\n    'a@': { aboveCode: '\\ue4c0' /*fermataAbove*/, belowCode: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@a': { code: '\\ue4c0' /*fermataAbove*/, betweenLines: false },\n    'a@u': { code: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@s': { aboveCode: '\\ue4c4' /*fermataShortAbove*/, belowCode: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@as': { code: '\\ue4c4' /*fermataShortAbove*/, betweenLines: false },\n    'a@us': { code: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@l': { aboveCode: '\\ue4c6' /*fermataLongAbove*/, belowCode: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@al': { code: '\\ue4c6' /*fermataLongAbove*/, betweenLines: false },\n    'a@ul': { code: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@vl': {\n        aboveCode: '\\ue4c8' /*fermataVeryLongAbove*/,\n        belowCode: '\\ue4c9' /*fermataVeryLongBelow*/,\n        betweenLines: false,\n    },\n    'a@avl': { code: '\\ue4c8' /*fermataVeryLongAbove*/, betweenLines: false },\n    'a@uvl': { code: '\\ue4c9' /*fermataVeryLongBelow*/, betweenLines: false },\n    'a|': { code: '\\ue612' /*stringsUpBow*/, betweenLines: false },\n    am: { code: '\\ue610' /*stringsDownBow*/, betweenLines: false },\n    'a,': { code: '\\ue805' /*pictChokeCymbal*/, betweenLines: false }, // Choked\n};\nconst ornaments = {\n    mordent: '\\ue56c' /*ornamentShortTrill*/,\n    mordentInverted: '\\ue56d' /*ornamentMordent*/,\n    turn: '\\ue567' /*ornamentTurn*/,\n    turnInverted: '\\ue569' /*ornamentTurnSlash*/,\n    tr: '\\ue566' /*ornamentTrill*/,\n    upprall: '\\ue5b5' /*ornamentPrecompSlideTrillDAnglebert*/,\n    downprall: '\\ue5c3' /*ornamentPrecompDoubleCadenceUpperPrefix*/,\n    prallup: '\\ue5bb' /*ornamentPrecompTrillSuffixDandrieu*/,\n    pralldown: '\\ue5c8' /*ornamentPrecompTrillLowerSuffix*/,\n    upmordent: '\\ue5b8' /*ornamentPrecompSlideTrillBach*/,\n    downmordent: '\\ue5c4' /*ornamentPrecompDoubleCadenceUpperPrefixTurn*/,\n    lineprall: '\\ue5b2' /*ornamentPrecompAppoggTrill*/,\n    prallprall: '\\ue56e' /*ornamentTremblement*/,\n    scoop: '\\ue5d0' /*brassScoop*/,\n    doit: '\\ue5d5' /*brassDoitMedium*/,\n    fall: '\\ue5d7' /*brassFallLipShort*/,\n    doitLong: '\\ue5d2' /*brassLiftMedium*/,\n    fallLong: '\\ue5de' /*brassFallRoughMedium*/,\n    bend: '\\ue5e3' /*brassBend*/,\n    plungerClosed: '\\ue5e5' /*brassMuteClosed*/,\n    plungerOpen: '\\ue5e7' /*brassMuteOpen*/,\n    flip: '\\ue5e1' /*brassFlip*/,\n    jazzTurn: '\\ue5e4' /*brassJazzTurn*/,\n    smear: '\\ue5e2' /*brassSmear*/,\n};\nexport class Tables {\n    /**\n     * @returns the `Font` object at the head of the music font stack.\n     */\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octaveShift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {\n        let options = { octaveShift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        type = type.toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        let octave = parseInt(pieces[1], 10);\n        // .octaveShift is the shift to compensate for clef 8va/8vb.\n        octave -= options.octaveShift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).lineShift;\n        // Integer value for note arithmetic.\n        const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        let code = '';\n        let glyphName = 'N';\n        if (pieces.length > 2 && pieces[2]) {\n            glyphName = pieces[2].toUpperCase();\n        }\n        else if (type !== 'N') {\n            glyphName = type;\n        }\n        else\n            glyphName = key;\n        code = this.codeNoteHead(glyphName, duration);\n        return {\n            key,\n            octave,\n            line,\n            intValue,\n            code,\n            displaced: false,\n        };\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(accidental) {\n        var _a;\n        return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;\n    }\n    static ornamentCodes(ornament) {\n        var _a;\n        return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.accidental) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.accidental];\n        const accList = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            accList.push({ type: keySpec.accidental, line });\n        }\n        return accList;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                return '\\ue0d8' /*noteheadDiamondWhole*/;\n            case 'D1':\n                return '\\ue0d9' /*noteheadDiamondHalf*/;\n            case 'D2':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'D3':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            /* Triangle */\n            case 'T0':\n                return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n            case 'T1':\n                return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n            case 'T2':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'T3':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            /* Cross */\n            case 'X0':\n                return '\\ue0a7' /*noteheadXWhole*/;\n            case 'X1':\n                return '\\ue0a8' /*noteheadXHalf*/;\n            case 'X2':\n                return '\\ue0a9' /*noteheadXBlack*/;\n            case 'X3':\n                return '\\ue0b3' /*noteheadCircleX*/;\n            /* Square */\n            case 'S1':\n                return '\\ue0b8' /*noteheadSquareWhite*/;\n            case 'S2':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            /* Rectangle */\n            case 'R1':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'R2':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'DO':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'RE':\n                return '\\ue0cb' /*noteheadMoonBlack*/;\n            case 'MI':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'FA':\n                return '\\ue0c0' /*noteheadTriangleLeftBlack*/;\n            case 'FAUP':\n                return '\\ue0c2' /*noteheadTriangleRightBlack*/;\n            case 'SO':\n                return '\\ue0a4' /*noteheadBlack*/;\n            case 'LA':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            case 'TI':\n                return '\\ue0cd' /*noteheadTriangleRoundDownBlack*/;\n            case 'DI': // Diamond\n            case 'H': // Harmonics\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d7' /*noteheadDiamondDoubleWhole*/;\n                    case '1':\n                        return '\\ue0d8' /*noteheadDiamondWhole*/;\n                    case '2':\n                        return '\\ue0d9' /*noteheadDiamondHalf*/;\n                    default:\n                        return '\\ue0db' /*noteheadDiamondBlack*/;\n                }\n            case 'X':\n            case 'M': // Muted\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a6' /*noteheadXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a7' /*noteheadXWhole*/;\n                    case '2':\n                        return '\\ue0a8' /*noteheadXHalf*/;\n                    default:\n                        return '\\ue0a9' /*noteheadXBlack*/;\n                }\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0b0' /*noteheadCircleXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0b1' /*noteheadCircleXWhole*/;\n                    case '2':\n                        return '\\ue0b2' /*noteheadCircleXHalf*/;\n                    default:\n                        return '\\ue0b3' /*noteheadCircleX*/;\n                }\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0e7' /*noteheadCircledDoubleWhole*/;\n                    case '1':\n                        return '\\ue0e6' /*noteheadCircledWhole*/;\n                    case '2':\n                        return '\\ue0e5' /*noteheadCircledHalf*/;\n                    default:\n                        return '\\ue0e4' /*noteheadCircledBlack*/;\n                }\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a1' /*noteheadDoubleWholeSquare*/;\n                    case '1':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    case '2':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    default:\n                        return '\\ue0b9' /*noteheadSquareBlack*/;\n                }\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0ba' /*noteheadTriangleUpDoubleWhole*/;\n                    case '1':\n                        return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n                    case '2':\n                        return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n                    default:\n                        return '\\ue0be' /*noteheadTriangleUpBlack*/;\n                }\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0c3' /*noteheadTriangleDownDoubleWhole*/;\n                    case '1':\n                        return '\\ue0c4' /*noteheadTriangleDownWhole*/;\n                    case '2':\n                        return '\\ue0c5' /*noteheadTriangleDownHalf*/;\n                    default:\n                        return '\\ue0c7' /*noteheadTriangleDownBlack*/;\n                }\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d5' /*noteheadSlashedDoubleWhole1*/;\n                    case '1':\n                        return '\\ue0d3' /*noteheadSlashedWhole1*/;\n                    case '2':\n                        return '\\ue0d1' /*noteheadSlashedHalf1*/;\n                    default:\n                        return '\\ue0cf' /*noteheadSlashedBlack1*/;\n                }\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d6' /*noteheadSlashedDoubleWhole2*/;\n                    case '1':\n                        return '\\ue0d4' /*noteheadSlashedWhole2*/;\n                    case '2':\n                        return '\\ue0d2' /*noteheadSlashedHalf2*/;\n                    default:\n                        return '\\ue0d0' /*noteheadSlashedBlack2*/;\n                }\n            case 'R':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue4e2' /*restDoubleWhole*/;\n                    case '1':\n                        return '\\ue4e3' /*restWhole*/;\n                    case '2':\n                        return '\\ue4e4' /*restHalf*/;\n                    case '4':\n                        return '\\ue4e5' /*restQuarter*/;\n                    case '8':\n                        return '\\ue4e6' /*rest8th*/;\n                    case '16':\n                        return '\\ue4e7' /*rest16th*/;\n                    case '32':\n                        return '\\ue4e8' /*rest32nd*/;\n                    case '64':\n                        return '\\ue4e9' /*rest64th*/;\n                    case '128':\n                        return '\\ue4ea' /*rest128th*/;\n                }\n                break;\n            case 'S':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue10a' /*noteheadSlashWhiteDoubleWhole*/;\n                    case '1':\n                        return '\\ue102' /*noteheadSlashWhiteWhole*/;\n                    case '2':\n                        return '\\ue103' /*noteheadSlashWhiteHalf*/;\n                    default:\n                        return '\\ue100' /*noteheadSlashVerticalEnds*/;\n                }\n            default:\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a0' /*noteheadDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a2' /*noteheadWhole*/;\n                    case '2':\n                        return '\\ue0a3' /*noteheadHalf*/;\n                    default:\n                        return '\\ue0a4' /*noteheadBlack*/;\n                }\n        }\n        return Glyphs.null;\n    }\n}\nTables.UNISON = true;\nTables.SOFTMAX_FACTOR = 10;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nTables.durationCodes = {\n    '1/2': {\n        stem: false,\n    },\n    1: {\n        stem: false,\n    },\n    2: {\n        stem: true,\n    },\n    4: {\n        stem: true,\n    },\n    8: {\n        stem: true,\n        beamCount: 1,\n        stemBeamExtension: 0,\n        codeFlagUp: '\\ue240' /*flag8thUp*/,\n    },\n    16: {\n        beamCount: 2,\n        stemBeamExtension: 0,\n        stem: true,\n        codeFlagUp: '\\ue242' /*flag16thUp*/,\n    },\n    32: {\n        beamCount: 3,\n        stemBeamExtension: 7.5,\n        stem: true,\n        codeFlagUp: '\\ue244' /*flag32ndUp*/,\n    },\n    64: {\n        beamCount: 4,\n        stemBeamExtension: 15,\n        stem: true,\n        codeFlagUp: '\\ue246' /*flag64thUp*/,\n    },\n    128: {\n        beamCount: 5,\n        stemBeamExtension: 22.5,\n        stem: true,\n        codeFlagUp: '\\ue248' /*flag128thUp*/,\n    },\n};\n/**\n * Customize this by calling Flow.setMusicFont(...fontNames);\n */\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: '\\u266f',\n    // ♭ accidental flat\n    flat: '\\u266d',\n    // ♮ accidental natural\n    natural: '\\u266e',\n    // △ major seventh\n    triangle: '\\u25b3',\n    // ø half-diminished\n    'o-with-slash': '\\u00f8',\n    // ° diminished\n    degrees: '\\u00b0',\n    // ○ diminished\n    circle: '\\u25cb',\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    numBeats: 4,\n    beatValue: 4,\n    resolution: RESOLUTION,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Accidental_checkCollision;\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const noteheadAccidentalPadding = Metrics.get('Accidental.noteheadAccidentalPadding');\n        const leftShift = state.leftShift + noteheadAccidentalPadding;\n        const accidentalSpacing = Metrics.get('Accidental.accidentalSpacing');\n        const additionalPadding = Metrics.get('Accidental.leftPadding'); // padding to the left of all accidentals\n        const accidentalLinePositionsAndSpaceNeeds = [];\n        let prevNote = undefined;\n        let extraXSpaceNeededForLeftDisplacedNotehead = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const accidental = accidentals[i];\n            const note = accidental.getNote();\n            const stave = note.getStave();\n            const index = accidental.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    // If the current extra left-space needed isn't as big as this note's,\n                    // then we need to use this note's.\n                    extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    y,\n                    line: accLine,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                    spacingBetweenStaveLines: lineSpace,\n                });\n            }\n            else {\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    line: props.line,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                });\n            }\n        }\n        // Sort accidentals by line number.\n        accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);\n        const staveLineAccidentalLayoutMetrics = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let maxExtraXSpaceNeeded = 0;\n        // Create an array of unique line numbers (staveLineAccidentalLayoutMetrics)\n        // from accidentalLinePositionsAndSpaceNeeds\n        for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {\n            const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];\n            const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;\n            const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];\n            let currentLineMetric;\n            // if this is the first line, or a new line, add a staveLineAccidentalLayoutMetric\n            if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {\n                currentLineMetric = {\n                    line: accidentalLinePositionAndSpaceNeeds.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                };\n                staveLineAccidentalLayoutMetrics.push(currentLineMetric);\n            }\n            else {\n                currentLineMetric = priorLineMetric;\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            if (accidentalType !== 'b' && accidentalType !== 'bb') {\n                currentLineMetric.flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (accidentalType !== '##') {\n                currentLineMetric.dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            currentLineMetric.numAcc++;\n            // Track the total xOffset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;\n            // if this extraXSpaceNeeded is the largest so far, use it as the starting point for\n            // all accidental columns.\n            maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = __classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])\n                ? 'a'\n                : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'secondOnBottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spacedOutTetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spacedOutPentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'verySpacedOutPentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spacedOutHexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'verySpacedOutHexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {\n                        if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to xOffsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger xOffset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = leftShift + maxExtraXSpaceNeeded;\n        columnXOffsets[0] = leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;\n                accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.leftShift = totalShift + additionalPadding;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        this.text = '';\n        if (!this.cautionary) {\n            this.text += Tables.accidentalCodes(this.type);\n            this.fontInfo.size = Metrics.get('Accidental.fontSize');\n        }\n        else {\n            this.text += Tables.accidentalCodes('{');\n            this.text += Tables.accidentalCodes(this.type);\n            this.text += Tables.accidentalCodes('}');\n            this.fontInfo.size = Metrics.get('Accidental.cautionary.fontSize');\n        }\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(this.note)) {\n            this.fontInfo.size = Metrics.get('Accidental.grace.fontSize');\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        this.reset();\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        const accX = start.x;\n        const accY = start.y;\n        L('Rendering: ', type, accX, accY);\n        this.renderText(ctx, accX - this.width, accY);\n    }\n}\n_a = Accidental, _Accidental_checkCollision = function _Accidental_checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n        // then line 2 is on top\n        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n        if (line1.dblSharpLine)\n            clearance -= 0.5;\n    }\n    else {\n        // line 1 is on top\n        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n        if (line2.dblSharpLine)\n            clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line1, Line2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n};\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + Font.convertSizeToPixelValue(annotation.fontInfo.size)) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphWidth();\n            // Get the text width from the font metrics.\n            const textWidth = annotation.getWidth();\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.renderOptions.drawStem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.topTextLine + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.topTextLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.topTextLine);\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.textLine + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.textLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.textLine);\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.textLine);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // Apply style might not save context, if this.style is undefined, so we\n        // still need to save context state just before this, since we will be\n        // changing ctx parameters below.\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        const textWidth = this.getWidth();\n        const textHeight = Font.convertSizeToPixelValue(this.fontInfo.size);\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - textWidth;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - textWidth / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - textWidth / 2;\n        }\n        let stemExt = {};\n        let spacing = 0;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (hasStem) {\n            stemExt = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;\n            if (hasStem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.textLine) - 1;\n            const yb = stave.getYForBottomText(this.textLine);\n            y = yt + (yb - yt) / 2 + textHeight / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (hasStem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        this.renderText(ctx, x, y);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super();\n        this.stemUpYOffset = 0;\n        this.stemDownYOffset = 0;\n        this.stemUpYBaseOffset = 0;\n        this.stemDownYBaseOffset = 0;\n        // Default notehead x bounds\n        this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;\n        this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;\n        // Y bounds for top/bottom most notehead\n        this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;\n        this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;\n        // Stem top extension\n        this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;\n        // Direction of the stem\n        this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        var _a, _b, _c, _d;\n        // Changing where the stem meets the head\n        this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;\n        this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;\n        this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;\n        this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(xBegin, xEnd) {\n        this.xBegin = xBegin;\n        this.xEnd = xEnd;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stemDirection = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stemExtension = ext;\n    }\n    getExtension() {\n        return this.stemExtension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(yTop, yBottom) {\n        this.yTop = yTop;\n        this.yBottom = yBottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;\n        const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension); // parentheses just for grouping.\n        return unsignedHeight * this.stemDirection;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stemDirection === Stem.UP;\n        const ys = [this.yTop, this.yBottom];\n        const stemHeight = Stem.HEIGHT + this.stemExtension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Metrics.get('Stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stemX;\n        let stemY;\n        const stemDirection = this.stemDirection;\n        let yBaseOffset = 0;\n        if (stemDirection === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stemX = this.xBegin;\n            stemY = this.yTop + this.stemDownYOffset;\n            yBaseOffset = this.stemDownYBaseOffset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stemX = this.xEnd;\n            stemY = this.yBottom - this.stemUpYOffset;\n            yBaseOffset = this.stemUpYBaseOffset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'), { pointerBBox: true });\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);\n        ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns.\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nexport function getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nexport function getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nexport function getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.topTextLine, ABOVE);\n                const curTop = noteLine + state.topTextLine + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.betweenLines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.textLine, BELOW);\n                const curBottom = noteLine + state.textLine + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.betweenLines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));\n        state.leftShift += overlap / 2;\n        state.rightShift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes default positions (see https://w3c.github.io/smufl/latest/tables/articulation.html):\n     * - Even codes will be positioned ABOVE\n     * - Odd codes will be positioned BELOW\n     */\n    constructor(type) {\n        var _a;\n        super();\n        this.heightShift = 0;\n        this.type = type;\n        this.position = ABOVE;\n        if (!Tables.articulationCodes(this.type)) {\n            if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)\n                this.position = ABOVE;\n            else\n                this.position = BELOW;\n        }\n        this.articulation = { betweenLines: false };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, betweenLines: false };\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||\n            this.articulation.code ||\n            Glyphs.null;\n        this.text = code;\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.betweenLines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, textLine } = this;\n        const canSitBetweenLines = this.articulation.betweenLines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        let y = {\n            [ABOVE]: () => {\n                this.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                this.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                this.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        this.renderText(ctx, x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Tickable_preFormatted, _Tickable_postFormatted;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        _Tickable_preFormatted.set(this, false);\n        _Tickable_postFormatted.set(this, false);\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.alignCenter = false;\n        this.centerXShift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignoreTicks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\")) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.xShift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.centerXShift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.centerXShift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.alignCenter;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(alignCenter) {\n        this.alignCenter = alignCenter;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return a list of Tuplets. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet (if this is not provided, all tuplets are reset).\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\"))\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_preFormatted, value, \"f\");\n    }\n    get preFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_preFormatted, \"f\");\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_postFormatted, \"f\"))\n            return this;\n        __classPrivateFieldSet(this, _Tickable_postFormatted, true, \"f\");\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_postFormatted, value, \"f\");\n    }\n    get postFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_postFormatted, \"f\");\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n_Tickable_preFormatted = new WeakMap(), _Tickable_postFormatted = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author: Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, doubleBar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (doubleBar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let xShift = 3;\n        if (!begin) {\n            xShift = -5;\n        }\n        staveCtx.fillRect(x + xShift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dotRadius = 2;\n        // Shift dots left or right\n        if (begin) {\n            xShift += 4;\n        }\n        else {\n            xShift -= 4;\n        }\n        const dotX = x + xShift + dotRadius / 2;\n        // calculate the y offset based on number of stave lines\n        let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dotY = topY + yOffset + dotRadius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dotY += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport class ChordSymbolBlock extends Element {\n    constructor(text, symbolModifier, xShift, yShift, vAlign) {\n        super();\n        this.text = text;\n        this.symbolModifier = symbolModifier;\n        this.xShift = xShift;\n        this.yShift = yShift;\n        this.vAlign = vAlign;\n    }\n    isSuperscript() {\n        return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    isSubscript() {\n        return this.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return Metrics.get('ChordSymbol.superSubRatio');\n    }\n    static get spacingBetweenBlocks() {\n        return Metrics.get('ChordSymbol.spacing');\n    }\n    static get superscriptOffset() {\n        return Metrics.get('ChordSymbol.superscriptOffset');\n    }\n    static get subscriptOffset() {\n        return Metrics.get('ChordSymbol.subscriptOffset');\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const note = symbol.checkAttachedNote();\n            let lineSpaces = 1;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = block.isSuperscript();\n                const sub = block.isSubscript();\n                block.setXShift(width);\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If a subscript immediately follows a superscript block, try to\n                // overlay them.\n                if (sub && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (prev.isSuperscript()) {\n                        // slide the symbol over so it lines up with superscript\n                        block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);\n                        block.vAlign = true;\n                        width +=\n                            -prev.getWidth() -\n                                ChordSymbol.minPadding +\n                                (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);\n                    }\n                }\n                width += block.getWidth() + ChordSymbol.minPadding;\n            }\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.topTextLine);\n                state.topTextLine += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.textLine + 1);\n                state.textLine += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                if (isStemmableNote(note)) {\n                    const glyphWidth = note.getGlyphWidth();\n                    if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                        maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                        leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;\n                    }\n                    else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                        maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                        rightWidth = Math.max(rightWidth, width);\n                    }\n                    else {\n                        leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;\n                        rightWidth = Math.max(rightWidth, width / 2);\n                        maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                        maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                    }\n                }\n                symbol.width = width;\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.reportWidth = true;\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    getSymbolBlock(params = {}) {\n        var _a, _b;\n        const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);\n        if (symbolBlock.isSubscript()) {\n            symbolBlock.setYShift(this.subscriptOffset);\n        }\n        if (symbolBlock.isSuperscript()) {\n            symbolBlock.setYShift(this.superscriptOffset);\n        }\n        if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {\n            const { family, size, weight, style } = this.fontInfo;\n            const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n            symbolBlock.setFont(family, smallerFontSize, weight, style);\n        }\n        else {\n            symbolBlock.setFont(this.fontInfo);\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    addText(text, parameters = {}) {\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);\n    }\n    /** Add a glyph block. */\n    addGlyph(glyph, params = {}) {\n        return this.addText(ChordSymbol.glyphs[glyph], params);\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const glyph = ChordSymbol.glyphs[char];\n            if (glyph) {\n                str += glyph;\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    addLine(params = {}) {\n        // Two csymMinor glyphs next to each other.\n        return this.addText('\\ue874\\ue874' /*{csymMinor}{csymMinor}*/, params);\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.fontInfo);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;\n                y = Math.max(y, stemBase + spacing * (this.textLine + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.textLine), topY - 10);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            L('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());\n            symbol.renderText(ctx, x, y);\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: '\\ue870' /*csymDiminished*/,\n    dim: '\\ue870' /*csymDiminished*/,\n    halfDiminished: '\\ue871' /*csymHalfDiminished*/,\n    '+': '\\ue872' /*csymAugmented*/,\n    augmented: '\\ue872' /*csymAugmented*/,\n    majorSeventh: '\\ue873' /*csymMajorSeventh*/,\n    minor: '\\ue874' /*csymMinor*/,\n    '-': '\\ue874' /*csymMinor*/,\n    '(': '\\u0028' /*csymParensLeftTall*/,\n    leftParen: '\\u0028' /*csymParensLeftTall*/,\n    ')': '\\u0029' /*csymParensRightTall*/,\n    rightParen: '\\u0029' /*csymParensRightTall*/,\n    leftBracket: '\\ue877' /*csymBracketLeftTall*/,\n    rightBracket: '\\ue878' /*csymBracketRightTall*/,\n    leftParenTall: '\\u0028' /*csymParensLeftVeryTall*/,\n    rightParenTall: '\\u0029' /*csymParensRightVeryTall*/,\n    '/': '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    over: '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    '#': '\\ued62' /*csymAccidentalSharp*/,\n    b: '\\ued60' /*csymAccidentalFlat*/,\n};\nChordSymbol.symbolModifiers = SymbolModifiers;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = Tables.durationCodes[duration];\n        if (code === undefined) {\n            code = Tables.durationCodes['4'];\n        }\n        // Try and get the note head\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        // Merge duration props for 'duration' with the note head properties.\n        if (codeNoteHead !== Glyphs.null) {\n            code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });\n        }\n        return code;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        var _a;\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.durationOverride) {\n            // Custom duration\n            this.setDuration(noteStruct.durationOverride);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignoreTicks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.xShift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.alignCenter) {\n            this.setCenterAlignment(noteStruct.alignCenter);\n        }\n        // The render surface.\n        this.renderOptions = {\n            annotationSpacing: 5,\n            strokePx: 1,\n            yShift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(textLine) {\n        return this.checkStave().getYForTopText(textLine);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType(Category.Dot).length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam !== undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        const parentheses = this.checkModifierContext().getMembers('Parenthesis');\n        // consider parentheses on noteheads, dots should be to the right of them\n        if (parentheses.length !== 0) {\n            px += parentheses[0].getWidth() + 1;\n        }\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes xShift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Metrics.get('Stave.padding', 0);\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieStartX += noteGlyphWidth / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieEndX += noteGlyphWidth / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignoreTicks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let lastWidth = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.topTextLine < stringPos) {\n                    state.topTextLine = stringPos;\n                }\n            }\n            bend.setXShift(lastWidth);\n            lastWidth = bend.getWidth();\n            bend.setTextLine(state.topTextLine);\n        }\n        state.rightShift += lastWidth;\n        state.topTextLine += 1;\n        return true;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     */\n    constructor(phrase) {\n        super();\n        this.xShift = 0;\n        this.tap = '';\n        this.renderOptions = {\n            lineWidth: 1.5,\n            lineStyle: '#777777',\n            bendWidth: 8,\n            releaseWidth: 8,\n        };\n        this.phrase = phrase;\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.xShift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getTextHeight() {\n        const element = new Element(Category.Bend);\n        element.setText(this.phrase[0].text);\n        return element.getHeight();\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const measureText = (text) => {\n            const element = new Element(Category.Bend);\n            element.setText(text);\n            return element.getWidth();\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;\n                bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;\n                bend.drawWidth = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.xShift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const xShift = this.xShift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.textLine is relative to top string in the group.\n        const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;\n        const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cpX = x + width;\n            const cpY = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cpX, cpY, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            const renderX = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, renderX, annotationY);\n            ctx.restore();\n        };\n        let lastBend = undefined;\n        let lastBendDrawWidth = 0;\n        let lastDrawnWidth = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.drawWidth)\n                bend.drawWidth = 0;\n            if (i === 0)\n                bend.drawWidth += xShift;\n            lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);\n            if (bend.type === Bend.UP) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderArrowHead(start.x, bendHeight, +1);\n                }\n                renderBend(start.x, start.y, lastDrawnWidth, bendHeight);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (lastBend && lastBend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (!lastBend) {\n                    lastDrawnWidth = bend.drawWidth;\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n            }\n            renderText(start.x + lastDrawnWidth, bend.text);\n            lastBend = bend;\n            lastBendDrawWidth = bend.drawWidth;\n            lastBend.x = start.x;\n            start.x += lastDrawnWidth;\n        }\n        if (!lastBend || lastBend.x === undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (lastBend.type === Bend.UP) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, +1);\n        }\n        else if (lastBend.type === Bend.DOWN) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements dot modifiers for notes.\nimport { Modifier } from './modifier';\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {\n                const dot = new Dot();\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const rightShift = state.rightShift;\n        const dotSpacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dotList = [];\n        const maxShiftMap = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = rightShift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const noteId = note.getAttribute('id');\n            dotList.push({ line: props.line, note, noteId, dot });\n            maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);\n        }\n        // Sort dots by line number.\n        dotList.sort((a, b) => b.line - a.line);\n        let dotShift = rightShift;\n        let xWidth = 0;\n        let lastLine = null;\n        let lastNote = null;\n        let prevDottedSpace = null;\n        let halfShiftY = 0;\n        for (let i = 0; i < dotList.length; ++i) {\n            const { dot, note, noteId, line } = dotList[i];\n            // Reset the position of the dot every line.\n            if (line !== lastLine || note !== lastNote) {\n                dotShift = maxShiftMap[noteId];\n            }\n            if (!note.isRest() && line !== lastLine) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    halfShiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    halfShiftY = 0.5;\n                    if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                    else if (line + halfShiftY === prevDottedSpace) {\n                        // previous space is dotted, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                }\n            }\n            // Convert halfShiftY to a multiplier for dots.draw().\n            if (note.isRest()) {\n                dot.dotShiftY += -halfShiftY;\n            }\n            else {\n                dot.dotShiftY = -halfShiftY;\n            }\n            prevDottedSpace = line + halfShiftY;\n            dot.setXShift(dotShift);\n            dotShift += dot.getWidth() + dotSpacing; // spacing\n            xWidth = dotShift > xWidth ? dotShift : xWidth;\n            lastLine = line;\n            lastNote = note;\n        }\n        // Update state.\n        state.rightShift += xWidth;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dotShiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dotShiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.xShift + this.width - this.radius;\n        const y = start.y + this.yShift + this.dotShiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { leftShift, rightShift } = state;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textHeight = Metrics.get('FretHandFinger.fontSize');\n            if (num.position === ModifierPosition.ABOVE) {\n                state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (leftShift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            numsList.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            let numShift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = numsList[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = leftShift + shiftL;\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + numShiftL);\n                numShift = leftShift + numWidth; // spacing\n                xWidthL = numShift > xWidthL ? numShift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numShift = shiftRight + numWidth; // spacing\n                xWidthR = numShift > xWidthR ? numShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.setFretHandFinger(finger);\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n    }\n    setFretHandFinger(finger) {\n        this.text = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.text;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dotX = start.x + this.xOffset;\n        let dotY = start.y + this.yOffset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dotX -= 4;\n                dotY -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dotX -= 2;\n                dotY += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        this.renderText(ctx, dotX, dotY);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.customGlyph = false;\n        // map notehead SMuFL codes to the corresponding SMuFL code with ledger line\n        this.ledger = {\n            '\\ue4e3' /*restWhole*/: '\\ue4f4' /*restWholeLegerLine*/,\n            '\\ue4e4' /*restHalf*/: '\\ue4f5' /*restHalfLegerLine*/,\n        };\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.noteType)\n            this.noteType = noteStruct.noteType;\n        this.displaced = noteStruct.displaced || false;\n        this.stemDirection = noteStruct.stemDirection || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {\n            this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];\n        }\n        this.text = this.glyphProps.codeHead;\n        if (noteStruct.customGlyphCode) {\n            this.customGlyph = true;\n            this.text = noteStruct.customGlyphCode;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.renderOptions = Object.assign({}, this.renderOptions);\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);\n    }\n    /** Get the `BoundingBox` for the `NoteHead`. */\n    getBoundingBox() {\n        return new BoundingBox(this.getAbsoluteX() - this.textMetrics.actualBoundingBoxLeft, this.y - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", this.x, this.y);\n        this.renderText(ctx, this.getAbsoluteX() - this.x, 0);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.flag = new Element();\n        this.flagStyle = {};\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag() {\n        var _a, _b, _c;\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = \n            // codeFlagDown = codeFlagUp + 1\n            // if codeFlagUp is undefined, codePoint will be 0\n            this.getStemDirection() === Stem.DOWN\n                ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)\n                : (_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null;\n            this.flag.setText(flagCode);\n            this.flag.fontInfo = this.fontInfo;\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beamCount;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        const beamIsUndefined = this.beam === undefined;\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n            case '16':\n                length = beamIsUndefined ? 35 : 25;\n                break;\n            case '32':\n                length = beamIsUndefined ? 45 : 35;\n                break;\n            case '64':\n                length = beamIsUndefined ? 50 : 40;\n                break;\n            case '128':\n                length = beamIsUndefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stemDirection)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stemDirection;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stemDirection = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const xBegin = this.getAbsoluteX() + this.xShift;\n        const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();\n        const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;\n        return stemX;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        const flagHeight = this.flag.getHeight();\n        const scale = this.getFontScale();\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        // Use stemBeamExtension with beams\n        if (this.beam) {\n            return glyphProps.stemBeamExtension * scale;\n        }\n        // If the flag is longer than the stem, extend the stem by the difference.\n        return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stemExtensionOverride = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StaveNote_noteHeads, _StaveNote_sortedKeyProps;\nimport { BoundingBox } from './boundingbox';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = __classPrivateFieldGet(notes[i], _StaveNote_sortedKeyProps, \"f\");\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL =\n                    line +\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);\n                minL =\n                    line -\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection,\n                stemMax,\n                stemMin,\n                voiceShift: notes[i].getVoiceShiftWidth(),\n                isDisplaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            // If .draw is true or undefined, we set draw[i] = true\n            draw[i] = notesList[i].note.renderOptions.draw !== false;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.renderOptions.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        const noteUHead = __classPrivateFieldGet(noteU.note, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.code;\n                        const noteLHead = __classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\")[__classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\").length - 1].keyProps.code;\n                        if (\n                        // If unison is not configured, shift\n                        !Tables.UNISON ||\n                            // If we have different noteheads, shift\n                            noteUHead !== noteLHead ||\n                            // If we have different dot values, shift\n                            noteU.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                .length !==\n                                noteL.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                    .length ||\n                            // If the notes are quite close but not on the same line, shift\n                            (lineDiff < 1 && lineDiff > 0) ||\n                            // If styles are different, shift\n                            JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line !== noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.note.duration < noteL.note.duration) {\n                            // upper voice is shorter, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.rightShift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.renderOptions.draw = false;\n            // Hide lower voice rest\n            noteL.note.renderOptions.draw = false;\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.rightShift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        _StaveNote_noteHeads.set(this, void 0);\n        // Sorted variant of keyProps used internally.\n        _StaveNote_sortedKeyProps.set(this, []);\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dotShiftY = 0;\n        // for displaced ledger lines\n        this.useDefaultHeadX = false;\n        // Drawing\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        this.modifiers = [];\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // number of stroke px to the left and right of head\n            strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.autoStem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this.setStave(stave);\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.useDefaultHeadX = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                noteType: this.noteType,\n                displaced,\n                stemDirection,\n                customGlyphCode: noteProps.code,\n                line: noteProps.line,\n            });\n            notehead.fontInfo = this.fontInfo;\n            this.addChildElement(notehead);\n            __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[__classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].index] = notehead;\n        }\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\");\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.line;\n        this.maxLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        var _a;\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, this.noteType, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").push({ keyProps, index });\n        });\n        __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        const boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            boundingBox.mergeWith(notehead.getBoundingBox());\n        });\n        const { yTop, yBottom } = this.getNoteHeadBounds();\n        // eslint-disable-next-line\n        const noteStemHeight = this.stem.getHeight();\n        const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n        const flagY = this.getStemDirection() === Stem.DOWN\n            ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n            : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n        if (!this.isRest() && this.hasStem()) {\n            boundingBox.mergeWith(new BoundingBox(this.getAbsoluteX(), flagY, 0, 0));\n        }\n        if (this.hasFlag()) {\n            const bbFlag = this.flag.getBoundingBox();\n            boundingBox.mergeWith(bbFlag.move(flagX, flagY));\n        }\n        return boundingBox;\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        const val = this.glyphProps.codeHead;\n        return val >= '\\ue4e0' && val <= '\\ue4ff';\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `textLine`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(yTop, yBottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.xShift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.xShift + 2;\n            if (this.stemDirection === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += this.flag.getWidth();\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        // addtional y shifts for rests\n        let restShift = 0;\n        switch (__classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].getText()) {\n            case '\\ue4e2' /*restDoubleWhole*/:\n            case '\\ue4e3' /*restWhole*/:\n                restShift += 0.5;\n                break;\n            case '\\ue4e4' /*restHalf*/:\n            case '\\ue4e5' /*restQuarter*/:\n            case '\\ue4e6' /*rest8th*/:\n            case '\\ue4e7' /*rest16th*/:\n                restShift -= 0.5;\n                break;\n            case '\\ue4e8' /*rest32nd*/:\n            case '\\ue4e9' /*rest64th*/:\n                restShift -= 1.5;\n                break;\n            case '\\ue4ea' /*rest128th*/:\n                restShift -= 2.5;\n                break;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flagStyle = style;\n    }\n    getFlagStyle() {\n        return this.flagStyle;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.noteHeads[0].getWidth();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} yTop the highest notehead bound\n     * @property {number} yBottom the lowest notehead bound\n     * @property {number|Null} displacedX the starting x for displaced noteheads\n     * @property {number|Null} nonDisplacedX the starting x for non-displaced noteheads\n     * @property {number} highestLine the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowestLine the lowest notehead line\n     * @property {number|false} highestDisplacedLine the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowestDisplacedLine\n     * @property {number} highestNonDisplacedLine\n     * @property {number} lowestNonDisplacedLine\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            yTop,\n            yBottom,\n            displacedX,\n            nonDisplacedX,\n            highestLine,\n            lowestLine,\n            highestDisplacedLine,\n            lowestDisplacedLine,\n            highestNonDisplacedLine,\n            lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.xShift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").slice();\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { renderOptions: { strokePx }, } = this;\n        const ctx = this.checkContext();\n        const width = this.getGlyphWidth() + strokePx * 2;\n        const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highestLine < 6 && lowestLine > 0)\n            return;\n        const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = minX - strokePx;\n            else if (normal)\n                x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;\n            else\n                x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highestLine; ++line) {\n            const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;\n            const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowestLine; --line) {\n            const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;\n            const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index];\n            if (notehead === noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.codeFlagUp !== undefined;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam && !this.isRest();\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : // Up stems are above the note head and have flags on the right.\n                    yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            // Draw the Flag\n            this.applyStyle(ctx, this.flagStyle);\n            this.flag.renderText(ctx, flagX, flagY);\n            this.restoreStyle(ctx, this.flagStyle);\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'), { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const superStemExtension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return superStemExtension;\n        }\n        const stemDirection = this.getStemDirection();\n        if (stemDirection !== this.calculateOptimalStemDirection()) {\n            return superStemExtension; // no adjustment for manually set stem direction.\n        }\n        let midLineDistance;\n        const MIDDLE_LINE = 3;\n        if (stemDirection === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            midLineDistance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            midLineDistance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const linesOverOctaveFromMidLine = midLineDistance - 3.5;\n        if (linesOverOctaveFromMidLine <= 0) {\n            return superStemExtension;\n        }\n        const stave = this.getStave();\n        let spacingBetweenLines = 10;\n        if (stave !== undefined) {\n            spacingBetweenLines = stave.getSpacingBetweenLines();\n        }\n        return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.renderOptions.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\n_StaveNote_noteHeads = new WeakMap(), _StaveNote_sortedKeyProps = new WeakMap();\nStaveNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text = '') {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.renderOptions = {\n            cp1: 8,\n            cp2: 12,\n            textShiftX: 0,\n            firstXShift: 0,\n            lastXShift: 0,\n            yShift: 7,\n            tieSpacing: 0,\n        };\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes) {\n            notes.firstIndexes = [0];\n        }\n        if (!notes.lastIndexes) {\n            notes.lastIndexes = [0];\n        }\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.firstNote || !this.notes.lastNote;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.renderOptions.cp1;\n        let cp2 = this.renderOptions.cp2;\n        if (Math.abs(params.lastX - params.firstX) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const firstXShift = this.renderOptions.firstXShift;\n        const lastXShift = this.renderOptions.lastXShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        // setNotes(...) verified that firstIndexes and lastIndexes are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        // eslint-disable-next-line\n        const lastIndexes = this.notes.lastIndexes;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;\n            // firstY and lastY are specified in pixels.\n            const firstY = params.firstYs[firstIndexes[i]] + yShift;\n            const lastY = params.lastYs[lastIndexes[i]] + yShift;\n            if (isNaN(firstY) || isNaN(lastY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');\n            }\n            const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;\n            const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.firstX + firstXShift, firstY);\n            ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);\n            ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    /**\n     * @param firstX specified in pixels\n     * @param lastX specified in pixels\n     */\n    renderTieText(firstX, lastX) {\n        var _a, _b, _c;\n        const ctx = this.checkContext();\n        let centerX = (firstX + lastX) / 2;\n        centerX -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.notes.firstNote;\n        const lastNote = this.notes.lastNote;\n        // Provide some default values so the compiler doesn't complain.\n        // firstX and lastX are in pixels.\n        let firstX = 0;\n        let lastX = 0;\n        let firstYs = [0];\n        let lastYs = [0];\n        let stemDirection = 0;\n        if (firstNote) {\n            firstX = firstNote.getTieRightX() + this.renderOptions.tieSpacing;\n            stemDirection = firstNote.getStemDirection();\n            firstYs = firstNote.getYs();\n        }\n        else if (lastNote) {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstYs = lastNote.getYs();\n            this.notes.firstIndexes = this.notes.lastIndexes;\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX() + this.renderOptions.tieSpacing;\n            stemDirection = lastNote.getStemDirection();\n            lastYs = lastNote.getYs();\n        }\n        else if (firstNote) {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastYs = firstNote.getYs();\n            this.notes.lastIndexes = this.notes.firstIndexes;\n        }\n        if (this.direction) {\n            stemDirection = this.direction;\n        }\n        this.renderTie({\n            firstX,\n            lastX,\n            firstYs,\n            lastYs,\n            direction: stemDirection,\n        });\n        this.renderTieText(firstX, lastX);\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.renderOptions.cp1 = 9;\n        this.renderOptions.cp2 = 11;\n        this.renderOptions.yShift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError, sumArray } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    numBeats: parseInt(match[1]),\n                    beatValue: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);\n        // until tickables are added, the smallestTickCount is the same as the stated totalTicks duration.\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode (Voice.Mode.SOFT, STRICT, or FULL) */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode` or Voice.Mode\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        const boundingBox = this.tickables[0].getBoundingBox();\n        for (let i = 1; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (!tickable.getStave() && this.stave)\n                tickable.setStave(this.stave);\n            const bb = tickable.getBoundingBox();\n            boundingBox.mergeWith(bb);\n        }\n        return boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        this.expTicksUsed = 0; // reset\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.  (It is not the sum of the softmax(t) over all tickables)\n     *\n     * Note that the \"exp\" of \"expTicksUsed\" stands for \"expontential\" ticks used,\n     * not \"expected\" ticks used.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = sumArray(this.tickables.map(exp));\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenoteGroups, state) {\n        const groupSpacingStave = 4;\n        const groupSpacingTab = 0;\n        if (!gracenoteGroups || gracenoteGroups.length === 0)\n            return false;\n        const groupList = [];\n        let prevNote = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenoteGroups.length; ++i) {\n            const gracenoteGroup = gracenoteGroups[i];\n            const note = gracenoteGroup.getNote();\n            const isStavenote = isStaveNote(note);\n            const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;\n            if (isStavenote && note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prevNote = note;\n            }\n            groupList.push({ shift: shiftL, gracenoteGroup, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let groupShift = groupList[0].shift;\n        let formatWidth;\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            gracenoteGroup.preFormat();\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            groupShift = Math.max(formatWidth, groupShift);\n        }\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);\n        }\n        state.leftShift += groupShift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(graceNotes, showSlur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.graceNotes = graceNotes;\n        this.width = 0;\n        this.showSlur = showSlur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.renderOptions = {\n            slurYShift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.graceNotes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(graceNotes) {\n        graceNotes = graceNotes || this.graceNotes;\n        if (graceNotes.length > 1) {\n            const beam = new Beam(graceNotes);\n            beam.renderOptions.beamWidth = 3;\n            beam.renderOptions.partialBeamLength = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.graceNotes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.showSlur) {\n            // Create and draw slur.\n            const isStavenote = isStaveNote(note);\n            const TieClass = isStavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                lastNote: this.graceNotes[0],\n                firstNote: note,\n                firstIndexes: [0],\n                lastIndexes: [0],\n            });\n            this.slur.renderOptions.cp2 = 12;\n            this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.leftShift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n// MIT License\nimport { getBottomY, getInitialOffset, getTopY } from './articulation';\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let rightShift = state.rightShift; // jazz ornaments calculate r/l shift separately\n        let leftShift = state.leftShift;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (ornament.position === ModifierPosition.RIGHT) {\n                ornament.xShift += rightShift + 2;\n                rightShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.LEFT) {\n                ornament.xShift -= leftShift + ornament.width + 2;\n                leftShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.ABOVE) {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.leftShift = leftShift + width / 2;\n        state.rightShift = rightShift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentLeft() {\n        return ['scoop'];\n    }\n    static get ornamentRight() {\n        return ['doit', 'fall', 'fallLong', 'doitLong'];\n    }\n    static get ornamentYShift() {\n        return ['fallLong'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        // Default position ABOVE\n        this.position = ModifierPosition.ABOVE;\n        if (Ornament.ornamentRight.indexOf(type) >= 0) {\n            this.position = ModifierPosition.RIGHT;\n        }\n        if (Ornament.ornamentLeft.indexOf(type) >= 0) {\n            this.position = ModifierPosition.LEFT;\n        }\n        this.type = type;\n        this.delayed = false;\n        this.renderOptions = {\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        this.text = Tables.ornamentCodes(this.type);\n    }\n    /** Set note attached to ornament. */\n    setNote(note) {\n        super.setNote(note);\n        // articulations above/below the line can be stacked.\n        if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {\n            // Unfortunately we don't know the stem direction.  So we base it\n            // on the line number, but also allow it to be overridden.\n            if (note.getLineNumber() >= 3) {\n                this.position = Modifier.Position.ABOVE;\n            }\n            else {\n                this.position = Modifier.Position.BELOW;\n            }\n        }\n        return this;\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        this.accidentalUpper = new Element();\n        this.accidentalUpper.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        this.accidentalLower = new Element();\n        this.accidentalLower.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        const staffSpace = stave.getSpacingBetweenLines();\n        const initialOffset = getInitialOffset(note, this.position);\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;\n        if (this.position === ModifierPosition.ABOVE) {\n            glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;\n        }\n        if (this.position === ModifierPosition.BELOW) {\n            glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;\n        }\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = note.getTickContext().getX();\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                const tickables = note.getVoice().getTickables();\n                const index = tickables.indexOf(note);\n                const nextContext = index + 1 < tickables.length ? tickables[index + 1].checkTickContext() : undefined;\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - glyphX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);\n            glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;\n        }\n        // ornament requires yShift\n        if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {\n            this.yShift += this.getHeight();\n        }\n        this.renderText(ctx, glyphX -\n            (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0), glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;\n            this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Rodrigo Vilar\n// MIT License\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Category } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index) + parenthesis.width;\n                xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        if (this.position === Modifier.Position.RIGHT) {\n            this.text = '\\uE0F6'; /*noteheadParenthesisRight*/\n        }\n        else if (this.position === Modifier.Position.LEFT) {\n            this.text = '\\uE0F5'; /*noteheadParenthesisLeft*/\n        }\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.setFont(note.getFont());\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        this.renderText(ctx, start.x, start.y);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        this.curTransfrom = context.getTransform();\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id, attrs) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    openRotation(angleDegrees, x, y) {\n        this.curTransfrom = this.context2D.getTransform();\n        this.context2D.translate(x, y);\n        this.context2D.rotate((angleDegrees * Math.PI) / 180);\n        this.context2D.translate(-x, -y);\n    }\n    closeRotation() {\n        this.context2D.setTransform(this.curTransfrom);\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Gregory Ristow (2015)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SVGContext_instances, _SVGContext_getShadowStyle;\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Metrics } from './metrics';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        _SVGContext_instances.add(this);\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Metrics.get('fontFamily'),\n            'font-size': '10pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadowAttributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.stateStack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    openRotation(angleDegrees, x, y) {\n        this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);\n    }\n    closeRotation() {\n        this.closeGroup();\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadowAttributes.color = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.shadowAttributes.width = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBoxOrMinX, minY, width, height) {\n        if (typeof viewBoxOrMinX === 'string') {\n            this.svg.setAttribute('viewBox', viewBoxOrMinX);\n        }\n        else {\n            const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length === 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        SVGContext.measureTextElement.setText(text);\n        SVGContext.measureTextElement.setFont(this.attributes['font-family'], this.attributes['font-size'], this.attributes['font-weight'], this.attributes['font-style']);\n        const bb = SVGContext.measureTextElement.getBoundingBox();\n        return { x: bb.x, y: bb.y, width: bb.w, height: bb.h };\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    // TODO: State should be deep-copied.\n    save() {\n        this.stateStack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadowAttributes: {\n                width: this.shadowAttributes.width,\n                color: this.shadowAttributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    // TODO: State should be deep-restored.\n    restore() {\n        const savedState = this.stateStack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadowAttributes.width = state.shadowAttributes.width;\n            this.shadowAttributes.color = state.shadowAttributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\n_SVGContext_instances = new WeakSet(), _SVGContext_getShadowStyle = function _SVGContext_getShadowStyle() {\n    const sa = this.shadowAttributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n};\nSVGContext.measureTextElement = new Element();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 === 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        /**\n         * The modifier context's leftShift state.\n         */\n        const leftShift = state.leftShift;\n        /**\n         * The modifier context's rightShift state.\n         */\n        const rightShift = state.rightShift;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let extraXSpaceForDisplacedNotehead = 0;\n        let shiftRight = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.textLine = mc.getState().topTextLine;\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.textLine = mc.getState().textLine;\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (pos === Modifier.Position.LEFT) {\n                        extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            numsList.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: extraXSpaceForDisplacedNotehead,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort string numbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            const note = numsList[i].note;\n            const pos = numsList[i].pos;\n            const num = numsList[i].num;\n            const line = numsList[i].line;\n            const shiftR = numsList[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            let numXShift = 0;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);\n                numXShift = numWidth; // spacing\n                xWidthL = Math.max(numXShift, xWidthL);\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numXShift += numWidth; // spacing\n                xWidthR = numXShift > xWidthR ? numXShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.stringNumber = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.xShift = 0;\n        this.yShift = 0;\n        this.textLine = 0;\n        this.stemOffset = 0;\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.stringNumber = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.lastNote = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dotX = start.x + this.xShift + this.xOffset;\n        let stemExt = {};\n        if (note.hasStem()) {\n            stemExt = note.checkStem().getExtents();\n        }\n        let dotY = start.y + this.yShift + this.yOffset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.UP) {\n                        dotY = stemExt.topY + Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY -=\n                        this.radius +\n                            Metrics.get('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.DOWN) {\n                        dotY = stemExt.topY - Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY +=\n                        this.radius +\n                            Metrics.get('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.radius / 2 + Metrics.get('StringNumber.leftPadding');\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += this.radius / 2 + Metrics.get('StringNumber.rightPadding');\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.fontInfo);\n        const x = dotX - ctx.measureText(this.stringNumber).width / 2;\n        ctx.fillText('' + this.stringNumber, x, dotY + 4.5);\n        const lastNote = this.lastNote;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const leftShift = state.leftShift;\n        const strokeSpacing = 5;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = leftShift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + strokeSpacing, xShift);\n        }, 0);\n        state.leftShift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ allVoices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.allVoices = this.options.allVoices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.renderOptions = {\n            fontScale: Metrics.get('Stroke.fontSize'),\n        };\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.noteEnd = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let yPositions = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const lineSpace = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                yPositions = note.getYs();\n                for (let n = 0; n < yPositions.length; n++) {\n                    if (this.note === notes[i] || this.allVoices) {\n                        topY = Math.min(topY, yPositions[n]);\n                        botY = Math.max(botY, yPositions[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrowY = 0;\n        let textY = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = '\\ueb78' /*arrowheadBlackUp*/;\n                arrowY = topY;\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = '\\ueb7c' /*arrowheadBlackDown*/;\n                arrowY = botY + lineSpace;\n                topY -= lineSpace / 2;\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.xShift, topY, 1, botY - topY);\n        }\n        else {\n            // Select the wiggle glyph depending on the arrow direction\n            const lineGlyph = arrow === '\\ueb7c' /*arrowheadBlackDown*/ ? '\\ueaaa' /*wiggleArpeggiatoDown*/ : '\\ueaa9'; /*wiggleArpeggiatoUp*/\n            let txt = '';\n            const el = new Element();\n            // add glyphs until the required length is achieved\n            while (el.getWidth() < botY - topY) {\n                txt += lineGlyph;\n                el.setText(txt);\n            }\n            if (this.type === Stroke.Type.RASQUEDO_DOWN ||\n                this.type === Stroke.Type.ROLL_DOWN ||\n                this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n                ctx.openRotation(90, x + this.xShift, topY);\n                el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = topY + el.getWidth() + 5;\n            }\n            else {\n                ctx.openRotation(-90, x + this.xShift, botY);\n                el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = botY - el.getWidth() - 5;\n            }\n        }\n        // Draw the arrow head\n        if (arrowY !== 0) {\n            const el = new Element();\n            el.setText(arrow);\n            el.renderText(ctx, \n            // Center the arrow head substracting its width / 2\n            x + this.xShift - el.getWidth() / 2, arrowY);\n        }\n        // Draw the rasquedo \"R\"\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            const el = new Element('Stroke.text');\n            el.setText('R');\n            el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASQUEDO_DOWN ? el.getHeight() : 0));\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let textLine = state.topTextLine;\n        let width = 0;\n        let shift = state.rightShift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            textLine = textLine - (bendHeight + 1);\n        }\n        else {\n            state.topTextLine += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(textLine);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.rightShift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.renderOptions = {\n            code: 0xeab0,\n            width: 20,\n        };\n        this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.renderOptions.width = width;\n        this.text = String.fromCodePoint(this.renderOptions.code);\n        const items = Math.round(this.renderOptions.width / this.getWidth());\n        for (let i = 1; i < items; i++) {\n            this.text += String.fromCodePoint(this.renderOptions.code);\n        }\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.renderOptions.code = code;\n        return this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x;\n        const vy = note.getYForTopText(this.textLine) + 5;\n        this.renderText(ctx, vx, vy);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.).  The ModifierContext works with tickables\n// that are at the same tick to ensure that they and their modifiers\n// all have proper alignment.  (Note that the ModifierContext also\n// runs the spacing of the tickable).\n//\n// see https://github.com/0xfe/vexflow/wiki/How-Formatting-Works\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            leftShift: 0,\n            rightShift: 0,\n            textLine: 0,\n            topTextLine: 0,\n        };\n        // Current members -- a mapping of Category (string) to a list of Tickables, Modifiers,\n        // StaveNotes, TabNotes, etc.\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Get the width of the entire\n     */\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.leftShift;\n    }\n    getRightShift() {\n        return this.state.rightShift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.leftShift + this.state.rightShift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.leftShift + state.rightShift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Co-author: Benjamin W. Bohl\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;\n        return {\n            treble: {\n                code: gClef,\n                line: 3,\n            },\n            bass: {\n                code: fClef,\n                line: 1,\n            },\n            alto: {\n                code: cClef,\n                line: 2,\n            },\n            tenor: {\n                code: cClef,\n                line: 1,\n            },\n            percussion: {\n                code: unpitchedPercussionClef1,\n                line: 2,\n            },\n            soprano: {\n                code: cClef,\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: cClef,\n                line: 3,\n            },\n            'baritone-c': {\n                code: cClef,\n                line: 0,\n            },\n            'baritone-f': {\n                code: fClef,\n                line: 2,\n            },\n            subbass: {\n                code: fClef,\n                line: 0,\n            },\n            french: {\n                code: gClef,\n                line: 4,\n            },\n            tab: {\n                code: sixStringTabClef,\n                line: 2.5,\n            },\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.code = Clef.types['treble'].code;\n        this.line = Clef.types['treble'].line;\n        this.size = 'default';\n        this.type = 'treble';\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size = 'default', annotation) {\n        this.type = type;\n        this.code = Clef.types[type].code;\n        this.line = Clef.types[type].line;\n        this.size = size !== null && size !== void 0 ? size : 'default';\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation === '8va') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8va;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8va;\n            }\n        }\n        if (annotation === '8vb') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8vb;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8vb;\n            }\n        }\n        this.text = this.code;\n        this.fontInfo.size = Math.floor(Clef.getPoint(this.size));\n        return this;\n    }\n    /** Get point for clefs. */\n    static getPoint(size) {\n        // for sizes other than 'default', clef is 2/3 of the default value\n        return size === 'default' ? Metrics.get('fontSize') : (Metrics.get('fontSize') * 2) / 3;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        this.renderText(ctx, 0, stave.getYForLine(this.line));\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Element } from './element';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `keySpec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphs = [];\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc, stave) {\n        const code = Tables.accidentalCodes(acc.type);\n        const glyph = new Element(Category.KeySignature);\n        glyph.setText(code);\n        // Determine spacing between current accidental and the next accidental\n        const extraWidth = 1;\n        // Place the glyph on the stave\n        glyph.setYShift(stave.getYForLine(acc.line));\n        if (this.glyphs.length > 0) {\n            const prevGlyph = this.glyphs[this.glyphs.length - 1];\n            glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);\n        }\n        this.glyphs.push(glyph);\n        // Expand size of key signature\n        this.width += glyph.getWidth() + extraWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancelAccList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!differentTypes) {\n                index = cancelAccList.length - naturals + i;\n            }\n            const acc = cancelAccList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancelAccList[0].type,\n        };\n    }\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.calculateWidth();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);\n            }\n        }\n        this.formatted = true;\n    }\n    calculateWidth() {\n        this.width = 0;\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        if (this.cancelKeySpec) {\n            this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            for (let i = 0; i < this.accList.length; ++i) {\n                const code = Tables.accidentalCodes(this.accList[i].type);\n                const glyph = new Element(Category.KeySignature);\n                glyph.setText(code);\n                // Determine spacing between current accidental and the next accidental\n                const extraWidth = 1;\n                // Expand size of key signature\n                this.width += glyph.getWidth() + extraWidth;\n            }\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            glyph.renderText(ctx, this.x, 0);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { Metrics } from './metrics';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, yShift) {\n        super();\n        this.symbolType = type;\n        this.x = x;\n        this.xShift = 0;\n        this.yShift = yShift;\n    }\n    setShiftX(x) {\n        this.xShift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.yShift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbolType) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSegnoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSegnoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue048' /*coda*/;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.coda.offsetY'));\n        return this;\n    }\n    drawSegnoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue047' /*segno*/;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.segno.offsetY'));\n        return this;\n    }\n    drawSymbolText(stave, x, text, drawCoda) {\n        const ctx = stave.checkContext();\n        let textX = 0;\n        this.text = text;\n        if (drawCoda) {\n            this.text += ' \\ue048' /*coda*/;\n        }\n        this.setFont(Metrics.getFontInfo('Repetition.text'));\n        switch (this.symbolType) {\n            // To the left\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                textX = stave.getVerticalBarWidth();\n                break;\n            // To the right\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n            default:\n                textX =\n                    x -\n                        (stave.getNoteStartX() - this.x) +\n                        stave.getWidth() -\n                        this.width -\n                        Metrics.get('Repetition.text.offsetX');\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) + Metrics.get('Repetition.text.offsetY');\n        this.renderText(ctx, textX, y);\n        return this;\n    }\n}\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x, yShift, drawRect = true) {\n        super();\n        this.setStaveSection(section);\n        this.x = x;\n        this.yShift = yShift;\n        this.drawRect = drawRect;\n    }\n    setStaveSection(section) {\n        this.text = section;\n        return this;\n    }\n    draw(stave, xShift) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;\n        const width = this.width + 2 * padding; // add left & right padding\n        const height = this.height + 2 * padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.yShift;\n        const x = this.x + xShift;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        this.renderText(ctx, xShift + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Radosaw Eichler 2012\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StaveTempo_durationToCode;\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shiftY) {\n        super();\n        _StaveTempo_durationToCode.set(this, {\n            '1/2': '\\ue1d0' /*metNoteDoubleWhole*/,\n            1: '\\ueca2' /*metNoteWhole*/,\n            2: '\\ueca3' /*metNoteHalfUp*/,\n            4: '\\ueca5' /*metNoteQuarterUp*/,\n            8: '\\ueca7' /*metNote8thUp*/,\n            16: '\\ueca9' /*metNote16thUp*/,\n            32: '\\uecab' /*metNote32ndUp*/,\n            64: '\\uecad' /*metNote64thUp*/,\n            128: '\\uecaf' /*metNote128thUp*/,\n            256: '\\uecb1' /*metNote256thUp*/,\n            512: '\\uecb3' /*metNote512thUp*/,\n            1024: '\\uecb5' /*metNote1024thUp*/,\n        });\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.setXShift(10);\n        this.setYShift(shiftY);\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    draw(stave, shiftX) {\n        var _a;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = (_a = this.tempo.dots) !== null && _a !== void 0 ? _a : 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + shiftX;\n        const y = stave.getYForTopText(1);\n        ctx.save();\n        if (name) {\n            this.text = name;\n            this.fontInfo = Metrics.getFontInfo('StaveTempo.name');\n            this.renderText(ctx, shiftX, y);\n            x += this.getWidth();\n        }\n        if (duration && bpm) {\n            if (name) {\n                x += 2;\n                ctx.setFont(Metrics.getFontInfo('StaveTempo'));\n                ctx.fillText('(', x + this.xShift, y + this.yShift);\n                x += 5;\n            }\n            x += 3;\n            const el = new Element('StaveTempo.glyph');\n            el.setText(__classPrivateFieldGet(this, _StaveTempo_durationToCode, \"f\")[Tables.sanitizeDuration(duration)]);\n            el.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += el.getWidth();\n            // Draw dot\n            ctx.setFont(Metrics.getFontInfo('StaveTempo.glyph'));\n            for (let i = 0; i < dots; i++) {\n                x += 6;\n                ctx.fillText('\\uecb7' /*metAugmentationDot*/, x + this.xShift, y + 2 + this.yShift);\n            }\n            ctx.setFont(Metrics.getFontInfo('StaveTempo'));\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 + this.xShift, y + this.yShift);\n        }\n        ctx.restore();\n        return this;\n    }\n}\n_StaveTempo_durationToCode = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: '\\uE047' /*segno*/,\n            tr: '\\uE566' /*ornamentTrill*/,\n            mordent: '\\uE56D' /*ornamentMordent*/,\n            mordentUpper: '\\uE56C' /*ornamentShortTrill*/,\n            mordentLower: '\\uE56D' /*ornamentMordent*/,\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            coda: '\\uE048' /*coda*/,\n            pedalOpen: '\\uE650' /*keyboardPedalPed*/,\n            pedalClose: '\\uE655' /*keyboardPedalUp*/,\n            caesuraStraight: '\\uE4D1' /*caesura*/,\n            caesuraCurved: '\\uE4D4' /*caesuraCurved*/,\n            breath: '\\uE4CE' /*breathMarkComma*/,\n            tick: '\\uE4CF' /*breathMarkTick*/,\n            turn: '\\uE567' /*ornamentTurn*/,\n            turnInverted: '\\uE569' /*ornamentTurnSlash*/,\n        };\n    }\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';\n        if (noteStruct.glyph) {\n            this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;\n        }\n        if (noteStruct.font) {\n            this.setFont(noteStruct.font);\n        }\n        else if (noteStruct.glyph === undefined) {\n            this.setFont(Metrics.getFontInfo('TextNote.text.fontSize'));\n        }\n        // Scale the font size by 1/1.3.\n        const smallerFontSize = Font.convertSizeToPointValue(this.fontInfo.size) * 0.769231;\n        if (noteStruct.superscript) {\n            this.superscript = new Element('TexNote.subSuper');\n            this.superscript.setText(noteStruct.superscript);\n            this.superscript.setFontSize(smallerFontSize);\n        }\n        if (noteStruct.subscript) {\n            this.subscript = new Element('TexNote.subSuper');\n            this.subscript.setText(noteStruct.subscript);\n            this.subscript.setFontSize(smallerFontSize);\n        }\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignoreTicks = noteStruct.ignoreTicks || false;\n        this.justification = TextJustification.LEFT;\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        const y = stave.getYForLine(this.line + -3);\n        this.applyStyle(ctx);\n        this.renderText(ctx, x, y);\n        const height = this.getHeight();\n        if (this.superscript) {\n            this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);\n        }\n        if (this.subscript) {\n            this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);\n        }\n        this.restoreStyle(ctx);\n    }\n}\nTextNote.Justification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, label, x, yShift) {\n        super();\n        this.type = type;\n        this.x = x;\n        this.yShift = yShift;\n        this.text = label;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;\n        const vertHeight = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.type) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {\n            this.renderText(ctx, x + 5, topY - this.yShift + 15);\n        }\n        ctx.fillRect(this.x + x, topY, width, 1);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        var _a, _b, _c;\n        super();\n        this.setText(text);\n        this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.position = position;\n        this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - this.width - 24;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX();\n                if (this.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - this.width / 2;\n                }\n                else if (this.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - this.width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2);\n                }\n                else {\n                    y = stave.getYForBottomText(2);\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        this.renderText(ctx, x, y + 4);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) === false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\n/**\n * A TimeSignature is a StaveModifier that can make its appropriate Glyphs directly from\n * a provided \"timeSpec\" such as \"4/4\", \"C|\" (cut time), or even something more advanced\n * such as \"3/4(6/8)\" or \"2/4+5/8\".\n */\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.isNumeric = true;\n        this.topStartX = 0;\n        this.botStartX = 0;\n        this.lineShift = 0;\n        this.topText = new Element();\n        this.botText = new Element();\n        this.validateArgs = validateArgs;\n        const padding = customPadding;\n        this.topLine = 1;\n        this.bottomLine = 3;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    static getTimeSigCode(key, smallSig = false) {\n        let code = Glyphs.null;\n        switch (key) {\n            case 'C':\n                code = Glyphs.timeSigCommon;\n                break;\n            case 'C|':\n                code = Glyphs.timeSigCutCommon;\n                break;\n            case '+':\n                code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;\n                break;\n            case '-':\n                code = Glyphs.timeSigMinus;\n                break;\n            case '(':\n                code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;\n                break;\n            case ')':\n                code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;\n                break;\n            default:\n                code = String.fromCodePoint(0xe080 + Number(key[0])) /* timeSigN = Glyphs.timeSig0 + N */;\n                break;\n        }\n        return code;\n    }\n    /**\n     * Returns a new TimeSignatureGlyph (a Glyph subclass that knows how to draw both\n     * top and bottom digits along with plus signs etc.)\n     */\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        // note that 'code' is ignored by TimeSignatureGlyph when rendering.\n        let txt = '';\n        let topWidth = 0;\n        let height = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);\n            txt += code;\n        }\n        this.topText.setText(txt);\n        topWidth = this.topText.getWidth();\n        height = this.topText.getHeight();\n        let botWidth = 0;\n        txt = '';\n        for (let i = 0; i < botDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(botDigits[i], true);\n            txt += code;\n        }\n        this.botText.setText(txt);\n        botWidth = this.botText.getWidth();\n        height = Math.max(height, this.botText.getHeight());\n        // If the height of the digits is more than three staff spaces (30), shift half a line line\n        // in order to center the digits on lines 1.5 and 4.5 rather than 2 and 4.\n        this.lineShift = height > 30 ? 0.5 : 0;\n        this.width = Math.max(topWidth, botWidth);\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n    }\n    /**\n     * Set a new time signature specification without changing customPadding, etc.\n     *\n     * The getter for this is `getTimeSpec` not `getTimeSig`.\n     */\n    setTimeSig(timeSpec) {\n        var _a, _b;\n        this.timeSpec = timeSpec;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const code = TimeSignature.getTimeSigCode(timeSpec);\n            this.line = 2;\n            this.text = code;\n            this.isNumeric = false;\n        }\n        else {\n            if (this.validateArgs) {\n                assertIsValidTimeSig(timeSpec);\n            }\n            const parts = timeSpec.split('/');\n            this.line = 0;\n            this.isNumeric = true;\n            this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');\n        }\n        return this;\n    }\n    /**\n     * Return the timeSpec (such as '4/4' or 'C|' or even '2/4+3/8') of the TimeSignature\n     */\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    /**\n     * Return the staff line that the TimeSignature sits on.  Generally 0 for numerator/\n     * denominator time signatures such as 3/4 and 2 for cut/common.\n     */\n    getLine() {\n        return this.line;\n    }\n    /**\n     * Set the line number that the TimeSignature sits on.  Half-values are acceptable\n     * for spaces, etc. Can be altered, for instance, for signatures that sit above the\n     * staff in large orchestral scores.\n     */\n    setLine(line) {\n        this.line = line;\n    }\n    /**\n     * Return a boolean on whether this TimeSignature is drawn with one or more numbers\n     * (such as 4/4) or not (as in cut time).\n     */\n    getIsNumeric() {\n        return this.isNumeric;\n    }\n    /**\n     * Set whether this TimeSignature is drawn with one or more numbers.\n     */\n    setIsNumeric(isNumeric) {\n        this.isNumeric = isNumeric;\n    }\n    /**\n     * Draw the time signature on a Stave using its RenderContext.  Both setStave\n     * and setContext must already be run.\n     */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.drawAt(ctx, stave, this.x);\n    }\n    drawAt(ctx, stave, x) {\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        if (this.isNumeric) {\n            let startX = x + this.topStartX;\n            let y = 0;\n            if (this.botText.getText().length > 0)\n                y = stave.getYForLine(this.topLine - this.lineShift);\n            else\n                y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;\n            this.topText.renderText(ctx, startX, y);\n            startX = x + this.botStartX;\n            y = stave.getYForLine(this.bottomLine + this.lineShift);\n            this.botText.renderText(ctx, startX, y);\n        }\n        else {\n            this.renderText(ctx, x - this.x, stave.getYForLine(this.line));\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { KeySignature } from './keysignature';\nimport { Metrics } from './metrics';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        return Metrics.get('Stave.padding') + Metrics.get('Stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        return Metrics.get('Stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.startX = x + 5;\n        this.endX = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, fillStyle: '#999999', leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacingBetweenLinesPx * spacing;\n    }\n    resetLines() {\n        this.options.lineConfig = [];\n        for (let i = 0; i < this.options.numLines; i++) {\n            this.options.lineConfig.push({ visible: true });\n        }\n        this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;\n        this.options.bottomTextPosition = this.options.numLines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.startX = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.startX;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.endX;\n    }\n    getTieStartX() {\n        return this.startX;\n    }\n    getTieEndX() {\n        return this.endX;\n    }\n    getNumLines() {\n        return this.options.numLines;\n    }\n    setNumLines(n) {\n        this.options.numLines = n;\n        this.resetLines();\n        return this;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.startX += shift;\n        this.endX += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.endX = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.endX);\n        return this;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fillStyle, strokeStyle: this.options.fillStyle, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let startX = this.startX - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {\n            startX -= begBarline.getWidth();\n        }\n        return startX;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, label, y) {\n        this.modifiers.push(new Volta(type, label, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize) {\n            staveSection.setFontSize(fontSize);\n        }\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setStaveText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacingBetweenLinesPx;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;\n        return scoreBottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.numLines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.topTextPosition);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottomTextPosition + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        var _a, _b, _c, _d;\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.startX = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;\n                    widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;\n                }\n                widths.left = (_c = -layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0;\n                widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.endX = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const numLines = this.options.numLines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < numLines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.lineConfig[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.verticalBarWidth;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.lineConfig;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param lineNumber The index of the line to configure.\n     * @param lineConfig An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(lineNumber, lineConfig) {\n        if (lineNumber >= this.options.numLines || lineNumber < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (lineConfig.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof lineConfig.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.lineConfig[lineNumber] = lineConfig;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param linesConfiguration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the numLines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(linesConfiguration) {\n        if (linesConfiguration.length !== this.options.numLines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const lineConfig in linesConfiguration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (linesConfiguration[lineConfig].visible === undefined) {\n                linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];\n            }\n            this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);\n        }\n        this.options.lineConfig = linesConfiguration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            // Calculate min start X for the category\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Consider only the first instance\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Calculate adjustement required for the stave\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                // Apply adjustment to all the modifiers in and beyond the category\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                // Apply adjustment also to note start.\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        // Make sure that staves are formatted\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        // Align Clefs\n        adjustCategoryStartX(Category.Clef);\n        // Align key signatures\n        adjustCategoryStartX(Category.KeySignature);\n        // Align time signatures\n        adjustCategoryStartX(Category.TimeSignature);\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let xShift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        xShift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + xShift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(topStave, bottomStave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.topStave = topStave;\n        this.bottomStave = bottomStave;\n        this.type = StaveConnector.type.DOUBLE;\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.xShift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        var _a, _b;\n        const textElement = new Element('StaveConnector.text');\n        textElement.setText(text);\n        textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.texts.push(textElement);\n        return this;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.topStave.getYForLine(0);\n        let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;\n        let width = 3;\n        let topX = this.topStave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.topStave.getX() + this.topStave.getWidth();\n        }\n        let attachmentHeight = botY - topY;\n        const element = new Element();\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= 5;\n                topY -= this.thickness;\n                attachmentHeight += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.topStave.getX() - 2 + this.xShift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachmentHeight / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachmentHeight;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachmentHeight;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachmentHeight;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachmentHeight;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachmentHeight;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachmentHeight;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachmentHeight = botY - topY;\n                element.setText('\\ue003' /* bracketTop */);\n                element.renderText(ctx, topX - 5, topY);\n                element.setText('\\ue004' /* bracketBottom */);\n                element.renderText(ctx, topX - 5, botY);\n                topX -= 5;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachmentHeight -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachmentHeight);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachmentHeight);\n        }\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const textElement = this.texts[i];\n            const x = this.topStave.getX() - textElement.getWidth() - 24;\n            const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;\n            textElement.renderText(ctx, x, y + 4);\n        }\n    }\n}\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignoreTicks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks === undefined) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        var _a;\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util';\nimport { Voice } from './voice';\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length === 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        var _a, _b;\n        options = Object.assign({ stavePadding: Metrics.get('Stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autoBeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autoBeam: true})`\n     *    * Setting `alignRests` a struct is needed `(context, stave, notes, {alignRests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autoBeam: true, alignRests: true})`\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            autoBeam: false,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.autoBeam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { alignRests: options.alignRests })\n            .formatToStave([voice], stave, { alignRests: options.alignRests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autoBeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {\n        let opts = {\n            autoBeam,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.autoBeam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { alignRests: opts.alignRests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const line = currTickable.getLineForRest();\n                if (line !== 3) {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Metrics.get('Stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length === 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const configMinPadding = Metrics.get('Stave.endPaddingMin');\n        const configMaxPadding = Metrics.get('Stave.endPaddingMax');\n        const leftPadding = Metrics.get('Stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.alignRests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ alignRests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.alignRests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.numNotes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   numNotes: fit this many notes into...\n *   notesOccupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of numNotes : notesOccupied.\n *       numNotes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notesOccupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between numNotes and\n *     notesOccupied is greater than 1.\n *\n *   yOffset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    constructor(notes, options = {}) {\n        super();\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.numNotes = this.options.numNotes !== undefined ? this.options.numNotes : notes.length;\n        this.notesOccupied = this.options.notesOccupied || 2;\n        if (this.options.bracketed !== undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed !== undefined ? this.options.ratioed : Math.abs(this.notesOccupied - this.numNotes) > 1;\n        this.textElement = new Element('Tuplet');\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.numNotes;\n    }\n    getNotesOccupied() {\n        return this.notesOccupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notesOccupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        let numerator = '';\n        let denominator = '';\n        let n = this.numNotes;\n        while (n >= 1) {\n            numerator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + numerator;\n            n = Math.floor(n / 10);\n        }\n        if (this.ratioed) {\n            n = this.notesOccupied;\n            while (n >= 1) {\n                denominator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + denominator;\n                n = Math.floor(n / 10);\n            }\n            denominator = '\\uE88A' /* tupletColon */ + denominator;\n        }\n        this.textElement.setText(numerator + denominator);\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const firstNote = this.notes[0];\n        let maxTupletCount = countTuplets(firstNote, location);\n        let minTupletCount = countTuplets(firstNote, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        var _a;\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual yOffset:\n        const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base yPosition\n        const firstNote = this.notes[0];\n        let yPosition;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().topTextLine);\n                }\n                const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;\n                if (note.hasStem() || note.isRest()) {\n                    const topY = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE\n                        : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;\n                    yPosition = Math.min(topY, yPosition);\n                    if (modLines > 0) {\n                        yPosition = Math.min(modY, yPosition);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = 4; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);\n                }\n            });\n            yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottomY = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE\n                        : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;\n                    if (bottomY > yPosition) {\n                        yPosition = bottomY;\n                    }\n                }\n            }\n        }\n        return yPosition + nestedTupletYOffset + yOffset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        let xPos = 0;\n        let yPos = 0;\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const firstNote = this.notes[0];\n        const lastNote = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            xPos = firstNote.getStemX();\n            this.width = lastNote.getStemX() - xPos;\n        }\n        else {\n            xPos = firstNote.getTieLeftX() - 5;\n            this.width = lastNote.getTieRightX() - xPos + 5;\n        }\n        // determine y value for tuplet\n        yPos = this.getYPosition();\n        const notationCenterX = xPos + this.width / 2;\n        const notationStartX = notationCenterX - this.textElement.getWidth() / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (lineWidth > 0) {\n                ctx.fillRect(xPos, yPos, lineWidth, 1);\n                ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);\n                ctx.fillRect(xPos, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(xPos + this.width, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw text\n        this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Beam_stemDirection, _Beam_ticks, _Beam_yShift, _Beam_breakOnIndexes, _Beam_beamCount, _Beam_unbeamable, _Beam_forcedPartialDirections;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(timeSig) {\n        if (!timeSig || timeSig === 'c') {\n            timeSig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[timeSig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(timeSig.split('/')[0], 10);\n            const beatValue = parseInt(timeSig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stemDirection a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stemDirection, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\n     *   stemDirection: -1,\n     *   beamRests: true,\n     *   beamMiddleOnly: true,\n     *   showStemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stemDirection set to apply the same direction to all notes\n     * @param config.beamRests set to `true` to include rests in the beams\n     * @param config.beamMiddleOnly set to `true` to only beam rests in the middle of the beat\n     * @param config.showStemlets set to `true` to draw stemlets for rests\n     * @param config.maintainStemDirections set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(notes) {\n            return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beamRests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintainStemDirections) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stemDirection) {\n                        stemDirection = config.stemDirection;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.showStemlets) {\n                beam.renderOptions.showStemlets = true;\n            }\n            if (config.secondaryBreaks) {\n                beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);\n            }\n            if (config.flatBeams === true) {\n                beam.renderOptions.flatBeams = true;\n                beam.renderOptions.flatBeamOffset = config.flatBeamOffset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, autoStem = false) {\n        super();\n        this.slope = 0;\n        _Beam_stemDirection.set(this, void 0);\n        _Beam_ticks.set(this, void 0);\n        _Beam_yShift.set(this, 0);\n        _Beam_breakOnIndexes.set(this, void 0);\n        _Beam_beamCount.set(this, void 0);\n        _Beam_unbeamable.set(this, void 0);\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        _Beam_forcedPartialDirections.set(this, {});\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        __classPrivateFieldSet(this, _Beam_ticks, notes[0].getIntrinsicTicks(), \"f\");\n        if (__classPrivateFieldGet(this, _Beam_ticks, \"f\") >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        __classPrivateFieldSet(this, _Beam_stemDirection, notes[0].getStemDirection(), \"f\");\n        let stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Figure out optimal stem direction based on given notes\n        if (autoStem && isStaveNote(notes[0])) {\n            stemDirection = calculateStemDirection(notes);\n        }\n        else if (autoStem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (autoStem) {\n                note.setStemDirection(stemDirection);\n                __classPrivateFieldSet(this, _Beam_stemDirection, stemDirection, \"f\");\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        __classPrivateFieldSet(this, _Beam_beamCount, this.getBeamCount(), \"f\");\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, [], \"f\");\n        this.renderOptions = {\n            beamWidth: 5,\n            maxSlope: 0.25,\n            minSlope: -0.25,\n            slopeIterations: 20,\n            slopeCost: 100,\n            showStemlets: false,\n            stemletExtension: 7,\n            partialBeamLength: 10,\n            flatBeams: false,\n            minFlatBeamOffset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indexes` to break the secondary beam at. */\n    breakSecondaryAt(indexes) {\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, indexes, \"f\");\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        return this;\n    }\n    /**\n     * @param firstX specified in pixels.\n     * @param firstY specified in pixels.\n     *\n     * @return the y coordinate for linear function.\n     */\n    getSlopeY(x, firstX, firstY, slope) {\n        return firstY + (x - firstX) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (maxSlope - minSlope) / slopeIterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = minSlope; slope <= maxSlope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.renderOptions.slopeCost = 0\n            const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        __classPrivateFieldSet(this, _Beam_yShift, yShift, \"f\");\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        // works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        // based on the highest or lowest note (again, based on the stem\n        // direction). This also takes into account the added height due to\n        // the width of the beams.\n        const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;\n        const newOffset = extremeY + extremeTest * -stemDirection;\n        if (stemDirection === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stemDirection === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flatBeamOffset) {\n            // Set the offset for the group based on the calculations above.\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.UP && offset < flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        // For flat beams, the slope and yShift are 0.\n        this.slope = 0;\n        __classPrivateFieldSet(this, _Beam_yShift, 0, \"f\");\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {\n            beamY = this.renderOptions.flatBeamOffset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;\n        const yShift = __classPrivateFieldGet(this, _Beam_yShift, \"f\");\n        const beamCount = __classPrivateFieldGet(this, _Beam_beamCount, \"f\");\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== __classPrivateFieldGet(this, _Beam_stemDirection, \"f\")) {\n                    const beamCount = note.getGlyphProps().beamCount;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beamCount > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beamCount;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.renderOptions.beamWidth * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && showStemlets) {\n                    const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;\n        const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);\n        const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);\n        const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);\n        if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_BOTH;\n        }\n        else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_LEFT;\n        }\n        else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tickOfDuration = Tables.durationToTicks(duration);\n        let beamStarted = false;\n        const beamLines = [];\n        let currentBeam = undefined;\n        const partialBeamLength = this.renderOptions.partialBeamLength;\n        let previousShouldBreak = false;\n        let tickTally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tickTally += ticks;\n            let shouldBreak = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indexes were set up through breakSecondaryAt()\n                shouldBreak = __classPrivateFieldGet(this, _Beam_breakOnIndexes, \"f\").indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {\n                    tickTally = 0;\n                    shouldBreak = true;\n                }\n            }\n            const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;\n            const stemX = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prevNote = this.notes[i - 1];\n            const nextNote = this.notes[i + 1];\n            const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;\n            const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;\n            const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            // const beamAlone = noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            if (noteGetsBeam) {\n                // This note gets a beam at the current level\n                if (beamStarted) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    currentBeam = beamLines[beamLines.length - 1];\n                    currentBeam.end = stemX;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (shouldBreak) {\n                        beamStarted = false;\n                        if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    currentBeam = { start: stemX, end: undefined };\n                    beamStarted = true;\n                    if (beamAlone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prevTick = prevNote.getIntrinsicTicks();\n                        const nextTick = nextNote.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                        else {\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                    }\n                    else if (!nextNoteGetsBeam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previousShouldBreak || i === 0) && nextNote) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                    else if (shouldBreak) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        currentBeam.end = currentBeam.start - partialBeamLength;\n                        beamStarted = false;\n                    }\n                    beamLines.push(currentBeam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beamStarted = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previousShouldBreak = shouldBreak;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const lastBeam = beamLines[beamLines.length - 1];\n        if (lastBeam && lastBeam.end === undefined) {\n            lastBeam.end = lastBeam.start - partialBeamLength;\n        }\n        return beamLines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                stem.setNoteHeadXBounds(stemX, stemX);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const validBeamDurations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.renderOptions.beamWidth * __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Draw the beams.\n        for (let i = 0; i < validBeamDurations.length; ++i) {\n            const duration = validBeamDurations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beamLine = beamLines[j];\n                const startBeamX = beamLine.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beamLine.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (__classPrivateFieldGet(this, _Beam_unbeamable, \"f\"))\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n_Beam_stemDirection = new WeakMap(), _Beam_ticks = new WeakMap(), _Beam_yShift = new WeakMap(), _Beam_breakOnIndexes = new WeakMap(), _Beam_beamCount = new WeakMap(), _Beam_unbeamable = new WeakMap(), _Beam_forcedPartialDirections = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size = 'default', annotation) {\n        super({ duration: 'b' });\n        this.setType(type, size, annotation);\n        this.ignoreTicks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.clef = new Clef(type, size, annotation);\n        this.setWidth(this.clef.getWidth());\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.clef.renderText(ctx, this.getAbsoluteX() - this.x, stave.getYForLine(this.clef.line));\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\n// Helper to draw the hairpin.\nfunction renderHairpin(ctx, params) {\n    const beginX = params.beginX;\n    const endX = params.endX;\n    const y = params.y;\n    const halfHeight = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(beginX, y - halfHeight);\n        ctx.lineTo(endX, y);\n        ctx.lineTo(beginX, y + halfHeight);\n    }\n    else {\n        ctx.moveTo(endX, y - halfHeight);\n        ctx.lineTo(beginX, y);\n        ctx.lineTo(endX, y + halfHeight);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extendLeft: 0,\n            extendRight: 0,\n            // Vertical shift\n            yShift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tickContext = this.getTickContext();\n        const nextContext = TickContext.getNextContext(tickContext);\n        const beginX = this.getAbsoluteX();\n        const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);\n        renderHairpin(ctx, {\n            beginX: beginX - this.options.extendLeft,\n            endX: endX + this.options.extendRight,\n            y: y + this.options.yShift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    xShift: pixels to shift\n    //    yShift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const xShift = this.renderOptions.xShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        const firstX = params.firstX + xShift;\n        const firstY = params.firstY + yShift;\n        const lastX = params.lastX - xShift;\n        const lastY = params.lastY + yShift;\n        const thickness = this.renderOptions.thickness;\n        const cps = this.renderOptions.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const controlPointSpacing = (lastX - firstX) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(firstX, firstY);\n        ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);\n        ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.from;\n        const lastNote = this.to;\n        let firstX;\n        let lastX;\n        let firstY;\n        let lastY;\n        let stemDirection = 0;\n        let metric = 'baseY';\n        let endMetric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.renderOptions.position);\n        const positionEnd = getPosition(this.renderOptions.positionEnd);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            endMetric = 'topY';\n        }\n        if (positionEnd === CurvePosition.NEAR_HEAD) {\n            endMetric = 'baseY';\n        }\n        else if (positionEnd === CurvePosition.NEAR_TOP) {\n            endMetric = 'topY';\n        }\n        if (firstNote) {\n            firstX = firstNote.getTieRightX();\n            stemDirection = firstNote.getStemDirection();\n            firstY = firstNote.getStemExtents()[metric];\n        }\n        else {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstY = lastNote.getStemExtents()[metric];\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX();\n            stemDirection = lastNote.getStemDirection();\n            lastY = lastNote.getStemExtents()[endMetric];\n        }\n        else {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastY = firstNote.getStemExtents()[endMetric];\n        }\n        this.renderCurve({\n            firstX,\n            lastX,\n            firstY,\n            lastY,\n            direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const autoStem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });\n        if (!autoStem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Any glyph that is set to appear on a Stave and take up musical time and graphical space.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignoreTicks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.text = glyph;\n        return this;\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        this.renderText(ctx, x, stave.getYForLine(this.options.line));\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stemExtensionOverride) {\n            return this.stemExtensionOverride;\n        }\n        let ret = super.getStemExtension();\n        ret = Stem.HEIGHT * this.getFontScale() - Stem.HEIGHT + ret;\n        return ret;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const scale = this.getFontScale();\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {\n                    stem: 6 * scale,\n                    beam: 5 * scale,\n                });\n            }\n            else {\n                const stemDirection = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteHeadWidth = this.noteHeads[0].getWidth();\n                const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;\n                const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;\n                const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;\n                if (stemDirection === Stem.DOWN) {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y - noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y + noteHeadWidth,\n                    };\n                }\n                else {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y + noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y - noteHeadWidth,\n                    };\n                }\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * scale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beamSlope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beamAngle = Math.atan(beamSlope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beamAngle) * slashBeamOffset,\n            dy: Math.sin(beamAngle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;\n        const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;\n        const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;\n        const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;\n        const ret = {\n            x1: stemX - protrusionStemDeltaX,\n            y1: stemY + slashStemOffset - protrusionStemDeltaY,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,\n            y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,\n        };\n        return ret;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements multiple measure rests.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _MultiMeasureRest_hasPaddingLeft, _MultiMeasureRest_hasPaddingRight, _MultiMeasureRest_hasLineThickness, _MultiMeasureRest_hasSymbolSpacing;\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param numberOfMeasures Number of measures.\n     * @param options The options object.\n     */\n    constructor(numberOfMeasures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        _MultiMeasureRest_hasPaddingLeft.set(this, false);\n        _MultiMeasureRest_hasPaddingRight.set(this, false);\n        _MultiMeasureRest_hasLineThickness.set(this, false);\n        _MultiMeasureRest_hasSymbolSpacing.set(this, false);\n        const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Metrics.get('MultiMeasureRest.fontSize'); // same as TimeSignature.\n        this.fontInfo.size = fontSize;\n        this.numberOfMeasures = numberOfMeasures;\n        this.text = '';\n        const t = `${this.numberOfMeasures}`;\n        for (const digit of t) {\n            // 0xe080 is timeSig0. We calculate the code point for timeSigN to assemble the digits via SMuFL glyphs.\n            this.text += String.fromCodePoint(0xe080 + Number(digit));\n        }\n        // Keep track of whether these four options were provided.\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingLeft, typeof options.paddingLeft === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingRight, typeof options.paddingRight === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasLineThickness, typeof options.lineThickness === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasSymbolSpacing, typeof options.symbolSpacing === 'number', \"f\");\n        this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Metrics.get('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right) {\n        const options = this.renderOptions;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let txt = '\\ue4ef'; /*restHBarLeft*/\n        const el = new Element();\n        el.setText(txt);\n        // Add middle bars until the right padding is reached\n        for (let i = 1; (i + 2) * el.getWidth() + left <= right; i++) {\n            txt += '\\ue4f0'; /*restHBarMiddle*/\n        }\n        txt += '\\ue4f1'; /*restHBarRight*/\n        el.setText(txt);\n        el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);\n    }\n    drawSymbols(stave, ctx, left, right) {\n        const n4 = Math.floor(this.numberOfMeasures / 4);\n        const n = this.numberOfMeasures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.renderOptions;\n        const elMiddle = new Element();\n        let txt = '';\n        for (let i = 0; i < n4; ++i) {\n            txt += '\\ue4e1' /*restLonga*/ + ' ';\n        }\n        for (let i = 0; i < n2; ++i) {\n            txt += '\\ue4e2' /*restDoubleWhole*/ + ' ';\n        }\n        elMiddle.setText(txt);\n        const elTop = new Element();\n        txt = '';\n        for (let i = 0; i < n1; ++i) {\n            txt += '\\ue4e3' /*restWhole*/ + ' ';\n        }\n        elTop.setText(txt);\n        const width = elMiddle.getWidth() + elTop.getWidth();\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        elMiddle.renderText(ctx, x, yMiddle);\n        x += elMiddle.getWidth();\n        elTop.renderText(ctx, x, yTop);\n        x += elTop.getWidth();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.renderOptions;\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingLeft, \"f\")) {\n            left = stave.getX() + options.paddingLeft;\n        }\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingRight, \"f\")) {\n            right = stave.getX() + stave.getWidth() - options.paddingRight;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        if (options.useSymbols) {\n            this.drawSymbols(stave, ctx, left, right);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right);\n        }\n        if (options.showNumber) {\n            this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);\n        }\n    }\n}\n_MultiMeasureRest_hasPaddingLeft = new WeakMap(), _MultiMeasureRest_hasPaddingRight = new WeakMap(), _MultiMeasureRest_hasLineThickness = new WeakMap(), _MultiMeasureRest_hasSymbolSpacing = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, ctx, x, y) {\n    var _a;\n    const glyph = new Element(PedalMarking.CATEGORY);\n    glyph.setText((_a = PedalMarking.GLYPHS[name]) !== null && _a !== void 0 ? _a : name);\n    glyph.renderText(ctx, x - (glyph.getWidth() - Tables.STAVE_LINE_DISTANCE) / 2, y);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.customDepressText = '';\n        this.customReleaseText = '';\n        this.renderOptions = {\n            bracketHeight: 10,\n            textMarginRight: 6,\n            bracketLineWidth: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.customDepressText = depress || '';\n        this.customReleaseText = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let prevX;\n        let prevY;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            isPedalDepressed = !isPedalDepressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prevX) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const nextNoteIsSame = notes[index + 1] === note;\n            const prevNoteIsSame = notes[index - 1] === note;\n            let xShift = 0;\n            if (isPedalDepressed) {\n                // Adjustment for release+depress\n                xShift = prevNoteIsSame ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.customDepressText) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const textWidth = ctx.measureText(this.customDepressText).width;\n                        ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                        xShift = textWidth / 2 + this.renderOptions.textMarginRight;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedalDepress', ctx, x, y);\n                        xShift = 20 + this.renderOptions.textMarginRight;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.renderOptions.bracketHeight);\n                    ctx.lineTo(x + xShift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                xShift = nextNoteIsSame ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x + xShift, y);\n                ctx.lineTo(x, y - this.renderOptions.bracketHeight);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prevX = x + xShift;\n            prevY = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            isPedalDepressed = !isPedalDepressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            let textWidth = 0;\n            if (isPedalDepressed) {\n                if (this.customDepressText) {\n                    textWidth = ctx.measureText(this.customDepressText).width;\n                    ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalDepress', ctx, x, y);\n                }\n            }\n            else {\n                if (this.customReleaseText) {\n                    textWidth = ctx.measureText(this.customReleaseText).width;\n                    ctx.fillText(this.customReleaseText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalRelease', ctx, x, y);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.renderOptions.color);\n        ctx.setFillStyle(this.renderOptions.color);\n        ctx.setFont(Metrics.getFontInfo('PedalMarking.text'));\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.renderOptions.bracketLineWidth);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedalDepress: '\\uE650' /*keyboardPedalPed*/,\n    pedalRelease: '\\uE655' /*keyboardPedalUp*/,\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { GlyphNote } from './glyphnote';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': '\\uE500' /*repeat1Bar*/,\n    '2': '\\uE501' /*repeat2Bars*/,\n    '4': '\\uE502' /*repeat4Bars*/,\n    slash: '\\uE504' /*repeatBarSlash*/,\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || '\\uE500'; /*repeat1Bar*/\n        super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `renderOptions`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    firstNote: Note,\n    //    lastNote: Note,\n    //    firstIndexes: [n1, n2, n3],\n    //    lastIndexes: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.renderOptions = {\n            // Space to add to the left or the right\n            paddingLeft: 4,\n            paddingRight: 3,\n            // The width of the line in pixels\n            lineWidth: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            lineDash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            roundedEnd: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            drawStartArrow: false,\n            drawEndArrow: false,\n            // The length of the arrowhead sides\n            arrowheadLength: 10,\n            // The angle of the arrowhead\n            arrowheadAngle: Math.PI / 8,\n            // The position of the text\n            textPositionVertical: StaveLine.TextVerticalPosition.TOP,\n            textJustification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes)\n            notes.firstIndexes = [0];\n        if (!notes.lastIndexes)\n            notes.lastIndexes = [0];\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.firstIndexes = notes.firstIndexes;\n        this.lastNote = notes.lastNote;\n        this.lastIndexes = notes.lastIndexes;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const renderOptions = this.renderOptions;\n        if (renderOptions.lineDash) {\n            ctx.setLineDash(renderOptions.lineDash);\n        }\n        if (renderOptions.lineWidth) {\n            ctx.setLineWidth(renderOptions.lineWidth);\n        }\n        if (renderOptions.roundedEnd) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;\n        let endX;\n        let endY;\n        let startX;\n        let startY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            endX = Math.round(x1 + (x2 - x1) * ratio);\n            endY = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            endX = x2;\n            endY = y2;\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            startX = x1 + (x2 - x1) * (1 - ratio);\n            startY = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            startX = x1;\n            startY = y1;\n        }\n        if (this.renderOptions.color) {\n            ctx.setStrokeStyle(this.renderOptions.color);\n            ctx.setFillStyle(this.renderOptions.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const lineAngle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));\n        let angle1;\n        let angle2;\n        let topX;\n        let topY;\n        let bottomX;\n        let bottomY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;\n            topX = x2 + Math.cos(angle1) * h;\n            topY = y2 + Math.sin(angle1) * h;\n            angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;\n            bottomX = x2 + Math.cos(angle2) * h;\n            bottomY = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            angle1 = lineAngle + this.renderOptions.arrowheadAngle;\n            topX = x1 + Math.cos(angle1) * h;\n            topY = y1 + Math.sin(angle1) * h;\n            angle2 = lineAngle - this.renderOptions.arrowheadAngle;\n            bottomX = x1 + Math.cos(angle2) * h;\n            bottomY = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        const renderOptions = this.renderOptions;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indexes and draw lines\n        let startPosition = { x: 0, y: 0 };\n        let endPosition = { x: 0, y: 0 };\n        this.firstIndexes.forEach((firstIndex, i) => {\n            const lastIndex = this.lastIndexes[i];\n            // Get initial coordinates for the start/end of the line\n            startPosition = firstNote.getModifierStartXY(2, firstIndex);\n            endPosition = lastNote.getModifierStartXY(1, lastIndex);\n            const upwardsSlope = startPosition.y > endPosition.y;\n            // Adjust `x` coordinates for modifiers\n            startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;\n            endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;\n            // Adjust first `x` coordinates for displacements\n            const noteheadWidth = firstNote.getGlyphWidth();\n            const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;\n            if (firstDisplaced && firstNote.getStemDirection() === 1) {\n                startPosition.x += noteheadWidth + renderOptions.paddingLeft;\n            }\n            // Adjust last `x` coordinates for displacements\n            const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;\n            if (lastDisplaced && lastNote.getStemDirection() === -1) {\n                endPosition.x -= noteheadWidth + renderOptions.paddingRight;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            startPosition.y += upwardsSlope ? -3 : 1;\n            endPosition.y += upwardsSlope ? 2 : 0;\n            this.drawArrowLine(ctx, startPosition, endPosition);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const textWidth = this.width;\n        const justification = renderOptions.textJustification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = startPosition.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const deltaX = endPosition.x - startPosition.x;\n            const centerX = deltaX / 2 + startPosition.x;\n            x = centerX - textWidth / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = endPosition.x - textWidth;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const verticalPosition = renderOptions.textPositionVertical;\n        if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {\n            y = firstNote.checkStave().getYForTopText();\n        }\n        else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        const color = renderOptions.color;\n        this.applyStyle(ctx, { fillStyle: color, strokeStyle: color });\n        this.renderText(ctx, x, y);\n        this.restoreStyle(ctx);\n        return this;\n    }\n}\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n        return this;\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n        return this;\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            topStave: this.partStaves[0],\n            bottomStave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ leftBar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const optionsDetails = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(optionsDetails);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(optionsDetails);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        var _a;\n        return new BoundingBox(this.options.x, this.options.y, this.options.width, ((_a = this.lastY) !== null && _a !== void 0 ? _a : 0) - this.options.y);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Gets the unused strings grouped together if consecutive.\n * @param numLines The number of lines.\n * @param stringsUsed An array of numbers representing which strings have fret positions.\n * @returns\n */\nfunction getUnusedStringGroups(numLines, stringsUsed) {\n    const stemThrough = [];\n    let group = [];\n    for (let string = 1; string <= numLines; string++) {\n        const isUsed = stringsUsed.indexOf(string) > -1;\n        if (!isUsed) {\n            group.push(string);\n        }\n        else {\n            stemThrough.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stemThrough.push(group);\n    return stemThrough;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stemY - The `y` coordinate the stem is located on\n// * unusedStrings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stemDirection - The direction of the stem\nfunction getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {\n    const upStem = stemDirection !== 1;\n    const downStem = stemDirection !== -1;\n    const lineSpacing = stave.getSpacingBetweenLines();\n    const totalLines = stave.getNumLines();\n    const stemLines = [];\n    unusedStrings.forEach((strings) => {\n        const containsLastString = strings.indexOf(totalLines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((upStem && containsFirstString) || (downStem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const lineYs = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === totalLines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= lineSpacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += lineSpacing / 2 - 1;\n            }\n            // Store the y value\n            lineYs.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stemDirection === 1 && isTopBound) {\n                lineYs.push(stemY - 2);\n            }\n            else if (stemDirection === -1 && isBottomBound) {\n                lineYs.push(stemY + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stemLines.push(lineYs.sort((a, b) => a - b));\n    });\n    return stemLines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `drawStem` when rendering the note\n    constructor(noteStruct, drawStem = false) {\n        super(noteStruct);\n        this.fretElement = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // Flag to draw a stem\n            drawStem, \n            // Flag to draw dot modifiers\n            drawDots: drawStem, \n            // Flag to extend the main stem through the stave and fret positions\n            drawStemThroughStave: false, \n            // vertical shift from stave line\n            yShift: 0 });\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stemDirection) {\n            this.setStemDirection(noteStruct.stemDirection);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.renderOptions.drawStem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;\n    }\n    static tabToElement(fret) {\n        let el;\n        if (fret.toUpperCase() === 'X') {\n            el = new Element('TabNote');\n            el.setText('\\ue263' /*accidentalDoubleSharp*/);\n        }\n        else {\n            el = new Element('TabNote.text');\n            el.setText(fret);\n            el.setYShift(el.getHeight() / 2);\n        }\n        return el;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.fretElement = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const el = TabNote.tabToElement(fret.toString());\n            this.fretElement.push(el);\n            this.width = Math.max(el.getWidth(), this.width);\n        }\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const noteGlyphWidth = this.width;\n            x = noteGlyphWidth / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const numLines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = numLines - 0.5;\n        const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyphProps, renderOptions: { drawStem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam === undefined && drawStem;\n        // Now it's the flag's turn.\n        if (glyphProps.codeFlagUp && shouldDrawFlag) {\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();\n            // Draw the Flag\n            this.applyStyle(context, this.flagStyle);\n            this.flag.renderText(context, flagX, flagY);\n            this.restoreStyle(context, this.flagStyle);\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.renderOptions.drawDots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.renderOptions.drawStem;\n        const stemThrough = this.renderOptions.drawStemThroughStave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.renderOptions.yShift;\n            const el = this.fretElement[i];\n            // Center the fret text beneath the stem\n            const tabX = x - el.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);\n            el.renderText(ctx, tabX, y);\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const renderStem = this.beam === undefined && this.renderOptions.drawStem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && renderStem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);\n        super(x, y, width, tabOptions);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.textElement = new Element('TextBracket');\n        this.textElement.setText(text);\n        this.superscriptElement = new Element('TextBracket');\n        this.superscriptElement.setText(superscript);\n        const smallerFontSize = Font.scaleSize(this.fontInfo.size, 0.714286);\n        this.superscriptElement.setFontSize(smallerFontSize);\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.renderOptions = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            lineWidth: 1,\n            showBracket: true,\n            bracketHeight: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underlineSuperscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        this.textElement.setFont(this.fontInfo);\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        const { family, size, weight, style } = this.fontInfo;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        this.superscriptElement.setFont(family, smallerFontSize, weight, style);\n        const options = this.renderOptions;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.lineWidth);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.renderOptions.dashed = dashed;\n        if (dash)\n            this.renderOptions.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracketHeight = this.renderOptions.bracketHeight * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        this.textElement.renderText(ctx, start.x, start.y);\n        // Get the width and height for the octave number\n        const mainWidth = this.textElement.getWidth();\n        const mainHeight = this.textElement.getHeight();\n        // Calculate the y position for the super script\n        const superY = start.y - mainHeight / 2.5;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);\n        // Determine width and height of the superscript\n        const superWidth = this.superscriptElement.getWidth();\n        const superHeight = this.superscriptElement.getHeight();\n        // Setup initial coordinates for the bracket line\n        let startX = start.x;\n        let lineY = superY;\n        const endX = stop.x + this.stop.getGlyphWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            startX += mainWidth + superWidth + 5;\n            lineY -= superHeight / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            lineY += superHeight / 2.7;\n            startX += mainWidth + 2;\n            if (!this.renderOptions.underlineSuperscript) {\n                startX += superWidth;\n            }\n        }\n        if (this.renderOptions.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);\n            // Ending Bracket\n            if (this.renderOptions.showBracket) {\n                Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(startX, lineY);\n            // Main line\n            ctx.lineTo(endX, lineY);\n            if (this.renderOptions.showBracket) {\n                // Ending bracket\n                ctx.lineTo(endX, lineY + bracketHeight);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            r: '\\uE523' /*dynamicRinforzando*/,\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.text = '';\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.text = '';\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph = TextDynamics.GLYPHS[letter];\n            if (!glyph)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            // Add the glyph\n            this.text += glyph;\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        this.renderText(this.checkContext(), x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getWidth());\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracketData) {\n        super();\n        this.vibrato = new Vibrato();\n        if (bracketData.start)\n            this.start = bracketData.start;\n        if (bracketData.stop)\n            this.stop = bracketData.stop;\n        this.line = 1;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.vibrato.setVibratoCode(code);\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.vibrato.setVibratoWidth(stopX - startX);\n        L('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);\n        this.vibrato.renderText(ctx, startX, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId === null) {\n            return;\n        }\n        if (elementId === '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {\n            ornament.setPosition(params.position);\n        }\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.topStave, params.bottomStave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.code)\n            vibratoBracket.setVibratoCode(params.options.code);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // vertical shift from stave line\n            yShift: 0.3 });\n        this.updateWidth();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const isSupportedType = Music.scaleTypes[this.keyParts.type];\n        if (!isSupportedType) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.rootIndexes[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote !== undefined) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote !== undefined) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// @author Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   yShift: px,         // vertical offset\n     *   leftShiftTicks: 0, // left horizontal offset expressed in ticks\n     *   rightShiftTicks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt === null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);\n        const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);\n        const hairpinOptions = {\n            height: options.height,\n            yShift: options.yShift,\n            leftShiftPx,\n            rightShiftPx,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n        new StaveHairpin({\n            firstNote: notes.firstNote,\n            lastNote: notes.lastNote,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpinOptions)\n            .setPosition(position)\n            .draw();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.renderOptions = {\n            height: 10,\n            yShift: 0,\n            leftShiftPx: 0,\n            rightShiftPx: 0,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        this.renderOptions = options;\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.lastNote = notes.lastNote;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.renderOptions.yShift + 20;\n        let yShift = params.firstY;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            yShift = params.firstY - params.staffHeight;\n        }\n        const leftShiftPx = this.renderOptions.leftShiftPx;\n        const rightShiftPx = this.renderOptions.rightShiftPx;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            firstX: start.x,\n            lastX: end.x,\n            firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staffHeight: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     * @param notes.firstNote the starting note of the slide\n     * @param notes.lastNote the ending note of the slide\n     * @param notes.firstIndexes specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.lastIndexes currently unused. we assume it's the same as firstIndexes.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let firstFret = notes.firstNote.getPositions()[0].fret;\n            if (typeof firstFret === 'string') {\n                firstFret = parseInt(firstFret, 10);\n            }\n            let lastFret = notes.lastNote.getPositions()[0].fret;\n            if (typeof lastFret === 'string') {\n                lastFret = parseInt(lastFret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(firstFret) || isNaN(lastFret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.renderOptions.cp1 = 11;\n        this.renderOptions.cp2 = 14;\n        this.renderOptions.yShift = 0.5;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const firstX = params.firstX; // pixel units\n        const firstYs = params.firstYs;\n        const lastX = params.lastX; // pixel units\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;\n            if (isNaN(slideY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(firstX, slideY + 3 * direction);\n            ctx.lineTo(lastX, slideY - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.text = '\\uE220' /*tremolo1*/;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const scale = note.getFontScale();\n        const ySpacing = Metrics.get(`Tremolo.spacing`) * stemDirection * scale;\n        const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);\n        let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);\n        this.fontInfo.size = Metrics.get(`Tremolo.fontSize`) * scale;\n        for (let i = 0; i < this.num; ++i) {\n            this.renderText(ctx, x, y);\n            y += ySpacing;\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","import { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Metrics, MetricsDefaults } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class Flow {\n    static get BUILD() {\n        return {\n            /** version number. */\n            VERSION: VERSION,\n            /** git commit ID that this library was built from. */\n            ID: ID,\n            /** The date when this library was compiled. */\n            DATE: DATE,\n        };\n    }\n    /**\n     * Examples:\n     * ```\n     * Vex.Flow.setMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\n     * ```\n     *\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\n     * 'Bravura', 'Gonville', 'Custom'.\n     *\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\n     * which includes a single music font. Calling this method is unnecessary.\n     *\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\n     * In this case, the default music font stack is empty.\n     * Example:\n     * ```\n     * await Vex.Flow.fetchMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Petaluma');\n     * ... (do VexFlow stuff) ...\n     * ```\n     * See `demos/fonts/` for more examples.\n     *\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\n     */\n    static setMusicFont(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        MetricsDefaults.fontFamily = fontNames.join(',');\n    }\n    static getMusicFont() {\n        return Metrics.get('fontFamily').split(',');\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get UNISON() {\n        return Tables.UNISON;\n    }\n    static set UNISON(unison) {\n        Tables.UNISON = unison;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.GlyphNote = GlyphNote;\nFlow.Glyphs = Glyphs;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nFlow.SymbolModifiers = SymbolModifiers;\nFlow.CurvePosition = CurvePosition;\nFlow.FontWeight = FontWeight;\nFlow.FontStyle = FontStyle;\nFlow.ModifierPosition = ModifierPosition;\nFlow.RendererBackends = RendererBackends;\nFlow.RendererLineEndType = RendererLineEndType;\nFlow.BarlineType = BarlineType;\nFlow.StaveModifierPosition = StaveModifierPosition;\nFlow.VoltaType = VoltaType;\nFlow.TextBracketPosition = TextBracketPosition;\nFlow.TextJustification = TextJustification;\nFlow.VoiceMode = VoiceMode;\n","export const VERSION = '5.0.0-alpha.6';\nexport const ID = 'bb01e4acc4cf5fde62128d0979251a8f38660358';\nexport const DATE = '2023-10-13T17:50:44.516Z';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Utility methods used by the rest of the VexFlow codebase.\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\nexport class Vex {\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\n    //   arr.forEach(callbackFn);\n    // }\n    /**\n     * Take `arr` and return a new list consisting of the sorted, unique,\n     * contents of arr. Does not modify `arr`.\n     */\n    // eslint-disable-next-line\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    /** Check if array `arr` contains `obj`. */\n    // eslint-disable-next-line\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Get the 2D Canvas context from DOM element with id `canvasId`.\n    static getCanvasContext(canvasId) {\n        if (!canvasId) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasId);\n        }\n        const canvas = document.getElementById(canvasId);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n    // eslint-disable-next-line\n    static benchmark(s, f) {\n        const startTime = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - startTime;\n        log(s, elapsed + 'ms');\n    }\n    // Get stack trace.\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// vexflow.ts is the entry point for the build output file vexflow.js.\n// The webpack config inside Gruntfile.js sets the mode to 'production' to produce a minified build.\nimport { Flow } from '../src/flow';\nFlow.setMusicFont('Bravura', 'Roboto Slab');\n// Re-export all exports from index.ts.\nexport * from '../src/index';\n// Also collect all exports into a default export for CJS projects.\nexport * as default from '../src/index';\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isAccidental","Category","Accidental","isAnnotation","Annotation","isBarline","Barline","isDot","Dot","isGraceNote","GraceNote","isGraceNoteGroup","GraceNoteGroup","isNote","Note","isRenderContext","RenderContext","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","warn","err","stack","midLine","a","b","n","parseInt","prefix","text","upperFirst","s","charAt","toUpperCase","normalizeAngle","Math","PI","sumArray","arr","reduce","_a","_Fraction_fractionA","_Fraction_fractionB","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","Fraction","static","Number","isNaN","t","GCD","length","LCM","shift","LCMM","numerator","denominator","set","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","copy","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","toMixedString","q","parse","str","i","split","Metrics","family","size","weight","style","defaultValue","keyParts","lastKeyPart","pop","curr","MetricsDefaults","retVal","keyPart","fontFamily","fontSize","fontScale","fontWeight","fontStyle","cautionary","grace","noteheadAccidentalPadding","leftPadding","accidentalSpacing","Bend","ChordSymbol","spacing","subscriptOffset","superscriptOffset","superSubRatio","FretHandFinger","GraceTabNote","NoteHead","minPadding","PedalMarking","Repetition","offsetX","offsetY","coda","segno","Stave","padding","endPaddingMax","endPaddingMin","unalignedNotePadding","StaveConnector","StaveLine","StaveSection","StaveTempo","glyph","name","StaveText","StaveTie","StringNumber","verticalPadding","stemPadding","rightPadding","Stroke","TabSlide","TabTie","TextBracket","TextNote","Tremolo","Volta","BoundingBox","that","y","w","h","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","newX","newY","newW","max","newH","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Font","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","fromCSSString","NORMAL","cssFontShorthand","document","createElement","font","fontInfo","st","trim","wt","sz","scaleFactor","parsedWeight","ITALIC","fontName","woffURL","fontFace","FontFace","load","fonts","fontNames","allFiles","WEB_FONT_FILES","keys","host","WEB_FONT_HOST","fontPath","loadWebFont","px","em","in","mm","cm","Academico","Bravura","Edwin","GonvilleSmufl","Gootville","Leipzig","Leland","MuseJazz","Nepomuk","Petaluma","Sebastian","_Registry_defaultRegistry","__classPrivateFieldSet","Index","id","type","class","Registry","registry","index","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","_c","getElementsByAttribute","attribute","indexAttr","indexAttrVal","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","_Element_txtCanvas","_Element_context","_Element_attrs","_Element_fontInfo","_Element_fontScale","_Element_text","_Element_metricsValid","_Element_textMetrics","_Element_height","_Element_width","Element","ID","canvas","children","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","width","xShift","yShift","newID","rendered","getFontInfo","getDefaultRegistry","addChildElement","child","push","getCategory","setStyle","setGroupStyle","forEach","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","indexOf","addClass","removeClass","splice","isRendered","setRendered","getAttributes","getSVGElement","suffix","element","oldID","getBoundingBox","textMetrics","height","getContext","setContext","setFont","toCSSString","defaultTextFont","fontIsObject","fontIsString","sizeWeightStyleAreUndefined","assign","validate","getFont","setFontSize","getFontSize","getFontScale","fontSizeInPoints","convertSizeToPointValue","fontSizeInPixels","convertSizeToPixelValue","getWidth","measureText","setWidth","setYShift","getYShift","setXShift","getXShift","setText","getText","renderText","ctx","xPos","yPos","fillText","txtCanvas","OffscreenCanvas","getTextMetrics","getHeight","setOriginX","bbox","setOriginY","setOrigin","WeakMap","_Modifier_spacingFromNextModifier","_Modifier_modifierContext","ModifierPosition","Glyphs","Modifier","Position","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","LEFT","right","RIGHT","textLine","position","reset","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","checkModifierContext","setModifierContext","c","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","tickContext","getTickContext","metrics","getMetrics","stave","getStave","subNoteXOffset","modLeftPx","modRightPx","subNote","subTickContext","setStave","setXOffset","Music","NUM_TONES","canonicalNotes","roots","rootValues","rootIndexes","diatonicIntervals","diatonicAccidentals","unison","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","rootIndex","intVal","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","parts","rootValue","multiplier","reverseInterval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","scale","noteLocation","scaleMap","rootName","noteName","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","lineShift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","CN","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","X","bs","bss","bbs","ashs","afhf","articulations","betweenLines","av","aboveCode","belowCode","ao","ah","am","ornaments","mordent","mordentInverted","turn","turnInverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","Tables","MUSIC_FONT_STACK","clef","keyOctaveGlyph","params","options","octaveShift","duration","sanitizeDuration","pieces","clefProperties","intValue","glyphName","codeNoteHead","displaced","integer","artic","ornament","spec","keySpec","notes","accList","durationNumber","durationToFraction","ticks","null","UNISON","SOFTMAX_FACTOR","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RENDER_PRECISION_PLACES","durationCodes","stem","beamCount","stemBeamExtension","codeFlagUp","NOTATION_FONT_SCALE","TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalColumnsTable","secondOnBottom","spacedOutTetrachord","spacedOutPentachord","verySpacedOutPentachord","spacedOutHexachord","verySpacedOutHexachord","unicode","sharp","flat","natural","triangle","degrees","circle","validTypes","ci","cx","sf","sb","sq","tu","td","TIME4_4","numBeats","beatValue","resolution","_Accidental_checkCollision","AnnotationHorizontalJustify","AnnotationVerticalJustify","L","DEBUG","leftShift","additionalPadding","accidentalLinePositionsAndSpaceNeeds","prevNote","extraXSpaceNeededForLeftDisplacedNotehead","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","round","extraXSpaceNeeded","spacingBetweenStaveLines","sort","staveLineAccidentalLayoutMetrics","maxExtraXSpaceNeeded","accidentalLinePositionAndSpaceNeeds","accidentalType","priorLineMetric","currentLineMetric","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getModifiers","modifier","addModifier","getGraceNotes","accidentalCodes","setAsCautionary","start","getModifierStartXY","accX","accY","clearance","clearanceRequired","collision","Stem","UP","DOWN","WIDTH","HEIGHT","_d","_e","_f","_g","stemUpYOffset","stemDownYOffset","stemUpYBaseOffset","stemDownYBaseOffset","xBegin","xEnd","yTop","yBottom","stemExtension","stemDirection","hide","isStemlet","stemletHeight","renderHeightAdjustment","setOptions","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","yOffset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stemX","stemY","yBaseOffset","stemletYOffset","openGroup","pointerBBox","beginPath","moveTo","lineTo","stroke","closeGroup","minAnnotationPadding","annotations","leftWidth","rightWidth","maxLeftGlyphWidth","maxRightGlyphWidth","annotation","verticalSpaceNeeded","glyphWidth","getGlyphWidth","textWidth","horizontalJustification","hasStem","getStemDirection","lines","renderOptions","drawStem","getStem","getNoteType","getNumLines","verticalJustification","VerticalJustify","TOP","noteLine","getLineNumber","leastString","topTextLine","BOTTOM","greatestString","curBottom","rightOverlap","rightShift","leftOverlap","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","textHeight","getStemX","stemExt","checkStave","checkStem","getYs","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","getTopY","stemTipY","stemBaseY","getBottomY","getInitialOffset","isOnStemTip","Articulation","maxGlyphWidth","getIncrement","articulation","increment","curTop","maxWidth","articWidth","overlap","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","heightShift","articulationCodes","codePointAt","setBetweenLines","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","INITIAL_OFFSET","offsetDirection","articLine","snappedLine","snapLineToStaff","drawDot","color","arc","closePath","fill","_Tickable_preFormatted","_Tickable_postFormatted","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolModifiers","Tickable","intrinsicTicks","tickMultiplier","modifiers","tupletStack","alignCenter","centerXShift","ignoreTicks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","flag","modifierContext","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","codeHead","xStart","leftDisplacedHeadPx","xPre1","xAbs","xPost1","notePx","xPost2","rightDisplacedHeadPx","xFreedomRight","xWidth","x1","x2","yy","spaceDeviation","durationString","dots","noteStruct","durationProps","parseDuration","customTypes","durationToTicks","currentTicks","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","durationOverride","glyphProps","getGlyphProps","customGlyphs","playNote","annotationSpacing","strokePx","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getDuration","isDotted","getModifiersByType","getBeam","beam","checkBeam","hasBeam","setBeam","signature","filter","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","parentheses","getMembers","getState","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifier","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","typeString","single","SINGLE","double","DOUBLE","end","END","repeatBegin","REPEAT_BEGIN","repeatEnd","REPEAT_END","repeatBoth","REPEAT_BOTH","none","NONE","thickness","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","doubleBar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dotX","dotRadius","dotY","BarNote","barline","bends","lastWidth","stringPos","phrase","tap","lineStyle","bendWidth","releaseWidth","updateWidth","setTap","getTextHeight","totalWidth","additionalWidth","drawWidth","lowestY","bendHeight","annotationY","renderBend","cpX","cpY","quadraticCurveTo","renderRelease","renderArrowHead","yBase","renderX","lastBend","lastBendDrawWidth","lastDrawnWidth","ChordSymbolBlock","symbolModifier","vAlign","isSuperscript","SUPERSCRIPT","isSubscript","SUBSCRIPT","spacingBetweenBlocks","symbols","symbol","lineSpaces","j","symbolBlocks","sup","sub","prev","getVertical","getReportWidth","getHorizontal","horizontal","vertical","reportWidth","setReportWidth","getSymbolBlock","symbolBlock","smallerFontSize","scaleSize","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","glyphs","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","stemBase","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","over","symbolModifiers","all","dot","dotList","maxShiftMap","noteId","dotShift","lastLine","lastNote","prevDottedSpace","halfShiftY","dotShiftY","radius","setDotShiftY","forceFlagRight","nums","numsList","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","numShift","numWidth","fingerings","fingeringString","number","Fingering","fingering","finger","setFretHandFinger","xOffset","getFretHandFinger","setOffsetX","setOffsetY","customGlyph","ledger","customGlyphCode","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","getYForNote","flagStyle","setStem","buildStem","buildFlag","hasFlag","flagCode","String","fromCodePoint","getBaseCustomNoteHeadGlyphProps","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","frac","beamIsUndefined","setStemDirection","getCenterGlyphX","flagHeight","stemExtensionOverride","setStemLength","stemOptions","_StaveNote_noteHeads","_StaveNote_sortedKeyProps","shiftRestVertical","rest","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","LEDGER_LINE_OFFSET","minNoteheadPadding","notesList","minL","stemMax","stemMin","maxL","isrest","voiceShift","getVoiceShiftWidth","noteU","noteM","noteL","voiceXShift","lineSpacing","lineDiff","noteUHead","noteLHead","centerRest","ledgerLineStyle","useDefaultHeadX","calculateKeyProps","autoStem","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","calcNoteDisplacements","noteProps","notehead","calculateOptimalStemDirection","keyProperties","getNoteHeadBounds","noteStemHeight","flagX","flagY","bbFlag","resultLine","thisLine","val","isChord","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","restShift","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","getFlagStyle","noteHeads","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","Infinity","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","minX","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","drawModifiers","noteheadParam","noteheadStyle","hasNoBeam","drawFlag","drawNoteHeads","superStemExtension","midLineDistance","linesOverOctaveFromMidLine","spacingBetweenLines","shouldRenderStem","setNotes","cp1","cp2","textShiftX","firstXShift","lastXShift","tieSpacing","firstNote","firstIndexes","lastIndexes","isPartial","renderTie","firstYs","lastYs","lastX","firstX","firstY","lastY","topControlPointY","bottomControlPointY","renderTieText","centerX","getNotes","getTieStartX","getTieEndX","VoiceMode","Voice","Mode","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","expTicksUsed","reCalculateExpTicksUsed","pow","softmax","tickValue","v","exp","addTickable","addTickables","gracenoteGroups","groupList","gracenoteGroup","isStavenote","formatWidth","groupShift","graceNotes","showSlur","slur","slurYShift","beams","formatter","Formatter","joinVoices","format","getMinTotalWidth","beamNotes","Beam","beamWidth","partialBeamLength","graceNote","TieClass","NoteSubGroup","groups","group","Ornament","ornamentNoteTransition","ornamentAttack","ornamentAlignWithNoteHead","ornamentRelease","ornamentLeft","ornamentRight","ornamentYShift","ornamentArticulation","delayed","accidentalLowerPadding","accidentalUpperPadding","adjustForStemDirection","ornamentCodes","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","glyphX","glyphY","delayXShift","startX","nextContext","charCodeAt","Parenthesis","parenthesis","isHTMLCanvas","global","HTMLCanvasElement","toDataURL","isHTMLDiv","HTMLDivElement","appendChild","CanvasContext","CANVAS_BROWSER_SIZE_LIMIT","limit","context2D","curTransfrom","getTransform","clearRect","cls","attrs","openRotation","angleDegrees","translate","rotate","closeRotation","setTransform","setBackgroundFillStyle","blur","sqrt","setLineCap","capType","lineCap","setLineDash","dash","resize","devicePixelRatio","dpr","sanitizeCanvasDims","rect","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","_SVGContext_instances","_SVGContext_getShadowStyle","ATTRIBUTES_TO_IGNORE","path","TWO_PI","SVGContext","precision","backgroundFillStyle","fontCSSString","svg","create","parent","pen","NaN","defaultFontAttributes","scaleX","scaleY","attributes","groupAttributes","applyAttributes","shadowAttributes","stateStack","svgElementType","createElementNS","lineDash","visibleWidth","visibleHeight","setViewBox","viewBoxOrMinX","minY","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","y1","y2","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","sweep","measureTextElement","txt","textContent","savedState","fontAttributes","RendererBackends","RendererLineEndType","WeakSet","sa","Renderer","elementId","backend","background","renderer","lastContext","buildContext","Backends","CANVAS","SVG","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","arg0","arg1","maybeElement","willReadFrequently","LineEndType","extraXSpaceForDisplacedNotehead","glyphLine","numXShift","stringNumber","stemOffset","dashed","leg","drawCircle","setLineEndType","setStringNumber","setLastNote","setDashed","setDrawCircle","len","pattern","drawDashedLine","strokes","strokeList","string","getPositions","strokeShift","allVoices","addEndNote","noteEnd","yPositions","arrow","arrowY","textY","Type","BRUSH_DOWN","ROLL_DOWN","RASQUEDO_DOWN","BRUSH_UP","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","lineGlyph","el","Vibrato","vibratos","vibrato","setVibratoWidth","items","setVibratoCode","vx","vy","ModifierContext","members","formatted","member","getLeftShift","Clef","types","gClef","fClef","cClef","unpitchedPercussionClef1","sixStringTabClef","tab","gClef8va","fClef8va","gClef8vb","fClef8vb","getPoint","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","paddingForced","convertToGlyph","acc","nextAcc","prevGlyph","cancelKey","convertToCancelAccList","cancelAccList","differentTypes","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","calculateWidth","alterKey","convertToAlterAccList","firstAccidentalType","getEndClef","getClef","extraWidth","symbolType","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSegnoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","drawCoda","textX","getVerticalBarWidth","section","drawRect","setStaveSection","headroom","_StaveTempo_durationToCode","TextJustification","VoltaType","tempo","shiftY","setTempo","shiftX","bpm","GLYPHS","mordentUpper","mordentLower","p","z","pedalOpen","pedalClose","caesuraStraight","caesuraCurved","breath","tick","superscript","subscript","smooth","justification","Justification","getBottomLineY","label","vertHeight","BEGIN_END","TimeSignature","timeSpec","customPadding","validateArgs","isNumeric","topStartX","botStartX","topText","botText","topLine","bottomLine","setTimeSig","smallSig","timeSigCommon","timeSigCutCommon","timeSigPlusSmall","timeSigPlus","timeSigMinus","timeSigParensLeftSmall","timeSigParensLeft","timeSigParensRightSmall","timeSigParensRight","makeTimeSignatureGlyph","topDigits","botDigits","topWidth","getTimeSigCode","botWidth","test","assertIsValidTimeSig","getTimeSpec","getIsNumeric","setIsNumeric","drawAt","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","defaultPadding","endX","measure","endClef","verticalBarWidth","numLines","leftBar","rightBar","spacingBetweenLinesPx","spaceAboveStaffLn","spaceBelowStaffLn","topTextPosition","bottomTextPosition","lineConfig","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","visible","setNoteStartX","getNoteEndX","setNumLines","mod","setMeasure","getMeasure","getModifierXShift","begBarline","setRepetitionType","setVoltaType","setSection","staveSection","setStaveText","getLineForY","getYForGlyphs","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","getConfigForLines","setConfigForLine","lineNumber","setConfigForLines","linesConfiguration","staves","adjustCategoryStartX","minStartX","adjustX","allModifiers","bAdjust","maxX","drawBoldDoubleLine","topX","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","topStave","bottomStave","texts","newType","values","textElement","SINGLE_RIGHT","THIN_DOUBLE","attachmentHeight","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","TickContext","tContext","contexts","tContexts","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","tickablesByVoice","totalLeftPx","totalRightPx","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","paddingBetween","accumulator","stavePadding","contextGaps","gaps","gap","totalCost","toFixed","total","autoBeam","alignRests","applyAndGetBeams","formatToStave","tabstave","tabnotes","opts","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","formatterOptions","globalSoftmax","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","array","list","modifierContexts","lossHistory","AlignRestsToNotes","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","tickToContextMap","Map","integerTicks","staveTickToContextMap","newContext","makeContext","addToContext","tickList","createContexts","contextArray","getTickContexts","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","tickWidth","paddingMax","paddingMin","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","optionsParam","TupletLocation","Tuplet","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","numNotes","bracketed","some","ratioed","setTupletLocation","location","resolveGlyphs","attach","detach","setBracketed","setRatioed","setNotesOccupied","fromCharCode","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nestedTupletYOffset","yPosition","modLines","modY","lineCheck","nn","bottomY","notationStartX","_Beam_stemDirection","_Beam_ticks","_Beam_yShift","_Beam_breakOnIndexes","_Beam_beamCount","_Beam_unbeamable","_Beam_forcedPartialDirections","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_RIGHT","BEAM_BOTH","timeSig","beatTotal","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","memo","unbeamable","durationToNumber","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beamRests","breaksOnFirstOrLastRest","beamMiddleOnly","breakOnStemChange","maintainStemDirections","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","showStemlets","secondaryBreaks","secondaryBreakTicks","flatBeams","flatBeamOffset","slope","stemWeight","maxSlope","minSlope","slopeIterations","slopeCost","stemletExtension","minFlatBeamOffset","breakSecondaryAt","setPartialBeamSideAt","side","unsetPartialBeamSideAt","getSlopeY","calculateSlope","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","crossStemExtension","totalBeamWidth","lookupBeamDirection","nextTick","forcedBeamDirection","lookupDuration","prevNoteGetsBeam","nextNoteGetsBeam","noteGetsBeam","getBeamLines","tickOfDuration","beamStarted","beamLines","currentBeam","previousShouldBreak","tickTally","shouldBreak","beamAlone","beamDirection","lastBeam","drawStems","drawBeamLines","validBeamDurations","beamThickness","beamLine","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","Crescendo","extendLeft","extendRight","decrescendo","setHeight","setDecrescendo","decresc","getNextContext","beginX","halfHeight","reverse","renderHairpin","CurvePosition","Curve","nearHead","NEAR_HEAD","nearTop","NEAR_TOP","from","to","positionEnd","invert","cps","renderCurve","cp0x","cp0y","controlPointSpacing","metric","endMetric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","LINE","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","buildAndAttach","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","setGlyph","slash","ret","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","noteHeadWidth","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beamSlope","beamAngle","atan","iPointOnBeam","slashAngle","protrusionStemDeltaX","protrusionStemDeltaY","protrusionBeamDeltaX","protrusionBeamDeltaY","stem0X","KeySigNote","_MultiMeasureRest_hasPaddingLeft","_MultiMeasureRest_hasPaddingRight","_MultiMeasureRest_hasLineThickness","_MultiMeasureRest_hasSymbolSpacing","MultiMeasureRest","numberOfMeasures","xs","numberGlyphPoint","digit","lineThickness","symbolSpacing","useSymbols","showNumber","numberLine","serifThickness","semibreveRestGlyphScale","getXs","drawLine","drawSymbols","n4","n2","n1","elMiddle","elTop","yMiddle","drawPedalGlyph","pedal","MIXED","setCustomText","TEXT","customDepressText","customReleaseText","bracketHeight","textMarginRight","bracketLineWidth","depress","release","drawBracketed","prevX","prevY","isPedalDepressed","nextNoteIsSame","prevNoteIsSame","drawText","pedalDepress","pedalRelease","mixed","CODES","RepeatNote","drawArrowHead","roundedEnd","drawStartArrow","drawEndArrow","arrowheadLength","arrowheadAngle","textPositionVertical","TextVerticalPosition","textJustification","applyLineStyle","drawArrowLine","pt1","pt2","bothArrows","distance","ratio","endY","startY","lineAngle","angle1","angle2","bottomX","startPosition","endPosition","firstIndex","lastIndex","upwardsSlope","noteheadWidth","verticalPosition","System","partStaves","partStaveInfos","partVoices","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","getStaves","getVoices","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","addVoices","optionsDetails","debugNoteMetricsYs","part","formatBegModifiers","plotDebugging","plotMetrics","fretElement","positions","ghost","drawDots","drawStemThroughStave","setGhost","fret","tabToElement","getStemY","stemDownLine","stemStartLine","drawStemThrough","stemThrough","unusedStrings","stringsUsed","getUnusedStringGroups","stemLines","upStem","downStem","totalLines","strings","containsLastString","containsFirstString","lineYs","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tabX","renderStem","TabStave","addTabGlyph","TextBracketPosition","stop","superscriptElement","showBracket","underlineSuperscript","mainWidth","mainHeight","superY","superWidth","superHeight","lineY","TextDynamics","sequence","letter","TimeSigNote","VibratoBracket","bracketData","stopX","Factory","renderQ","systems","initRenderer","staveSpace","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","chordSymbol","upperAccidental","lowerAccidental","numMeasures","multiMeasureRest","secondaryBeamBreaks","partialBeamDirections","entries","curve","tie","vibratoBracket","textBracket","system","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","StaveHairpin","ppt","pixelsPerTick","leftShiftPx","leftShiftTicks","rightShiftPx","rightShiftTicks","hairpinOptions","setRenderOptions","hairpin","dis","staffHeight","CRESC","DECRESC","SLIDE_UP","SLIDE_DOWN","firstFret","lastFret","slideY","ySpacing","Tuning","names","standard","dagdad","dropd","standardBanjo","tuningString","tuningValues","setTuning","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","integerToNote","Flow","BUILD","VERSION","DATE","hasKeySignature","getKeySignatures","Vex","cmp","eq","newArr","last","canvasId","startTime","Date","getTime","setMusicFont"],"sourceRoot":""}