{"version":3,"file":"vexflow.js","mappings":"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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/metrics.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/glyphs.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/web.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/version.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./entry/vexflow.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let midLine = b + (a - b) / 2;\n    if (midLine % 2 > 0) {\n        midLine = roundN(midLine * 10, 5) / 10;\n    }\n    return midLine;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * @param s\n * @returns `s` with the first letter capitalized.\n */\nexport function upperFirst(s = '') {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n/**\n * Return the sum of an array of numbers.\n */\nexport function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// @author Joshua Koo / @zz85\n// @author @incompleteopus\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Fraction_fractionA, _Fraction_fractionB;\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(compare).simplify();\n        const b = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionB).copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n_a = Fraction;\n// Cached objects for comparisons.\n_Fraction_fractionA = { value: new Fraction() };\n_Fraction_fractionB = { value: new Fraction() };\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nexport class Metrics {\n    /** Use the provided key to look up a FontInfo in CommonMetrics. **/\n    static getFontInfo(key) {\n        return {\n            family: Metrics.get(`${key}.fontFamily`),\n            size: Metrics.get(`${key}.fontSize`) * Metrics.get(`${key}.fontScale`),\n            weight: Metrics.get(`${key}.fontWeight`),\n            style: Metrics.get(`${key}.fontStyle`),\n        };\n    }\n    /**\n     * Use the provided key to look up a value in CommonMetrics.\n     *\n     * @param key is a string separated by periods (e.g., `Stroke.text.fontFamily`).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     *\n     * For the key `Stroke.text.fontFamily`, check all of the following in order:\n     *   1) CommonMetrics.fontFamily\n     *   2) CommonMetrics.Stroke.fontFamily\n     *   3) CommonMetrics.Stroke.text.fontFamily\n     * Retrieve the value from the most specific key (i.e., prefer #3 over #2 over #1 in the above example).\n     */\n    // eslint-disable-next-line\n    static get(key, defaultValue) {\n        var _a;\n        const keyParts = key.split('.');\n        const lastKeyPart = keyParts.pop(); // Use ! because keyParts is not empty, since ''.split('.') still returns [''].\n        // Start from root of CommonMetrics and go down as far as possible.\n        let curr = MetricsDefaults;\n        let retVal = defaultValue;\n        while (curr) {\n            // Update retVal whenever we find a value assigned to a more specific key.\n            retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;\n            const keyPart = keyParts.shift();\n            if (keyPart) {\n                curr = curr[keyPart]; // Go down one level.\n            }\n            else {\n                break;\n            }\n        }\n        return retVal;\n    }\n}\n// eslint-disable-next-line\nexport const MetricsDefaults = {\n    fontFamily: 'Bravura',\n    fontSize: 30,\n    fontScale: 1.0,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    Accidental: {\n        cautionary: {\n            fontSize: 20,\n        },\n        grace: {\n            fontSize: 25,\n        },\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    Annotation: {\n        fontSize: 10,\n    },\n    Bend: {\n        fontSize: 10,\n    },\n    ChordSymbol: {\n        fontSize: 12,\n        spacing: 0.05,\n        subscriptOffset: 0.2,\n        superscriptOffset: -0.4,\n        superSubRatio: 0.6,\n    },\n    FretHandFinger: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n    GraceNote: {\n        fontScale: 2 / 3,\n    },\n    GraceTabNote: {\n        fontScale: 2 / 3,\n    },\n    NoteHead: {\n        minPadding: 2,\n    },\n    PedalMarking: {\n        text: {\n            fontSize: 12,\n            fontStyle: 'italic',\n        },\n    },\n    Repetition: {\n        text: {\n            fontSize: 12,\n            fontWeight: 'bold',\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    Stave: {\n        fontSize: 8,\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    StaveConnector: {\n        text: {\n            fontSize: 16,\n        },\n    },\n    StaveLine: {\n        fontSize: 10,\n    },\n    StaveSection: {\n        fontSize: 10,\n        fontWeight: 'bold',\n    },\n    StaveTempo: {\n        fontSize: 14,\n        glyph: {\n            fontSize: 25,\n        },\n        name: {\n            fontWeight: 'bold',\n        },\n    },\n    StaveText: {\n        fontSize: 16,\n    },\n    StaveTie: {\n        fontSize: 10,\n    },\n    StringNumber: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        verticalPadding: 8,\n        stemPadding: 2,\n        leftPadding: 5,\n        rightPadding: 6,\n    },\n    Stroke: {\n        text: {\n            fontSize: 10,\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n        },\n    },\n    TabNote: {\n        text: {\n            fontSize: 9,\n        },\n    },\n    TabSlide: {\n        fontSize: 10,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    },\n    TabTie: {\n        fontSize: 10,\n    },\n    TextBracket: {\n        fontSize: 15,\n        fontStyle: 'italic',\n    },\n    TextNote: {\n        text: {\n            fontSize: 12,\n        },\n    },\n    Tremolo: {\n        spacing: 7,\n    },\n    Volta: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const newX = this.x < that.x ? this.x : that.x;\n        const newY = this.y < that.y ? this.y : that.y;\n        const newW = Math.max(this.x + this.w, that.x + that.w) - newX;\n        const newH = Math.max(this.y + this.h, that.y + that.h) - newY;\n        this.x = newX;\n        this.y = newY;\n        this.w = newW;\n        this.h = newH;\n        return this;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Metrics } from './metrics';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Metrics.get('fontFamily');\n        size = size !== null && size !== void 0 ? size : Metrics.get('fontSize') + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Metrics.get('fontSize') + 'pt';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Metrics.get('fontFamily');\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * @param fontName\n     * @param woffURL The absolute or relative URL to the woff file.\n     * @param includeWoff2 If true, we assume that a woff2 file is in\n     * the same folder as the woff file, and will append a `2` to the url.\n     */\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\n    // eslint-disable-next-line\n    // @ts-ignore\n    static loadWebFont(fontName, woffURL) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const fontFace = new FontFace(fontName, `url(${woffURL})`);\n            yield fontFace.load();\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    /**\n     * Load the web fonts that are used by your app.\n     * If fontNames is undefined, all fonts in Font.WEB_FONT_FILES will be loaded.\n     *\n     * For example, `flow.html` calls:\n     *   `await Vex.Flow.Font.loadWebFonts();`\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     *\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\n     * for your app.\n     */\n    static loadWebFonts(fontNames) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allFiles = Font.WEB_FONT_FILES;\n            if (!fontNames) {\n                fontNames = Object.keys(allFiles);\n            }\n            const host = Font.WEB_FONT_HOST;\n            for (const fontName of fontNames) {\n                const fontPath = allFiles[fontName];\n                if (fontPath) {\n                    Font.loadWebFont(fontName, host + fontPath);\n                }\n            }\n        });\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Discussion on GDPR concerns:\n * https://www.jsdelivr.com/blog/how-the-german-courts-ruling-on-google-fonts-affects-jsdelivr-and-why-it-is-safe-to-use/\n *\n * You can also self host, and specify your own server URL here.\n */\nFont.WEB_FONT_HOST = 'https://cdn.jsdelivr.net/npm/vexflow-fonts@1.0.6/';\n/**\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\n * set of fonts to load. See: `Font.loadWebFonts()`.\n */\nFont.WEB_FONT_FILES = {\n    Academico: 'academico/Academico_0.902.woff2',\n    Bravura: 'bravura/Bravura_1.392.woff2',\n    BravuraText: 'bravura/BravuraText_1.393.woff2',\n    GonvilleSmufl: 'gonvillesmufl/GonvilleSmufl_1.100.woff2',\n    Gootville: 'gootville/Gootville_1.3.woff2',\n    GootvilleText: 'gootville/GootvilleText_1.2.woff2',\n    Leland: 'leland/Leland_0.75.woff2',\n    LelandText: 'leland/LelandText_0.75.woff2',\n    Petaluma: 'petaluma/Petaluma_1.065.woff2',\n    'Petaluma Script': 'petaluma/PetalumaScript_1.10_FS.woff2',\n    MuseJazz: 'musejazz/MuseJazz_1.0.woff2',\n    MuseJazzText: 'musejazz/MuseJazzText_1.0.woff2',\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff2',\n    FinaleAsh: 'finale/FinaleAsh_1.7.woff2',\n    FinaleAshText: 'finale/FinaleAshText_1.3.woff2',\n    FinaleJazz: 'finale/FinaleJazz_1.9.woff2',\n    FinaleJazzText: 'finale/FinaleJazzText_1.3.woff2',\n    FinaleBroadway: 'finale/FinaleBroadway_1.4.woff2',\n    FinaleBroadwayText: 'finale/FinaleBroadwayText_1.1.woff2',\n    FinaleMaestro: 'finale/FinaleMaestro_2.7.woff2',\n    FinaleMaestroText: 'finale/FinaleMaestroText-Regular_1.6.woff2',\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _Registry_defaultRegistry;\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return __classPrivateFieldGet(Registry, _a, \"f\", _Registry_defaultRegistry);\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        __classPrivateFieldSet(Registry, _a, registry, \"f\", _Registry_defaultRegistry);\n    }\n    static disableDefaultRegistry() {\n        __classPrivateFieldSet(Registry, _a, undefined, \"f\", _Registry_defaultRegistry);\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _b, _c;\n        return (_c = (_b = this.index.id) === null || _b === void 0 ? void 0 : _b[id]) === null || _c === void 0 ? void 0 : _c[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const indexAttr = this.index[attribute];\n        if (indexAttr) {\n            const indexAttrVal = indexAttr[value];\n            if (indexAttrVal) {\n                const keys = Object.keys(indexAttrVal);\n                return keys.map((k) => indexAttrVal[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n_a = Registry;\n_Registry_defaultRegistry = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Element_context, _Element_attrs, _Element_fontInfo, _Element_fontScale, _Element_text, _Element_metricsValid, _Element_textMetrics, _Element_height, _Element_width, _Element_txtCanvas;\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined, prefix, RuntimeError } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n *\n * The Element handles style and font properties for the Element and any child\n * elements, along with working with the Registry to create unique ids.\n *\n * The `text` is a series of unicode characters (including SMuFL codes).\n * The `textFont` property contains information required to style the text (i.e., font family, size, weight, and style).\n * This font family is a comma separated list of fonts.\n * The method `measureText` calculates the `textMetrics`, `boundingBox`, `height` and `width` of the `text`.\n * The method `renderText(...)` will render the text using the provided context and coordinates,\n * taking `xShift` and `yShift` into account.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    constructor(category) {\n        var _b;\n        // Element objects keep a list of children that they are responsible for.\n        // Children inherit the style from their parents (see: setGroupStyle(s)).\n        this.children = [];\n        _Element_context.set(this, void 0);\n        _Element_attrs.set(this, void 0);\n        _Element_fontInfo.set(this, void 0);\n        _Element_fontScale.set(this, void 0);\n        _Element_text.set(this, '');\n        _Element_metricsValid.set(this, false);\n        _Element_textMetrics.set(this, {\n            fontBoundingBoxAscent: 0,\n            fontBoundingBoxDescent: 0,\n            actualBoundingBoxAscent: 0,\n            actualBoundingBoxDescent: 0,\n            actualBoundingBoxLeft: 0,\n            actualBoundingBoxRight: 0,\n            width: 0,\n        });\n        _Element_height.set(this, 0);\n        _Element_width.set(this, 0);\n        this.xShift = 0;\n        this.yShift = 0;\n        this.x = 0;\n        this.y = 0;\n        __classPrivateFieldSet(this, _Element_attrs, {\n            id: Element.newID(),\n            type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,\n            class: '',\n        }, \"f\");\n        this.rendered = false;\n        __classPrivateFieldSet(this, _Element_fontInfo, Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type), \"f\");\n        __classPrivateFieldSet(this, _Element_fontScale, Metrics.get(`${__classPrivateFieldGet(this, _Element_attrs, \"f\").type}.fontScale`), \"f\");\n        // If a default registry exist, then register with it right away.\n        (_b = Registry.getDefaultRegistry()) === null || _b === void 0 ? void 0 : _b.register(this);\n    }\n    /**\n     * Adds a child Element to the Element, which lets it inherit the\n     * same style as the parent when setGroupStyle() is called.\n     *\n     * Examples of children are noteheads and stems.  Modifiers such\n     * as Accidentals are generally not set as children.\n     *\n     * Note that StaveNote calls setGroupStyle() when setStyle() is called.\n     */\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\").type;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element's style (see `getStyle()` and `setStyle()`)\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Draw an element. */\n    draw() {\n        throw new RuntimeError('Element', 'Draw not defined');\n    }\n    /** Check if it has a class label (An element can have multiple class labels). */\n    hasClass(className) {\n        var _b;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            return false;\n        return ((_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ').indexOf(className)) !== -1;\n    }\n    /** Add a class label (An element can have multiple class labels). */\n    addClass(className) {\n        var _b;\n        if (this.hasClass(className))\n            return this;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${className}`;\n        else\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${__classPrivateFieldGet(this, _Element_attrs, \"f\").class} ${className}`;\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels). */\n    removeClass(className) {\n        var _b, _c;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = arr.join(' ');\n        }\n        (_c = this.registry) === null || _c === void 0 ? void 0 : _c.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\");\n    }\n    /** Return an attribute, such as 'id', 'type' or 'class'. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(__classPrivateFieldGet(this, _Element_attrs, \"f\").id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute such as 'id', 'class', or 'type'. */\n    setAttribute(name, value) {\n        var _b;\n        const oldID = __classPrivateFieldGet(this, _Element_attrs, \"f\").id;\n        const oldValue = __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n        __classPrivateFieldGet(this, _Element_attrs, \"f\")[name] = value;\n        // Register with old id to support id changes.\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return new BoundingBox(0, -this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Return the context, such as an SVGContext or CanvasContext object. */\n    getContext() {\n        return __classPrivateFieldGet(this, _Element_context, \"f\");\n    }\n    /** Set the context to an SVGContext or CanvasContext object */\n    setContext(context) {\n        __classPrivateFieldSet(this, _Element_context, context, \"f\");\n        return this;\n    }\n    /** Validate and return the rendering context. */\n    checkContext() {\n        return defined(__classPrivateFieldGet(this, _Element_context, \"f\"), 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial') that will be applied\n     * to text (not glyphs).\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string for the text font. */\n    get font() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /**\n     * Set the element's text font family, size, weight, style\n     * (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * This attribute does not determine the font used for musical Glyphs like treble clefs.\n     *\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        const defaultTextFont = Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type);\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            __classPrivateFieldSet(this, _Element_fontInfo, Object.assign(Object.assign({}, defaultTextFont), font), \"f\");\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.fromCSSString(font), \"f\");\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style), \"f\");\n        }\n        return this;\n    }\n    /**\n     * Get the css string describing this Element's text font. e.g.,\n     * 'bold 10pt Arial'.\n     */\n    getFont() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.fontInfo is set.\n        return __classPrivateFieldGet(this, _Element_fontInfo, \"f\");\n    }\n    /** Set the current FontInfo object. */\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    getFontScale() {\n        return __classPrivateFieldGet(this, _Element_fontScale, \"f\");\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /** @returns a CSS font-size string (e.g., '18pt', '12px', '1em'). */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /** @returns the font size in `pt`. */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /** @returns the font size in `px`. */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /** @returns a CSS font-style string (e.g., 'italic'). */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    /** Set the font style. */\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    /** Set the font weight. */\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n    /** Get element width. */\n    getWidth() {\n        return this.width;\n    }\n    get width() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_width, \"f\");\n    }\n    /** Set element width. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    set width(width) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_width, width, \"f\");\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the X coordinate. */\n    getX() {\n        return this.x;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Shift element down `yShift` pixels. Negative values shift up. */\n    setYShift(yShift) {\n        this.yShift = yShift;\n        return this;\n    }\n    /** Get shift element `yShift`. */\n    getYShift() {\n        return this.yShift;\n    }\n    /** Set shift element right `xShift` pixels. Negative values shift left. */\n    setXShift(xShift) {\n        this.xShift = xShift;\n        return this;\n    }\n    /** Get shift element `xShift`. */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Set element text. */\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    set text(text) {\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        __classPrivateFieldSet(this, _Element_text, text, \"f\");\n    }\n    /** Get element text. */\n    getText() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    get text() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    /** Render the element text. */\n    renderText(ctx, xPos, yPos) {\n        ctx.save();\n        ctx.setFont(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n        ctx.fillText(__classPrivateFieldGet(this, _Element_text, \"f\"), xPos + this.x + this.xShift, yPos + this.y + this.yShift);\n        this.children.forEach((child) => {\n            ctx.setFont(__classPrivateFieldGet(child, _Element_fontInfo, \"f\"));\n            ctx.fillText(__classPrivateFieldGet(child, _Element_text, \"f\"), xPos + child.x + child.xShift, yPos + child.y + child.yShift);\n        });\n        ctx.restore();\n    }\n    /** Measure the text using the textFont. */\n    measureText() {\n        let txtCanvas = __classPrivateFieldGet(Element, _a, \"f\", _Element_txtCanvas);\n        if (!txtCanvas) {\n            // Create the canvas element that will be used to measure text in the event\n            // of a cache miss.\n            txtCanvas = document.createElement('canvas');\n            __classPrivateFieldSet(Element, _a, txtCanvas, \"f\", _Element_txtCanvas);\n        }\n        const context = txtCanvas.getContext('2d');\n        if (!context)\n            throw new RuntimeError('Font', 'No txt context');\n        context.font = Font.toCSSString(Font.validate(__classPrivateFieldGet(this, _Element_fontInfo, \"f\")));\n        __classPrivateFieldSet(this, _Element_textMetrics, context.measureText(__classPrivateFieldGet(this, _Element_text, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Element_height, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxAscent + __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxDescent, \"f\");\n        __classPrivateFieldSet(this, _Element_width, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").width, \"f\");\n        __classPrivateFieldSet(this, _Element_metricsValid, true, \"f\");\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Get the text metrics. */\n    getTextMetrics() {\n        return this.textMetrics;\n    }\n    get textMetrics() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Get the text height. */\n    getHeight() {\n        return this.height;\n    }\n    get height() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_height, \"f\");\n    }\n    set height(height) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_height, height, \"f\");\n    }\n    setOriginX(x) {\n        const bbox = this.getBoundingBox();\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.xShift = -xShift;\n    }\n    setOriginY(y) {\n        const bbox = this.getBoundingBox();\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.yShift = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n}\n_a = Element, _Element_context = new WeakMap(), _Element_attrs = new WeakMap(), _Element_fontInfo = new WeakMap(), _Element_fontScale = new WeakMap(), _Element_text = new WeakMap(), _Element_metricsValid = new WeakMap(), _Element_textMetrics = new WeakMap(), _Element_height = new WeakMap(), _Element_width = new WeakMap();\nElement.ID = 1000;\n/** Canvas used to measure text. */\n_Element_txtCanvas = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Modifier_spacingFromNextModifier, _Modifier_modifierContext;\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        _Modifier_spacingFromNextModifier.set(this, void 0);\n        _Modifier_modifierContext.set(this, void 0);\n        this.width = 0;\n        // The `textLine` is reserved space above or below a stave.\n        this.textLine = 0;\n        this.position = Modifier.Position.LEFT;\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, 0, \"f\");\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return __classPrivateFieldGet(this, _Modifier_modifierContext, \"f\");\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(__classPrivateFieldGet(this, _Modifier_modifierContext, \"f\"), 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        __classPrivateFieldSet(this, _Modifier_modifierContext, c, \"f\");\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `textLine` for the modifier. */\n    setTextLine(line) {\n        this.textLine = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.yShift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, x, \"f\");\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return __classPrivateFieldGet(this, _Modifier_spacingFromNextModifier, \"f\");\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.xShift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.xShift -= x;\n        }\n        else {\n            this.xShift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n_Modifier_spacingFromNextModifier = new WeakMap(), _Modifier_modifierContext = new WeakMap();\n","// This file was generated by `glyph_codes.js'\n// The enum includes all SMuFL glyphs, and a few others that VexFlow uses.\n// See the list of SMuFL glyphs:\n//   https://w3c.github.io/smufl/latest/tables/\n//   https://raw.githubusercontent.com/w3c/smufl/gh-pages/metadata/glyphnames.json\n// We renamed the two SMuFL names that start with a digit:\n//   4stringTabClef => fourStringTabClef\n//   6stringTabClef => sixStringTabClef\n//\nexport var Glyphs;\n(function (Glyphs) {\n    ////// SPECIAL GLYPHS ///////////////////////////////////////\n    // Null character\n    Glyphs[\"null\"] = \"\\0\";\n    ////// SMuFL GLYPHS /////////////////////////////////////////\n    // U+E06E  4-string tab clef\n    Glyphs[\"fourStringTabClef\"] = \"\\uE06E\";\n    // U+E06D  6-string tab clef\n    Glyphs[\"sixStringTabClef\"] = \"\\uE06D\";\n    // U+E30D  11 large diesis down, 3° down [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisDown\"] = \"\\uE30D\";\n    // U+E30C  11 large diesis up, (11L), (sharp less 11M), 3° up [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisUp\"] = \"\\uE30C\";\n    // U+E30B  11 medium diesis down, 1°[17 31] 2°46 down, 1/4-tone down\n    Glyphs[\"accSagittal11MediumDiesisDown\"] = \"\\uE30B\";\n    // U+E30A  11 medium diesis up, (11M), 1°[17 31] 2°46 up, 1/4-tone up\n    Glyphs[\"accSagittal11MediumDiesisUp\"] = \"\\uE30A\";\n    // U+E3AB  11:19 large diesis down\n    Glyphs[\"accSagittal11v19LargeDiesisDown\"] = \"\\uE3AB\";\n    // U+E3AA  11:19 large diesis up, (11:19L, apotome less 11:19M)\n    Glyphs[\"accSagittal11v19LargeDiesisUp\"] = \"\\uE3AA\";\n    // U+E3A3  11:19 medium diesis down\n    Glyphs[\"accSagittal11v19MediumDiesisDown\"] = \"\\uE3A3\";\n    // U+E3A2  11:19 medium diesis up, (11:19M, 11M plus 19s)\n    Glyphs[\"accSagittal11v19MediumDiesisUp\"] = \"\\uE3A2\";\n    // U+E397  11:49 comma down\n    Glyphs[\"accSagittal11v49CommaDown\"] = \"\\uE397\";\n    // U+E396  11:49 comma up, (11:49C, 11M less 49C)\n    Glyphs[\"accSagittal11v49CommaUp\"] = \"\\uE396\";\n    // U+E395  143 comma down\n    Glyphs[\"accSagittal143CommaDown\"] = \"\\uE395\";\n    // U+E394  143 comma up, (143C, 13L less 11M)\n    Glyphs[\"accSagittal143CommaUp\"] = \"\\uE394\";\n    // U+E343  17 comma down\n    Glyphs[\"accSagittal17CommaDown\"] = \"\\uE343\";\n    // U+E342  17 comma up, (17C)\n    Glyphs[\"accSagittal17CommaUp\"] = \"\\uE342\";\n    // U+E393  17 kleisma down\n    Glyphs[\"accSagittal17KleismaDown\"] = \"\\uE393\";\n    // U+E392  17 kleisma up, (17k)\n    Glyphs[\"accSagittal17KleismaUp\"] = \"\\uE392\";\n    // U+E399  19 comma down\n    Glyphs[\"accSagittal19CommaDown\"] = \"\\uE399\";\n    // U+E398  19 comma up, (19C)\n    Glyphs[\"accSagittal19CommaUp\"] = \"\\uE398\";\n    // U+E391  19 schisma down\n    Glyphs[\"accSagittal19SchismaDown\"] = \"\\uE391\";\n    // U+E390  19 schisma up, (19s)\n    Glyphs[\"accSagittal19SchismaUp\"] = \"\\uE390\";\n    // U+E3F5  1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal1MinaDown\"] = \"\\uE3F5\";\n    // U+E3F4  1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal1MinaUp\"] = \"\\uE3F4\";\n    // U+E3F9  1 tina down, 7²⋅11⋅19/5-schismina down, 0.17 cents down\n    Glyphs[\"accSagittal1TinaDown\"] = \"\\uE3F9\";\n    // U+E3F8  1 tina up, 7²⋅11⋅19/5-schismina up, 0.17 cents up\n    Glyphs[\"accSagittal1TinaUp\"] = \"\\uE3F8\";\n    // U+E371  23 comma down, 2° down [96 EDO], 1/8-tone down\n    Glyphs[\"accSagittal23CommaDown\"] = \"\\uE371\";\n    // U+E370  23 comma up, (23C), 2° up [96 EDO], 1/8-tone up\n    Glyphs[\"accSagittal23CommaUp\"] = \"\\uE370\";\n    // U+E39F  23 small diesis down\n    Glyphs[\"accSagittal23SmallDiesisDown\"] = \"\\uE39F\";\n    // U+E39E  23 small diesis up, (23S)\n    Glyphs[\"accSagittal23SmallDiesisUp\"] = \"\\uE39E\";\n    // U+E307  25 small diesis down, 2° down [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisDown\"] = \"\\uE307\";\n    // U+E306  25 small diesis up, (25S, ~5:13S, ~37S, 5C plus 5C), 2° up [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisUp\"] = \"\\uE306\";\n    // U+E3F7  2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal2MinasDown\"] = \"\\uE3F7\";\n    // U+E3F6  2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal2MinasUp\"] = \"\\uE3F6\";\n    // U+E3FB  2 tinas down, 1/(7³⋅17)-schismina down, 0.30 cents down\n    Glyphs[\"accSagittal2TinasDown\"] = \"\\uE3FB\";\n    // U+E3FA  2 tinas up, 1/(7³⋅17)-schismina up, 0.30 cents up\n    Glyphs[\"accSagittal2TinasUp\"] = \"\\uE3FA\";\n    // U+E30F  35 large diesis down, 2° down [50 EDO], 5/18-tone down\n    Glyphs[\"accSagittal35LargeDiesisDown\"] = \"\\uE30F\";\n    // U+E30E  35 large diesis up, (35L, ~13L, ~125L, sharp less 35M), 2°50 up\n    Glyphs[\"accSagittal35LargeDiesisUp\"] = \"\\uE30E\";\n    // U+E309  35 medium diesis down, 1°[50] 2°[27] down, 2/9-tone down\n    Glyphs[\"accSagittal35MediumDiesisDown\"] = \"\\uE309\";\n    // U+E308  35 medium diesis up, (35M, ~13M, ~125M, 5C plus 7C), 2/9-tone up\n    Glyphs[\"accSagittal35MediumDiesisUp\"] = \"\\uE308\";\n    // U+E3FD  3 tinas down, 1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal3TinasDown\"] = \"\\uE3FD\";\n    // U+E3FC  3 tinas up, 1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal3TinasUp\"] = \"\\uE3FC\";\n    // U+E3A9  49 large diesis down\n    Glyphs[\"accSagittal49LargeDiesisDown\"] = \"\\uE3A9\";\n    // U+E3A8  49 large diesis up, (49L, ~31L, apotome less 49M)\n    Glyphs[\"accSagittal49LargeDiesisUp\"] = \"\\uE3A8\";\n    // U+E3A5  49 medium diesis down\n    Glyphs[\"accSagittal49MediumDiesisDown\"] = \"\\uE3A5\";\n    // U+E3A4  49 medium diesis up, (49M, ~31M, 7C plus 7C)\n    Glyphs[\"accSagittal49MediumDiesisUp\"] = \"\\uE3A4\";\n    // U+E39D  49 small diesis down\n    Glyphs[\"accSagittal49SmallDiesisDown\"] = \"\\uE39D\";\n    // U+E39C  49 small diesis up, (49S, ~31S)\n    Glyphs[\"accSagittal49SmallDiesisUp\"] = \"\\uE39C\";\n    // U+E3FF  4 tinas down, 5²⋅11²/7-schismina down, 0.57 cents down\n    Glyphs[\"accSagittal4TinasDown\"] = \"\\uE3FF\";\n    // U+E3FE  4 tinas up, 5²⋅11²/7-schismina up, 0.57 cents up\n    Glyphs[\"accSagittal4TinasUp\"] = \"\\uE3FE\";\n    // U+E345  55 comma down, 3° down [96 EDO], 3/16-tone down\n    Glyphs[\"accSagittal55CommaDown\"] = \"\\uE345\";\n    // U+E344  55 comma up, (55C, 11M less 5C), 3°up [96 EDO], 3/16-tone up\n    Glyphs[\"accSagittal55CommaUp\"] = \"\\uE344\";\n    // U+E303  5 comma down, 1° down [22 27 29 34 41 46 53 96 EDOs], 1/12-tone down\n    Glyphs[\"accSagittal5CommaDown\"] = \"\\uE303\";\n    // U+E302  5 comma up, (5C), 1° up [22 27 29 34 41 46 53 96 EDOs], 1/12-tone up\n    Glyphs[\"accSagittal5CommaUp\"] = \"\\uE302\";\n    // U+E401  5 tinas down, 7⁴/25-schismina down, 0.72 cents down\n    Glyphs[\"accSagittal5TinasDown\"] = \"\\uE401\";\n    // U+E400  5 tinas up, 7⁴/25-schismina up, 0.72 cents up\n    Glyphs[\"accSagittal5TinasUp\"] = \"\\uE400\";\n    // U+E349  5:11 small diesis down\n    Glyphs[\"accSagittal5v11SmallDiesisDown\"] = \"\\uE349\";\n    // U+E348  5:11 small diesis up, (5:11S, ~7:13S, ~11:17S, 5:7k plus 7:11C)\n    Glyphs[\"accSagittal5v11SmallDiesisUp\"] = \"\\uE348\";\n    // U+E3AD  5:13 large diesis down\n    Glyphs[\"accSagittal5v13LargeDiesisDown\"] = \"\\uE3AD\";\n    // U+E3AC  5:13 large diesis up, (5:13L, ~37L, apotome less 5:13M)\n    Glyphs[\"accSagittal5v13LargeDiesisUp\"] = \"\\uE3AC\";\n    // U+E3A1  5:13 medium diesis down\n    Glyphs[\"accSagittal5v13MediumDiesisDown\"] = \"\\uE3A1\";\n    // U+E3A0  5:13 medium diesis up, (5:13M, ~37M, 5C plus 13C)\n    Glyphs[\"accSagittal5v13MediumDiesisUp\"] = \"\\uE3A0\";\n    // U+E373  5:19 comma down, 1/20-tone down\n    Glyphs[\"accSagittal5v19CommaDown\"] = \"\\uE373\";\n    // U+E372  5:19 comma up, (5:19C, 5C plus 19s), 1/20-tone up\n    Glyphs[\"accSagittal5v19CommaUp\"] = \"\\uE372\";\n    // U+E375  5:23 small diesis down, 2° down [60 EDO], 1/5-tone down\n    Glyphs[\"accSagittal5v23SmallDiesisDown\"] = \"\\uE375\";\n    // U+E374  5:23 small diesis up, (5:23S, 5C plus 23C), 2° up [60 EDO], 1/5-tone up\n    Glyphs[\"accSagittal5v23SmallDiesisUp\"] = \"\\uE374\";\n    // U+E3A7  5:49 medium diesis down\n    Glyphs[\"accSagittal5v49MediumDiesisDown\"] = \"\\uE3A7\";\n    // U+E3A6  5:49 medium diesis up, (5:49M, half apotome)\n    Glyphs[\"accSagittal5v49MediumDiesisUp\"] = \"\\uE3A6\";\n    // U+E301  5:7 kleisma down\n    Glyphs[\"accSagittal5v7KleismaDown\"] = \"\\uE301\";\n    // U+E300  5:7 kleisma up, (5:7k, ~11:13k, 7C less 5C)\n    Glyphs[\"accSagittal5v7KleismaUp\"] = \"\\uE300\";\n    // U+E403  6 tinas down, 2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal6TinasDown\"] = \"\\uE403\";\n    // U+E402  6 tinas up, 2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal6TinasUp\"] = \"\\uE402\";\n    // U+E305  7 comma down, 1° down [43 EDO], 2° down [72 EDO], 1/6-tone down\n    Glyphs[\"accSagittal7CommaDown\"] = \"\\uE305\";\n    // U+E304  7 comma up, (7C), 1° up [43 EDO], 2° up [72 EDO], 1/6-tone up\n    Glyphs[\"accSagittal7CommaUp\"] = \"\\uE304\";\n    // U+E405  7 tinas down, 7/(5²⋅17)-schismina down, 1.02 cents down\n    Glyphs[\"accSagittal7TinasDown\"] = \"\\uE405\";\n    // U+E404  7 tinas up, 7/(5²⋅17)-schismina up, 1.02 cents up\n    Glyphs[\"accSagittal7TinasUp\"] = \"\\uE404\";\n    // U+E347  7:11 comma down, 1° down [60 EDO], 1/10-tone down\n    Glyphs[\"accSagittal7v11CommaDown\"] = \"\\uE347\";\n    // U+E346  7:11 comma up, (7:11C, ~13:17S, ~29S, 11L less 7C), 1° up [60 EDO]\n    Glyphs[\"accSagittal7v11CommaUp\"] = \"\\uE346\";\n    // U+E341  7:11 kleisma down\n    Glyphs[\"accSagittal7v11KleismaDown\"] = \"\\uE341\";\n    // U+E340  7:11 kleisma up, (7:11k, ~29k)\n    Glyphs[\"accSagittal7v11KleismaUp\"] = \"\\uE340\";\n    // U+E39B  7:19 comma down\n    Glyphs[\"accSagittal7v19CommaDown\"] = \"\\uE39B\";\n    // U+E39A  7:19 comma up, (7:19C, 7C less 19s)\n    Glyphs[\"accSagittal7v19CommaUp\"] = \"\\uE39A\";\n    // U+E407  8 tinas down, 11⋅17/(5²⋅7)-schismina down, 1.14 cents down\n    Glyphs[\"accSagittal8TinasDown\"] = \"\\uE407\";\n    // U+E406  8 tinas up, 11⋅17/(5²⋅7)-schismina up, 1.14 cents up\n    Glyphs[\"accSagittal8TinasUp\"] = \"\\uE406\";\n    // U+E409  9 tinas down, 1/(7²⋅11)-schismina down, 1.26 cents down\n    Glyphs[\"accSagittal9TinasDown\"] = \"\\uE409\";\n    // U+E408  9 tinas up, 1/(7²⋅11)-schismina up, 1.26 cents up\n    Glyphs[\"accSagittal9TinasUp\"] = \"\\uE408\";\n    // U+E3F2  Acute, 5 schisma up (5s), 2 cents up\n    Glyphs[\"accSagittalAcute\"] = \"\\uE3F2\";\n    // U+E335  Double flat, (2 apotomes down)[almost all EDOs], whole-tone down\n    Glyphs[\"accSagittalDoubleFlat\"] = \"\\uE335\";\n    // U+E3E9  Double flat 11:49C-up\n    Glyphs[\"accSagittalDoubleFlat11v49CUp\"] = \"\\uE3E9\";\n    // U+E3EB  Double flat 143C-up\n    Glyphs[\"accSagittalDoubleFlat143CUp\"] = \"\\uE3EB\";\n    // U+E365  Double flat 17C-up\n    Glyphs[\"accSagittalDoubleFlat17CUp\"] = \"\\uE365\";\n    // U+E3ED  Double flat 17k-up\n    Glyphs[\"accSagittalDoubleFlat17kUp\"] = \"\\uE3ED\";\n    // U+E3E7  Double flat 19C-up\n    Glyphs[\"accSagittalDoubleFlat19CUp\"] = \"\\uE3E7\";\n    // U+E3EF  Double flat 19s-up\n    Glyphs[\"accSagittalDoubleFlat19sUp\"] = \"\\uE3EF\";\n    // U+E387  Double flat 23C-up, 14° down [96 EDO], 7/8-tone down\n    Glyphs[\"accSagittalDoubleFlat23CUp\"] = \"\\uE387\";\n    // U+E3E1  Double flat 23S-up\n    Glyphs[\"accSagittalDoubleFlat23SUp\"] = \"\\uE3E1\";\n    // U+E32D  Double flat 25S-up, 8°down [53 EDO]\n    Glyphs[\"accSagittalDoubleFlat25SUp\"] = \"\\uE32D\";\n    // U+E3E3  Double flat 49S-up\n    Glyphs[\"accSagittalDoubleFlat49SUp\"] = \"\\uE3E3\";\n    // U+E363  Double flat 55C-up, 13° down [96 EDO], 13/16-tone down\n    Glyphs[\"accSagittalDoubleFlat55CUp\"] = \"\\uE363\";\n    // U+E331  Double flat 5C-up, 5°[22 29] 7°[34 41] 9°53 down, 11/12 tone down\n    Glyphs[\"accSagittalDoubleFlat5CUp\"] = \"\\uE331\";\n    // U+E35F  Double flat 5:11S-up\n    Glyphs[\"accSagittalDoubleFlat5v11SUp\"] = \"\\uE35F\";\n    // U+E385  Double flat 5:19C-up, 19/20-tone down\n    Glyphs[\"accSagittalDoubleFlat5v19CUp\"] = \"\\uE385\";\n    // U+E383  Double flat 5:23S-up, 8° down [60 EDO], 4/5-tone down\n    Glyphs[\"accSagittalDoubleFlat5v23SUp\"] = \"\\uE383\";\n    // U+E333  Double flat 5:7k-up\n    Glyphs[\"accSagittalDoubleFlat5v7kUp\"] = \"\\uE333\";\n    // U+E32F  Double flat 7C-up, 5° down [43 EDO], 10° down [72 EDO], 5/6-tone down\n    Glyphs[\"accSagittalDoubleFlat7CUp\"] = \"\\uE32F\";\n    // U+E361  Double flat 7:11C-up, 9° down [60 EDO], 9/10-tone down\n    Glyphs[\"accSagittalDoubleFlat7v11CUp\"] = \"\\uE361\";\n    // U+E367  Double flat 7:11k-up\n    Glyphs[\"accSagittalDoubleFlat7v11kUp\"] = \"\\uE367\";\n    // U+E3E5  Double flat 7:19C-up\n    Glyphs[\"accSagittalDoubleFlat7v19CUp\"] = \"\\uE3E5\";\n    // U+E334  Double sharp, (2 apotomes up)[almost all EDOs], whole-tone up\n    Glyphs[\"accSagittalDoubleSharp\"] = \"\\uE334\";\n    // U+E3E8  Double sharp 11:49C-down\n    Glyphs[\"accSagittalDoubleSharp11v49CDown\"] = \"\\uE3E8\";\n    // U+E3EA  Double sharp 143C-down\n    Glyphs[\"accSagittalDoubleSharp143CDown\"] = \"\\uE3EA\";\n    // U+E364  Double sharp 17C-down\n    Glyphs[\"accSagittalDoubleSharp17CDown\"] = \"\\uE364\";\n    // U+E3EC  Double sharp 17k-down\n    Glyphs[\"accSagittalDoubleSharp17kDown\"] = \"\\uE3EC\";\n    // U+E3E6  Double sharp 19C-down\n    Glyphs[\"accSagittalDoubleSharp19CDown\"] = \"\\uE3E6\";\n    // U+E3EE  Double sharp 19s-down\n    Glyphs[\"accSagittalDoubleSharp19sDown\"] = \"\\uE3EE\";\n    // U+E386  Double sharp 23C-down, 14°up [96 EDO], 7/8-tone up\n    Glyphs[\"accSagittalDoubleSharp23CDown\"] = \"\\uE386\";\n    // U+E3E0  Double sharp 23S-down\n    Glyphs[\"accSagittalDoubleSharp23SDown\"] = \"\\uE3E0\";\n    // U+E32C  Double sharp 25S-down, 8°up [53 EDO]\n    Glyphs[\"accSagittalDoubleSharp25SDown\"] = \"\\uE32C\";\n    // U+E3E2  Double sharp 49S-down\n    Glyphs[\"accSagittalDoubleSharp49SDown\"] = \"\\uE3E2\";\n    // U+E362  Double sharp 55C-down, 13° up [96 EDO], 13/16-tone up\n    Glyphs[\"accSagittalDoubleSharp55CDown\"] = \"\\uE362\";\n    // U+E330  Double sharp 5C-down, 5°[22 29] 7°[34 41] 9°53 up, 11/12 tone up\n    Glyphs[\"accSagittalDoubleSharp5CDown\"] = \"\\uE330\";\n    // U+E35E  Double sharp 5:11S-down\n    Glyphs[\"accSagittalDoubleSharp5v11SDown\"] = \"\\uE35E\";\n    // U+E384  Double sharp 5:19C-down, 19/20-tone up\n    Glyphs[\"accSagittalDoubleSharp5v19CDown\"] = \"\\uE384\";\n    // U+E382  Double sharp 5:23S-down, 8° up [60 EDO], 4/5-tone up\n    Glyphs[\"accSagittalDoubleSharp5v23SDown\"] = \"\\uE382\";\n    // U+E332  Double sharp 5:7k-down\n    Glyphs[\"accSagittalDoubleSharp5v7kDown\"] = \"\\uE332\";\n    // U+E32E  Double sharp 7C-down, 5°[43] 10°[72] up, 5/6-tone up\n    Glyphs[\"accSagittalDoubleSharp7CDown\"] = \"\\uE32E\";\n    // U+E360  Double sharp 7:11C-down, 9° up [60 EDO], 9/10-tone up\n    Glyphs[\"accSagittalDoubleSharp7v11CDown\"] = \"\\uE360\";\n    // U+E366  Double sharp 7:11k-down\n    Glyphs[\"accSagittalDoubleSharp7v11kDown\"] = \"\\uE366\";\n    // U+E3E4  Double sharp 7:19C-down\n    Glyphs[\"accSagittalDoubleSharp7v19CDown\"] = \"\\uE3E4\";\n    // U+E319  Flat, (apotome down)[almost all EDOs], 1/2-tone down\n    Glyphs[\"accSagittalFlat\"] = \"\\uE319\";\n    // U+E329  Flat 11L-down, 8° up [46 EDO]\n    Glyphs[\"accSagittalFlat11LDown\"] = \"\\uE329\";\n    // U+E327  Flat 11M-down, 3° down [17 31 EDOs], 7° down [46 EDO], 3/4-tone down\n    Glyphs[\"accSagittalFlat11MDown\"] = \"\\uE327\";\n    // U+E3DB  Flat 11:19L-down\n    Glyphs[\"accSagittalFlat11v19LDown\"] = \"\\uE3DB\";\n    // U+E3D3  Flat 11:19M-down\n    Glyphs[\"accSagittalFlat11v19MDown\"] = \"\\uE3D3\";\n    // U+E3C7  Flat 11:49C-down\n    Glyphs[\"accSagittalFlat11v49CDown\"] = \"\\uE3C7\";\n    // U+E3B9  Flat 11:49C-up\n    Glyphs[\"accSagittalFlat11v49CUp\"] = \"\\uE3B9\";\n    // U+E3C5  Flat 143C-down\n    Glyphs[\"accSagittalFlat143CDown\"] = \"\\uE3C5\";\n    // U+E3BB  Flat 143C-up\n    Glyphs[\"accSagittalFlat143CUp\"] = \"\\uE3BB\";\n    // U+E357  Flat 17C-down\n    Glyphs[\"accSagittalFlat17CDown\"] = \"\\uE357\";\n    // U+E351  Flat 17C-up\n    Glyphs[\"accSagittalFlat17CUp\"] = \"\\uE351\";\n    // U+E3C3  Flat 17k-down\n    Glyphs[\"accSagittalFlat17kDown\"] = \"\\uE3C3\";\n    // U+E3BD  Flat 17k-up\n    Glyphs[\"accSagittalFlat17kUp\"] = \"\\uE3BD\";\n    // U+E3C9  Flat 19C-down\n    Glyphs[\"accSagittalFlat19CDown\"] = \"\\uE3C9\";\n    // U+E3B7  Flat 19C-up\n    Glyphs[\"accSagittalFlat19CUp\"] = \"\\uE3B7\";\n    // U+E3C1  Flat 19s-down\n    Glyphs[\"accSagittalFlat19sDown\"] = \"\\uE3C1\";\n    // U+E3BF  Flat 19s-up\n    Glyphs[\"accSagittalFlat19sUp\"] = \"\\uE3BF\";\n    // U+E37D  Flat 23C-down, 10° down [96 EDO], 5/8-tone down\n    Glyphs[\"accSagittalFlat23CDown\"] = \"\\uE37D\";\n    // U+E37B  Flat 23C-up, 6° down [96 EDO], 3/8-tone down\n    Glyphs[\"accSagittalFlat23CUp\"] = \"\\uE37B\";\n    // U+E3CF  Flat 23S-down\n    Glyphs[\"accSagittalFlat23SDown\"] = \"\\uE3CF\";\n    // U+E3B1  Flat 23S-up\n    Glyphs[\"accSagittalFlat23SUp\"] = \"\\uE3B1\";\n    // U+E323  Flat 25S-down, 7° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SDown\"] = \"\\uE323\";\n    // U+E311  Flat 25S-up, 3° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SUp\"] = \"\\uE311\";\n    // U+E32B  Flat 35L-down, 5° down [50 EDO]\n    Glyphs[\"accSagittalFlat35LDown\"] = \"\\uE32B\";\n    // U+E325  Flat 35M-down, 4° down [50 EDO], 6° down [27 EDO], 13/18-tone down\n    Glyphs[\"accSagittalFlat35MDown\"] = \"\\uE325\";\n    // U+E3D9  Flat 49L-down\n    Glyphs[\"accSagittalFlat49LDown\"] = \"\\uE3D9\";\n    // U+E3D5  Flat 49M-down\n    Glyphs[\"accSagittalFlat49MDown\"] = \"\\uE3D5\";\n    // U+E3CD  Flat 49S-down\n    Glyphs[\"accSagittalFlat49SDown\"] = \"\\uE3CD\";\n    // U+E3B3  Flat 49S-up\n    Glyphs[\"accSagittalFlat49SUp\"] = \"\\uE3B3\";\n    // U+E359  Flat 55C-down, 11° down [96 EDO], 11/16-tone down\n    Glyphs[\"accSagittalFlat55CDown\"] = \"\\uE359\";\n    // U+E34F  Flat 55C-up, 5° down [96 EDO], 5/16-tone down\n    Glyphs[\"accSagittalFlat55CUp\"] = \"\\uE34F\";\n    // U+E31F  Flat 5C-down, 4°[22 29] 5°[27 34 41] 6°[39 46 53] down, 7/12-tone down\n    Glyphs[\"accSagittalFlat5CDown\"] = \"\\uE31F\";\n    // U+E315  Flat 5C-up, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°72 7°[96] down, 5/12-tone down\n    Glyphs[\"accSagittalFlat5CUp\"] = \"\\uE315\";\n    // U+E35D  Flat 5:11S-down\n    Glyphs[\"accSagittalFlat5v11SDown\"] = \"\\uE35D\";\n    // U+E34B  Flat 5:11S-up\n    Glyphs[\"accSagittalFlat5v11SUp\"] = \"\\uE34B\";\n    // U+E3DD  Flat 5:13L-down\n    Glyphs[\"accSagittalFlat5v13LDown\"] = \"\\uE3DD\";\n    // U+E3D1  Flat 5:13M-down\n    Glyphs[\"accSagittalFlat5v13MDown\"] = \"\\uE3D1\";\n    // U+E37F  Flat 5:19C-down, 11/20-tone down\n    Glyphs[\"accSagittalFlat5v19CDown\"] = \"\\uE37F\";\n    // U+E379  Flat 5:19C-up, 9/20-tone down\n    Glyphs[\"accSagittalFlat5v19CUp\"] = \"\\uE379\";\n    // U+E381  Flat 5:23S-down, 7° down [60 EDO], 7/10-tone down\n    Glyphs[\"accSagittalFlat5v23SDown\"] = \"\\uE381\";\n    // U+E377  Flat 5:23S-up, 3° down [60 EDO], 3/10-tone down\n    Glyphs[\"accSagittalFlat5v23SUp\"] = \"\\uE377\";\n    // U+E3D7  Flat 5:49M-down\n    Glyphs[\"accSagittalFlat5v49MDown\"] = \"\\uE3D7\";\n    // U+E31D  Flat 5:7k-down\n    Glyphs[\"accSagittalFlat5v7kDown\"] = \"\\uE31D\";\n    // U+E317  Flat 5:7k-up\n    Glyphs[\"accSagittalFlat5v7kUp\"] = \"\\uE317\";\n    // U+E321  Flat 7C-down, 4° down [43 EDO], 8° down [72 EDO], 2/3-tone down\n    Glyphs[\"accSagittalFlat7CDown\"] = \"\\uE321\";\n    // U+E313  Flat 7C-up, 2° down [43 EDO], 4° down [72 EDO], 1/3-tone down\n    Glyphs[\"accSagittalFlat7CUp\"] = \"\\uE313\";\n    // U+E35B  Flat 7:11C-down, 6° down [60 EDO], 3/5- tone down\n    Glyphs[\"accSagittalFlat7v11CDown\"] = \"\\uE35B\";\n    // U+E34D  Flat 7:11C-up, 4° down [60 EDO], 2/5-tone down\n    Glyphs[\"accSagittalFlat7v11CUp\"] = \"\\uE34D\";\n    // U+E355  Flat 7:11k-down\n    Glyphs[\"accSagittalFlat7v11kDown\"] = \"\\uE355\";\n    // U+E353  Flat 7:11k-up\n    Glyphs[\"accSagittalFlat7v11kUp\"] = \"\\uE353\";\n    // U+E3CB  Flat 7:19C-down\n    Glyphs[\"accSagittalFlat7v19CDown\"] = \"\\uE3CB\";\n    // U+E3B5  Flat 7:19C-up\n    Glyphs[\"accSagittalFlat7v19CUp\"] = \"\\uE3B5\";\n    // U+E40B  Fractional tina down, 77/(5⋅37)-schismina down, 0.08 cents down\n    Glyphs[\"accSagittalFractionalTinaDown\"] = \"\\uE40B\";\n    // U+E40A  Fractional tina up, 77/(5⋅37)-schismina up, 0.08 cents up\n    Glyphs[\"accSagittalFractionalTinaUp\"] = \"\\uE40A\";\n    // U+E3F3  Grave, 5 schisma down, 2 cents down\n    Glyphs[\"accSagittalGrave\"] = \"\\uE3F3\";\n    // U+E3F1  Shaft down, (natural for use with only diacritics down)\n    Glyphs[\"accSagittalShaftDown\"] = \"\\uE3F1\";\n    // U+E3F0  Shaft up, (natural for use with only diacritics up)\n    Glyphs[\"accSagittalShaftUp\"] = \"\\uE3F0\";\n    // U+E318  Sharp, (apotome up)[almost all EDOs], 1/2-tone up\n    Glyphs[\"accSagittalSharp\"] = \"\\uE318\";\n    // U+E328  Sharp 11L-up, 8° up [46 EDO]\n    Glyphs[\"accSagittalSharp11LUp\"] = \"\\uE328\";\n    // U+E326  Sharp 11M-up, 3° up [17 31 EDOs], 7° up [46 EDO], 3/4-tone up\n    Glyphs[\"accSagittalSharp11MUp\"] = \"\\uE326\";\n    // U+E3DA  Sharp 11:19L-up\n    Glyphs[\"accSagittalSharp11v19LUp\"] = \"\\uE3DA\";\n    // U+E3D2  Sharp 11:19M-up\n    Glyphs[\"accSagittalSharp11v19MUp\"] = \"\\uE3D2\";\n    // U+E3B8  Sharp 11:49C-down\n    Glyphs[\"accSagittalSharp11v49CDown\"] = \"\\uE3B8\";\n    // U+E3C6  Sharp 11:49C-up\n    Glyphs[\"accSagittalSharp11v49CUp\"] = \"\\uE3C6\";\n    // U+E3BA  Sharp 143C-down\n    Glyphs[\"accSagittalSharp143CDown\"] = \"\\uE3BA\";\n    // U+E3C4  Sharp 143C-up\n    Glyphs[\"accSagittalSharp143CUp\"] = \"\\uE3C4\";\n    // U+E350  Sharp 17C-down\n    Glyphs[\"accSagittalSharp17CDown\"] = \"\\uE350\";\n    // U+E356  Sharp 17C-up\n    Glyphs[\"accSagittalSharp17CUp\"] = \"\\uE356\";\n    // U+E3BC  Sharp 17k-down\n    Glyphs[\"accSagittalSharp17kDown\"] = \"\\uE3BC\";\n    // U+E3C2  Sharp 17k-up\n    Glyphs[\"accSagittalSharp17kUp\"] = \"\\uE3C2\";\n    // U+E3B6  Sharp 19C-down\n    Glyphs[\"accSagittalSharp19CDown\"] = \"\\uE3B6\";\n    // U+E3C8  Sharp 19C-up\n    Glyphs[\"accSagittalSharp19CUp\"] = \"\\uE3C8\";\n    // U+E3BE  Sharp 19s-down\n    Glyphs[\"accSagittalSharp19sDown\"] = \"\\uE3BE\";\n    // U+E3C0  Sharp 19s-up\n    Glyphs[\"accSagittalSharp19sUp\"] = \"\\uE3C0\";\n    // U+E37A  Sharp 23C-down, 6° up [96 EDO], 3/8-tone up\n    Glyphs[\"accSagittalSharp23CDown\"] = \"\\uE37A\";\n    // U+E37C  Sharp 23C-up, 10° up [96 EDO], 5/8-tone up\n    Glyphs[\"accSagittalSharp23CUp\"] = \"\\uE37C\";\n    // U+E3B0  Sharp 23S-down\n    Glyphs[\"accSagittalSharp23SDown\"] = \"\\uE3B0\";\n    // U+E3CE  Sharp 23S-up\n    Glyphs[\"accSagittalSharp23SUp\"] = \"\\uE3CE\";\n    // U+E310  Sharp 25S-down, 3° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SDown\"] = \"\\uE310\";\n    // U+E322  Sharp 25S-up, 7° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SUp\"] = \"\\uE322\";\n    // U+E32A  Sharp 35L-up, 5° up [50 EDO]\n    Glyphs[\"accSagittalSharp35LUp\"] = \"\\uE32A\";\n    // U+E324  Sharp 35M-up, 4° up [50 EDO], 6° up [27 EDO], 13/18-tone up\n    Glyphs[\"accSagittalSharp35MUp\"] = \"\\uE324\";\n    // U+E3D8  Sharp 49L-up\n    Glyphs[\"accSagittalSharp49LUp\"] = \"\\uE3D8\";\n    // U+E3D4  Sharp 49M-up\n    Glyphs[\"accSagittalSharp49MUp\"] = \"\\uE3D4\";\n    // U+E3B2  Sharp 49S-down\n    Glyphs[\"accSagittalSharp49SDown\"] = \"\\uE3B2\";\n    // U+E3CC  Sharp 49S-up\n    Glyphs[\"accSagittalSharp49SUp\"] = \"\\uE3CC\";\n    // U+E34E  Sharp 55C-down, 5° up [96 EDO], 5/16-tone up\n    Glyphs[\"accSagittalSharp55CDown\"] = \"\\uE34E\";\n    // U+E358  Sharp 55C-up, 11° up [96 EDO], 11/16-tone up\n    Glyphs[\"accSagittalSharp55CUp\"] = \"\\uE358\";\n    // U+E314  Sharp 5C-down, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°[72] 7°[96] up, 5/12-tone up\n    Glyphs[\"accSagittalSharp5CDown\"] = \"\\uE314\";\n    // U+E31E  Sharp 5C-up, 4°[22 29] 5°[27 34 41] 6°[39 46 53] up, 7/12-tone up\n    Glyphs[\"accSagittalSharp5CUp\"] = \"\\uE31E\";\n    // U+E34A  Sharp 5:11S-down\n    Glyphs[\"accSagittalSharp5v11SDown\"] = \"\\uE34A\";\n    // U+E35C  Sharp 5:11S-up\n    Glyphs[\"accSagittalSharp5v11SUp\"] = \"\\uE35C\";\n    // U+E3DC  Sharp 5:13L-up\n    Glyphs[\"accSagittalSharp5v13LUp\"] = \"\\uE3DC\";\n    // U+E3D0  Sharp 5:13M-up\n    Glyphs[\"accSagittalSharp5v13MUp\"] = \"\\uE3D0\";\n    // U+E378  Sharp 5:19C-down, 9/20-tone up\n    Glyphs[\"accSagittalSharp5v19CDown\"] = \"\\uE378\";\n    // U+E37E  Sharp 5:19C-up, 11/20-tone up\n    Glyphs[\"accSagittalSharp5v19CUp\"] = \"\\uE37E\";\n    // U+E376  Sharp 5:23S-down, 3° up [60 EDO], 3/10-tone up\n    Glyphs[\"accSagittalSharp5v23SDown\"] = \"\\uE376\";\n    // U+E380  Sharp 5:23S-up, 7° up [60 EDO], 7/10-tone up\n    Glyphs[\"accSagittalSharp5v23SUp\"] = \"\\uE380\";\n    // U+E3D6  Sharp 5:49M-up, (one and a half apotomes)\n    Glyphs[\"accSagittalSharp5v49MUp\"] = \"\\uE3D6\";\n    // U+E316  Sharp 5:7k-down\n    Glyphs[\"accSagittalSharp5v7kDown\"] = \"\\uE316\";\n    // U+E31C  Sharp 5:7k-up\n    Glyphs[\"accSagittalSharp5v7kUp\"] = \"\\uE31C\";\n    // U+E312  Sharp 7C-down, 2° up [43 EDO], 4° up [72 EDO], 1/3-tone up\n    Glyphs[\"accSagittalSharp7CDown\"] = \"\\uE312\";\n    // U+E320  Sharp 7C-up, 4° up [43 EDO], 8° up [72 EDO], 2/3-tone up\n    Glyphs[\"accSagittalSharp7CUp\"] = \"\\uE320\";\n    // U+E34C  Sharp 7:11C-down, 4° up [60 EDO], 2/5-tone up\n    Glyphs[\"accSagittalSharp7v11CDown\"] = \"\\uE34C\";\n    // U+E35A  Sharp 7:11C-up, 6° up [60 EDO], 3/5- tone up\n    Glyphs[\"accSagittalSharp7v11CUp\"] = \"\\uE35A\";\n    // U+E352  Sharp 7:11k-down\n    Glyphs[\"accSagittalSharp7v11kDown\"] = \"\\uE352\";\n    // U+E354  Sharp 7:11k-up\n    Glyphs[\"accSagittalSharp7v11kUp\"] = \"\\uE354\";\n    // U+E3B4  Sharp 7:19C-down\n    Glyphs[\"accSagittalSharp7v19CDown\"] = \"\\uE3B4\";\n    // U+E3CA  Sharp 7:19C-up\n    Glyphs[\"accSagittalSharp7v19CUp\"] = \"\\uE3CA\";\n    // U+E31A  Unused\n    Glyphs[\"accSagittalUnused1\"] = \"\\uE31A\";\n    // U+E31B  Unused\n    Glyphs[\"accSagittalUnused2\"] = \"\\uE31B\";\n    // U+E3DE  Unused\n    Glyphs[\"accSagittalUnused3\"] = \"\\uE3DE\";\n    // U+E3DF  Unused\n    Glyphs[\"accSagittalUnused4\"] = \"\\uE3DF\";\n    // U+E8CA  Combining accordion coupler dot\n    Glyphs[\"accdnCombDot\"] = \"\\uE8CA\";\n    // U+E8C8  Combining left hand, 2 ranks, empty\n    Glyphs[\"accdnCombLH2RanksEmpty\"] = \"\\uE8C8\";\n    // U+E8C9  Combining left hand, 3 ranks, empty (square)\n    Glyphs[\"accdnCombLH3RanksEmptySquare\"] = \"\\uE8C9\";\n    // U+E8C6  Combining right hand, 3 ranks, empty\n    Glyphs[\"accdnCombRH3RanksEmpty\"] = \"\\uE8C6\";\n    // U+E8C7  Combining right hand, 4 ranks, empty\n    Glyphs[\"accdnCombRH4RanksEmpty\"] = \"\\uE8C7\";\n    // U+E079  Diatonic accordion clef\n    Glyphs[\"accdnDiatonicClef\"] = \"\\uE079\";\n    // U+E8BC  Left hand, 2 ranks, 16' stop (round)\n    Glyphs[\"accdnLH2Ranks16Round\"] = \"\\uE8BC\";\n    // U+E8BD  Left hand, 2 ranks, 8' stop + 16' stop (round)\n    Glyphs[\"accdnLH2Ranks8Plus16Round\"] = \"\\uE8BD\";\n    // U+E8BB  Left hand, 2 ranks, 8' stop (round)\n    Glyphs[\"accdnLH2Ranks8Round\"] = \"\\uE8BB\";\n    // U+E8C0  Left hand, 2 ranks, full master (round)\n    Glyphs[\"accdnLH2RanksFullMasterRound\"] = \"\\uE8C0\";\n    // U+E8BF  Left hand, 2 ranks, master + 16' stop (round)\n    Glyphs[\"accdnLH2RanksMasterPlus16Round\"] = \"\\uE8BF\";\n    // U+E8BE  Left hand, 2 ranks, master (round)\n    Glyphs[\"accdnLH2RanksMasterRound\"] = \"\\uE8BE\";\n    // U+E8C4  Left hand, 3 ranks, 2' stop + 8' stop (square)\n    Glyphs[\"accdnLH3Ranks2Plus8Square\"] = \"\\uE8C4\";\n    // U+E8C2  Left hand, 3 ranks, 2' stop (square)\n    Glyphs[\"accdnLH3Ranks2Square\"] = \"\\uE8C2\";\n    // U+E8C1  Left hand, 3 ranks, 8' stop (square)\n    Glyphs[\"accdnLH3Ranks8Square\"] = \"\\uE8C1\";\n    // U+E8C3  Left hand, 3 ranks, double 8' stop (square)\n    Glyphs[\"accdnLH3RanksDouble8Square\"] = \"\\uE8C3\";\n    // U+E8C5  Left hand, 3 ranks, 2' stop + double 8' stop (tutti) (square)\n    Glyphs[\"accdnLH3RanksTuttiSquare\"] = \"\\uE8C5\";\n    // U+E8CC  Pull\n    Glyphs[\"accdnPull\"] = \"\\uE8CC\";\n    // U+E8CB  Push\n    Glyphs[\"accdnPush\"] = \"\\uE8CB\";\n    // U+E8AC  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop + 16' stop (accordion)\n    Glyphs[\"accdnRH3RanksAccordion\"] = \"\\uE8AC\";\n    // U+E8A8  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop (authentic musette)\n    Glyphs[\"accdnRH3RanksAuthenticMusette\"] = \"\\uE8A8\";\n    // U+E8AB  Right hand, 3 ranks, 8' stop + 16' stop (bandoneón)\n    Glyphs[\"accdnRH3RanksBandoneon\"] = \"\\uE8AB\";\n    // U+E8A4  Right hand, 3 ranks, 16' stop (bassoon)\n    Glyphs[\"accdnRH3RanksBassoon\"] = \"\\uE8A4\";\n    // U+E8A1  Right hand, 3 ranks, 8' stop (clarinet)\n    Glyphs[\"accdnRH3RanksClarinet\"] = \"\\uE8A1\";\n    // U+E8B1  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloLower8ve\"] = \"\\uE8B1\";\n    // U+E8B2  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloUpper8ve\"] = \"\\uE8B2\";\n    // U+E8B3  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksFullFactory\"] = \"\\uE8B3\";\n    // U+E8AA  Right hand, 3 ranks, 4' stop + 8' stop + 16' stop (harmonium)\n    Glyphs[\"accdnRH3RanksHarmonium\"] = \"\\uE8AA\";\n    // U+E8A7  Right hand, 3 ranks, 4' stop + 8' stop + upper tremolo 8' stop (imitation musette)\n    Glyphs[\"accdnRH3RanksImitationMusette\"] = \"\\uE8A7\";\n    // U+E8A3  Right hand, 3 ranks, lower tremolo 8' stop\n    Glyphs[\"accdnRH3RanksLowerTremolo8\"] = \"\\uE8A3\";\n    // U+E8AD  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop + 16' stop (master)\n    Glyphs[\"accdnRH3RanksMaster\"] = \"\\uE8AD\";\n    // U+E8A5  Right hand, 3 ranks, 4' stop + 8' stop (oboe)\n    Glyphs[\"accdnRH3RanksOboe\"] = \"\\uE8A5\";\n    // U+E8A9  Right hand, 3 ranks, 4' stop + 16' stop (organ)\n    Glyphs[\"accdnRH3RanksOrgan\"] = \"\\uE8A9\";\n    // U+E8A0  Right hand, 3 ranks, 4' stop (piccolo)\n    Glyphs[\"accdnRH3RanksPiccolo\"] = \"\\uE8A0\";\n    // U+E8AF  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksTremoloLower8ve\"] = \"\\uE8AF\";\n    // U+E8B0  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTremoloUpper8ve\"] = \"\\uE8B0\";\n    // U+E8AE  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTwoChoirs\"] = \"\\uE8AE\";\n    // U+E8A2  Right hand, 3 ranks, upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksUpperTremolo8\"] = \"\\uE8A2\";\n    // U+E8A6  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop (violin)\n    Glyphs[\"accdnRH3RanksViolin\"] = \"\\uE8A6\";\n    // U+E8B5  Right hand, 4 ranks, alto\n    Glyphs[\"accdnRH4RanksAlto\"] = \"\\uE8B5\";\n    // U+E8BA  Right hand, 4 ranks, bass/alto\n    Glyphs[\"accdnRH4RanksBassAlto\"] = \"\\uE8BA\";\n    // U+E8B7  Right hand, 4 ranks, master\n    Glyphs[\"accdnRH4RanksMaster\"] = \"\\uE8B7\";\n    // U+E8B8  Right hand, 4 ranks, soft bass\n    Glyphs[\"accdnRH4RanksSoftBass\"] = \"\\uE8B8\";\n    // U+E8B9  Right hand, 4 ranks, soft tenor\n    Glyphs[\"accdnRH4RanksSoftTenor\"] = \"\\uE8B9\";\n    // U+E8B4  Right hand, 4 ranks, soprano\n    Glyphs[\"accdnRH4RanksSoprano\"] = \"\\uE8B4\";\n    // U+E8B6  Right hand, 4 ranks, tenor\n    Glyphs[\"accdnRH4RanksTenor\"] = \"\\uE8B6\";\n    // U+E8CD  Ricochet (2 tones)\n    Glyphs[\"accdnRicochet2\"] = \"\\uE8CD\";\n    // U+E8CE  Ricochet (3 tones)\n    Glyphs[\"accdnRicochet3\"] = \"\\uE8CE\";\n    // U+E8CF  Ricochet (4 tones)\n    Glyphs[\"accdnRicochet4\"] = \"\\uE8CF\";\n    // U+E8D0  Ricochet (5 tones)\n    Glyphs[\"accdnRicochet5\"] = \"\\uE8D0\";\n    // U+E8D1  Ricochet (6 tones)\n    Glyphs[\"accdnRicochet6\"] = \"\\uE8D1\";\n    // U+E8D2  Combining ricochet for stem (2 tones)\n    Glyphs[\"accdnRicochetStem2\"] = \"\\uE8D2\";\n    // U+E8D3  Combining ricochet for stem (3 tones)\n    Glyphs[\"accdnRicochetStem3\"] = \"\\uE8D3\";\n    // U+E8D4  Combining ricochet for stem (4 tones)\n    Glyphs[\"accdnRicochetStem4\"] = \"\\uE8D4\";\n    // U+E8D5  Combining ricochet for stem (5 tones)\n    Glyphs[\"accdnRicochetStem5\"] = \"\\uE8D5\";\n    // U+E8D6  Combining ricochet for stem (6 tones)\n    Glyphs[\"accdnRicochetStem6\"] = \"\\uE8D6\";\n    // U+E454  1-comma flat\n    Glyphs[\"accidental1CommaFlat\"] = \"\\uE454\";\n    // U+E450  1-comma sharp\n    Glyphs[\"accidental1CommaSharp\"] = \"\\uE450\";\n    // U+E455  2-comma flat\n    Glyphs[\"accidental2CommaFlat\"] = \"\\uE455\";\n    // U+E451  2-comma sharp\n    Glyphs[\"accidental2CommaSharp\"] = \"\\uE451\";\n    // U+E456  3-comma flat\n    Glyphs[\"accidental3CommaFlat\"] = \"\\uE456\";\n    // U+E452  3-comma sharp\n    Glyphs[\"accidental3CommaSharp\"] = \"\\uE452\";\n    // U+E457  4-comma flat\n    Glyphs[\"accidental4CommaFlat\"] = \"\\uE457\";\n    // U+E453  5-comma sharp\n    Glyphs[\"accidental5CommaSharp\"] = \"\\uE453\";\n    // U+E27B  Arrow down (lower by one quarter-tone)\n    Glyphs[\"accidentalArrowDown\"] = \"\\uE27B\";\n    // U+E27A  Arrow up (raise by one quarter-tone)\n    Glyphs[\"accidentalArrowUp\"] = \"\\uE27A\";\n    // U+E442  Bakiye (flat)\n    Glyphs[\"accidentalBakiyeFlat\"] = \"\\uE442\";\n    // U+E445  Bakiye (sharp)\n    Glyphs[\"accidentalBakiyeSharp\"] = \"\\uE445\";\n    // U+E26C  Accidental bracket, left\n    Glyphs[\"accidentalBracketLeft\"] = \"\\uE26C\";\n    // U+E26D  Accidental bracket, right\n    Glyphs[\"accidentalBracketRight\"] = \"\\uE26D\";\n    // U+E440  Büyük mücenneb (flat)\n    Glyphs[\"accidentalBuyukMucennebFlat\"] = \"\\uE440\";\n    // U+E447  Büyük mücenneb (sharp)\n    Glyphs[\"accidentalBuyukMucennebSharp\"] = \"\\uE447\";\n    // U+E2EF  Combining close curly brace\n    Glyphs[\"accidentalCombiningCloseCurlyBrace\"] = \"\\uE2EF\";\n    // U+E2E6  Combining lower by one 17-limit schisma\n    Glyphs[\"accidentalCombiningLower17Schisma\"] = \"\\uE2E6\";\n    // U+E2E8  Combining lower by one 19-limit schisma\n    Glyphs[\"accidentalCombiningLower19Schisma\"] = \"\\uE2E8\";\n    // U+E2EA  Combining lower by one 23-limit comma\n    Glyphs[\"accidentalCombiningLower23Limit29LimitComma\"] = \"\\uE2EA\";\n    // U+EE50  Combining lower by one 29-limit comma\n    Glyphs[\"accidentalCombiningLower29LimitComma\"] = \"\\uEE50\";\n    // U+E2EC  Combining lower by one 31-limit schisma\n    Glyphs[\"accidentalCombiningLower31Schisma\"] = \"\\uE2EC\";\n    // U+EE52  Combining lower by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningLower37Quartertone\"] = \"\\uEE52\";\n    // U+EE54  Combining lower by one 41-limit comma\n    Glyphs[\"accidentalCombiningLower41Comma\"] = \"\\uEE54\";\n    // U+EE56  Combining lower by one 43-limit comma\n    Glyphs[\"accidentalCombiningLower43Comma\"] = \"\\uEE56\";\n    // U+EE58  Combining lower by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningLower47Quartertone\"] = \"\\uEE58\";\n    // U+E2F7  Combining lower by one 53-limit comma\n    Glyphs[\"accidentalCombiningLower53LimitComma\"] = \"\\uE2F7\";\n    // U+E2EE  Combining open curly brace\n    Glyphs[\"accidentalCombiningOpenCurlyBrace\"] = \"\\uE2EE\";\n    // U+E2E7  Combining raise by one 17-limit schisma\n    Glyphs[\"accidentalCombiningRaise17Schisma\"] = \"\\uE2E7\";\n    // U+E2E9  Combining raise by one 19-limit schisma\n    Glyphs[\"accidentalCombiningRaise19Schisma\"] = \"\\uE2E9\";\n    // U+E2EB  Combining raise by one 23-limit comma\n    Glyphs[\"accidentalCombiningRaise23Limit29LimitComma\"] = \"\\uE2EB\";\n    // U+EE51  Combining raise by one 29-limit comma\n    Glyphs[\"accidentalCombiningRaise29LimitComma\"] = \"\\uEE51\";\n    // U+E2ED  Combining raise by one 31-limit schisma\n    Glyphs[\"accidentalCombiningRaise31Schisma\"] = \"\\uE2ED\";\n    // U+EE53  Combining raise by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningRaise37Quartertone\"] = \"\\uEE53\";\n    // U+EE55  Combining raise by one 41-limit comma\n    Glyphs[\"accidentalCombiningRaise41Comma\"] = \"\\uEE55\";\n    // U+EE57  Combining raise by one 43-limit comma\n    Glyphs[\"accidentalCombiningRaise43Comma\"] = \"\\uEE57\";\n    // U+EE59  Combining raise by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningRaise47Quartertone\"] = \"\\uEE59\";\n    // U+E2F8  Combining raise by one 53-limit comma\n    Glyphs[\"accidentalCombiningRaise53LimitComma\"] = \"\\uE2F8\";\n    // U+E47A  Syntonic/Didymus comma (80:81) down (Bosanquet)\n    Glyphs[\"accidentalCommaSlashDown\"] = \"\\uE47A\";\n    // U+E479  Syntonic/Didymus comma (80:81) up (Bosanquet)\n    Glyphs[\"accidentalCommaSlashUp\"] = \"\\uE479\";\n    // U+E264  Double flat\n    Glyphs[\"accidentalDoubleFlat\"] = \"\\uE264\";\n    // U+ED30  Arabic double flat\n    Glyphs[\"accidentalDoubleFlatArabic\"] = \"\\uED30\";\n    // U+E2F0  Double flat equal tempered semitone\n    Glyphs[\"accidentalDoubleFlatEqualTempered\"] = \"\\uE2F0\";\n    // U+E2C0  Double flat lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowDown\"] = \"\\uE2C0\";\n    // U+E2C5  Double flat raised by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowUp\"] = \"\\uE2C5\";\n    // U+E483  Reversed double flat\n    Glyphs[\"accidentalDoubleFlatReversed\"] = \"\\uE483\";\n    // U+E2D4  Double flat lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsDown\"] = \"\\uE2D4\";\n    // U+E2D9  Double flat raised by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsUp\"] = \"\\uE2D9\";\n    // U+E485  Turned double flat\n    Glyphs[\"accidentalDoubleFlatTurned\"] = \"\\uE485\";\n    // U+E2CA  Double flat lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsDown\"] = \"\\uE2CA\";\n    // U+E2CF  Double flat raised by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsUp\"] = \"\\uE2CF\";\n    // U+E263  Double sharp\n    Glyphs[\"accidentalDoubleSharp\"] = \"\\uE263\";\n    // U+ED38  Arabic double sharp\n    Glyphs[\"accidentalDoubleSharpArabic\"] = \"\\uED38\";\n    // U+E2F4  Double sharp equal tempered semitone\n    Glyphs[\"accidentalDoubleSharpEqualTempered\"] = \"\\uE2F4\";\n    // U+E2C4  Double sharp lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowDown\"] = \"\\uE2C4\";\n    // U+E2C9  Double sharp raised by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowUp\"] = \"\\uE2C9\";\n    // U+E2D8  Double sharp lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsDown\"] = \"\\uE2D8\";\n    // U+E2DD  Double sharp raised by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsUp\"] = \"\\uE2DD\";\n    // U+E2CE  Double sharp lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsDown\"] = \"\\uE2CE\";\n    // U+E2D3  Double sharp raised by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsUp\"] = \"\\uE2D3\";\n    // U+E2FA  Enharmonically reinterpret accidental almost equal to\n    Glyphs[\"accidentalEnharmonicAlmostEqualTo\"] = \"\\uE2FA\";\n    // U+E2FB  Enharmonically reinterpret accidental equals\n    Glyphs[\"accidentalEnharmonicEquals\"] = \"\\uE2FB\";\n    // U+E2F9  Enharmonically reinterpret accidental tilde\n    Glyphs[\"accidentalEnharmonicTilde\"] = \"\\uE2F9\";\n    // U+E296  Filled reversed flat and flat\n    Glyphs[\"accidentalFilledReversedFlatAndFlat\"] = \"\\uE296\";\n    // U+E298  Filled reversed flat and flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowDown\"] = \"\\uE298\";\n    // U+E297  Filled reversed flat and flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowUp\"] = \"\\uE297\";\n    // U+E293  Filled reversed flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatArrowDown\"] = \"\\uE293\";\n    // U+E292  Filled reversed flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatArrowUp\"] = \"\\uE292\";\n    // U+E279  Five-quarter-tones flat\n    Glyphs[\"accidentalFiveQuarterTonesFlatArrowDown\"] = \"\\uE279\";\n    // U+E276  Five-quarter-tones sharp\n    Glyphs[\"accidentalFiveQuarterTonesSharpArrowUp\"] = \"\\uE276\";\n    // U+E260  Flat\n    Glyphs[\"accidentalFlat\"] = \"\\uE260\";\n    // U+ED32  Arabic half-tone flat\n    Glyphs[\"accidentalFlatArabic\"] = \"\\uED32\";\n    // U+E2F1  Flat equal tempered semitone\n    Glyphs[\"accidentalFlatEqualTempered\"] = \"\\uE2F1\";\n    // U+ED53  Lowered flat (Stockhausen)\n    Glyphs[\"accidentalFlatLoweredStockhausen\"] = \"\\uED53\";\n    // U+E2C1  Flat lowered by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowDown\"] = \"\\uE2C1\";\n    // U+E2C6  Flat raised by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowUp\"] = \"\\uE2C6\";\n    // U+ED52  Raised flat (Stockhausen)\n    Glyphs[\"accidentalFlatRaisedStockhausen\"] = \"\\uED52\";\n    // U+ED5C  Repeated flat, note on line (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedLineStockhausen\"] = \"\\uED5C\";\n    // U+ED5B  Repeated flat, note in space (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedSpaceStockhausen\"] = \"\\uED5B\";\n    // U+E2D5  Flat lowered by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsDown\"] = \"\\uE2D5\";\n    // U+E2DA  Flat raised by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsUp\"] = \"\\uE2DA\";\n    // U+E484  Turned flat\n    Glyphs[\"accidentalFlatTurned\"] = \"\\uE484\";\n    // U+E2CB  Flat lowered by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsDown\"] = \"\\uE2CB\";\n    // U+E2D0  Flat raised by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsUp\"] = \"\\uE2D0\";\n    // U+EE65  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaFlatQuarterToneHigher\"] = \"\\uEE65\";\n    // U+EE69  Three quarter-tones lower (Alois Hába)\n    Glyphs[\"accidentalHabaFlatThreeQuarterTonesLower\"] = \"\\uEE69\";\n    // U+EE64  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneHigher\"] = \"\\uEE64\";\n    // U+EE67  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneLower\"] = \"\\uEE67\";\n    // U+EE68  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaSharpQuarterToneLower\"] = \"\\uEE68\";\n    // U+EE66  Three quarter-tones higher (Alois Hába)\n    Glyphs[\"accidentalHabaSharpThreeQuarterTonesHigher\"] = \"\\uEE66\";\n    // U+E29A  Half sharp with arrow down\n    Glyphs[\"accidentalHalfSharpArrowDown\"] = \"\\uE29A\";\n    // U+E299  Half sharp with arrow up\n    Glyphs[\"accidentalHalfSharpArrowUp\"] = \"\\uE299\";\n    // U+E2B6  Thirteen (raise by 65:64)\n    Glyphs[\"accidentalJohnston13\"] = \"\\uE2B6\";\n    // U+E2B7  Inverted 13 (lower by 65:64)\n    Glyphs[\"accidentalJohnston31\"] = \"\\uE2B7\";\n    // U+E2B5  Down arrow (lower by 33:32)\n    Glyphs[\"accidentalJohnstonDown\"] = \"\\uE2B5\";\n    // U+E2B2  Inverted seven (raise by 36:35)\n    Glyphs[\"accidentalJohnstonEl\"] = \"\\uE2B2\";\n    // U+E2B1  Minus (lower by 81:80)\n    Glyphs[\"accidentalJohnstonMinus\"] = \"\\uE2B1\";\n    // U+E2B0  Plus (raise by 81:80)\n    Glyphs[\"accidentalJohnstonPlus\"] = \"\\uE2B0\";\n    // U+E2B3  Seven (lower by 36:35)\n    Glyphs[\"accidentalJohnstonSeven\"] = \"\\uE2B3\";\n    // U+E2B4  Up arrow (raise by 33:32)\n    Glyphs[\"accidentalJohnstonUp\"] = \"\\uE2B4\";\n    // U+E443  Koma (flat)\n    Glyphs[\"accidentalKomaFlat\"] = \"\\uE443\";\n    // U+E444  Koma (sharp)\n    Glyphs[\"accidentalKomaSharp\"] = \"\\uE444\";\n    // U+E460  Koron (quarter tone flat)\n    Glyphs[\"accidentalKoron\"] = \"\\uE460\";\n    // U+E441  Küçük mücenneb (flat)\n    Glyphs[\"accidentalKucukMucennebFlat\"] = \"\\uE441\";\n    // U+E446  Küçük mücenneb (sharp)\n    Glyphs[\"accidentalKucukMucennebSharp\"] = \"\\uE446\";\n    // U+E47D  Large double sharp\n    Glyphs[\"accidentalLargeDoubleSharp\"] = \"\\uE47D\";\n    // U+E2DE  Lower by one septimal comma\n    Glyphs[\"accidentalLowerOneSeptimalComma\"] = \"\\uE2DE\";\n    // U+E2E4  Lower by one tridecimal quartertone\n    Glyphs[\"accidentalLowerOneTridecimalQuartertone\"] = \"\\uE2E4\";\n    // U+E2E2  Lower by one undecimal quartertone\n    Glyphs[\"accidentalLowerOneUndecimalQuartertone\"] = \"\\uE2E2\";\n    // U+E2E0  Lower by two septimal commas\n    Glyphs[\"accidentalLowerTwoSeptimalCommas\"] = \"\\uE2E0\";\n    // U+ED51  Lowered (Stockhausen)\n    Glyphs[\"accidentalLoweredStockhausen\"] = \"\\uED51\";\n    // U+E284  Narrow reversed flat(quarter-tone flat)\n    Glyphs[\"accidentalNarrowReversedFlat\"] = \"\\uE284\";\n    // U+E285  Narrow reversed flat and flat(three-quarter-tones flat)\n    Glyphs[\"accidentalNarrowReversedFlatAndFlat\"] = \"\\uE285\";\n    // U+E261  Natural\n    Glyphs[\"accidentalNatural\"] = \"\\uE261\";\n    // U+ED34  Arabic natural\n    Glyphs[\"accidentalNaturalArabic\"] = \"\\uED34\";\n    // U+E2F2  Natural equal tempered semitone\n    Glyphs[\"accidentalNaturalEqualTempered\"] = \"\\uE2F2\";\n    // U+E267  Natural flat\n    Glyphs[\"accidentalNaturalFlat\"] = \"\\uE267\";\n    // U+ED55  Lowered natural (Stockhausen)\n    Glyphs[\"accidentalNaturalLoweredStockhausen\"] = \"\\uED55\";\n    // U+E2C2  Natural lowered by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowDown\"] = \"\\uE2C2\";\n    // U+E2C7  Natural raised by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowUp\"] = \"\\uE2C7\";\n    // U+ED54  Raised natural (Stockhausen)\n    Glyphs[\"accidentalNaturalRaisedStockhausen\"] = \"\\uED54\";\n    // U+E482  Reversed natural\n    Glyphs[\"accidentalNaturalReversed\"] = \"\\uE482\";\n    // U+E268  Natural sharp\n    Glyphs[\"accidentalNaturalSharp\"] = \"\\uE268\";\n    // U+E2D6  Natural lowered by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsDown\"] = \"\\uE2D6\";\n    // U+E2DB  Natural raised by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsUp\"] = \"\\uE2DB\";\n    // U+E2CC  Natural lowered by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsDown\"] = \"\\uE2CC\";\n    // U+E2D1  Natural raised by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsUp\"] = \"\\uE2D1\";\n    // U+E29C  One and a half sharps with arrow down\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowDown\"] = \"\\uE29C\";\n    // U+E29B  One and a half sharps with arrow up\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowUp\"] = \"\\uE29B\";\n    // U+E48F  One-quarter-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneFlatFerneyhough\"] = \"\\uE48F\";\n    // U+ED59  One-quarter-tone flat (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneFlatStockhausen\"] = \"\\uED59\";\n    // U+E48E  One-quarter-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneSharpFerneyhough\"] = \"\\uE48E\";\n    // U+ED58  One-quarter-tone sharp (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneSharpStockhausen\"] = \"\\uED58\";\n    // U+E48B  One-third-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneFlatFerneyhough\"] = \"\\uE48B\";\n    // U+E48A  One-third-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneSharpFerneyhough\"] = \"\\uE48A\";\n    // U+E26A  Accidental parenthesis, left\n    Glyphs[\"accidentalParensLeft\"] = \"\\uE26A\";\n    // U+E26B  Accidental parenthesis, right\n    Glyphs[\"accidentalParensRight\"] = \"\\uE26B\";\n    // U+E2F5  Lower by one equal tempered quarter-tone\n    Glyphs[\"accidentalQuarterFlatEqualTempered\"] = \"\\uE2F5\";\n    // U+E2F6  Raise by one equal tempered quarter tone\n    Glyphs[\"accidentalQuarterSharpEqualTempered\"] = \"\\uE2F6\";\n    // U+E47F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4\"] = \"\\uE47F\";\n    // U+ED33  Arabic quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArabic\"] = \"\\uED33\";\n    // U+E270  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUp\"] = \"\\uE270\";\n    // U+E480  Filled reversed flat (quarter-tone flat)\n    Glyphs[\"accidentalQuarterToneFlatFilledReversed\"] = \"\\uE480\";\n    // U+E273  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDown\"] = \"\\uE273\";\n    // U+E478  Quarter tone flat (Penderecki)\n    Glyphs[\"accidentalQuarterToneFlatPenderecki\"] = \"\\uE478\";\n    // U+E280  Reversed flat (quarter-tone flat) (Stein)\n    Glyphs[\"accidentalQuarterToneFlatStein\"] = \"\\uE280\";\n    // U+E488  Quarter-tone flat (van Blankenburg)\n    Glyphs[\"accidentalQuarterToneFlatVanBlankenburg\"] = \"\\uE488\";\n    // U+E47E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4\"] = \"\\uE47E\";\n    // U+ED35  Arabic quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArabic\"] = \"\\uED35\";\n    // U+E275  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDown\"] = \"\\uE275\";\n    // U+E472  Quarter tone sharp (Bussotti)\n    Glyphs[\"accidentalQuarterToneSharpBusotti\"] = \"\\uE472\";\n    // U+E272  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUp\"] = \"\\uE272\";\n    // U+E282  Half sharp (quarter-tone sharp) (Stein)\n    Glyphs[\"accidentalQuarterToneSharpStein\"] = \"\\uE282\";\n    // U+E475  Quarter tone sharp with wiggly tail\n    Glyphs[\"accidentalQuarterToneSharpWiggle\"] = \"\\uE475\";\n    // U+E2DF  Raise by one septimal comma\n    Glyphs[\"accidentalRaiseOneSeptimalComma\"] = \"\\uE2DF\";\n    // U+E2E5  Raise by one tridecimal quartertone\n    Glyphs[\"accidentalRaiseOneTridecimalQuartertone\"] = \"\\uE2E5\";\n    // U+E2E3  Raise by one undecimal quartertone\n    Glyphs[\"accidentalRaiseOneUndecimalQuartertone\"] = \"\\uE2E3\";\n    // U+E2E1  Raise by two septimal commas\n    Glyphs[\"accidentalRaiseTwoSeptimalCommas\"] = \"\\uE2E1\";\n    // U+ED50  Raised (Stockhausen)\n    Glyphs[\"accidentalRaisedStockhausen\"] = \"\\uED50\";\n    // U+E295  Reversed flat and flat with arrow down\n    Glyphs[\"accidentalReversedFlatAndFlatArrowDown\"] = \"\\uE295\";\n    // U+E294  Reversed flat and flat with arrow up\n    Glyphs[\"accidentalReversedFlatAndFlatArrowUp\"] = \"\\uE294\";\n    // U+E291  Reversed flat with arrow down\n    Glyphs[\"accidentalReversedFlatArrowDown\"] = \"\\uE291\";\n    // U+E290  Reversed flat with arrow up\n    Glyphs[\"accidentalReversedFlatArrowUp\"] = \"\\uE290\";\n    // U+E262  Sharp\n    Glyphs[\"accidentalSharp\"] = \"\\uE262\";\n    // U+ED36  Arabic half-tone sharp\n    Glyphs[\"accidentalSharpArabic\"] = \"\\uED36\";\n    // U+E2F3  Sharp equal tempered semitone\n    Glyphs[\"accidentalSharpEqualTempered\"] = \"\\uE2F3\";\n    // U+ED57  Lowered sharp (Stockhausen)\n    Glyphs[\"accidentalSharpLoweredStockhausen\"] = \"\\uED57\";\n    // U+E2C3  Sharp lowered by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowDown\"] = \"\\uE2C3\";\n    // U+E2C8  Sharp raised by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowUp\"] = \"\\uE2C8\";\n    // U+E473  One or three quarter tones sharp\n    Glyphs[\"accidentalSharpOneHorizontalStroke\"] = \"\\uE473\";\n    // U+ED56  Raised sharp (Stockhausen)\n    Glyphs[\"accidentalSharpRaisedStockhausen\"] = \"\\uED56\";\n    // U+ED5E  Repeated sharp, note on line (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedLineStockhausen\"] = \"\\uED5E\";\n    // U+ED5D  Repeated sharp, note in space (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedSpaceStockhausen\"] = \"\\uED5D\";\n    // U+E481  Reversed sharp\n    Glyphs[\"accidentalSharpReversed\"] = \"\\uE481\";\n    // U+E269  Sharp sharp\n    Glyphs[\"accidentalSharpSharp\"] = \"\\uE269\";\n    // U+E2D7  Sharp lowered by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsDown\"] = \"\\uE2D7\";\n    // U+E2DC  Sharp raised by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsUp\"] = \"\\uE2DC\";\n    // U+E2CD  Sharp lowered by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsDown\"] = \"\\uE2CD\";\n    // U+E2D2  Sharp raised by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsUp\"] = \"\\uE2D2\";\n    // U+E2A0  1/12 tone low\n    Glyphs[\"accidentalSims12Down\"] = \"\\uE2A0\";\n    // U+E2A3  1/12 tone high\n    Glyphs[\"accidentalSims12Up\"] = \"\\uE2A3\";\n    // U+E2A2  1/4 tone low\n    Glyphs[\"accidentalSims4Down\"] = \"\\uE2A2\";\n    // U+E2A5  1/4 tone high\n    Glyphs[\"accidentalSims4Up\"] = \"\\uE2A5\";\n    // U+E2A1  1/6 tone low\n    Glyphs[\"accidentalSims6Down\"] = \"\\uE2A1\";\n    // U+E2A4  1/6 tone high\n    Glyphs[\"accidentalSims6Up\"] = \"\\uE2A4\";\n    // U+E461  Sori (quarter tone sharp)\n    Glyphs[\"accidentalSori\"] = \"\\uE461\";\n    // U+E477  Byzantine-style Bakiye flat (Tavener)\n    Glyphs[\"accidentalTavenerFlat\"] = \"\\uE477\";\n    // U+E476  Byzantine-style Büyük mücenneb sharp (Tavener)\n    Glyphs[\"accidentalTavenerSharp\"] = \"\\uE476\";\n    // U+ED31  Arabic three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArabic\"] = \"\\uED31\";\n    // U+E271  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDown\"] = \"\\uE271\";\n    // U+E278  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowUp\"] = \"\\uE278\";\n    // U+E489  Three-quarter-tones flat (Couper)\n    Glyphs[\"accidentalThreeQuarterTonesFlatCouper\"] = \"\\uE489\";\n    // U+E486  Three-quarter-tones flat (Grisey)\n    Glyphs[\"accidentalThreeQuarterTonesFlatGrisey\"] = \"\\uE486\";\n    // U+E487  Three-quarter-tones flat (Tartini)\n    Glyphs[\"accidentalThreeQuarterTonesFlatTartini\"] = \"\\uE487\";\n    // U+E281  Reversed flat and flat (three-quarter-tones flat) (Zimmermann)\n    Glyphs[\"accidentalThreeQuarterTonesFlatZimmermann\"] = \"\\uE281\";\n    // U+ED37  Arabic three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArabic\"] = \"\\uED37\";\n    // U+E277  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowDown\"] = \"\\uE277\";\n    // U+E274  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUp\"] = \"\\uE274\";\n    // U+E474  Three quarter tones sharp (Bussotti)\n    Glyphs[\"accidentalThreeQuarterTonesSharpBusotti\"] = \"\\uE474\";\n    // U+E283  One and a half sharps (three-quarter-tones sharp) (Stein)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStein\"] = \"\\uE283\";\n    // U+ED5A  Three-quarter-tones sharp (Stockhausen)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStockhausen\"] = \"\\uED5A\";\n    // U+E266  Triple flat\n    Glyphs[\"accidentalTripleFlat\"] = \"\\uE266\";\n    // U+E265  Triple sharp\n    Glyphs[\"accidentalTripleSharp\"] = \"\\uE265\";\n    // U+E48D  Two-third-tones flat (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesFlatFerneyhough\"] = \"\\uE48D\";\n    // U+E48C  Two-third-tones sharp (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesSharpFerneyhough\"] = \"\\uE48C\";\n    // U+EE61  Accidental down\n    Glyphs[\"accidentalUpsAndDownsDown\"] = \"\\uEE61\";\n    // U+EE63  Accidental less\n    Glyphs[\"accidentalUpsAndDownsLess\"] = \"\\uEE63\";\n    // U+EE62  Accidental more\n    Glyphs[\"accidentalUpsAndDownsMore\"] = \"\\uEE62\";\n    // U+EE60  Accidental up\n    Glyphs[\"accidentalUpsAndDownsUp\"] = \"\\uEE60\";\n    // U+E47C  Wilson minus (5 comma down)\n    Glyphs[\"accidentalWilsonMinus\"] = \"\\uE47C\";\n    // U+E47B  Wilson plus (5 comma up)\n    Glyphs[\"accidentalWilsonPlus\"] = \"\\uE47B\";\n    // U+E434  5/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsFlat\"] = \"\\uE434\";\n    // U+E429  5/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsSharp\"] = \"\\uE429\";\n    // U+E435  11/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsFlat\"] = \"\\uE435\";\n    // U+E42A  11/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsSharp\"] = \"\\uE42A\";\n    // U+E42B  1/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsFlat\"] = \"\\uE42B\";\n    // U+E420  1/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsSharp\"] = \"\\uE420\";\n    // U+E42C  1/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsFlat\"] = \"\\uE42C\";\n    // U+E421  1/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsSharp\"] = \"\\uE421\";\n    // U+E42D  1/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsFlat\"] = \"\\uE42D\";\n    // U+E422  1/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsSharp\"] = \"\\uE422\";\n    // U+E42E  1/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsFlat\"] = \"\\uE42E\";\n    // U+E423  1/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsSharp\"] = \"\\uE423\";\n    // U+E42F  5/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsFlat\"] = \"\\uE42F\";\n    // U+E424  5/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsSharp\"] = \"\\uE424\";\n    // U+E430  1/2 tone flat\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsFlat\"] = \"\\uE430\";\n    // U+E425  1/2 tone sharp\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsSharp\"] = \"\\uE425\";\n    // U+E431  7/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsFlat\"] = \"\\uE431\";\n    // U+E426  7/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsSharp\"] = \"\\uE426\";\n    // U+E432  2/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsFlat\"] = \"\\uE432\";\n    // U+E427  2/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsSharp\"] = \"\\uE427\";\n    // U+E433  3/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsFlat\"] = \"\\uE433\";\n    // U+E428  3/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsSharp\"] = \"\\uE428\";\n    // U+E470  One-third-tone sharp (Xenakis)\n    Glyphs[\"accidentalXenakisOneThirdToneSharp\"] = \"\\uE470\";\n    // U+E471  Two-third-tones sharp (Xenakis)\n    Glyphs[\"accidentalXenakisTwoThirdTonesSharp\"] = \"\\uE471\";\n    // U+E86A  Choralmelodie (Berg)\n    Glyphs[\"analyticsChoralmelodie\"] = \"\\uE86A\";\n    // U+E863  End of stimme\n    Glyphs[\"analyticsEndStimme\"] = \"\\uE863\";\n    // U+E86B  Hauptrhythmus (Berg)\n    Glyphs[\"analyticsHauptrhythmus\"] = \"\\uE86B\";\n    // U+E860  Hauptstimme\n    Glyphs[\"analyticsHauptstimme\"] = \"\\uE860\";\n    // U+E869  Inversion 1\n    Glyphs[\"analyticsInversion1\"] = \"\\uE869\";\n    // U+E861  Nebenstimme\n    Glyphs[\"analyticsNebenstimme\"] = \"\\uE861\";\n    // U+E862  Start of stimme\n    Glyphs[\"analyticsStartStimme\"] = \"\\uE862\";\n    // U+E864  Theme\n    Glyphs[\"analyticsTheme\"] = \"\\uE864\";\n    // U+E868  Theme 1\n    Glyphs[\"analyticsTheme1\"] = \"\\uE868\";\n    // U+E867  Inversion of theme\n    Glyphs[\"analyticsThemeInversion\"] = \"\\uE867\";\n    // U+E865  Retrograde of theme\n    Glyphs[\"analyticsThemeRetrograde\"] = \"\\uE865\";\n    // U+E866  Retrograde inversion of theme\n    Glyphs[\"analyticsThemeRetrogradeInversion\"] = \"\\uE866\";\n    // U+E63C  Arpeggiato\n    Glyphs[\"arpeggiato\"] = \"\\uE63C\";\n    // U+E635  Arpeggiato down\n    Glyphs[\"arpeggiatoDown\"] = \"\\uE635\";\n    // U+E634  Arpeggiato up\n    Glyphs[\"arpeggiatoUp\"] = \"\\uE634\";\n    // U+EB64  Black arrow down (S)\n    Glyphs[\"arrowBlackDown\"] = \"\\uEB64\";\n    // U+EB65  Black arrow down-left (SW)\n    Glyphs[\"arrowBlackDownLeft\"] = \"\\uEB65\";\n    // U+EB63  Black arrow down-right (SE)\n    Glyphs[\"arrowBlackDownRight\"] = \"\\uEB63\";\n    // U+EB66  Black arrow left (W)\n    Glyphs[\"arrowBlackLeft\"] = \"\\uEB66\";\n    // U+EB62  Black arrow right (E)\n    Glyphs[\"arrowBlackRight\"] = \"\\uEB62\";\n    // U+EB60  Black arrow up (N)\n    Glyphs[\"arrowBlackUp\"] = \"\\uEB60\";\n    // U+EB67  Black arrow up-left (NW)\n    Glyphs[\"arrowBlackUpLeft\"] = \"\\uEB67\";\n    // U+EB61  Black arrow up-right (NE)\n    Glyphs[\"arrowBlackUpRight\"] = \"\\uEB61\";\n    // U+EB74  Open arrow down (S)\n    Glyphs[\"arrowOpenDown\"] = \"\\uEB74\";\n    // U+EB75  Open arrow down-left (SW)\n    Glyphs[\"arrowOpenDownLeft\"] = \"\\uEB75\";\n    // U+EB73  Open arrow down-right (SE)\n    Glyphs[\"arrowOpenDownRight\"] = \"\\uEB73\";\n    // U+EB76  Open arrow left (W)\n    Glyphs[\"arrowOpenLeft\"] = \"\\uEB76\";\n    // U+EB72  Open arrow right (E)\n    Glyphs[\"arrowOpenRight\"] = \"\\uEB72\";\n    // U+EB70  Open arrow up (N)\n    Glyphs[\"arrowOpenUp\"] = \"\\uEB70\";\n    // U+EB77  Open arrow up-left (NW)\n    Glyphs[\"arrowOpenUpLeft\"] = \"\\uEB77\";\n    // U+EB71  Open arrow up-right (NE)\n    Glyphs[\"arrowOpenUpRight\"] = \"\\uEB71\";\n    // U+EB6C  White arrow down (S)\n    Glyphs[\"arrowWhiteDown\"] = \"\\uEB6C\";\n    // U+EB6D  White arrow down-left (SW)\n    Glyphs[\"arrowWhiteDownLeft\"] = \"\\uEB6D\";\n    // U+EB6B  White arrow down-right (SE)\n    Glyphs[\"arrowWhiteDownRight\"] = \"\\uEB6B\";\n    // U+EB6E  White arrow left (W)\n    Glyphs[\"arrowWhiteLeft\"] = \"\\uEB6E\";\n    // U+EB6A  White arrow right (E)\n    Glyphs[\"arrowWhiteRight\"] = \"\\uEB6A\";\n    // U+EB68  White arrow up (N)\n    Glyphs[\"arrowWhiteUp\"] = \"\\uEB68\";\n    // U+EB6F  White arrow up-left (NW)\n    Glyphs[\"arrowWhiteUpLeft\"] = \"\\uEB6F\";\n    // U+EB69  White arrow up-right (NE)\n    Glyphs[\"arrowWhiteUpRight\"] = \"\\uEB69\";\n    // U+EB7C  Black arrowhead down (S)\n    Glyphs[\"arrowheadBlackDown\"] = \"\\uEB7C\";\n    // U+EB7D  Black arrowhead down-left (SW)\n    Glyphs[\"arrowheadBlackDownLeft\"] = \"\\uEB7D\";\n    // U+EB7B  Black arrowhead down-right (SE)\n    Glyphs[\"arrowheadBlackDownRight\"] = \"\\uEB7B\";\n    // U+EB7E  Black arrowhead left (W)\n    Glyphs[\"arrowheadBlackLeft\"] = \"\\uEB7E\";\n    // U+EB7A  Black arrowhead right (E)\n    Glyphs[\"arrowheadBlackRight\"] = \"\\uEB7A\";\n    // U+EB78  Black arrowhead up (N)\n    Glyphs[\"arrowheadBlackUp\"] = \"\\uEB78\";\n    // U+EB7F  Black arrowhead up-left (NW)\n    Glyphs[\"arrowheadBlackUpLeft\"] = \"\\uEB7F\";\n    // U+EB79  Black arrowhead up-right (NE)\n    Glyphs[\"arrowheadBlackUpRight\"] = \"\\uEB79\";\n    // U+EB8C  Open arrowhead down (S)\n    Glyphs[\"arrowheadOpenDown\"] = \"\\uEB8C\";\n    // U+EB8D  Open arrowhead down-left (SW)\n    Glyphs[\"arrowheadOpenDownLeft\"] = \"\\uEB8D\";\n    // U+EB8B  Open arrowhead down-right (SE)\n    Glyphs[\"arrowheadOpenDownRight\"] = \"\\uEB8B\";\n    // U+EB8E  Open arrowhead left (W)\n    Glyphs[\"arrowheadOpenLeft\"] = \"\\uEB8E\";\n    // U+EB8A  Open arrowhead right (E)\n    Glyphs[\"arrowheadOpenRight\"] = \"\\uEB8A\";\n    // U+EB88  Open arrowhead up (N)\n    Glyphs[\"arrowheadOpenUp\"] = \"\\uEB88\";\n    // U+EB8F  Open arrowhead up-left (NW)\n    Glyphs[\"arrowheadOpenUpLeft\"] = \"\\uEB8F\";\n    // U+EB89  Open arrowhead up-right (NE)\n    Glyphs[\"arrowheadOpenUpRight\"] = \"\\uEB89\";\n    // U+EB84  White arrowhead down (S)\n    Glyphs[\"arrowheadWhiteDown\"] = \"\\uEB84\";\n    // U+EB85  White arrowhead down-left (SW)\n    Glyphs[\"arrowheadWhiteDownLeft\"] = \"\\uEB85\";\n    // U+EB83  White arrowhead down-right (SE)\n    Glyphs[\"arrowheadWhiteDownRight\"] = \"\\uEB83\";\n    // U+EB86  White arrowhead left (W)\n    Glyphs[\"arrowheadWhiteLeft\"] = \"\\uEB86\";\n    // U+EB82  White arrowhead right (E)\n    Glyphs[\"arrowheadWhiteRight\"] = \"\\uEB82\";\n    // U+EB80  White arrowhead up (N)\n    Glyphs[\"arrowheadWhiteUp\"] = \"\\uEB80\";\n    // U+EB87  White arrowhead up-left (NW)\n    Glyphs[\"arrowheadWhiteUpLeft\"] = \"\\uEB87\";\n    // U+EB81  White arrowhead up-right (NE)\n    Glyphs[\"arrowheadWhiteUpRight\"] = \"\\uEB81\";\n    // U+E4A0  Accent above\n    Glyphs[\"articAccentAbove\"] = \"\\uE4A0\";\n    // U+E4A1  Accent below\n    Glyphs[\"articAccentBelow\"] = \"\\uE4A1\";\n    // U+E4B0  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAbove\"] = \"\\uE4B0\";\n    // U+E4B1  Accent-staccato below\n    Glyphs[\"articAccentStaccatoBelow\"] = \"\\uE4B1\";\n    // U+E4BA  Laissez vibrer (l.v.) above\n    Glyphs[\"articLaissezVibrerAbove\"] = \"\\uE4BA\";\n    // U+E4BB  Laissez vibrer (l.v.) below\n    Glyphs[\"articLaissezVibrerBelow\"] = \"\\uE4BB\";\n    // U+E4AC  Marcato above\n    Glyphs[\"articMarcatoAbove\"] = \"\\uE4AC\";\n    // U+E4AD  Marcato below\n    Glyphs[\"articMarcatoBelow\"] = \"\\uE4AD\";\n    // U+E4AE  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAbove\"] = \"\\uE4AE\";\n    // U+E4AF  Marcato-staccato below\n    Glyphs[\"articMarcatoStaccatoBelow\"] = \"\\uE4AF\";\n    // U+E4BC  Marcato-tenuto above\n    Glyphs[\"articMarcatoTenutoAbove\"] = \"\\uE4BC\";\n    // U+E4BD  Marcato-tenuto below\n    Glyphs[\"articMarcatoTenutoBelow\"] = \"\\uE4BD\";\n    // U+ED40  Soft accent above\n    Glyphs[\"articSoftAccentAbove\"] = \"\\uED40\";\n    // U+ED41  Soft accent below\n    Glyphs[\"articSoftAccentBelow\"] = \"\\uED41\";\n    // U+ED42  Soft accent-staccato above\n    Glyphs[\"articSoftAccentStaccatoAbove\"] = \"\\uED42\";\n    // U+ED43  Soft accent-staccato below\n    Glyphs[\"articSoftAccentStaccatoBelow\"] = \"\\uED43\";\n    // U+ED44  Soft accent-tenuto above\n    Glyphs[\"articSoftAccentTenutoAbove\"] = \"\\uED44\";\n    // U+ED45  Soft accent-tenuto below\n    Glyphs[\"articSoftAccentTenutoBelow\"] = \"\\uED45\";\n    // U+ED46  Soft accent-tenuto-staccato above\n    Glyphs[\"articSoftAccentTenutoStaccatoAbove\"] = \"\\uED46\";\n    // U+ED47  Soft accent-tenuto-staccato below\n    Glyphs[\"articSoftAccentTenutoStaccatoBelow\"] = \"\\uED47\";\n    // U+E4A6  Staccatissimo above\n    Glyphs[\"articStaccatissimoAbove\"] = \"\\uE4A6\";\n    // U+E4A7  Staccatissimo below\n    Glyphs[\"articStaccatissimoBelow\"] = \"\\uE4A7\";\n    // U+E4AA  Staccatissimo stroke above\n    Glyphs[\"articStaccatissimoStrokeAbove\"] = \"\\uE4AA\";\n    // U+E4AB  Staccatissimo stroke below\n    Glyphs[\"articStaccatissimoStrokeBelow\"] = \"\\uE4AB\";\n    // U+E4A8  Staccatissimo wedge above\n    Glyphs[\"articStaccatissimoWedgeAbove\"] = \"\\uE4A8\";\n    // U+E4A9  Staccatissimo wedge below\n    Glyphs[\"articStaccatissimoWedgeBelow\"] = \"\\uE4A9\";\n    // U+E4A2  Staccato above\n    Glyphs[\"articStaccatoAbove\"] = \"\\uE4A2\";\n    // U+E4A3  Staccato below\n    Glyphs[\"articStaccatoBelow\"] = \"\\uE4A3\";\n    // U+E4B6  Stress above\n    Glyphs[\"articStressAbove\"] = \"\\uE4B6\";\n    // U+E4B7  Stress below\n    Glyphs[\"articStressBelow\"] = \"\\uE4B7\";\n    // U+E4A4  Tenuto above\n    Glyphs[\"articTenutoAbove\"] = \"\\uE4A4\";\n    // U+E4B4  Tenuto-accent above\n    Glyphs[\"articTenutoAccentAbove\"] = \"\\uE4B4\";\n    // U+E4B5  Tenuto-accent below\n    Glyphs[\"articTenutoAccentBelow\"] = \"\\uE4B5\";\n    // U+E4A5  Tenuto below\n    Glyphs[\"articTenutoBelow\"] = \"\\uE4A5\";\n    // U+E4B2  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAbove\"] = \"\\uE4B2\";\n    // U+E4B3  Louré (tenuto-staccato) below\n    Glyphs[\"articTenutoStaccatoBelow\"] = \"\\uE4B3\";\n    // U+E4B8  Unstress above\n    Glyphs[\"articUnstressAbove\"] = \"\\uE4B8\";\n    // U+E4B9  Unstress below\n    Glyphs[\"articUnstressBelow\"] = \"\\uE4B9\";\n    // U+E1E7  Augmentation dot\n    Glyphs[\"augmentationDot\"] = \"\\uE1E7\";\n    // U+E036  Dashed barline\n    Glyphs[\"barlineDashed\"] = \"\\uE036\";\n    // U+E037  Dotted barline\n    Glyphs[\"barlineDotted\"] = \"\\uE037\";\n    // U+E031  Double barline\n    Glyphs[\"barlineDouble\"] = \"\\uE031\";\n    // U+E032  Final barline\n    Glyphs[\"barlineFinal\"] = \"\\uE032\";\n    // U+E034  Heavy barline\n    Glyphs[\"barlineHeavy\"] = \"\\uE034\";\n    // U+E035  Heavy double barline\n    Glyphs[\"barlineHeavyHeavy\"] = \"\\uE035\";\n    // U+E033  Reverse final barline\n    Glyphs[\"barlineReverseFinal\"] = \"\\uE033\";\n    // U+E038  Short barline\n    Glyphs[\"barlineShort\"] = \"\\uE038\";\n    // U+E030  Single barline\n    Glyphs[\"barlineSingle\"] = \"\\uE030\";\n    // U+E039  Tick barline\n    Glyphs[\"barlineTick\"] = \"\\uE039\";\n    // U+EAF4  Accel./rit. beam 1 (widest)\n    Glyphs[\"beamAccelRit1\"] = \"\\uEAF4\";\n    // U+EAFD  Accel./rit. beam 10\n    Glyphs[\"beamAccelRit10\"] = \"\\uEAFD\";\n    // U+EAFE  Accel./rit. beam 11\n    Glyphs[\"beamAccelRit11\"] = \"\\uEAFE\";\n    // U+EAFF  Accel./rit. beam 12\n    Glyphs[\"beamAccelRit12\"] = \"\\uEAFF\";\n    // U+EB00  Accel./rit. beam 13\n    Glyphs[\"beamAccelRit13\"] = \"\\uEB00\";\n    // U+EB01  Accel./rit. beam 14\n    Glyphs[\"beamAccelRit14\"] = \"\\uEB01\";\n    // U+EB02  Accel./rit. beam 15 (narrowest)\n    Glyphs[\"beamAccelRit15\"] = \"\\uEB02\";\n    // U+EAF5  Accel./rit. beam 2\n    Glyphs[\"beamAccelRit2\"] = \"\\uEAF5\";\n    // U+EAF6  Accel./rit. beam 3\n    Glyphs[\"beamAccelRit3\"] = \"\\uEAF6\";\n    // U+EAF7  Accel./rit. beam 4\n    Glyphs[\"beamAccelRit4\"] = \"\\uEAF7\";\n    // U+EAF8  Accel./rit. beam 5\n    Glyphs[\"beamAccelRit5\"] = \"\\uEAF8\";\n    // U+EAF9  Accel./rit. beam 6\n    Glyphs[\"beamAccelRit6\"] = \"\\uEAF9\";\n    // U+EAFA  Accel./rit. beam 7\n    Glyphs[\"beamAccelRit7\"] = \"\\uEAFA\";\n    // U+EAFB  Accel./rit. beam 8\n    Glyphs[\"beamAccelRit8\"] = \"\\uEAFB\";\n    // U+EAFC  Accel./rit. beam 9\n    Glyphs[\"beamAccelRit9\"] = \"\\uEAFC\";\n    // U+EB03  Accel./rit. beam terminating line\n    Glyphs[\"beamAccelRitFinal\"] = \"\\uEB03\";\n    // U+E000  Brace\n    Glyphs[\"brace\"] = \"\\uE000\";\n    // U+E002  Bracket\n    Glyphs[\"bracket\"] = \"\\uE002\";\n    // U+E004  Bracket bottom\n    Glyphs[\"bracketBottom\"] = \"\\uE004\";\n    // U+E003  Bracket top\n    Glyphs[\"bracketTop\"] = \"\\uE003\";\n    // U+E5E3  Bend\n    Glyphs[\"brassBend\"] = \"\\uE5E3\";\n    // U+E5D6  Doit, long\n    Glyphs[\"brassDoitLong\"] = \"\\uE5D6\";\n    // U+E5D5  Doit, medium\n    Glyphs[\"brassDoitMedium\"] = \"\\uE5D5\";\n    // U+E5D4  Doit, short\n    Glyphs[\"brassDoitShort\"] = \"\\uE5D4\";\n    // U+E5D9  Lip fall, long\n    Glyphs[\"brassFallLipLong\"] = \"\\uE5D9\";\n    // U+E5D8  Lip fall, medium\n    Glyphs[\"brassFallLipMedium\"] = \"\\uE5D8\";\n    // U+E5D7  Lip fall, short\n    Glyphs[\"brassFallLipShort\"] = \"\\uE5D7\";\n    // U+E5DF  Rough fall, long\n    Glyphs[\"brassFallRoughLong\"] = \"\\uE5DF\";\n    // U+E5DE  Rough fall, medium\n    Glyphs[\"brassFallRoughMedium\"] = \"\\uE5DE\";\n    // U+E5DD  Rough fall, short\n    Glyphs[\"brassFallRoughShort\"] = \"\\uE5DD\";\n    // U+E5DC  Smooth fall, long\n    Glyphs[\"brassFallSmoothLong\"] = \"\\uE5DC\";\n    // U+E5DB  Smooth fall, medium\n    Glyphs[\"brassFallSmoothMedium\"] = \"\\uE5DB\";\n    // U+E5DA  Smooth fall, short\n    Glyphs[\"brassFallSmoothShort\"] = \"\\uE5DA\";\n    // U+E5E1  Flip\n    Glyphs[\"brassFlip\"] = \"\\uE5E1\";\n    // U+E5E8  Harmon mute, stem in\n    Glyphs[\"brassHarmonMuteClosed\"] = \"\\uE5E8\";\n    // U+E5E9  Harmon mute, stem extended, left\n    Glyphs[\"brassHarmonMuteStemHalfLeft\"] = \"\\uE5E9\";\n    // U+E5EA  Harmon mute, stem extended, right\n    Glyphs[\"brassHarmonMuteStemHalfRight\"] = \"\\uE5EA\";\n    // U+E5EB  Harmon mute, stem out\n    Glyphs[\"brassHarmonMuteStemOpen\"] = \"\\uE5EB\";\n    // U+E5E4  Jazz turn\n    Glyphs[\"brassJazzTurn\"] = \"\\uE5E4\";\n    // U+E5D3  Lift, long\n    Glyphs[\"brassLiftLong\"] = \"\\uE5D3\";\n    // U+E5D2  Lift, medium\n    Glyphs[\"brassLiftMedium\"] = \"\\uE5D2\";\n    // U+E5D1  Lift, short\n    Glyphs[\"brassLiftShort\"] = \"\\uE5D1\";\n    // U+E5EE  Smooth lift, long\n    Glyphs[\"brassLiftSmoothLong\"] = \"\\uE5EE\";\n    // U+E5ED  Smooth lift, medium\n    Glyphs[\"brassLiftSmoothMedium\"] = \"\\uE5ED\";\n    // U+E5EC  Smooth lift, short\n    Glyphs[\"brassLiftSmoothShort\"] = \"\\uE5EC\";\n    // U+E5E5  Muted (closed)\n    Glyphs[\"brassMuteClosed\"] = \"\\uE5E5\";\n    // U+E5E6  Half-muted (half-closed)\n    Glyphs[\"brassMuteHalfClosed\"] = \"\\uE5E6\";\n    // U+E5E7  Open\n    Glyphs[\"brassMuteOpen\"] = \"\\uE5E7\";\n    // U+E5E0  Plop\n    Glyphs[\"brassPlop\"] = \"\\uE5E0\";\n    // U+E5D0  Scoop\n    Glyphs[\"brassScoop\"] = \"\\uE5D0\";\n    // U+E5E2  Smear\n    Glyphs[\"brassSmear\"] = \"\\uE5E2\";\n    // U+E5EF  Valve trill\n    Glyphs[\"brassValveTrill\"] = \"\\uE5EF\";\n    // U+E4CE  Breath mark (comma)\n    Glyphs[\"breathMarkComma\"] = \"\\uE4CE\";\n    // U+E4D5  Breath mark (Salzedo)\n    Glyphs[\"breathMarkSalzedo\"] = \"\\uE4D5\";\n    // U+E4CF  Breath mark (tick-like)\n    Glyphs[\"breathMarkTick\"] = \"\\uE4CF\";\n    // U+E4D0  Breath mark (upbow-like)\n    Glyphs[\"breathMarkUpbow\"] = \"\\uE4D0\";\n    // U+E078  Bridge clef\n    Glyphs[\"bridgeClef\"] = \"\\uE078\";\n    // U+E22A  Buzz roll\n    Glyphs[\"buzzRoll\"] = \"\\uE22A\";\n    // U+E05C  C clef\n    Glyphs[\"cClef\"] = \"\\uE05C\";\n    // U+E05D  C clef ottava bassa\n    Glyphs[\"cClef8vb\"] = \"\\uE05D\";\n    // U+E05F  C clef, arrow down\n    Glyphs[\"cClefArrowDown\"] = \"\\uE05F\";\n    // U+E05E  C clef, arrow up\n    Glyphs[\"cClefArrowUp\"] = \"\\uE05E\";\n    // U+E07B  C clef change\n    Glyphs[\"cClefChange\"] = \"\\uE07B\";\n    // U+E061  Combining C clef\n    Glyphs[\"cClefCombining\"] = \"\\uE061\";\n    // U+E075  Reversed C clef\n    Glyphs[\"cClefReversed\"] = \"\\uE075\";\n    // U+E060  C clef (19th century)\n    Glyphs[\"cClefSquare\"] = \"\\uE060\";\n    // U+E4D1  Caesura\n    Glyphs[\"caesura\"] = \"\\uE4D1\";\n    // U+E4D4  Curved caesura\n    Glyphs[\"caesuraCurved\"] = \"\\uE4D4\";\n    // U+E4D3  Short caesura\n    Glyphs[\"caesuraShort\"] = \"\\uE4D3\";\n    // U+E4D7  Single stroke caesura\n    Glyphs[\"caesuraSingleStroke\"] = \"\\uE4D7\";\n    // U+E4D2  Thick caesura\n    Glyphs[\"caesuraThick\"] = \"\\uE4D2\";\n    // U+E9D6  Accentus above\n    Glyphs[\"chantAccentusAbove\"] = \"\\uE9D6\";\n    // U+E9D7  Accentus below\n    Glyphs[\"chantAccentusBelow\"] = \"\\uE9D7\";\n    // U+E994  Punctum auctum, ascending\n    Glyphs[\"chantAuctumAsc\"] = \"\\uE994\";\n    // U+E995  Punctum auctum, descending\n    Glyphs[\"chantAuctumDesc\"] = \"\\uE995\";\n    // U+E9D9  Augmentum (mora)\n    Glyphs[\"chantAugmentum\"] = \"\\uE9D9\";\n    // U+E8F8  Caesura\n    Glyphs[\"chantCaesura\"] = \"\\uE8F8\";\n    // U+E906  Plainchant C clef\n    Glyphs[\"chantCclef\"] = \"\\uE906\";\n    // U+E9D2  Circulus above\n    Glyphs[\"chantCirculusAbove\"] = \"\\uE9D2\";\n    // U+E9D3  Circulus below\n    Glyphs[\"chantCirculusBelow\"] = \"\\uE9D3\";\n    // U+E9BD  Connecting line, ascending 2nd\n    Glyphs[\"chantConnectingLineAsc2nd\"] = \"\\uE9BD\";\n    // U+E9BE  Connecting line, ascending 3rd\n    Glyphs[\"chantConnectingLineAsc3rd\"] = \"\\uE9BE\";\n    // U+E9BF  Connecting line, ascending 4th\n    Glyphs[\"chantConnectingLineAsc4th\"] = \"\\uE9BF\";\n    // U+E9C0  Connecting line, ascending 5th\n    Glyphs[\"chantConnectingLineAsc5th\"] = \"\\uE9C0\";\n    // U+E9C1  Connecting line, ascending 6th\n    Glyphs[\"chantConnectingLineAsc6th\"] = \"\\uE9C1\";\n    // U+EA08  Plainchant custos, stem down, high position\n    Glyphs[\"chantCustosStemDownPosHigh\"] = \"\\uEA08\";\n    // U+EA09  Plainchant custos, stem down, highest position\n    Glyphs[\"chantCustosStemDownPosHighest\"] = \"\\uEA09\";\n    // U+EA07  Plainchant custos, stem down, middle position\n    Glyphs[\"chantCustosStemDownPosMiddle\"] = \"\\uEA07\";\n    // U+EA05  Plainchant custos, stem up, low position\n    Glyphs[\"chantCustosStemUpPosLow\"] = \"\\uEA05\";\n    // U+EA04  Plainchant custos, stem up, lowest position\n    Glyphs[\"chantCustosStemUpPosLowest\"] = \"\\uEA04\";\n    // U+EA06  Plainchant custos, stem up, middle position\n    Glyphs[\"chantCustosStemUpPosMiddle\"] = \"\\uEA06\";\n    // U+E9B3  Punctum deminutum, lower\n    Glyphs[\"chantDeminutumLower\"] = \"\\uE9B3\";\n    // U+E9B2  Punctum deminutum, upper\n    Glyphs[\"chantDeminutumUpper\"] = \"\\uE9B2\";\n    // U+E8F6  Divisio finalis\n    Glyphs[\"chantDivisioFinalis\"] = \"\\uE8F6\";\n    // U+E8F4  Divisio maior\n    Glyphs[\"chantDivisioMaior\"] = \"\\uE8F4\";\n    // U+E8F5  Divisio maxima\n    Glyphs[\"chantDivisioMaxima\"] = \"\\uE8F5\";\n    // U+E8F3  Divisio minima\n    Glyphs[\"chantDivisioMinima\"] = \"\\uE8F3\";\n    // U+E9B4  Entry line, ascending 2nd\n    Glyphs[\"chantEntryLineAsc2nd\"] = \"\\uE9B4\";\n    // U+E9B5  Entry line, ascending 3rd\n    Glyphs[\"chantEntryLineAsc3rd\"] = \"\\uE9B5\";\n    // U+E9B6  Entry line, ascending 4th\n    Glyphs[\"chantEntryLineAsc4th\"] = \"\\uE9B6\";\n    // U+E9B7  Entry line, ascending 5th\n    Glyphs[\"chantEntryLineAsc5th\"] = \"\\uE9B7\";\n    // U+E9B8  Entry line, ascending 6th\n    Glyphs[\"chantEntryLineAsc6th\"] = \"\\uE9B8\";\n    // U+E9D8  Episema\n    Glyphs[\"chantEpisema\"] = \"\\uE9D8\";\n    // U+E902  Plainchant F clef\n    Glyphs[\"chantFclef\"] = \"\\uE902\";\n    // U+E9D0  Ictus above\n    Glyphs[\"chantIctusAbove\"] = \"\\uE9D0\";\n    // U+E9D1  Ictus below\n    Glyphs[\"chantIctusBelow\"] = \"\\uE9D1\";\n    // U+E9B9  Ligated stroke, descending 2nd\n    Glyphs[\"chantLigaturaDesc2nd\"] = \"\\uE9B9\";\n    // U+E9BA  Ligated stroke, descending 3rd\n    Glyphs[\"chantLigaturaDesc3rd\"] = \"\\uE9BA\";\n    // U+E9BB  Ligated stroke, descending 4th\n    Glyphs[\"chantLigaturaDesc4th\"] = \"\\uE9BB\";\n    // U+E9BC  Ligated stroke, descending 5th\n    Glyphs[\"chantLigaturaDesc5th\"] = \"\\uE9BC\";\n    // U+E99C  Oriscus ascending\n    Glyphs[\"chantOriscusAscending\"] = \"\\uE99C\";\n    // U+E99D  Oriscus descending\n    Glyphs[\"chantOriscusDescending\"] = \"\\uE99D\";\n    // U+E99E  Oriscus liquescens\n    Glyphs[\"chantOriscusLiquescens\"] = \"\\uE99E\";\n    // U+E9B0  Podatus, lower\n    Glyphs[\"chantPodatusLower\"] = \"\\uE9B0\";\n    // U+E9B1  Podatus, upper\n    Glyphs[\"chantPodatusUpper\"] = \"\\uE9B1\";\n    // U+E990  Punctum\n    Glyphs[\"chantPunctum\"] = \"\\uE990\";\n    // U+E998  Punctum cavum\n    Glyphs[\"chantPunctumCavum\"] = \"\\uE998\";\n    // U+E9A1  Punctum deminutum\n    Glyphs[\"chantPunctumDeminutum\"] = \"\\uE9A1\";\n    // U+E991  Punctum inclinatum\n    Glyphs[\"chantPunctumInclinatum\"] = \"\\uE991\";\n    // U+E992  Punctum inclinatum auctum\n    Glyphs[\"chantPunctumInclinatumAuctum\"] = \"\\uE992\";\n    // U+E993  Punctum inclinatum deminutum\n    Glyphs[\"chantPunctumInclinatumDeminutum\"] = \"\\uE993\";\n    // U+E999  Punctum linea\n    Glyphs[\"chantPunctumLinea\"] = \"\\uE999\";\n    // U+E99A  Punctum linea cavum\n    Glyphs[\"chantPunctumLineaCavum\"] = \"\\uE99A\";\n    // U+E996  Punctum virga\n    Glyphs[\"chantPunctumVirga\"] = \"\\uE996\";\n    // U+E997  Punctum virga, reversed\n    Glyphs[\"chantPunctumVirgaReversed\"] = \"\\uE997\";\n    // U+E99B  Quilisma\n    Glyphs[\"chantQuilisma\"] = \"\\uE99B\";\n    // U+E9D4  Semicirculus above\n    Glyphs[\"chantSemicirculusAbove\"] = \"\\uE9D4\";\n    // U+E9D5  Semicirculus below\n    Glyphs[\"chantSemicirculusBelow\"] = \"\\uE9D5\";\n    // U+E8F0  Plainchant staff\n    Glyphs[\"chantStaff\"] = \"\\uE8F0\";\n    // U+E8F2  Plainchant staff (narrow)\n    Glyphs[\"chantStaffNarrow\"] = \"\\uE8F2\";\n    // U+E8F1  Plainchant staff (wide)\n    Glyphs[\"chantStaffWide\"] = \"\\uE8F1\";\n    // U+E99F  Strophicus\n    Glyphs[\"chantStrophicus\"] = \"\\uE99F\";\n    // U+E9A0  Strophicus auctus\n    Glyphs[\"chantStrophicusAuctus\"] = \"\\uE9A0\";\n    // U+E9C2  Strophicus liquescens, 2nd\n    Glyphs[\"chantStrophicusLiquescens2nd\"] = \"\\uE9C2\";\n    // U+E9C3  Strophicus liquescens, 3rd\n    Glyphs[\"chantStrophicusLiquescens3rd\"] = \"\\uE9C3\";\n    // U+E9C4  Strophicus liquescens, 4th\n    Glyphs[\"chantStrophicusLiquescens4th\"] = \"\\uE9C4\";\n    // U+E9C5  Strophicus liquescens, 5th\n    Glyphs[\"chantStrophicusLiquescens5th\"] = \"\\uE9C5\";\n    // U+E8F7  Virgula\n    Glyphs[\"chantVirgula\"] = \"\\uE8F7\";\n    // U+E07E  15 for clefs\n    Glyphs[\"clef15\"] = \"\\uE07E\";\n    // U+E07D  8 for clefs\n    Glyphs[\"clef8\"] = \"\\uE07D\";\n    // U+E07F  Combining clef change\n    Glyphs[\"clefChangeCombining\"] = \"\\uE07F\";\n    // U+E048  Coda\n    Glyphs[\"coda\"] = \"\\uE048\";\n    // U+E049  Square coda\n    Glyphs[\"codaSquare\"] = \"\\uE049\";\n    // U+E897  Beat 2, compound time\n    Glyphs[\"conductorBeat2Compound\"] = \"\\uE897\";\n    // U+E894  Beat 2, simple time\n    Glyphs[\"conductorBeat2Simple\"] = \"\\uE894\";\n    // U+E898  Beat 3, compound time\n    Glyphs[\"conductorBeat3Compound\"] = \"\\uE898\";\n    // U+E895  Beat 3, simple time\n    Glyphs[\"conductorBeat3Simple\"] = \"\\uE895\";\n    // U+E899  Beat 4, compound time\n    Glyphs[\"conductorBeat4Compound\"] = \"\\uE899\";\n    // U+E896  Beat 4, simple time\n    Glyphs[\"conductorBeat4Simple\"] = \"\\uE896\";\n    // U+E891  Left-hand beat or cue\n    Glyphs[\"conductorLeftBeat\"] = \"\\uE891\";\n    // U+E892  Right-hand beat or cue\n    Glyphs[\"conductorRightBeat\"] = \"\\uE892\";\n    // U+E890  Strong beat or cue\n    Glyphs[\"conductorStrongBeat\"] = \"\\uE890\";\n    // U+E89A  Unconducted/free passages\n    Glyphs[\"conductorUnconducted\"] = \"\\uE89A\";\n    // U+E893  Weak beat or cue\n    Glyphs[\"conductorWeakBeat\"] = \"\\uE893\";\n    // U+E8E0  Begin beam\n    Glyphs[\"controlBeginBeam\"] = \"\\uE8E0\";\n    // U+E8E6  Begin phrase\n    Glyphs[\"controlBeginPhrase\"] = \"\\uE8E6\";\n    // U+E8E4  Begin slur\n    Glyphs[\"controlBeginSlur\"] = \"\\uE8E4\";\n    // U+E8E2  Begin tie\n    Glyphs[\"controlBeginTie\"] = \"\\uE8E2\";\n    // U+E8E1  End beam\n    Glyphs[\"controlEndBeam\"] = \"\\uE8E1\";\n    // U+E8E7  End phrase\n    Glyphs[\"controlEndPhrase\"] = \"\\uE8E7\";\n    // U+E8E5  End slur\n    Glyphs[\"controlEndSlur\"] = \"\\uE8E5\";\n    // U+E8E3  End tie\n    Glyphs[\"controlEndTie\"] = \"\\uE8E3\";\n    // U+ED64  Double flat\n    Glyphs[\"csymAccidentalDoubleFlat\"] = \"\\uED64\";\n    // U+ED63  Double sharp\n    Glyphs[\"csymAccidentalDoubleSharp\"] = \"\\uED63\";\n    // U+ED60  Flat\n    Glyphs[\"csymAccidentalFlat\"] = \"\\uED60\";\n    // U+ED61  Natural\n    Glyphs[\"csymAccidentalNatural\"] = \"\\uED61\";\n    // U+ED62  Sharp\n    Glyphs[\"csymAccidentalSharp\"] = \"\\uED62\";\n    // U+ED66  Triple flat\n    Glyphs[\"csymAccidentalTripleFlat\"] = \"\\uED66\";\n    // U+ED65  Triple sharp\n    Glyphs[\"csymAccidentalTripleSharp\"] = \"\\uED65\";\n    // U+E87B  Slash for altered bass note\n    Glyphs[\"csymAlteredBassSlash\"] = \"\\uE87B\";\n    // U+E872  Augmented\n    Glyphs[\"csymAugmented\"] = \"\\uE872\";\n    // U+E877  Double-height left bracket\n    Glyphs[\"csymBracketLeftTall\"] = \"\\uE877\";\n    // U+E878  Double-height right bracket\n    Glyphs[\"csymBracketRightTall\"] = \"\\uE878\";\n    // U+E87C  Slash for chord symbols arranged diagonally\n    Glyphs[\"csymDiagonalArrangementSlash\"] = \"\\uE87C\";\n    // U+E870  Diminished\n    Glyphs[\"csymDiminished\"] = \"\\uE870\";\n    // U+E871  Half-diminished\n    Glyphs[\"csymHalfDiminished\"] = \"\\uE871\";\n    // U+E873  Major seventh\n    Glyphs[\"csymMajorSeventh\"] = \"\\uE873\";\n    // U+E874  Minor\n    Glyphs[\"csymMinor\"] = \"\\uE874\";\n    // U+E875  Double-height left parenthesis\n    Glyphs[\"csymParensLeftTall\"] = \"\\uE875\";\n    // U+E879  Triple-height left parenthesis\n    Glyphs[\"csymParensLeftVeryTall\"] = \"\\uE879\";\n    // U+E876  Double-height right parenthesis\n    Glyphs[\"csymParensRightTall\"] = \"\\uE876\";\n    // U+E87A  Triple-height right parenthesis\n    Glyphs[\"csymParensRightVeryTall\"] = \"\\uE87A\";\n    // U+E4D6  Curlew (Britten)\n    Glyphs[\"curlewSign\"] = \"\\uE4D6\";\n    // U+E046  Da capo\n    Glyphs[\"daCapo\"] = \"\\uE046\";\n    // U+E045  Dal segno\n    Glyphs[\"dalSegno\"] = \"\\uE045\";\n    // U+EA3C  Daseian excellentes 1\n    Glyphs[\"daseianExcellentes1\"] = \"\\uEA3C\";\n    // U+EA3D  Daseian excellentes 2\n    Glyphs[\"daseianExcellentes2\"] = \"\\uEA3D\";\n    // U+EA3E  Daseian excellentes 3\n    Glyphs[\"daseianExcellentes3\"] = \"\\uEA3E\";\n    // U+EA3F  Daseian excellentes 4\n    Glyphs[\"daseianExcellentes4\"] = \"\\uEA3F\";\n    // U+EA34  Daseian finales 1\n    Glyphs[\"daseianFinales1\"] = \"\\uEA34\";\n    // U+EA35  Daseian finales 2\n    Glyphs[\"daseianFinales2\"] = \"\\uEA35\";\n    // U+EA36  Daseian finales 3\n    Glyphs[\"daseianFinales3\"] = \"\\uEA36\";\n    // U+EA37  Daseian finales 4\n    Glyphs[\"daseianFinales4\"] = \"\\uEA37\";\n    // U+EA30  Daseian graves 1\n    Glyphs[\"daseianGraves1\"] = \"\\uEA30\";\n    // U+EA31  Daseian graves 2\n    Glyphs[\"daseianGraves2\"] = \"\\uEA31\";\n    // U+EA32  Daseian graves 3\n    Glyphs[\"daseianGraves3\"] = \"\\uEA32\";\n    // U+EA33  Daseian graves 4\n    Glyphs[\"daseianGraves4\"] = \"\\uEA33\";\n    // U+EA40  Daseian residua 1\n    Glyphs[\"daseianResidua1\"] = \"\\uEA40\";\n    // U+EA41  Daseian residua 2\n    Glyphs[\"daseianResidua2\"] = \"\\uEA41\";\n    // U+EA38  Daseian superiores 1\n    Glyphs[\"daseianSuperiores1\"] = \"\\uEA38\";\n    // U+EA39  Daseian superiores 2\n    Glyphs[\"daseianSuperiores2\"] = \"\\uEA39\";\n    // U+EA3A  Daseian superiores 3\n    Glyphs[\"daseianSuperiores3\"] = \"\\uEA3A\";\n    // U+EA3B  Daseian superiores 4\n    Glyphs[\"daseianSuperiores4\"] = \"\\uEA3B\";\n    // U+E234  Double lateral roll (Stevens)\n    Glyphs[\"doubleLateralRollStevens\"] = \"\\uE234\";\n    // U+E5F0  Double-tongue above\n    Glyphs[\"doubleTongueAbove\"] = \"\\uE5F0\";\n    // U+E5F1  Double-tongue below\n    Glyphs[\"doubleTongueBelow\"] = \"\\uE5F1\";\n    // U+E546  Colon separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorColon\"] = \"\\uE546\";\n    // U+E547  Hyphen separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorHyphen\"] = \"\\uE547\";\n    // U+E549  Slash separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSlash\"] = \"\\uE549\";\n    // U+E548  Space separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSpace\"] = \"\\uE548\";\n    // U+E53E  Crescendo\n    Glyphs[\"dynamicCrescendoHairpin\"] = \"\\uE53E\";\n    // U+E53F  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpin\"] = \"\\uE53F\";\n    // U+E52F  ff\n    Glyphs[\"dynamicFF\"] = \"\\uE52F\";\n    // U+E530  fff\n    Glyphs[\"dynamicFFF\"] = \"\\uE530\";\n    // U+E531  ffff\n    Glyphs[\"dynamicFFFF\"] = \"\\uE531\";\n    // U+E532  fffff\n    Glyphs[\"dynamicFFFFF\"] = \"\\uE532\";\n    // U+E533  ffffff\n    Glyphs[\"dynamicFFFFFF\"] = \"\\uE533\";\n    // U+E522  Forte\n    Glyphs[\"dynamicForte\"] = \"\\uE522\";\n    // U+E534  Forte-piano\n    Glyphs[\"dynamicFortePiano\"] = \"\\uE534\";\n    // U+E535  Forzando\n    Glyphs[\"dynamicForzando\"] = \"\\uE535\";\n    // U+E544  Left bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketLeft\"] = \"\\uE544\";\n    // U+E545  Right bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketRight\"] = \"\\uE545\";\n    // U+E542  Left parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisLeft\"] = \"\\uE542\";\n    // U+E543  Right parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisRight\"] = \"\\uE543\";\n    // U+E52D  mf\n    Glyphs[\"dynamicMF\"] = \"\\uE52D\";\n    // U+E52C  mp\n    Glyphs[\"dynamicMP\"] = \"\\uE52C\";\n    // U+E540  Messa di voce\n    Glyphs[\"dynamicMessaDiVoce\"] = \"\\uE540\";\n    // U+E521  Mezzo\n    Glyphs[\"dynamicMezzo\"] = \"\\uE521\";\n    // U+E526  Niente\n    Glyphs[\"dynamicNiente\"] = \"\\uE526\";\n    // U+E541  Niente (for hairpins)\n    Glyphs[\"dynamicNienteForHairpin\"] = \"\\uE541\";\n    // U+E52E  pf\n    Glyphs[\"dynamicPF\"] = \"\\uE52E\";\n    // U+E52B  pp\n    Glyphs[\"dynamicPP\"] = \"\\uE52B\";\n    // U+E52A  ppp\n    Glyphs[\"dynamicPPP\"] = \"\\uE52A\";\n    // U+E529  pppp\n    Glyphs[\"dynamicPPPP\"] = \"\\uE529\";\n    // U+E528  ppppp\n    Glyphs[\"dynamicPPPPP\"] = \"\\uE528\";\n    // U+E527  pppppp\n    Glyphs[\"dynamicPPPPPP\"] = \"\\uE527\";\n    // U+E520  Piano\n    Glyphs[\"dynamicPiano\"] = \"\\uE520\";\n    // U+E523  Rinforzando\n    Glyphs[\"dynamicRinforzando\"] = \"\\uE523\";\n    // U+E53C  Rinforzando 1\n    Glyphs[\"dynamicRinforzando1\"] = \"\\uE53C\";\n    // U+E53D  Rinforzando 2\n    Glyphs[\"dynamicRinforzando2\"] = \"\\uE53D\";\n    // U+E524  Sforzando\n    Glyphs[\"dynamicSforzando\"] = \"\\uE524\";\n    // U+E536  Sforzando 1\n    Glyphs[\"dynamicSforzando1\"] = \"\\uE536\";\n    // U+E538  Sforzando-pianissimo\n    Glyphs[\"dynamicSforzandoPianissimo\"] = \"\\uE538\";\n    // U+E537  Sforzando-piano\n    Glyphs[\"dynamicSforzandoPiano\"] = \"\\uE537\";\n    // U+E539  Sforzato\n    Glyphs[\"dynamicSforzato\"] = \"\\uE539\";\n    // U+E53B  Sforzatissimo\n    Glyphs[\"dynamicSforzatoFF\"] = \"\\uE53B\";\n    // U+E53A  Sforzato-piano\n    Glyphs[\"dynamicSforzatoPiano\"] = \"\\uE53A\";\n    // U+E525  Z\n    Glyphs[\"dynamicZ\"] = \"\\uE525\";\n    // U+EB46  Eight channels (7.1 surround)\n    Glyphs[\"elecAudioChannelsEight\"] = \"\\uEB46\";\n    // U+EB43  Five channels\n    Glyphs[\"elecAudioChannelsFive\"] = \"\\uEB43\";\n    // U+EB42  Four channels\n    Glyphs[\"elecAudioChannelsFour\"] = \"\\uEB42\";\n    // U+EB3E  One channel (mono)\n    Glyphs[\"elecAudioChannelsOne\"] = \"\\uEB3E\";\n    // U+EB45  Seven channels\n    Glyphs[\"elecAudioChannelsSeven\"] = \"\\uEB45\";\n    // U+EB44  Six channels (5.1 surround)\n    Glyphs[\"elecAudioChannelsSix\"] = \"\\uEB44\";\n    // U+EB40  Three channels (frontal)\n    Glyphs[\"elecAudioChannelsThreeFrontal\"] = \"\\uEB40\";\n    // U+EB41  Three channels (surround)\n    Glyphs[\"elecAudioChannelsThreeSurround\"] = \"\\uEB41\";\n    // U+EB3F  Two channels (stereo)\n    Glyphs[\"elecAudioChannelsTwo\"] = \"\\uEB3F\";\n    // U+EB49  Audio in\n    Glyphs[\"elecAudioIn\"] = \"\\uEB49\";\n    // U+EB3C  Mono audio setup\n    Glyphs[\"elecAudioMono\"] = \"\\uEB3C\";\n    // U+EB4A  Audio out\n    Glyphs[\"elecAudioOut\"] = \"\\uEB4A\";\n    // U+EB3D  Stereo audio setup\n    Glyphs[\"elecAudioStereo\"] = \"\\uEB3D\";\n    // U+EB1B  Camera\n    Glyphs[\"elecCamera\"] = \"\\uEB1B\";\n    // U+EB4D  Data in\n    Glyphs[\"elecDataIn\"] = \"\\uEB4D\";\n    // U+EB4E  Data out\n    Glyphs[\"elecDataOut\"] = \"\\uEB4E\";\n    // U+EB13  Disc\n    Glyphs[\"elecDisc\"] = \"\\uEB13\";\n    // U+EB4F  Download\n    Glyphs[\"elecDownload\"] = \"\\uEB4F\";\n    // U+EB2B  Eject\n    Glyphs[\"elecEject\"] = \"\\uEB2B\";\n    // U+EB1F  Fast-forward\n    Glyphs[\"elecFastForward\"] = \"\\uEB1F\";\n    // U+EB11  Headphones\n    Glyphs[\"elecHeadphones\"] = \"\\uEB11\";\n    // U+EB12  Headset\n    Glyphs[\"elecHeadset\"] = \"\\uEB12\";\n    // U+EB47  Line in\n    Glyphs[\"elecLineIn\"] = \"\\uEB47\";\n    // U+EB48  Line out\n    Glyphs[\"elecLineOut\"] = \"\\uEB48\";\n    // U+EB23  Loop\n    Glyphs[\"elecLoop\"] = \"\\uEB23\";\n    // U+EB1A  Loudspeaker\n    Glyphs[\"elecLoudspeaker\"] = \"\\uEB1A\";\n    // U+EB36  MIDI controller 0%\n    Glyphs[\"elecMIDIController0\"] = \"\\uEB36\";\n    // U+EB3B  MIDI controller 100%\n    Glyphs[\"elecMIDIController100\"] = \"\\uEB3B\";\n    // U+EB37  MIDI controller 20%\n    Glyphs[\"elecMIDIController20\"] = \"\\uEB37\";\n    // U+EB38  MIDI controller 40%\n    Glyphs[\"elecMIDIController40\"] = \"\\uEB38\";\n    // U+EB39  MIDI controller 60%\n    Glyphs[\"elecMIDIController60\"] = \"\\uEB39\";\n    // U+EB3A  MIDI controller 80%\n    Glyphs[\"elecMIDIController80\"] = \"\\uEB3A\";\n    // U+EB34  MIDI in\n    Glyphs[\"elecMIDIIn\"] = \"\\uEB34\";\n    // U+EB35  MIDI out\n    Glyphs[\"elecMIDIOut\"] = \"\\uEB35\";\n    // U+EB10  Microphone\n    Glyphs[\"elecMicrophone\"] = \"\\uEB10\";\n    // U+EB28  Mute microphone\n    Glyphs[\"elecMicrophoneMute\"] = \"\\uEB28\";\n    // U+EB29  Unmute microphone\n    Glyphs[\"elecMicrophoneUnmute\"] = \"\\uEB29\";\n    // U+EB15  Mixing console\n    Glyphs[\"elecMixingConsole\"] = \"\\uEB15\";\n    // U+EB18  Monitor\n    Glyphs[\"elecMonitor\"] = \"\\uEB18\";\n    // U+EB26  Mute\n    Glyphs[\"elecMute\"] = \"\\uEB26\";\n    // U+EB1E  Pause\n    Glyphs[\"elecPause\"] = \"\\uEB1E\";\n    // U+EB1C  Play\n    Glyphs[\"elecPlay\"] = \"\\uEB1C\";\n    // U+EB2A  Power on/off\n    Glyphs[\"elecPowerOnOff\"] = \"\\uEB2A\";\n    // U+EB19  Projector\n    Glyphs[\"elecProjector\"] = \"\\uEB19\";\n    // U+EB24  Replay\n    Glyphs[\"elecReplay\"] = \"\\uEB24\";\n    // U+EB20  Rewind\n    Glyphs[\"elecRewind\"] = \"\\uEB20\";\n    // U+EB25  Shuffle\n    Glyphs[\"elecShuffle\"] = \"\\uEB25\";\n    // U+EB22  Skip backwards\n    Glyphs[\"elecSkipBackwards\"] = \"\\uEB22\";\n    // U+EB21  Skip forwards\n    Glyphs[\"elecSkipForwards\"] = \"\\uEB21\";\n    // U+EB1D  Stop\n    Glyphs[\"elecStop\"] = \"\\uEB1D\";\n    // U+EB14  Tape\n    Glyphs[\"elecTape\"] = \"\\uEB14\";\n    // U+EB16  USB connection\n    Glyphs[\"elecUSB\"] = \"\\uEB16\";\n    // U+EB27  Unmute\n    Glyphs[\"elecUnmute\"] = \"\\uEB27\";\n    // U+EB50  Upload\n    Glyphs[\"elecUpload\"] = \"\\uEB50\";\n    // U+EB17  Video camera\n    Glyphs[\"elecVideoCamera\"] = \"\\uEB17\";\n    // U+EB4B  Video in\n    Glyphs[\"elecVideoIn\"] = \"\\uEB4B\";\n    // U+EB4C  Video out\n    Glyphs[\"elecVideoOut\"] = \"\\uEB4C\";\n    // U+EB2C  Combining volume fader\n    Glyphs[\"elecVolumeFader\"] = \"\\uEB2C\";\n    // U+EB2D  Combining volume fader thumb\n    Glyphs[\"elecVolumeFaderThumb\"] = \"\\uEB2D\";\n    // U+EB2E  Volume level 0%\n    Glyphs[\"elecVolumeLevel0\"] = \"\\uEB2E\";\n    // U+EB33  Volume level 100%\n    Glyphs[\"elecVolumeLevel100\"] = \"\\uEB33\";\n    // U+EB2F  Volume level 20%\n    Glyphs[\"elecVolumeLevel20\"] = \"\\uEB2F\";\n    // U+EB30  Volume level 40%\n    Glyphs[\"elecVolumeLevel40\"] = \"\\uEB30\";\n    // U+EB31  Volume level 60%\n    Glyphs[\"elecVolumeLevel60\"] = \"\\uEB31\";\n    // U+EB32  Volume level 80%\n    Glyphs[\"elecVolumeLevel80\"] = \"\\uEB32\";\n    // U+E062  F clef\n    Glyphs[\"fClef\"] = \"\\uE062\";\n    // U+E066  F clef quindicesima alta\n    Glyphs[\"fClef15ma\"] = \"\\uE066\";\n    // U+E063  F clef quindicesima bassa\n    Glyphs[\"fClef15mb\"] = \"\\uE063\";\n    // U+E065  F clef ottava alta\n    Glyphs[\"fClef8va\"] = \"\\uE065\";\n    // U+E064  F clef ottava bassa\n    Glyphs[\"fClef8vb\"] = \"\\uE064\";\n    // U+E068  F clef, arrow down\n    Glyphs[\"fClefArrowDown\"] = \"\\uE068\";\n    // U+E067  F clef, arrow up\n    Glyphs[\"fClefArrowUp\"] = \"\\uE067\";\n    // U+E07C  F clef change\n    Glyphs[\"fClefChange\"] = \"\\uE07C\";\n    // U+E076  Reversed F clef\n    Glyphs[\"fClefReversed\"] = \"\\uE076\";\n    // U+E077  Turned F clef\n    Glyphs[\"fClefTurned\"] = \"\\uE077\";\n    // U+E4C0  Fermata above\n    Glyphs[\"fermataAbove\"] = \"\\uE4C0\";\n    // U+E4C1  Fermata below\n    Glyphs[\"fermataBelow\"] = \"\\uE4C1\";\n    // U+E4C6  Long fermata above\n    Glyphs[\"fermataLongAbove\"] = \"\\uE4C6\";\n    // U+E4C7  Long fermata below\n    Glyphs[\"fermataLongBelow\"] = \"\\uE4C7\";\n    // U+E4CA  Long fermata (Henze) above\n    Glyphs[\"fermataLongHenzeAbove\"] = \"\\uE4CA\";\n    // U+E4CB  Long fermata (Henze) below\n    Glyphs[\"fermataLongHenzeBelow\"] = \"\\uE4CB\";\n    // U+E4C4  Short fermata above\n    Glyphs[\"fermataShortAbove\"] = \"\\uE4C4\";\n    // U+E4C5  Short fermata below\n    Glyphs[\"fermataShortBelow\"] = \"\\uE4C5\";\n    // U+E4CC  Short fermata (Henze) above\n    Glyphs[\"fermataShortHenzeAbove\"] = \"\\uE4CC\";\n    // U+E4CD  Short fermata (Henze) below\n    Glyphs[\"fermataShortHenzeBelow\"] = \"\\uE4CD\";\n    // U+E4C8  Very long fermata above\n    Glyphs[\"fermataVeryLongAbove\"] = \"\\uE4C8\";\n    // U+E4C9  Very long fermata below\n    Glyphs[\"fermataVeryLongBelow\"] = \"\\uE4C9\";\n    // U+E4C2  Very short fermata above\n    Glyphs[\"fermataVeryShortAbove\"] = \"\\uE4C2\";\n    // U+E4C3  Very short fermata below\n    Glyphs[\"fermataVeryShortBelow\"] = \"\\uE4C3\";\n    // U+EA50  Figured bass 0\n    Glyphs[\"figbass0\"] = \"\\uEA50\";\n    // U+EA51  Figured bass 1\n    Glyphs[\"figbass1\"] = \"\\uEA51\";\n    // U+EA52  Figured bass 2\n    Glyphs[\"figbass2\"] = \"\\uEA52\";\n    // U+EA53  Figured bass 2 raised by half-step\n    Glyphs[\"figbass2Raised\"] = \"\\uEA53\";\n    // U+EA54  Figured bass 3\n    Glyphs[\"figbass3\"] = \"\\uEA54\";\n    // U+EA55  Figured bass 4\n    Glyphs[\"figbass4\"] = \"\\uEA55\";\n    // U+EA56  Figured bass 4 raised by half-step\n    Glyphs[\"figbass4Raised\"] = \"\\uEA56\";\n    // U+EA57  Figured bass 5\n    Glyphs[\"figbass5\"] = \"\\uEA57\";\n    // U+EA58  Figured bass 5 raised by half-step\n    Glyphs[\"figbass5Raised1\"] = \"\\uEA58\";\n    // U+EA59  Figured bass 5 raised by half-step 2\n    Glyphs[\"figbass5Raised2\"] = \"\\uEA59\";\n    // U+EA5A  Figured bass diminished 5\n    Glyphs[\"figbass5Raised3\"] = \"\\uEA5A\";\n    // U+EA5B  Figured bass 6\n    Glyphs[\"figbass6\"] = \"\\uEA5B\";\n    // U+EA5C  Figured bass 6 raised by half-step\n    Glyphs[\"figbass6Raised\"] = \"\\uEA5C\";\n    // U+EA6F  Figured bass 6 raised by half-step 2\n    Glyphs[\"figbass6Raised2\"] = \"\\uEA6F\";\n    // U+EA5D  Figured bass 7\n    Glyphs[\"figbass7\"] = \"\\uEA5D\";\n    // U+ECC0  Figured bass 7 diminished\n    Glyphs[\"figbass7Diminished\"] = \"\\uECC0\";\n    // U+EA5E  Figured bass 7 raised by half-step\n    Glyphs[\"figbass7Raised1\"] = \"\\uEA5E\";\n    // U+EA5F  Figured bass 7 lowered by a half-step\n    Glyphs[\"figbass7Raised2\"] = \"\\uEA5F\";\n    // U+EA60  Figured bass 8\n    Glyphs[\"figbass8\"] = \"\\uEA60\";\n    // U+EA61  Figured bass 9\n    Glyphs[\"figbass9\"] = \"\\uEA61\";\n    // U+EA62  Figured bass 9 raised by half-step\n    Glyphs[\"figbass9Raised\"] = \"\\uEA62\";\n    // U+EA68  Figured bass [\n    Glyphs[\"figbassBracketLeft\"] = \"\\uEA68\";\n    // U+EA69  Figured bass ]\n    Glyphs[\"figbassBracketRight\"] = \"\\uEA69\";\n    // U+EA6E  Combining lower\n    Glyphs[\"figbassCombiningLowering\"] = \"\\uEA6E\";\n    // U+EA6D  Combining raise\n    Glyphs[\"figbassCombiningRaising\"] = \"\\uEA6D\";\n    // U+EA63  Figured bass double flat\n    Glyphs[\"figbassDoubleFlat\"] = \"\\uEA63\";\n    // U+EA67  Figured bass double sharp\n    Glyphs[\"figbassDoubleSharp\"] = \"\\uEA67\";\n    // U+EA64  Figured bass flat\n    Glyphs[\"figbassFlat\"] = \"\\uEA64\";\n    // U+EA65  Figured bass natural\n    Glyphs[\"figbassNatural\"] = \"\\uEA65\";\n    // U+EA6A  Figured bass (\n    Glyphs[\"figbassParensLeft\"] = \"\\uEA6A\";\n    // U+EA6B  Figured bass )\n    Glyphs[\"figbassParensRight\"] = \"\\uEA6B\";\n    // U+EA6C  Figured bass +\n    Glyphs[\"figbassPlus\"] = \"\\uEA6C\";\n    // U+EA66  Figured bass sharp\n    Glyphs[\"figbassSharp\"] = \"\\uEA66\";\n    // U+ECC1  Figured bass triple flat\n    Glyphs[\"figbassTripleFlat\"] = \"\\uECC1\";\n    // U+ECC2  Figured bass triple sharp\n    Glyphs[\"figbassTripleSharp\"] = \"\\uECC2\";\n    // U+ED10  Fingering 0 (open string)\n    Glyphs[\"fingering0\"] = \"\\uED10\";\n    // U+ED80  Fingering 0 italic (open string)\n    Glyphs[\"fingering0Italic\"] = \"\\uED80\";\n    // U+ED11  Fingering 1 (thumb)\n    Glyphs[\"fingering1\"] = \"\\uED11\";\n    // U+ED81  Fingering 1 italic (thumb)\n    Glyphs[\"fingering1Italic\"] = \"\\uED81\";\n    // U+ED12  Fingering 2 (index finger)\n    Glyphs[\"fingering2\"] = \"\\uED12\";\n    // U+ED82  Fingering 2 italic (index finger)\n    Glyphs[\"fingering2Italic\"] = \"\\uED82\";\n    // U+ED13  Fingering 3 (middle finger)\n    Glyphs[\"fingering3\"] = \"\\uED13\";\n    // U+ED83  Fingering 3 italic (middle finger)\n    Glyphs[\"fingering3Italic\"] = \"\\uED83\";\n    // U+ED14  Fingering 4 (ring finger)\n    Glyphs[\"fingering4\"] = \"\\uED14\";\n    // U+ED84  Fingering 4 italic (ring finger)\n    Glyphs[\"fingering4Italic\"] = \"\\uED84\";\n    // U+ED15  Fingering 5 (little finger)\n    Glyphs[\"fingering5\"] = \"\\uED15\";\n    // U+ED85  Fingering 5 italic (little finger)\n    Glyphs[\"fingering5Italic\"] = \"\\uED85\";\n    // U+ED24  Fingering 6\n    Glyphs[\"fingering6\"] = \"\\uED24\";\n    // U+ED86  Fingering 6 italic\n    Glyphs[\"fingering6Italic\"] = \"\\uED86\";\n    // U+ED25  Fingering 7\n    Glyphs[\"fingering7\"] = \"\\uED25\";\n    // U+ED87  Fingering 7 italic\n    Glyphs[\"fingering7Italic\"] = \"\\uED87\";\n    // U+ED26  Fingering 8\n    Glyphs[\"fingering8\"] = \"\\uED26\";\n    // U+ED88  Fingering 8 italic\n    Glyphs[\"fingering8Italic\"] = \"\\uED88\";\n    // U+ED27  Fingering 9\n    Glyphs[\"fingering9\"] = \"\\uED27\";\n    // U+ED89  Fingering 9 italic\n    Glyphs[\"fingering9Italic\"] = \"\\uED89\";\n    // U+ED1B  Fingering a (anular; right-hand ring finger for guitar)\n    Glyphs[\"fingeringALower\"] = \"\\uED1B\";\n    // U+ED1C  Fingering c (right-hand little finger for guitar)\n    Glyphs[\"fingeringCLower\"] = \"\\uED1C\";\n    // U+ED1E  Fingering e (right-hand little finger for guitar)\n    Glyphs[\"fingeringELower\"] = \"\\uED1E\";\n    // U+ED19  Fingering i (indicio; right-hand index finger for guitar)\n    Glyphs[\"fingeringILower\"] = \"\\uED19\";\n    // U+ED2A  Fingering left bracket\n    Glyphs[\"fingeringLeftBracket\"] = \"\\uED2A\";\n    // U+ED8C  Fingering left bracket italic\n    Glyphs[\"fingeringLeftBracketItalic\"] = \"\\uED8C\";\n    // U+ED28  Fingering left parenthesis\n    Glyphs[\"fingeringLeftParenthesis\"] = \"\\uED28\";\n    // U+ED8A  Fingering left parenthesis italic\n    Glyphs[\"fingeringLeftParenthesisItalic\"] = \"\\uED8A\";\n    // U+ED1A  Fingering m (medio; right-hand middle finger for guitar)\n    Glyphs[\"fingeringMLower\"] = \"\\uED1A\";\n    // U+ED23  Multiple notes played by thumb or single finger\n    Glyphs[\"fingeringMultipleNotes\"] = \"\\uED23\";\n    // U+ED1F  Fingering o (right-hand little finger for guitar)\n    Glyphs[\"fingeringOLower\"] = \"\\uED1F\";\n    // U+ED17  Fingering p (pulgar; right-hand thumb for guitar)\n    Glyphs[\"fingeringPLower\"] = \"\\uED17\";\n    // U+ED8E  Fingering q (right-hand little finger for guitar)\n    Glyphs[\"fingeringQLower\"] = \"\\uED8E\";\n    // U+ED2B  Fingering right bracket\n    Glyphs[\"fingeringRightBracket\"] = \"\\uED2B\";\n    // U+ED8D  Fingering right bracket italic\n    Glyphs[\"fingeringRightBracketItalic\"] = \"\\uED8D\";\n    // U+ED29  Fingering right parenthesis\n    Glyphs[\"fingeringRightParenthesis\"] = \"\\uED29\";\n    // U+ED8B  Fingering right parenthesis italic\n    Glyphs[\"fingeringRightParenthesisItalic\"] = \"\\uED8B\";\n    // U+ED8F  Fingering s (right-hand little finger for guitar)\n    Glyphs[\"fingeringSLower\"] = \"\\uED8F\";\n    // U+ED2C  Fingering middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDot\"] = \"\\uED2C\";\n    // U+ED2D  Fingering white middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDotWhite\"] = \"\\uED2D\";\n    // U+ED2E  Fingering forward slash separator\n    Glyphs[\"fingeringSeparatorSlash\"] = \"\\uED2E\";\n    // U+ED20  Finger substitution above\n    Glyphs[\"fingeringSubstitutionAbove\"] = \"\\uED20\";\n    // U+ED21  Finger substitution below\n    Glyphs[\"fingeringSubstitutionBelow\"] = \"\\uED21\";\n    // U+ED22  Finger substitution dash\n    Glyphs[\"fingeringSubstitutionDash\"] = \"\\uED22\";\n    // U+ED18  Fingering t (right-hand thumb for guitar)\n    Glyphs[\"fingeringTLower\"] = \"\\uED18\";\n    // U+ED16  Fingering T (left-hand thumb for guitar)\n    Glyphs[\"fingeringTUpper\"] = \"\\uED16\";\n    // U+ED1D  Fingering x (right-hand little finger for guitar)\n    Glyphs[\"fingeringXLower\"] = \"\\uED1D\";\n    // U+E24F  Combining flag 8 (1024th) below\n    Glyphs[\"flag1024thDown\"] = \"\\uE24F\";\n    // U+E24E  Combining flag 8 (1024th) above\n    Glyphs[\"flag1024thUp\"] = \"\\uE24E\";\n    // U+E249  Combining flag 5 (128th) below\n    Glyphs[\"flag128thDown\"] = \"\\uE249\";\n    // U+E248  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUp\"] = \"\\uE248\";\n    // U+E243  Combining flag 2 (16th) below\n    Glyphs[\"flag16thDown\"] = \"\\uE243\";\n    // U+E242  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUp\"] = \"\\uE242\";\n    // U+E24B  Combining flag 6 (256th) below\n    Glyphs[\"flag256thDown\"] = \"\\uE24B\";\n    // U+E24A  Combining flag 6 (256th) above\n    Glyphs[\"flag256thUp\"] = \"\\uE24A\";\n    // U+E245  Combining flag 3 (32nd) below\n    Glyphs[\"flag32ndDown\"] = \"\\uE245\";\n    // U+E244  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUp\"] = \"\\uE244\";\n    // U+E24D  Combining flag 7 (512th) below\n    Glyphs[\"flag512thDown\"] = \"\\uE24D\";\n    // U+E24C  Combining flag 7 (512th) above\n    Glyphs[\"flag512thUp\"] = \"\\uE24C\";\n    // U+E247  Combining flag 4 (64th) below\n    Glyphs[\"flag64thDown\"] = \"\\uE247\";\n    // U+E246  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUp\"] = \"\\uE246\";\n    // U+E241  Combining flag 1 (8th) below\n    Glyphs[\"flag8thDown\"] = \"\\uE241\";\n    // U+E240  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUp\"] = \"\\uE240\";\n    // U+E251  Internal combining flag below\n    Glyphs[\"flagInternalDown\"] = \"\\uE251\";\n    // U+E250  Internal combining flag above\n    Glyphs[\"flagInternalUp\"] = \"\\uE250\";\n    // U+E850  3-string fretboard\n    Glyphs[\"fretboard3String\"] = \"\\uE850\";\n    // U+E851  3-string fretboard at nut\n    Glyphs[\"fretboard3StringNut\"] = \"\\uE851\";\n    // U+E852  4-string fretboard\n    Glyphs[\"fretboard4String\"] = \"\\uE852\";\n    // U+E853  4-string fretboard at nut\n    Glyphs[\"fretboard4StringNut\"] = \"\\uE853\";\n    // U+E854  5-string fretboard\n    Glyphs[\"fretboard5String\"] = \"\\uE854\";\n    // U+E855  5-string fretboard at nut\n    Glyphs[\"fretboard5StringNut\"] = \"\\uE855\";\n    // U+E856  6-string fretboard\n    Glyphs[\"fretboard6String\"] = \"\\uE856\";\n    // U+E857  6-string fretboard at nut\n    Glyphs[\"fretboard6StringNut\"] = \"\\uE857\";\n    // U+E858  Fingered fret (filled circle)\n    Glyphs[\"fretboardFilledCircle\"] = \"\\uE858\";\n    // U+E85A  Open string (O)\n    Glyphs[\"fretboardO\"] = \"\\uE85A\";\n    // U+E859  String not played (X)\n    Glyphs[\"fretboardX\"] = \"\\uE859\";\n    // U+EA93  Function theory angle bracket left\n    Glyphs[\"functionAngleLeft\"] = \"\\uEA93\";\n    // U+EA94  Function theory angle bracket right\n    Glyphs[\"functionAngleRight\"] = \"\\uEA94\";\n    // U+EA8F  Function theory bracket left\n    Glyphs[\"functionBracketLeft\"] = \"\\uEA8F\";\n    // U+EA90  Function theory bracket right\n    Glyphs[\"functionBracketRight\"] = \"\\uEA90\";\n    // U+EA81  Function theory dominant of dominant\n    Glyphs[\"functionDD\"] = \"\\uEA81\";\n    // U+EA80  Function theory minor dominant\n    Glyphs[\"functionDLower\"] = \"\\uEA80\";\n    // U+EA7F  Function theory major dominant\n    Glyphs[\"functionDUpper\"] = \"\\uEA7F\";\n    // U+EA78  Function theory 8\n    Glyphs[\"functionEight\"] = \"\\uEA78\";\n    // U+EA99  Function theory F\n    Glyphs[\"functionFUpper\"] = \"\\uEA99\";\n    // U+EA75  Function theory 5\n    Glyphs[\"functionFive\"] = \"\\uEA75\";\n    // U+EA74  Function theory 4\n    Glyphs[\"functionFour\"] = \"\\uEA74\";\n    // U+EA84  Function theory g\n    Glyphs[\"functionGLower\"] = \"\\uEA84\";\n    // U+EA83  Function theory G\n    Glyphs[\"functionGUpper\"] = \"\\uEA83\";\n    // U+EA7C  Function theory greater than\n    Glyphs[\"functionGreaterThan\"] = \"\\uEA7C\";\n    // U+EA9B  Function theory i\n    Glyphs[\"functionILower\"] = \"\\uEA9B\";\n    // U+EA9A  Function theory I\n    Glyphs[\"functionIUpper\"] = \"\\uEA9A\";\n    // U+EA9D  Function theory k\n    Glyphs[\"functionKLower\"] = \"\\uEA9D\";\n    // U+EA9C  Function theory K\n    Glyphs[\"functionKUpper\"] = \"\\uEA9C\";\n    // U+EA9F  Function theory l\n    Glyphs[\"functionLLower\"] = \"\\uEA9F\";\n    // U+EA9E  Function theory L\n    Glyphs[\"functionLUpper\"] = \"\\uEA9E\";\n    // U+EA7A  Function theory less than\n    Glyphs[\"functionLessThan\"] = \"\\uEA7A\";\n    // U+ED01  Function theory m\n    Glyphs[\"functionMLower\"] = \"\\uED01\";\n    // U+ED00  Function theory M\n    Glyphs[\"functionMUpper\"] = \"\\uED00\";\n    // U+EA7B  Function theory minus\n    Glyphs[\"functionMinus\"] = \"\\uEA7B\";\n    // U+EA86  Function theory n\n    Glyphs[\"functionNLower\"] = \"\\uEA86\";\n    // U+EA85  Function theory N\n    Glyphs[\"functionNUpper\"] = \"\\uEA85\";\n    // U+ED02  Function theory superscript N\n    Glyphs[\"functionNUpperSuperscript\"] = \"\\uED02\";\n    // U+EA79  Function theory 9\n    Glyphs[\"functionNine\"] = \"\\uEA79\";\n    // U+EA71  Function theory 1\n    Glyphs[\"functionOne\"] = \"\\uEA71\";\n    // U+EA88  Function theory p\n    Glyphs[\"functionPLower\"] = \"\\uEA88\";\n    // U+EA87  Function theory P\n    Glyphs[\"functionPUpper\"] = \"\\uEA87\";\n    // U+EA91  Function theory parenthesis left\n    Glyphs[\"functionParensLeft\"] = \"\\uEA91\";\n    // U+EA92  Function theory parenthesis right\n    Glyphs[\"functionParensRight\"] = \"\\uEA92\";\n    // U+EA98  Function theory prefix plus\n    Glyphs[\"functionPlus\"] = \"\\uEA98\";\n    // U+ED03  Function theory r\n    Glyphs[\"functionRLower\"] = \"\\uED03\";\n    // U+EA95  Function theory repetition 1\n    Glyphs[\"functionRepetition1\"] = \"\\uEA95\";\n    // U+EA96  Function theory repetition 2\n    Glyphs[\"functionRepetition2\"] = \"\\uEA96\";\n    // U+EA97  Function theory prefix ring\n    Glyphs[\"functionRing\"] = \"\\uEA97\";\n    // U+EA8A  Function theory minor subdominant\n    Glyphs[\"functionSLower\"] = \"\\uEA8A\";\n    // U+EA7E  Function theory minor subdominant of subdominant\n    Glyphs[\"functionSSLower\"] = \"\\uEA7E\";\n    // U+EA7D  Function theory major subdominant of subdominant\n    Glyphs[\"functionSSUpper\"] = \"\\uEA7D\";\n    // U+EA89  Function theory major subdominant\n    Glyphs[\"functionSUpper\"] = \"\\uEA89\";\n    // U+EA77  Function theory 7\n    Glyphs[\"functionSeven\"] = \"\\uEA77\";\n    // U+EA76  Function theory 6\n    Glyphs[\"functionSix\"] = \"\\uEA76\";\n    // U+EA82  Function theory double dominant seventh\n    Glyphs[\"functionSlashedDD\"] = \"\\uEA82\";\n    // U+EA8C  Function theory minor tonic\n    Glyphs[\"functionTLower\"] = \"\\uEA8C\";\n    // U+EA8B  Function theory tonic\n    Glyphs[\"functionTUpper\"] = \"\\uEA8B\";\n    // U+EA73  Function theory 3\n    Glyphs[\"functionThree\"] = \"\\uEA73\";\n    // U+EA72  Function theory 2\n    Glyphs[\"functionTwo\"] = \"\\uEA72\";\n    // U+EA8E  Function theory v\n    Glyphs[\"functionVLower\"] = \"\\uEA8E\";\n    // U+EA8D  Function theory V\n    Glyphs[\"functionVUpper\"] = \"\\uEA8D\";\n    // U+EA70  Function theory 0\n    Glyphs[\"functionZero\"] = \"\\uEA70\";\n    // U+E050  G clef\n    Glyphs[\"gClef\"] = \"\\uE050\";\n    // U+E054  G clef quindicesima alta\n    Glyphs[\"gClef15ma\"] = \"\\uE054\";\n    // U+E051  G clef quindicesima bassa\n    Glyphs[\"gClef15mb\"] = \"\\uE051\";\n    // U+E053  G clef ottava alta\n    Glyphs[\"gClef8va\"] = \"\\uE053\";\n    // U+E052  G clef ottava bassa\n    Glyphs[\"gClef8vb\"] = \"\\uE052\";\n    // U+E056  G clef ottava bassa with C clef\n    Glyphs[\"gClef8vbCClef\"] = \"\\uE056\";\n    // U+E055  G clef ottava bassa (old style)\n    Glyphs[\"gClef8vbOld\"] = \"\\uE055\";\n    // U+E057  G clef, optionally ottava bassa\n    Glyphs[\"gClef8vbParens\"] = \"\\uE057\";\n    // U+E05B  G clef, arrow down\n    Glyphs[\"gClefArrowDown\"] = \"\\uE05B\";\n    // U+E05A  G clef, arrow up\n    Glyphs[\"gClefArrowUp\"] = \"\\uE05A\";\n    // U+E07A  G clef change\n    Glyphs[\"gClefChange\"] = \"\\uE07A\";\n    // U+E059  Combining G clef, number above\n    Glyphs[\"gClefLigatedNumberAbove\"] = \"\\uE059\";\n    // U+E058  Combining G clef, number below\n    Glyphs[\"gClefLigatedNumberBelow\"] = \"\\uE058\";\n    // U+E073  Reversed G clef\n    Glyphs[\"gClefReversed\"] = \"\\uE073\";\n    // U+E074  Turned G clef\n    Glyphs[\"gClefTurned\"] = \"\\uE074\";\n    // U+E586  Glissando down\n    Glyphs[\"glissandoDown\"] = \"\\uE586\";\n    // U+E585  Glissando up\n    Glyphs[\"glissandoUp\"] = \"\\uE585\";\n    // U+E561  Slashed grace note stem down\n    Glyphs[\"graceNoteAcciaccaturaStemDown\"] = \"\\uE561\";\n    // U+E560  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUp\"] = \"\\uE560\";\n    // U+E563  Grace note stem down\n    Glyphs[\"graceNoteAppoggiaturaStemDown\"] = \"\\uE563\";\n    // U+E562  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUp\"] = \"\\uE562\";\n    // U+E565  Slash for stem down grace note\n    Glyphs[\"graceNoteSlashStemDown\"] = \"\\uE565\";\n    // U+E564  Slash for stem up grace note\n    Glyphs[\"graceNoteSlashStemUp\"] = \"\\uE564\";\n    // U+E848  Full barré\n    Glyphs[\"guitarBarreFull\"] = \"\\uE848\";\n    // U+E849  Half barré\n    Glyphs[\"guitarBarreHalf\"] = \"\\uE849\";\n    // U+E83F  Closed wah/volume pedal\n    Glyphs[\"guitarClosePedal\"] = \"\\uE83F\";\n    // U+E843  Fade in\n    Glyphs[\"guitarFadeIn\"] = \"\\uE843\";\n    // U+E844  Fade out\n    Glyphs[\"guitarFadeOut\"] = \"\\uE844\";\n    // U+E842  Golpe (tapping the pick guard)\n    Glyphs[\"guitarGolpe\"] = \"\\uE842\";\n    // U+E83E  Half-open wah/volume pedal\n    Glyphs[\"guitarHalfOpenPedal\"] = \"\\uE83E\";\n    // U+E840  Left-hand tapping\n    Glyphs[\"guitarLeftHandTapping\"] = \"\\uE840\";\n    // U+E83D  Open wah/volume pedal\n    Glyphs[\"guitarOpenPedal\"] = \"\\uE83D\";\n    // U+E841  Right-hand tapping\n    Glyphs[\"guitarRightHandTapping\"] = \"\\uE841\";\n    // U+E832  Guitar shake\n    Glyphs[\"guitarShake\"] = \"\\uE832\";\n    // U+E833  String number 0\n    Glyphs[\"guitarString0\"] = \"\\uE833\";\n    // U+E834  String number 1\n    Glyphs[\"guitarString1\"] = \"\\uE834\";\n    // U+E84A  String number 10\n    Glyphs[\"guitarString10\"] = \"\\uE84A\";\n    // U+E84B  String number 11\n    Glyphs[\"guitarString11\"] = \"\\uE84B\";\n    // U+E84C  String number 12\n    Glyphs[\"guitarString12\"] = \"\\uE84C\";\n    // U+E84D  String number 13\n    Glyphs[\"guitarString13\"] = \"\\uE84D\";\n    // U+E835  String number 2\n    Glyphs[\"guitarString2\"] = \"\\uE835\";\n    // U+E836  String number 3\n    Glyphs[\"guitarString3\"] = \"\\uE836\";\n    // U+E837  String number 4\n    Glyphs[\"guitarString4\"] = \"\\uE837\";\n    // U+E838  String number 5\n    Glyphs[\"guitarString5\"] = \"\\uE838\";\n    // U+E839  String number 6\n    Glyphs[\"guitarString6\"] = \"\\uE839\";\n    // U+E83A  String number 7\n    Glyphs[\"guitarString7\"] = \"\\uE83A\";\n    // U+E83B  String number 8\n    Glyphs[\"guitarString8\"] = \"\\uE83B\";\n    // U+E83C  String number 9\n    Glyphs[\"guitarString9\"] = \"\\uE83C\";\n    // U+E847  Strum direction down\n    Glyphs[\"guitarStrumDown\"] = \"\\uE847\";\n    // U+E846  Strum direction up\n    Glyphs[\"guitarStrumUp\"] = \"\\uE846\";\n    // U+E831  Guitar vibrato bar dip\n    Glyphs[\"guitarVibratoBarDip\"] = \"\\uE831\";\n    // U+E830  Guitar vibrato bar scoop\n    Glyphs[\"guitarVibratoBarScoop\"] = \"\\uE830\";\n    // U+EAB2  Vibrato wiggle segment\n    Glyphs[\"guitarVibratoStroke\"] = \"\\uEAB2\";\n    // U+E845  Volume swell\n    Glyphs[\"guitarVolumeSwell\"] = \"\\uE845\";\n    // U+EAB3  Wide vibrato wiggle segment\n    Glyphs[\"guitarWideVibratoStroke\"] = \"\\uEAB3\";\n    // U+E81F  Belltree\n    Glyphs[\"handbellsBelltree\"] = \"\\uE81F\";\n    // U+E81E  Damp 3\n    Glyphs[\"handbellsDamp3\"] = \"\\uE81E\";\n    // U+E81B  Echo\n    Glyphs[\"handbellsEcho1\"] = \"\\uE81B\";\n    // U+E81C  Echo 2\n    Glyphs[\"handbellsEcho2\"] = \"\\uE81C\";\n    // U+E81D  Gyro\n    Glyphs[\"handbellsGyro\"] = \"\\uE81D\";\n    // U+E812  Hand martellato\n    Glyphs[\"handbellsHandMartellato\"] = \"\\uE812\";\n    // U+E815  Mallet, bell on table\n    Glyphs[\"handbellsMalletBellOnTable\"] = \"\\uE815\";\n    // U+E814  Mallet, bell suspended\n    Glyphs[\"handbellsMalletBellSuspended\"] = \"\\uE814\";\n    // U+E816  Mallet lift\n    Glyphs[\"handbellsMalletLft\"] = \"\\uE816\";\n    // U+E810  Martellato\n    Glyphs[\"handbellsMartellato\"] = \"\\uE810\";\n    // U+E811  Martellato lift\n    Glyphs[\"handbellsMartellatoLift\"] = \"\\uE811\";\n    // U+E813  Muted martellato\n    Glyphs[\"handbellsMutedMartellato\"] = \"\\uE813\";\n    // U+E817  Pluck lift\n    Glyphs[\"handbellsPluckLift\"] = \"\\uE817\";\n    // U+E81A  Swing\n    Glyphs[\"handbellsSwing\"] = \"\\uE81A\";\n    // U+E819  Swing down\n    Glyphs[\"handbellsSwingDown\"] = \"\\uE819\";\n    // U+E818  Swing up\n    Glyphs[\"handbellsSwingUp\"] = \"\\uE818\";\n    // U+E821  Table pair of handbells\n    Glyphs[\"handbellsTablePairBells\"] = \"\\uE821\";\n    // U+E820  Table single handbell\n    Glyphs[\"handbellsTableSingleBell\"] = \"\\uE820\";\n    // U+E68F  Metal rod pictogram\n    Glyphs[\"harpMetalRod\"] = \"\\uE68F\";\n    // U+E681  Harp pedal centered (natural)\n    Glyphs[\"harpPedalCentered\"] = \"\\uE681\";\n    // U+E683  Harp pedal divider\n    Glyphs[\"harpPedalDivider\"] = \"\\uE683\";\n    // U+E682  Harp pedal lowered (sharp)\n    Glyphs[\"harpPedalLowered\"] = \"\\uE682\";\n    // U+E680  Harp pedal raised (flat)\n    Glyphs[\"harpPedalRaised\"] = \"\\uE680\";\n    // U+E695  Ascending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianAscending\"] = \"\\uE695\";\n    // U+E696  Descending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianDescending\"] = \"\\uE696\";\n    // U+E69A  Damp above (Salzedo)\n    Glyphs[\"harpSalzedoDampAbove\"] = \"\\uE69A\";\n    // U+E699  Damp below (Salzedo)\n    Glyphs[\"harpSalzedoDampBelow\"] = \"\\uE699\";\n    // U+E698  Damp with both hands (Salzedo)\n    Glyphs[\"harpSalzedoDampBothHands\"] = \"\\uE698\";\n    // U+E697  Damp only low strings (Salzedo)\n    Glyphs[\"harpSalzedoDampLowStrings\"] = \"\\uE697\";\n    // U+E68D  Fluidic sounds, left hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsLeft\"] = \"\\uE68D\";\n    // U+E68E  Fluidic sounds, right hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsRight\"] = \"\\uE68E\";\n    // U+E69C  Isolated sounds (Salzedo)\n    Glyphs[\"harpSalzedoIsolatedSounds\"] = \"\\uE69C\";\n    // U+E688  Metallic sounds (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSounds\"] = \"\\uE688\";\n    // U+E69B  Metallic sounds, one string (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSoundsOneString\"] = \"\\uE69B\";\n    // U+E68C  Muffle totally (Salzedo)\n    Glyphs[\"harpSalzedoMuffleTotally\"] = \"\\uE68C\";\n    // U+E685  Oboic flux (Salzedo)\n    Glyphs[\"harpSalzedoOboicFlux\"] = \"\\uE685\";\n    // U+E68A  Play at upper end of strings (Salzedo)\n    Glyphs[\"harpSalzedoPlayUpperEnd\"] = \"\\uE68A\";\n    // U+E684  Slide with suppleness (Salzedo)\n    Glyphs[\"harpSalzedoSlideWithSuppleness\"] = \"\\uE684\";\n    // U+E69D  Snare drum effect (Salzedo)\n    Glyphs[\"harpSalzedoSnareDrum\"] = \"\\uE69D\";\n    // U+E689  Tam-tam sounds (Salzedo)\n    Glyphs[\"harpSalzedoTamTamSounds\"] = \"\\uE689\";\n    // U+E686  Thunder effect (Salzedo)\n    Glyphs[\"harpSalzedoThunderEffect\"] = \"\\uE686\";\n    // U+E68B  Timpanic sounds (Salzedo)\n    Glyphs[\"harpSalzedoTimpanicSounds\"] = \"\\uE68B\";\n    // U+E687  Whistling sounds (Salzedo)\n    Glyphs[\"harpSalzedoWhistlingSounds\"] = \"\\uE687\";\n    // U+E694  Combining string noise for stem\n    Glyphs[\"harpStringNoiseStem\"] = \"\\uE694\";\n    // U+E690  Tuning key pictogram\n    Glyphs[\"harpTuningKey\"] = \"\\uE690\";\n    // U+E693  Retune strings for glissando\n    Glyphs[\"harpTuningKeyGlissando\"] = \"\\uE693\";\n    // U+E691  Use handle of tuning key pictogram\n    Glyphs[\"harpTuningKeyHandle\"] = \"\\uE691\";\n    // U+E692  Use shank of tuning key pictogram\n    Glyphs[\"harpTuningKeyShank\"] = \"\\uE692\";\n    // U+ED70  Indian drum clef\n    Glyphs[\"indianDrumClef\"] = \"\\uED70\";\n    // U+EDE2  Back-chug\n    Glyphs[\"kahnBackChug\"] = \"\\uEDE2\";\n    // U+EDD8  Back-flap\n    Glyphs[\"kahnBackFlap\"] = \"\\uEDD8\";\n    // U+EDE1  Back-riff\n    Glyphs[\"kahnBackRiff\"] = \"\\uEDE1\";\n    // U+EDDA  Back-rip\n    Glyphs[\"kahnBackRip\"] = \"\\uEDDA\";\n    // U+EDC6  Ball-change\n    Glyphs[\"kahnBallChange\"] = \"\\uEDC6\";\n    // U+EDCD  Ball-dig\n    Glyphs[\"kahnBallDig\"] = \"\\uEDCD\";\n    // U+EDA7  Brush-backward\n    Glyphs[\"kahnBrushBackward\"] = \"\\uEDA7\";\n    // U+EDA6  Brush-forward\n    Glyphs[\"kahnBrushForward\"] = \"\\uEDA6\";\n    // U+EDDD  Chug\n    Glyphs[\"kahnChug\"] = \"\\uEDDD\";\n    // U+EDB8  Clap\n    Glyphs[\"kahnClap\"] = \"\\uEDB8\";\n    // U+EDBA  Double-snap\n    Glyphs[\"kahnDoubleSnap\"] = \"\\uEDBA\";\n    // U+EDEB  Double-wing\n    Glyphs[\"kahnDoubleWing\"] = \"\\uEDEB\";\n    // U+EDB2  Draw-step\n    Glyphs[\"kahnDrawStep\"] = \"\\uEDB2\";\n    // U+EDB3  Draw-tap\n    Glyphs[\"kahnDrawTap\"] = \"\\uEDB3\";\n    // U+EDCF  Flam\n    Glyphs[\"kahnFlam\"] = \"\\uEDCF\";\n    // U+EDD5  Flap\n    Glyphs[\"kahnFlap\"] = \"\\uEDD5\";\n    // U+EDD7  Flap-step\n    Glyphs[\"kahnFlapStep\"] = \"\\uEDD7\";\n    // U+EDA9  Flat\n    Glyphs[\"kahnFlat\"] = \"\\uEDA9\";\n    // U+EDB0  Flea-hop\n    Glyphs[\"kahnFleaHop\"] = \"\\uEDB0\";\n    // U+EDB1  Flea-tap\n    Glyphs[\"kahnFleaTap\"] = \"\\uEDB1\";\n    // U+EDA8  Grace-tap\n    Glyphs[\"kahnGraceTap\"] = \"\\uEDA8\";\n    // U+EDD1  Grace-tap-change\n    Glyphs[\"kahnGraceTapChange\"] = \"\\uEDD1\";\n    // U+EDD0  Grace-tap-hop\n    Glyphs[\"kahnGraceTapHop\"] = \"\\uEDD0\";\n    // U+EDD3  Grace-tap-stamp\n    Glyphs[\"kahnGraceTapStamp\"] = \"\\uEDD3\";\n    // U+EDAA  Heel\n    Glyphs[\"kahnHeel\"] = \"\\uEDAA\";\n    // U+EDC9  Heel-change\n    Glyphs[\"kahnHeelChange\"] = \"\\uEDC9\";\n    // U+EDBB  Heel-click\n    Glyphs[\"kahnHeelClick\"] = \"\\uEDBB\";\n    // U+EDB6  Heel-drop\n    Glyphs[\"kahnHeelDrop\"] = \"\\uEDB6\";\n    // U+EDC4  Heel-step\n    Glyphs[\"kahnHeelStep\"] = \"\\uEDC4\";\n    // U+EDCB  Heel-tap\n    Glyphs[\"kahnHeelTap\"] = \"\\uEDCB\";\n    // U+EDA2  Hop\n    Glyphs[\"kahnHop\"] = \"\\uEDA2\";\n    // U+EDA5  Jump-apart\n    Glyphs[\"kahnJumpApart\"] = \"\\uEDA5\";\n    // U+EDA4  Jump-together\n    Glyphs[\"kahnJumpTogether\"] = \"\\uEDA4\";\n    // U+EDAD  Knee-inward\n    Glyphs[\"kahnKneeInward\"] = \"\\uEDAD\";\n    // U+EDAC  Knee-outward\n    Glyphs[\"kahnKneeOutward\"] = \"\\uEDAC\";\n    // U+EDA3  Leap\n    Glyphs[\"kahnLeap\"] = \"\\uEDA3\";\n    // U+EDD2  Leap-flat-foot\n    Glyphs[\"kahnLeapFlatFoot\"] = \"\\uEDD2\";\n    // U+EDD4  Leap-heel-click\n    Glyphs[\"kahnLeapHeelClick\"] = \"\\uEDD4\";\n    // U+EDBF  Left-catch\n    Glyphs[\"kahnLeftCatch\"] = \"\\uEDBF\";\n    // U+EDBD  Left-cross\n    Glyphs[\"kahnLeftCross\"] = \"\\uEDBD\";\n    // U+EDEE  Left-foot\n    Glyphs[\"kahnLeftFoot\"] = \"\\uEDEE\";\n    // U+EDC1  Left-toe-strike\n    Glyphs[\"kahnLeftToeStrike\"] = \"\\uEDC1\";\n    // U+EDF0  Left-turn\n    Glyphs[\"kahnLeftTurn\"] = \"\\uEDF0\";\n    // U+EDEC  Over-the-top\n    Glyphs[\"kahnOverTheTop\"] = \"\\uEDEC\";\n    // U+EDED  Over-the-top-tap\n    Glyphs[\"kahnOverTheTopTap\"] = \"\\uEDED\";\n    // U+EDE3  Pull\n    Glyphs[\"kahnPull\"] = \"\\uEDE3\";\n    // U+EDDE  Push\n    Glyphs[\"kahnPush\"] = \"\\uEDDE\";\n    // U+EDE0  Riff\n    Glyphs[\"kahnRiff\"] = \"\\uEDE0\";\n    // U+EDE7  Riffle\n    Glyphs[\"kahnRiffle\"] = \"\\uEDE7\";\n    // U+EDC0  Right-catch\n    Glyphs[\"kahnRightCatch\"] = \"\\uEDC0\";\n    // U+EDBE  Right-cross\n    Glyphs[\"kahnRightCross\"] = \"\\uEDBE\";\n    // U+EDEF  Right-foot\n    Glyphs[\"kahnRightFoot\"] = \"\\uEDEF\";\n    // U+EDC2  Right-toe-strike\n    Glyphs[\"kahnRightToeStrike\"] = \"\\uEDC2\";\n    // U+EDF1  Right-turn\n    Glyphs[\"kahnRightTurn\"] = \"\\uEDF1\";\n    // U+EDD6  Rip\n    Glyphs[\"kahnRip\"] = \"\\uEDD6\";\n    // U+EDE8  Ripple\n    Glyphs[\"kahnRipple\"] = \"\\uEDE8\";\n    // U+EDAE  Scrape\n    Glyphs[\"kahnScrape\"] = \"\\uEDAE\";\n    // U+EDDC  Scuff\n    Glyphs[\"kahnScuff\"] = \"\\uEDDC\";\n    // U+EDE6  Scuffle\n    Glyphs[\"kahnScuffle\"] = \"\\uEDE6\";\n    // U+EDE5  Shuffle\n    Glyphs[\"kahnShuffle\"] = \"\\uEDE5\";\n    // U+EDCE  Slam\n    Glyphs[\"kahnSlam\"] = \"\\uEDCE\";\n    // U+EDD9  Slap\n    Glyphs[\"kahnSlap\"] = \"\\uEDD9\";\n    // U+EDB4  Slide-step\n    Glyphs[\"kahnSlideStep\"] = \"\\uEDB4\";\n    // U+EDB5  Slide-tap\n    Glyphs[\"kahnSlideTap\"] = \"\\uEDB5\";\n    // U+EDB9  Snap\n    Glyphs[\"kahnSnap\"] = \"\\uEDB9\";\n    // U+EDC3  Stamp\n    Glyphs[\"kahnStamp\"] = \"\\uEDC3\";\n    // U+EDC8  Stamp-stamp\n    Glyphs[\"kahnStampStamp\"] = \"\\uEDC8\";\n    // U+EDA0  Step\n    Glyphs[\"kahnStep\"] = \"\\uEDA0\";\n    // U+EDC7  Step-stamp\n    Glyphs[\"kahnStepStamp\"] = \"\\uEDC7\";\n    // U+EDCA  Stomp\n    Glyphs[\"kahnStomp\"] = \"\\uEDCA\";\n    // U+EDDB  Stomp-brush\n    Glyphs[\"kahnStompBrush\"] = \"\\uEDDB\";\n    // U+EDA1  Tap\n    Glyphs[\"kahnTap\"] = \"\\uEDA1\";\n    // U+EDAB  Toe\n    Glyphs[\"kahnToe\"] = \"\\uEDAB\";\n    // U+EDBC  Toe-click\n    Glyphs[\"kahnToeClick\"] = \"\\uEDBC\";\n    // U+EDB7  Toe-drop\n    Glyphs[\"kahnToeDrop\"] = \"\\uEDB7\";\n    // U+EDC5  Toe-step\n    Glyphs[\"kahnToeStep\"] = \"\\uEDC5\";\n    // U+EDCC  Toe-tap\n    Glyphs[\"kahnToeTap\"] = \"\\uEDCC\";\n    // U+EDAF  Trench\n    Glyphs[\"kahnTrench\"] = \"\\uEDAF\";\n    // U+EDE9  Wing\n    Glyphs[\"kahnWing\"] = \"\\uEDE9\";\n    // U+EDEA  Wing-change\n    Glyphs[\"kahnWingChange\"] = \"\\uEDEA\";\n    // U+EDE4  Zank\n    Glyphs[\"kahnZank\"] = \"\\uEDE4\";\n    // U+EDDF  Zink\n    Glyphs[\"kahnZink\"] = \"\\uEDDF\";\n    // U+E668  Clavichord bebung, 2 finger movements (above)\n    Glyphs[\"keyboardBebung2DotsAbove\"] = \"\\uE668\";\n    // U+E669  Clavichord bebung, 2 finger movements (below)\n    Glyphs[\"keyboardBebung2DotsBelow\"] = \"\\uE669\";\n    // U+E66A  Clavichord bebung, 3 finger movements (above)\n    Glyphs[\"keyboardBebung3DotsAbove\"] = \"\\uE66A\";\n    // U+E66B  Clavichord bebung, 3 finger movements (below)\n    Glyphs[\"keyboardBebung3DotsBelow\"] = \"\\uE66B\";\n    // U+E66C  Clavichord bebung, 4 finger movements (above)\n    Glyphs[\"keyboardBebung4DotsAbove\"] = \"\\uE66C\";\n    // U+E66D  Clavichord bebung, 4 finger movements (below)\n    Glyphs[\"keyboardBebung4DotsBelow\"] = \"\\uE66D\";\n    // U+E65E  Left pedal pictogram\n    Glyphs[\"keyboardLeftPedalPictogram\"] = \"\\uE65E\";\n    // U+E65F  Middle pedal pictogram\n    Glyphs[\"keyboardMiddlePedalPictogram\"] = \"\\uE65F\";\n    // U+E653  Pedal d\n    Glyphs[\"keyboardPedalD\"] = \"\\uE653\";\n    // U+E654  Pedal dot\n    Glyphs[\"keyboardPedalDot\"] = \"\\uE654\";\n    // U+E652  Pedal e\n    Glyphs[\"keyboardPedalE\"] = \"\\uE652\";\n    // U+E656  Half-pedal mark\n    Glyphs[\"keyboardPedalHalf\"] = \"\\uE656\";\n    // U+E65B  Half pedal mark 1\n    Glyphs[\"keyboardPedalHalf2\"] = \"\\uE65B\";\n    // U+E65C  Half pedal mark 2\n    Glyphs[\"keyboardPedalHalf3\"] = \"\\uE65C\";\n    // U+E661  Pedal heel 1\n    Glyphs[\"keyboardPedalHeel1\"] = \"\\uE661\";\n    // U+E662  Pedal heel 2\n    Glyphs[\"keyboardPedalHeel2\"] = \"\\uE662\";\n    // U+E663  Pedal heel 3 (Davis)\n    Glyphs[\"keyboardPedalHeel3\"] = \"\\uE663\";\n    // U+E674  Pedal heel to toe\n    Glyphs[\"keyboardPedalHeelToToe\"] = \"\\uE674\";\n    // U+E666  Pedal heel or toe\n    Glyphs[\"keyboardPedalHeelToe\"] = \"\\uE666\";\n    // U+E673  Pedal hook end\n    Glyphs[\"keyboardPedalHookEnd\"] = \"\\uE673\";\n    // U+E672  Pedal hook start\n    Glyphs[\"keyboardPedalHookStart\"] = \"\\uE672\";\n    // U+E658  Pedal hyphen\n    Glyphs[\"keyboardPedalHyphen\"] = \"\\uE658\";\n    // U+E651  Pedal P\n    Glyphs[\"keyboardPedalP\"] = \"\\uE651\";\n    // U+E676  Left parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensLeft\"] = \"\\uE676\";\n    // U+E677  Right parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensRight\"] = \"\\uE677\";\n    // U+E650  Pedal mark\n    Glyphs[\"keyboardPedalPed\"] = \"\\uE650\";\n    // U+E65A  Pedal S\n    Glyphs[\"keyboardPedalS\"] = \"\\uE65A\";\n    // U+E659  Sostenuto pedal mark\n    Glyphs[\"keyboardPedalSost\"] = \"\\uE659\";\n    // U+E664  Pedal toe 1\n    Glyphs[\"keyboardPedalToe1\"] = \"\\uE664\";\n    // U+E665  Pedal toe 2\n    Glyphs[\"keyboardPedalToe2\"] = \"\\uE665\";\n    // U+E675  Pedal toe to heel\n    Glyphs[\"keyboardPedalToeToHeel\"] = \"\\uE675\";\n    // U+E655  Pedal up mark\n    Glyphs[\"keyboardPedalUp\"] = \"\\uE655\";\n    // U+E657  Pedal up notch\n    Glyphs[\"keyboardPedalUpNotch\"] = \"\\uE657\";\n    // U+E65D  Pedal up special\n    Glyphs[\"keyboardPedalUpSpecial\"] = \"\\uE65D\";\n    // U+E670  Play with left hand\n    Glyphs[\"keyboardPlayWithLH\"] = \"\\uE670\";\n    // U+E671  Play with left hand (end)\n    Glyphs[\"keyboardPlayWithLHEnd\"] = \"\\uE671\";\n    // U+E66E  Play with right hand\n    Glyphs[\"keyboardPlayWithRH\"] = \"\\uE66E\";\n    // U+E66F  Play with right hand (end)\n    Glyphs[\"keyboardPlayWithRHEnd\"] = \"\\uE66F\";\n    // U+E667  Pluck strings inside piano (Maderna)\n    Glyphs[\"keyboardPluckInside\"] = \"\\uE667\";\n    // U+E660  Right pedal pictogram\n    Glyphs[\"keyboardRightPedalPictogram\"] = \"\\uE660\";\n    // U+EC3E  Kievan flat\n    Glyphs[\"kievanAccidentalFlat\"] = \"\\uEC3E\";\n    // U+EC3D  Kievan sharp\n    Glyphs[\"kievanAccidentalSharp\"] = \"\\uEC3D\";\n    // U+EC3C  Kievan augmentation dot\n    Glyphs[\"kievanAugmentationDot\"] = \"\\uEC3C\";\n    // U+EC30  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClef\"] = \"\\uEC30\";\n    // U+EC31  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbol\"] = \"\\uEC31\";\n    // U+EC3A  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDown\"] = \"\\uEC3A\";\n    // U+EC39  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUp\"] = \"\\uEC39\";\n    // U+EC3B  Kievan beam\n    Glyphs[\"kievanNoteBeam\"] = \"\\uEC3B\";\n    // U+EC35  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLine\"] = \"\\uEC35\";\n    // U+EC36  Kievan half note (in staff space)\n    Glyphs[\"kievanNoteHalfStaffSpace\"] = \"\\uEC36\";\n    // U+EC38  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDown\"] = \"\\uEC38\";\n    // U+EC37  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUp\"] = \"\\uEC37\";\n    // U+EC32  Kievan reciting note\n    Glyphs[\"kievanNoteReciting\"] = \"\\uEC32\";\n    // U+EC33  Kievan whole note\n    Glyphs[\"kievanNoteWhole\"] = \"\\uEC33\";\n    // U+EC34  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinal\"] = \"\\uEC34\";\n    // U+EC40  Do hand sign\n    Glyphs[\"kodalyHandDo\"] = \"\\uEC40\";\n    // U+EC43  Fa hand sign\n    Glyphs[\"kodalyHandFa\"] = \"\\uEC43\";\n    // U+EC45  La hand sign\n    Glyphs[\"kodalyHandLa\"] = \"\\uEC45\";\n    // U+EC42  Mi hand sign\n    Glyphs[\"kodalyHandMi\"] = \"\\uEC42\";\n    // U+EC41  Re hand sign\n    Glyphs[\"kodalyHandRe\"] = \"\\uEC41\";\n    // U+EC44  So hand sign\n    Glyphs[\"kodalyHandSo\"] = \"\\uEC44\";\n    // U+EC46  Ti hand sign\n    Glyphs[\"kodalyHandTi\"] = \"\\uEC46\";\n    // U+E04C  Left repeat sign within bar\n    Glyphs[\"leftRepeatSmall\"] = \"\\uE04C\";\n    // U+E022  Leger line\n    Glyphs[\"legerLine\"] = \"\\uE022\";\n    // U+E024  Leger line (narrow)\n    Glyphs[\"legerLineNarrow\"] = \"\\uE024\";\n    // U+E023  Leger line (wide)\n    Glyphs[\"legerLineWide\"] = \"\\uE023\";\n    // U+EBA4  Lute tablature end repeat barline\n    Glyphs[\"luteBarlineEndRepeat\"] = \"\\uEBA4\";\n    // U+EBA5  Lute tablature final barline\n    Glyphs[\"luteBarlineFinal\"] = \"\\uEBA5\";\n    // U+EBA3  Lute tablature start repeat barline\n    Glyphs[\"luteBarlineStartRepeat\"] = \"\\uEBA3\";\n    // U+EBAB  16th note (semiquaver) duration sign\n    Glyphs[\"luteDuration16th\"] = \"\\uEBAB\";\n    // U+EBAC  32nd note (demisemiquaver) duration sign\n    Glyphs[\"luteDuration32nd\"] = \"\\uEBAC\";\n    // U+EBAA  Eighth note (quaver) duration sign\n    Glyphs[\"luteDuration8th\"] = \"\\uEBAA\";\n    // U+EBA6  Double whole note (breve) duration sign\n    Glyphs[\"luteDurationDoubleWhole\"] = \"\\uEBA6\";\n    // U+EBA8  Half note (minim) duration sign\n    Glyphs[\"luteDurationHalf\"] = \"\\uEBA8\";\n    // U+EBA9  Quarter note (crotchet) duration sign\n    Glyphs[\"luteDurationQuarter\"] = \"\\uEBA9\";\n    // U+EBA7  Whole note (semibreve) duration sign\n    Glyphs[\"luteDurationWhole\"] = \"\\uEBA7\";\n    // U+EBAE  Right-hand fingering, first finger\n    Glyphs[\"luteFingeringRHFirst\"] = \"\\uEBAE\";\n    // U+EBAF  Right-hand fingering, second finger\n    Glyphs[\"luteFingeringRHSecond\"] = \"\\uEBAF\";\n    // U+EBB0  Right-hand fingering, third finger\n    Glyphs[\"luteFingeringRHThird\"] = \"\\uEBB0\";\n    // U+EBAD  Right-hand fingering, thumb\n    Glyphs[\"luteFingeringRHThumb\"] = \"\\uEBAD\";\n    // U+EBD0  10th course (diapason)\n    Glyphs[\"luteFrench10thCourse\"] = \"\\uEBD0\";\n    // U+EBCD  Seventh course (diapason)\n    Glyphs[\"luteFrench7thCourse\"] = \"\\uEBCD\";\n    // U+EBCE  Eighth course (diapason)\n    Glyphs[\"luteFrench8thCourse\"] = \"\\uEBCE\";\n    // U+EBCF  Ninth course (diapason)\n    Glyphs[\"luteFrench9thCourse\"] = \"\\uEBCF\";\n    // U+EBD5  Appoggiatura from above\n    Glyphs[\"luteFrenchAppoggiaturaAbove\"] = \"\\uEBD5\";\n    // U+EBD4  Appoggiatura from below\n    Glyphs[\"luteFrenchAppoggiaturaBelow\"] = \"\\uEBD4\";\n    // U+EBC0  Open string (a)\n    Glyphs[\"luteFrenchFretA\"] = \"\\uEBC0\";\n    // U+EBC1  First fret (b)\n    Glyphs[\"luteFrenchFretB\"] = \"\\uEBC1\";\n    // U+EBC2  Second fret (c)\n    Glyphs[\"luteFrenchFretC\"] = \"\\uEBC2\";\n    // U+EBC3  Third fret (d)\n    Glyphs[\"luteFrenchFretD\"] = \"\\uEBC3\";\n    // U+EBC4  Fourth fret (e)\n    Glyphs[\"luteFrenchFretE\"] = \"\\uEBC4\";\n    // U+EBC5  Fifth fret (f)\n    Glyphs[\"luteFrenchFretF\"] = \"\\uEBC5\";\n    // U+EBC6  Sixth fret (g)\n    Glyphs[\"luteFrenchFretG\"] = \"\\uEBC6\";\n    // U+EBC7  Seventh fret (h)\n    Glyphs[\"luteFrenchFretH\"] = \"\\uEBC7\";\n    // U+EBC8  Eighth fret (i)\n    Glyphs[\"luteFrenchFretI\"] = \"\\uEBC8\";\n    // U+EBC9  Ninth fret (k)\n    Glyphs[\"luteFrenchFretK\"] = \"\\uEBC9\";\n    // U+EBCA  10th fret (l)\n    Glyphs[\"luteFrenchFretL\"] = \"\\uEBCA\";\n    // U+EBCB  11th fret (m)\n    Glyphs[\"luteFrenchFretM\"] = \"\\uEBCB\";\n    // U+EBCC  12th fret (n)\n    Glyphs[\"luteFrenchFretN\"] = \"\\uEBCC\";\n    // U+EBD3  Inverted mordent\n    Glyphs[\"luteFrenchMordentInverted\"] = \"\\uEBD3\";\n    // U+EBD2  Mordent with lower auxiliary\n    Glyphs[\"luteFrenchMordentLower\"] = \"\\uEBD2\";\n    // U+EBD1  Mordent with upper auxiliary\n    Glyphs[\"luteFrenchMordentUpper\"] = \"\\uEBD1\";\n    // U+EC00  5th course, 1st fret (a)\n    Glyphs[\"luteGermanALower\"] = \"\\uEC00\";\n    // U+EC17  6th course, 1st fret (A)\n    Glyphs[\"luteGermanAUpper\"] = \"\\uEC17\";\n    // U+EC01  4th course, 1st fret (b)\n    Glyphs[\"luteGermanBLower\"] = \"\\uEC01\";\n    // U+EC18  6th course, 2nd fret (B)\n    Glyphs[\"luteGermanBUpper\"] = \"\\uEC18\";\n    // U+EC02  3rd course, 1st fret (c)\n    Glyphs[\"luteGermanCLower\"] = \"\\uEC02\";\n    // U+EC19  6th course, 3rd fret (C)\n    Glyphs[\"luteGermanCUpper\"] = \"\\uEC19\";\n    // U+EC03  2nd course, 1st fret (d)\n    Glyphs[\"luteGermanDLower\"] = \"\\uEC03\";\n    // U+EC1A  6th course, 4th fret (D)\n    Glyphs[\"luteGermanDUpper\"] = \"\\uEC1A\";\n    // U+EC04  1st course, 1st fret (e)\n    Glyphs[\"luteGermanELower\"] = \"\\uEC04\";\n    // U+EC1B  6th course, 5th fret (E)\n    Glyphs[\"luteGermanEUpper\"] = \"\\uEC1B\";\n    // U+EC05  5th course, 2nd fret (f)\n    Glyphs[\"luteGermanFLower\"] = \"\\uEC05\";\n    // U+EC1C  6th course, 6th fret (F)\n    Glyphs[\"luteGermanFUpper\"] = \"\\uEC1C\";\n    // U+EC06  4th course, 2nd fret (g)\n    Glyphs[\"luteGermanGLower\"] = \"\\uEC06\";\n    // U+EC1D  6th course, 7th fret (G)\n    Glyphs[\"luteGermanGUpper\"] = \"\\uEC1D\";\n    // U+EC07  3rd course, 2nd fret (h)\n    Glyphs[\"luteGermanHLower\"] = \"\\uEC07\";\n    // U+EC1E  6th course, 8th fret (H)\n    Glyphs[\"luteGermanHUpper\"] = \"\\uEC1E\";\n    // U+EC08  2nd course, 2nd fret (i)\n    Glyphs[\"luteGermanILower\"] = \"\\uEC08\";\n    // U+EC1F  6th course, 9th fret (I)\n    Glyphs[\"luteGermanIUpper\"] = \"\\uEC1F\";\n    // U+EC09  1st course, 2nd fret (k)\n    Glyphs[\"luteGermanKLower\"] = \"\\uEC09\";\n    // U+EC20  6th course, 10th fret (K)\n    Glyphs[\"luteGermanKUpper\"] = \"\\uEC20\";\n    // U+EC0A  5th course, 3rd fret (l)\n    Glyphs[\"luteGermanLLower\"] = \"\\uEC0A\";\n    // U+EC21  6th course, 11th fret (L)\n    Glyphs[\"luteGermanLUpper\"] = \"\\uEC21\";\n    // U+EC0B  4th course, 3rd fret (m)\n    Glyphs[\"luteGermanMLower\"] = \"\\uEC0B\";\n    // U+EC22  6th course, 12th fret (M)\n    Glyphs[\"luteGermanMUpper\"] = \"\\uEC22\";\n    // U+EC0C  3rd course, 3rd fret (n)\n    Glyphs[\"luteGermanNLower\"] = \"\\uEC0C\";\n    // U+EC23  6th course, 13th fret (N)\n    Glyphs[\"luteGermanNUpper\"] = \"\\uEC23\";\n    // U+EC0D  2nd course, 3rd fret (o)\n    Glyphs[\"luteGermanOLower\"] = \"\\uEC0D\";\n    // U+EC0E  1st course, 3rd fret (p)\n    Glyphs[\"luteGermanPLower\"] = \"\\uEC0E\";\n    // U+EC0F  5th course, 4th fret (q)\n    Glyphs[\"luteGermanQLower\"] = \"\\uEC0F\";\n    // U+EC10  4th course, 4th fret (r)\n    Glyphs[\"luteGermanRLower\"] = \"\\uEC10\";\n    // U+EC11  3rd course, 4th fret (s)\n    Glyphs[\"luteGermanSLower\"] = \"\\uEC11\";\n    // U+EC12  2nd course, 4th fret (t)\n    Glyphs[\"luteGermanTLower\"] = \"\\uEC12\";\n    // U+EC13  1st course, 4th fret (v)\n    Glyphs[\"luteGermanVLower\"] = \"\\uEC13\";\n    // U+EC14  5th course, 5th fret (x)\n    Glyphs[\"luteGermanXLower\"] = \"\\uEC14\";\n    // U+EC15  4th course, 5th fret (y)\n    Glyphs[\"luteGermanYLower\"] = \"\\uEC15\";\n    // U+EC16  3rd course, 5th fret (z)\n    Glyphs[\"luteGermanZLower\"] = \"\\uEC16\";\n    // U+EBF1  C sol fa ut clef\n    Glyphs[\"luteItalianClefCSolFaUt\"] = \"\\uEBF1\";\n    // U+EBF0  F fa ut clef\n    Glyphs[\"luteItalianClefFFaUt\"] = \"\\uEBF0\";\n    // U+EBE0  Open string (0)\n    Glyphs[\"luteItalianFret0\"] = \"\\uEBE0\";\n    // U+EBE1  First fret (1)\n    Glyphs[\"luteItalianFret1\"] = \"\\uEBE1\";\n    // U+EBE2  Second fret (2)\n    Glyphs[\"luteItalianFret2\"] = \"\\uEBE2\";\n    // U+EBE3  Third fret (3)\n    Glyphs[\"luteItalianFret3\"] = \"\\uEBE3\";\n    // U+EBE4  Fourth fret (4)\n    Glyphs[\"luteItalianFret4\"] = \"\\uEBE4\";\n    // U+EBE5  Fifth fret (5)\n    Glyphs[\"luteItalianFret5\"] = \"\\uEBE5\";\n    // U+EBE6  Sixth fret (6)\n    Glyphs[\"luteItalianFret6\"] = \"\\uEBE6\";\n    // U+EBE7  Seventh fret (7)\n    Glyphs[\"luteItalianFret7\"] = \"\\uEBE7\";\n    // U+EBE8  Eighth fret (8)\n    Glyphs[\"luteItalianFret8\"] = \"\\uEBE8\";\n    // U+EBE9  Ninth fret (9)\n    Glyphs[\"luteItalianFret9\"] = \"\\uEBE9\";\n    // U+EBF4  Hold finger in place\n    Glyphs[\"luteItalianHoldFinger\"] = \"\\uEBF4\";\n    // U+EBF3  Hold note\n    Glyphs[\"luteItalianHoldNote\"] = \"\\uEBF3\";\n    // U+EBF5  Release finger\n    Glyphs[\"luteItalianReleaseFinger\"] = \"\\uEBF5\";\n    // U+EBEA  Fast tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoFast\"] = \"\\uEBEA\";\n    // U+EBEC  Neither fast nor slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoNeitherFastNorSlow\"] = \"\\uEBEC\";\n    // U+EBED  Slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoSlow\"] = \"\\uEBED\";\n    // U+EBEB  Somewhat fast tempo indication (de Narvaez)\n    Glyphs[\"luteItalianTempoSomewhatFast\"] = \"\\uEBEB\";\n    // U+EBEE  Very slow indication (de Narvaez)\n    Glyphs[\"luteItalianTempoVerySlow\"] = \"\\uEBEE\";\n    // U+EBEF  Triple time indication\n    Glyphs[\"luteItalianTimeTriple\"] = \"\\uEBEF\";\n    // U+EBF2  Single-finger tremolo or mordent\n    Glyphs[\"luteItalianTremolo\"] = \"\\uEBF2\";\n    // U+EBF6  Vibrato (verre cassé)\n    Glyphs[\"luteItalianVibrato\"] = \"\\uEBF6\";\n    // U+EBA0  Lute tablature staff, 6 courses\n    Glyphs[\"luteStaff6Lines\"] = \"\\uEBA0\";\n    // U+EBA2  Lute tablature staff, 6 courses (narrow)\n    Glyphs[\"luteStaff6LinesNarrow\"] = \"\\uEBA2\";\n    // U+EBA1  Lute tablature staff, 6 courses (wide)\n    Glyphs[\"luteStaff6LinesWide\"] = \"\\uEBA1\";\n    // U+E551  Elision\n    Glyphs[\"lyricsElision\"] = \"\\uE551\";\n    // U+E550  Narrow elision\n    Glyphs[\"lyricsElisionNarrow\"] = \"\\uE550\";\n    // U+E552  Wide elision\n    Glyphs[\"lyricsElisionWide\"] = \"\\uE552\";\n    // U+E553  Baseline hyphen\n    Glyphs[\"lyricsHyphenBaseline\"] = \"\\uE553\";\n    // U+E554  Non-breaking baseline hyphen\n    Glyphs[\"lyricsHyphenBaselineNonBreaking\"] = \"\\uE554\";\n    // U+E555  Text repeats\n    Glyphs[\"lyricsTextRepeat\"] = \"\\uE555\";\n    // U+E9E1  Flat, hard b (mi)\n    Glyphs[\"medRenFlatHardB\"] = \"\\uE9E1\";\n    // U+E9E0  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftB\"] = \"\\uE9E0\";\n    // U+E9E4  Flat with dot\n    Glyphs[\"medRenFlatWithDot\"] = \"\\uE9E4\";\n    // U+EA24  G clef (Corpus Monodicum)\n    Glyphs[\"medRenGClefCMN\"] = \"\\uEA24\";\n    // U+EA22  Liquescence\n    Glyphs[\"medRenLiquescenceCMN\"] = \"\\uEA22\";\n    // U+EA26  Liquescent ascending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentAscCMN\"] = \"\\uEA26\";\n    // U+EA27  Liquescent descending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentDescCMN\"] = \"\\uEA27\";\n    // U+E9E2  Natural\n    Glyphs[\"medRenNatural\"] = \"\\uE9E2\";\n    // U+E9E5  Natural with interrupted cross\n    Glyphs[\"medRenNaturalWithCross\"] = \"\\uE9E5\";\n    // U+EA2A  Oriscus (Corpus Monodicum)\n    Glyphs[\"medRenOriscusCMN\"] = \"\\uEA2A\";\n    // U+EA23  Plica\n    Glyphs[\"medRenPlicaCMN\"] = \"\\uEA23\";\n    // U+EA25  Punctum (Corpus Monodicum)\n    Glyphs[\"medRenPunctumCMN\"] = \"\\uEA25\";\n    // U+EA28  Quilisma (Corpus Monodicum)\n    Glyphs[\"medRenQuilismaCMN\"] = \"\\uEA28\";\n    // U+E9E3  Croix\n    Glyphs[\"medRenSharpCroix\"] = \"\\uE9E3\";\n    // U+EA29  Strophicus (Corpus Monodicum)\n    Glyphs[\"medRenStrophicusCMN\"] = \"\\uEA29\";\n    // U+EA10  Alteration sign\n    Glyphs[\"mensuralAlterationSign\"] = \"\\uEA10\";\n    // U+E952  Black mensural brevis\n    Glyphs[\"mensuralBlackBrevis\"] = \"\\uE952\";\n    // U+E956  Black mensural void brevis\n    Glyphs[\"mensuralBlackBrevisVoid\"] = \"\\uE956\";\n    // U+E95A  Black mensural dragma\n    Glyphs[\"mensuralBlackDragma\"] = \"\\uE95A\";\n    // U+E951  Black mensural longa\n    Glyphs[\"mensuralBlackLonga\"] = \"\\uE951\";\n    // U+E950  Black mensural maxima\n    Glyphs[\"mensuralBlackMaxima\"] = \"\\uE950\";\n    // U+E954  Black mensural minima\n    Glyphs[\"mensuralBlackMinima\"] = \"\\uE954\";\n    // U+E958  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoid\"] = \"\\uE958\";\n    // U+E953  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevis\"] = \"\\uE953\";\n    // U+E959  Black mensural semibrevis caudata\n    Glyphs[\"mensuralBlackSemibrevisCaudata\"] = \"\\uE959\";\n    // U+E95B  Black mensural oblique semibrevis\n    Glyphs[\"mensuralBlackSemibrevisOblique\"] = \"\\uE95B\";\n    // U+E957  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoid\"] = \"\\uE957\";\n    // U+E955  Black mensural semiminima\n    Glyphs[\"mensuralBlackSemiminima\"] = \"\\uE955\";\n    // U+E905  Mensural C clef\n    Glyphs[\"mensuralCclef\"] = \"\\uE905\";\n    // U+E90A  Petrucci C clef, high position\n    Glyphs[\"mensuralCclefPetrucciPosHigh\"] = \"\\uE90A\";\n    // U+E90B  Petrucci C clef, highest position\n    Glyphs[\"mensuralCclefPetrucciPosHighest\"] = \"\\uE90B\";\n    // U+E908  Petrucci C clef, low position\n    Glyphs[\"mensuralCclefPetrucciPosLow\"] = \"\\uE908\";\n    // U+E907  Petrucci C clef, lowest position\n    Glyphs[\"mensuralCclefPetrucciPosLowest\"] = \"\\uE907\";\n    // U+E909  Petrucci C clef, middle position\n    Glyphs[\"mensuralCclefPetrucciPosMiddle\"] = \"\\uE909\";\n    // U+EA0F  Coloration end, round\n    Glyphs[\"mensuralColorationEndRound\"] = \"\\uEA0F\";\n    // U+EA0D  Coloration end, square\n    Glyphs[\"mensuralColorationEndSquare\"] = \"\\uEA0D\";\n    // U+EA0E  Coloration start, round\n    Glyphs[\"mensuralColorationStartRound\"] = \"\\uEA0E\";\n    // U+EA0C  Coloration start, square\n    Glyphs[\"mensuralColorationStartSquare\"] = \"\\uEA0C\";\n    // U+E940  Combining stem diagonal\n    Glyphs[\"mensuralCombStemDiagonal\"] = \"\\uE940\";\n    // U+E93F  Combining stem down\n    Glyphs[\"mensuralCombStemDown\"] = \"\\uE93F\";\n    // U+E948  Combining stem with extended flag down\n    Glyphs[\"mensuralCombStemDownFlagExtended\"] = \"\\uE948\";\n    // U+E946  Combining stem with flared flag down\n    Glyphs[\"mensuralCombStemDownFlagFlared\"] = \"\\uE946\";\n    // U+E94C  Combining stem with fusa flag down\n    Glyphs[\"mensuralCombStemDownFlagFusa\"] = \"\\uE94C\";\n    // U+E944  Combining stem with flag left down\n    Glyphs[\"mensuralCombStemDownFlagLeft\"] = \"\\uE944\";\n    // U+E942  Combining stem with flag right down\n    Glyphs[\"mensuralCombStemDownFlagRight\"] = \"\\uE942\";\n    // U+E94A  Combining stem with semiminima flag down\n    Glyphs[\"mensuralCombStemDownFlagSemiminima\"] = \"\\uE94A\";\n    // U+E93E  Combining stem up\n    Glyphs[\"mensuralCombStemUp\"] = \"\\uE93E\";\n    // U+E947  Combining stem with extended flag up\n    Glyphs[\"mensuralCombStemUpFlagExtended\"] = \"\\uE947\";\n    // U+E945  Combining stem with flared flag up\n    Glyphs[\"mensuralCombStemUpFlagFlared\"] = \"\\uE945\";\n    // U+E94B  Combining stem with fusa flag up\n    Glyphs[\"mensuralCombStemUpFlagFusa\"] = \"\\uE94B\";\n    // U+E943  Combining stem with flag left up\n    Glyphs[\"mensuralCombStemUpFlagLeft\"] = \"\\uE943\";\n    // U+E941  Combining stem with flag right up\n    Glyphs[\"mensuralCombStemUpFlagRight\"] = \"\\uE941\";\n    // U+E949  Combining stem with semiminima flag up\n    Glyphs[\"mensuralCombStemUpFlagSemiminima\"] = \"\\uE949\";\n    // U+EA0A  Checkmark custos\n    Glyphs[\"mensuralCustosCheckmark\"] = \"\\uEA0A\";\n    // U+EA03  Mensural custos down\n    Glyphs[\"mensuralCustosDown\"] = \"\\uEA03\";\n    // U+EA0B  Turn-like custos\n    Glyphs[\"mensuralCustosTurn\"] = \"\\uEA0B\";\n    // U+EA02  Mensural custos up\n    Glyphs[\"mensuralCustosUp\"] = \"\\uEA02\";\n    // U+E903  Mensural F clef\n    Glyphs[\"mensuralFclef\"] = \"\\uE903\";\n    // U+E904  Petrucci F clef\n    Glyphs[\"mensuralFclefPetrucci\"] = \"\\uE904\";\n    // U+E900  Mensural G clef\n    Glyphs[\"mensuralGclef\"] = \"\\uE900\";\n    // U+E901  Petrucci G clef\n    Glyphs[\"mensuralGclefPetrucci\"] = \"\\uE901\";\n    // U+E92D  Modus imperfectum, vertical\n    Glyphs[\"mensuralModusImperfectumVert\"] = \"\\uE92D\";\n    // U+E92C  Modus perfectum, vertical\n    Glyphs[\"mensuralModusPerfectumVert\"] = \"\\uE92C\";\n    // U+E934  Longa/brevis notehead, black\n    Glyphs[\"mensuralNoteheadLongaBlack\"] = \"\\uE934\";\n    // U+E936  Longa/brevis notehead, black and void\n    Glyphs[\"mensuralNoteheadLongaBlackVoid\"] = \"\\uE936\";\n    // U+E935  Longa/brevis notehead, void\n    Glyphs[\"mensuralNoteheadLongaVoid\"] = \"\\uE935\";\n    // U+E937  Longa/brevis notehead, white\n    Glyphs[\"mensuralNoteheadLongaWhite\"] = \"\\uE937\";\n    // U+E930  Maxima notehead, black\n    Glyphs[\"mensuralNoteheadMaximaBlack\"] = \"\\uE930\";\n    // U+E932  Maxima notehead, black and void\n    Glyphs[\"mensuralNoteheadMaximaBlackVoid\"] = \"\\uE932\";\n    // U+E931  Maxima notehead, void\n    Glyphs[\"mensuralNoteheadMaximaVoid\"] = \"\\uE931\";\n    // U+E933  Maxima notehead, white\n    Glyphs[\"mensuralNoteheadMaximaWhite\"] = \"\\uE933\";\n    // U+E93C  Minima notehead, white\n    Glyphs[\"mensuralNoteheadMinimaWhite\"] = \"\\uE93C\";\n    // U+E938  Semibrevis notehead, black\n    Glyphs[\"mensuralNoteheadSemibrevisBlack\"] = \"\\uE938\";\n    // U+E93A  Semibrevis notehead, black and void\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoid\"] = \"\\uE93A\";\n    // U+E93B  Semibrevis notehead, black and void (turned)\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoidTurned\"] = \"\\uE93B\";\n    // U+E939  Semibrevis notehead, void\n    Glyphs[\"mensuralNoteheadSemibrevisVoid\"] = \"\\uE939\";\n    // U+E93D  Semiminima/fusa notehead, white\n    Glyphs[\"mensuralNoteheadSemiminimaWhite\"] = \"\\uE93D\";\n    // U+E970  Oblique form, ascending 2nd, black\n    Glyphs[\"mensuralObliqueAsc2ndBlack\"] = \"\\uE970\";\n    // U+E972  Oblique form, ascending 2nd, black and void\n    Glyphs[\"mensuralObliqueAsc2ndBlackVoid\"] = \"\\uE972\";\n    // U+E971  Oblique form, ascending 2nd, void\n    Glyphs[\"mensuralObliqueAsc2ndVoid\"] = \"\\uE971\";\n    // U+E973  Oblique form, ascending 2nd, white\n    Glyphs[\"mensuralObliqueAsc2ndWhite\"] = \"\\uE973\";\n    // U+E974  Oblique form, ascending 3rd, black\n    Glyphs[\"mensuralObliqueAsc3rdBlack\"] = \"\\uE974\";\n    // U+E976  Oblique form, ascending 3rd, black and void\n    Glyphs[\"mensuralObliqueAsc3rdBlackVoid\"] = \"\\uE976\";\n    // U+E975  Oblique form, ascending 3rd, void\n    Glyphs[\"mensuralObliqueAsc3rdVoid\"] = \"\\uE975\";\n    // U+E977  Oblique form, ascending 3rd, white\n    Glyphs[\"mensuralObliqueAsc3rdWhite\"] = \"\\uE977\";\n    // U+E978  Oblique form, ascending 4th, black\n    Glyphs[\"mensuralObliqueAsc4thBlack\"] = \"\\uE978\";\n    // U+E97A  Oblique form, ascending 4th, black and void\n    Glyphs[\"mensuralObliqueAsc4thBlackVoid\"] = \"\\uE97A\";\n    // U+E979  Oblique form, ascending 4th, void\n    Glyphs[\"mensuralObliqueAsc4thVoid\"] = \"\\uE979\";\n    // U+E97B  Oblique form, ascending 4th, white\n    Glyphs[\"mensuralObliqueAsc4thWhite\"] = \"\\uE97B\";\n    // U+E97C  Oblique form, ascending 5th, black\n    Glyphs[\"mensuralObliqueAsc5thBlack\"] = \"\\uE97C\";\n    // U+E97E  Oblique form, ascending 5th, black and void\n    Glyphs[\"mensuralObliqueAsc5thBlackVoid\"] = \"\\uE97E\";\n    // U+E97D  Oblique form, ascending 5th, void\n    Glyphs[\"mensuralObliqueAsc5thVoid\"] = \"\\uE97D\";\n    // U+E97F  Oblique form, ascending 5th, white\n    Glyphs[\"mensuralObliqueAsc5thWhite\"] = \"\\uE97F\";\n    // U+E980  Oblique form, descending 2nd, black\n    Glyphs[\"mensuralObliqueDesc2ndBlack\"] = \"\\uE980\";\n    // U+E982  Oblique form, descending 2nd, black and void\n    Glyphs[\"mensuralObliqueDesc2ndBlackVoid\"] = \"\\uE982\";\n    // U+E981  Oblique form, descending 2nd, void\n    Glyphs[\"mensuralObliqueDesc2ndVoid\"] = \"\\uE981\";\n    // U+E983  Oblique form, descending 2nd, white\n    Glyphs[\"mensuralObliqueDesc2ndWhite\"] = \"\\uE983\";\n    // U+E984  Oblique form, descending 3rd, black\n    Glyphs[\"mensuralObliqueDesc3rdBlack\"] = \"\\uE984\";\n    // U+E986  Oblique form, descending 3rd, black and void\n    Glyphs[\"mensuralObliqueDesc3rdBlackVoid\"] = \"\\uE986\";\n    // U+E985  Oblique form, descending 3rd, void\n    Glyphs[\"mensuralObliqueDesc3rdVoid\"] = \"\\uE985\";\n    // U+E987  Oblique form, descending 3rd, white\n    Glyphs[\"mensuralObliqueDesc3rdWhite\"] = \"\\uE987\";\n    // U+E988  Oblique form, descending 4th, black\n    Glyphs[\"mensuralObliqueDesc4thBlack\"] = \"\\uE988\";\n    // U+E98A  Oblique form, descending 4th, black and void\n    Glyphs[\"mensuralObliqueDesc4thBlackVoid\"] = \"\\uE98A\";\n    // U+E989  Oblique form, descending 4th, void\n    Glyphs[\"mensuralObliqueDesc4thVoid\"] = \"\\uE989\";\n    // U+E98B  Oblique form, descending 4th, white\n    Glyphs[\"mensuralObliqueDesc4thWhite\"] = \"\\uE98B\";\n    // U+E98C  Oblique form, descending 5th, black\n    Glyphs[\"mensuralObliqueDesc5thBlack\"] = \"\\uE98C\";\n    // U+E98E  Oblique form, descending 5th, black and void\n    Glyphs[\"mensuralObliqueDesc5thBlackVoid\"] = \"\\uE98E\";\n    // U+E98D  Oblique form, descending 5th, void\n    Glyphs[\"mensuralObliqueDesc5thVoid\"] = \"\\uE98D\";\n    // U+E98F  Oblique form, descending 5th, white\n    Glyphs[\"mensuralObliqueDesc5thWhite\"] = \"\\uE98F\";\n    // U+E910  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1\"] = \"\\uE910\";\n    // U+E919  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10\"] = \"\\uE919\";\n    // U+E91A  Tempus imperfectum cum prolatione imperfecta diminution 5\n    Glyphs[\"mensuralProlation11\"] = \"\\uE91A\";\n    // U+E911  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2\"] = \"\\uE911\";\n    // U+E912  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3\"] = \"\\uE912\";\n    // U+E913  Tempus perfectum cum prolatione perfecta diminution 2 (9/16)\n    Glyphs[\"mensuralProlation4\"] = \"\\uE913\";\n    // U+E914  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5\"] = \"\\uE914\";\n    // U+E915  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6\"] = \"\\uE915\";\n    // U+E916  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7\"] = \"\\uE916\";\n    // U+E917  Tempus imperfectum cum prolatione imperfecta diminution 2 (6/16)\n    Glyphs[\"mensuralProlation8\"] = \"\\uE917\";\n    // U+E918  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9\"] = \"\\uE918\";\n    // U+E920  Combining dot\n    Glyphs[\"mensuralProlationCombiningDot\"] = \"\\uE920\";\n    // U+E924  Combining void dot\n    Glyphs[\"mensuralProlationCombiningDotVoid\"] = \"\\uE924\";\n    // U+E925  Combining vertical stroke\n    Glyphs[\"mensuralProlationCombiningStroke\"] = \"\\uE925\";\n    // U+E922  Combining three dots horizontal\n    Glyphs[\"mensuralProlationCombiningThreeDots\"] = \"\\uE922\";\n    // U+E923  Combining three dots triangular\n    Glyphs[\"mensuralProlationCombiningThreeDotsTri\"] = \"\\uE923\";\n    // U+E921  Combining two dots\n    Glyphs[\"mensuralProlationCombiningTwoDots\"] = \"\\uE921\";\n    // U+E926  Mensural proportion 1\n    Glyphs[\"mensuralProportion1\"] = \"\\uE926\";\n    // U+E927  Mensural proportion 2\n    Glyphs[\"mensuralProportion2\"] = \"\\uE927\";\n    // U+E928  Mensural proportion 3\n    Glyphs[\"mensuralProportion3\"] = \"\\uE928\";\n    // U+E929  Mensural proportion 4\n    Glyphs[\"mensuralProportion4\"] = \"\\uE929\";\n    // U+EE90  Mensural proportion 5\n    Glyphs[\"mensuralProportion5\"] = \"\\uEE90\";\n    // U+EE91  Mensural proportion 6\n    Glyphs[\"mensuralProportion6\"] = \"\\uEE91\";\n    // U+EE92  Mensural proportion 7\n    Glyphs[\"mensuralProportion7\"] = \"\\uEE92\";\n    // U+EE93  Mensural proportion 8\n    Glyphs[\"mensuralProportion8\"] = \"\\uEE93\";\n    // U+EE94  Mensural proportion 9\n    Glyphs[\"mensuralProportion9\"] = \"\\uEE94\";\n    // U+E92B  Mensural proportion major\n    Glyphs[\"mensuralProportionMajor\"] = \"\\uE92B\";\n    // U+E92A  Mensural proportion minor\n    Glyphs[\"mensuralProportionMinor\"] = \"\\uE92A\";\n    // U+E91C  Proportio dupla 1\n    Glyphs[\"mensuralProportionProportioDupla1\"] = \"\\uE91C\";\n    // U+E91D  Proportio dupla 2\n    Glyphs[\"mensuralProportionProportioDupla2\"] = \"\\uE91D\";\n    // U+E91F  Proportio quadrupla\n    Glyphs[\"mensuralProportionProportioQuadrupla\"] = \"\\uE91F\";\n    // U+E91E  Proportio tripla\n    Glyphs[\"mensuralProportionProportioTripla\"] = \"\\uE91E\";\n    // U+E91B  Tempus perfectum\n    Glyphs[\"mensuralProportionTempusPerfectum\"] = \"\\uE91B\";\n    // U+E9F3  Brevis rest\n    Glyphs[\"mensuralRestBrevis\"] = \"\\uE9F3\";\n    // U+E9F7  Fusa rest\n    Glyphs[\"mensuralRestFusa\"] = \"\\uE9F7\";\n    // U+E9F2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfecta\"] = \"\\uE9F2\";\n    // U+E9F1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfecta\"] = \"\\uE9F1\";\n    // U+E9F0  Maxima rest\n    Glyphs[\"mensuralRestMaxima\"] = \"\\uE9F0\";\n    // U+E9F5  Minima rest\n    Glyphs[\"mensuralRestMinima\"] = \"\\uE9F5\";\n    // U+E9F4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevis\"] = \"\\uE9F4\";\n    // U+E9F8  Semifusa rest\n    Glyphs[\"mensuralRestSemifusa\"] = \"\\uE9F8\";\n    // U+E9F6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminima\"] = \"\\uE9F6\";\n    // U+EA01  Signum congruentiae down\n    Glyphs[\"mensuralSignumDown\"] = \"\\uEA01\";\n    // U+EA00  Signum congruentiae up\n    Glyphs[\"mensuralSignumUp\"] = \"\\uEA00\";\n    // U+E92F  Tempus imperfectum, horizontal\n    Glyphs[\"mensuralTempusImperfectumHoriz\"] = \"\\uE92F\";\n    // U+E92E  Tempus perfectum, horizontal\n    Glyphs[\"mensuralTempusPerfectumHoriz\"] = \"\\uE92E\";\n    // U+E95E  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevis\"] = \"\\uE95E\";\n    // U+E961  White mensural fusa\n    Glyphs[\"mensuralWhiteFusa\"] = \"\\uE961\";\n    // U+E95D  White mensural longa\n    Glyphs[\"mensuralWhiteLonga\"] = \"\\uE95D\";\n    // U+E95C  White mensural maxima\n    Glyphs[\"mensuralWhiteMaxima\"] = \"\\uE95C\";\n    // U+E95F  White mensural minima\n    Glyphs[\"mensuralWhiteMinima\"] = \"\\uE95F\";\n    // U+E962  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevis\"] = \"\\uE962\";\n    // U+E960  White mensural semiminima\n    Glyphs[\"mensuralWhiteSemiminima\"] = \"\\uE960\";\n    // U+ECB7  Augmentation dot\n    Glyphs[\"metAugmentationDot\"] = \"\\uECB7\";\n    // U+ECB6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote1024thDown\"] = \"\\uECB6\";\n    // U+ECB5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote1024thUp\"] = \"\\uECB5\";\n    // U+ECB0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"metNote128thDown\"] = \"\\uECB0\";\n    // U+ECAF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"metNote128thUp\"] = \"\\uECAF\";\n    // U+ECAA  16th note (semiquaver) stem down\n    Glyphs[\"metNote16thDown\"] = \"\\uECAA\";\n    // U+ECA9  16th note (semiquaver) stem up\n    Glyphs[\"metNote16thUp\"] = \"\\uECA9\";\n    // U+ECB2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote256thDown\"] = \"\\uECB2\";\n    // U+ECB1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote256thUp\"] = \"\\uECB1\";\n    // U+ECAC  32nd note (demisemiquaver) stem down\n    Glyphs[\"metNote32ndDown\"] = \"\\uECAC\";\n    // U+ECAB  32nd note (demisemiquaver) stem up\n    Glyphs[\"metNote32ndUp\"] = \"\\uECAB\";\n    // U+ECB4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote512thDown\"] = \"\\uECB4\";\n    // U+ECB3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote512thUp\"] = \"\\uECB3\";\n    // U+ECAE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"metNote64thDown\"] = \"\\uECAE\";\n    // U+ECAD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"metNote64thUp\"] = \"\\uECAD\";\n    // U+ECA8  Eighth note (quaver) stem down\n    Glyphs[\"metNote8thDown\"] = \"\\uECA8\";\n    // U+ECA7  Eighth note (quaver) stem up\n    Glyphs[\"metNote8thUp\"] = \"\\uECA7\";\n    // U+ECA0  Double whole note (breve)\n    Glyphs[\"metNoteDoubleWhole\"] = \"\\uECA0\";\n    // U+ECA1  Double whole note (square)\n    Glyphs[\"metNoteDoubleWholeSquare\"] = \"\\uECA1\";\n    // U+ECA4  Half note (minim) stem down\n    Glyphs[\"metNoteHalfDown\"] = \"\\uECA4\";\n    // U+ECA3  Half note (minim) stem up\n    Glyphs[\"metNoteHalfUp\"] = \"\\uECA3\";\n    // U+ECA6  Quarter note (crotchet) stem down\n    Glyphs[\"metNoteQuarterDown\"] = \"\\uECA6\";\n    // U+ECA5  Quarter note (crotchet) stem up\n    Glyphs[\"metNoteQuarterUp\"] = \"\\uECA5\";\n    // U+ECA2  Whole note (semibreve)\n    Glyphs[\"metNoteWhole\"] = \"\\uECA2\";\n    // U+EC63  Left-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowLeft\"] = \"\\uEC63\";\n    // U+EC64  Right-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowRight\"] = \"\\uEC64\";\n    // U+EC61  Do not copy\n    Glyphs[\"miscDoNotCopy\"] = \"\\uEC61\";\n    // U+EC60  Do not photocopy\n    Glyphs[\"miscDoNotPhotocopy\"] = \"\\uEC60\";\n    // U+EC62  Eyeglasses\n    Glyphs[\"miscEyeglasses\"] = \"\\uEC62\";\n    // U+E1E6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note1024thDown\"] = \"\\uE1E6\";\n    // U+E1E5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note1024thUp\"] = \"\\uE1E5\";\n    // U+E1E0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"note128thDown\"] = \"\\uE1E0\";\n    // U+E1DF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUp\"] = \"\\uE1DF\";\n    // U+E1DA  16th note (semiquaver) stem down\n    Glyphs[\"note16thDown\"] = \"\\uE1DA\";\n    // U+E1D9  16th note (semiquaver) stem up\n    Glyphs[\"note16thUp\"] = \"\\uE1D9\";\n    // U+E1E2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"note256thDown\"] = \"\\uE1E2\";\n    // U+E1E1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"note256thUp\"] = \"\\uE1E1\";\n    // U+E1DC  32nd note (demisemiquaver) stem down\n    Glyphs[\"note32ndDown\"] = \"\\uE1DC\";\n    // U+E1DB  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUp\"] = \"\\uE1DB\";\n    // U+E1E4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note512thDown\"] = \"\\uE1E4\";\n    // U+E1E3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note512thUp\"] = \"\\uE1E3\";\n    // U+E1DE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"note64thDown\"] = \"\\uE1DE\";\n    // U+E1DD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUp\"] = \"\\uE1DD\";\n    // U+E1D8  Eighth note (quaver) stem down\n    Glyphs[\"note8thDown\"] = \"\\uE1D8\";\n    // U+E1D7  Eighth note (quaver) stem up\n    Glyphs[\"note8thUp\"] = \"\\uE1D7\";\n    // U+E197  A (black note)\n    Glyphs[\"noteABlack\"] = \"\\uE197\";\n    // U+E196  A flat (black note)\n    Glyphs[\"noteAFlatBlack\"] = \"\\uE196\";\n    // U+E17F  A flat (half note)\n    Glyphs[\"noteAFlatHalf\"] = \"\\uE17F\";\n    // U+E168  A flat (whole note)\n    Glyphs[\"noteAFlatWhole\"] = \"\\uE168\";\n    // U+E180  A (half note)\n    Glyphs[\"noteAHalf\"] = \"\\uE180\";\n    // U+E198  A sharp (black note)\n    Glyphs[\"noteASharpBlack\"] = \"\\uE198\";\n    // U+E181  A sharp (half note)\n    Glyphs[\"noteASharpHalf\"] = \"\\uE181\";\n    // U+E16A  A sharp (whole note)\n    Glyphs[\"noteASharpWhole\"] = \"\\uE16A\";\n    // U+E169  A (whole note)\n    Glyphs[\"noteAWhole\"] = \"\\uE169\";\n    // U+E19A  B (black note)\n    Glyphs[\"noteBBlack\"] = \"\\uE19A\";\n    // U+E199  B flat (black note)\n    Glyphs[\"noteBFlatBlack\"] = \"\\uE199\";\n    // U+E182  B flat (half note)\n    Glyphs[\"noteBFlatHalf\"] = \"\\uE182\";\n    // U+E16B  B flat (whole note)\n    Glyphs[\"noteBFlatWhole\"] = \"\\uE16B\";\n    // U+E183  B (half note)\n    Glyphs[\"noteBHalf\"] = \"\\uE183\";\n    // U+E19B  B sharp (black note)\n    Glyphs[\"noteBSharpBlack\"] = \"\\uE19B\";\n    // U+E184  B sharp (half note)\n    Glyphs[\"noteBSharpHalf\"] = \"\\uE184\";\n    // U+E16D  B sharp (whole note)\n    Glyphs[\"noteBSharpWhole\"] = \"\\uE16D\";\n    // U+E16C  B (whole note)\n    Glyphs[\"noteBWhole\"] = \"\\uE16C\";\n    // U+E19D  C (black note)\n    Glyphs[\"noteCBlack\"] = \"\\uE19D\";\n    // U+E19C  C flat (black note)\n    Glyphs[\"noteCFlatBlack\"] = \"\\uE19C\";\n    // U+E185  C flat (half note)\n    Glyphs[\"noteCFlatHalf\"] = \"\\uE185\";\n    // U+E16E  C flat (whole note)\n    Glyphs[\"noteCFlatWhole\"] = \"\\uE16E\";\n    // U+E186  C (half note)\n    Glyphs[\"noteCHalf\"] = \"\\uE186\";\n    // U+E19E  C sharp (black note)\n    Glyphs[\"noteCSharpBlack\"] = \"\\uE19E\";\n    // U+E187  C sharp (half note)\n    Glyphs[\"noteCSharpHalf\"] = \"\\uE187\";\n    // U+E170  C sharp (whole note)\n    Glyphs[\"noteCSharpWhole\"] = \"\\uE170\";\n    // U+E16F  C (whole note)\n    Glyphs[\"noteCWhole\"] = \"\\uE16F\";\n    // U+E1A0  D (black note)\n    Glyphs[\"noteDBlack\"] = \"\\uE1A0\";\n    // U+E19F  D flat (black note)\n    Glyphs[\"noteDFlatBlack\"] = \"\\uE19F\";\n    // U+E188  D flat (half note)\n    Glyphs[\"noteDFlatHalf\"] = \"\\uE188\";\n    // U+E171  D flat (whole note)\n    Glyphs[\"noteDFlatWhole\"] = \"\\uE171\";\n    // U+E189  D (half note)\n    Glyphs[\"noteDHalf\"] = \"\\uE189\";\n    // U+E1A1  D sharp (black note)\n    Glyphs[\"noteDSharpBlack\"] = \"\\uE1A1\";\n    // U+E18A  D sharp (half note)\n    Glyphs[\"noteDSharpHalf\"] = \"\\uE18A\";\n    // U+E173  D sharp (whole note)\n    Glyphs[\"noteDSharpWhole\"] = \"\\uE173\";\n    // U+E172  D (whole note)\n    Glyphs[\"noteDWhole\"] = \"\\uE172\";\n    // U+EEF2  Di (black note)\n    Glyphs[\"noteDiBlack\"] = \"\\uEEF2\";\n    // U+EEE9  Di (half note)\n    Glyphs[\"noteDiHalf\"] = \"\\uEEE9\";\n    // U+EEE0  Di (whole note)\n    Glyphs[\"noteDiWhole\"] = \"\\uEEE0\";\n    // U+E160  Do (black note)\n    Glyphs[\"noteDoBlack\"] = \"\\uE160\";\n    // U+E158  Do (half note)\n    Glyphs[\"noteDoHalf\"] = \"\\uE158\";\n    // U+E150  Do (whole note)\n    Glyphs[\"noteDoWhole\"] = \"\\uE150\";\n    // U+E1D0  Double whole note (breve)\n    Glyphs[\"noteDoubleWhole\"] = \"\\uE1D0\";\n    // U+E1D1  Double whole note (square)\n    Glyphs[\"noteDoubleWholeSquare\"] = \"\\uE1D1\";\n    // U+E1A3  E (black note)\n    Glyphs[\"noteEBlack\"] = \"\\uE1A3\";\n    // U+E1A2  E flat (black note)\n    Glyphs[\"noteEFlatBlack\"] = \"\\uE1A2\";\n    // U+E18B  E flat (half note)\n    Glyphs[\"noteEFlatHalf\"] = \"\\uE18B\";\n    // U+E174  E flat (whole note)\n    Glyphs[\"noteEFlatWhole\"] = \"\\uE174\";\n    // U+E18C  E (half note)\n    Glyphs[\"noteEHalf\"] = \"\\uE18C\";\n    // U+E1A4  E sharp (black note)\n    Glyphs[\"noteESharpBlack\"] = \"\\uE1A4\";\n    // U+E18D  E sharp (half note)\n    Glyphs[\"noteESharpHalf\"] = \"\\uE18D\";\n    // U+E176  E sharp (whole note)\n    Glyphs[\"noteESharpWhole\"] = \"\\uE176\";\n    // U+E175  E (whole note)\n    Glyphs[\"noteEWhole\"] = \"\\uE175\";\n    // U+E1AF  Empty black note\n    Glyphs[\"noteEmptyBlack\"] = \"\\uE1AF\";\n    // U+E1AE  Empty half note\n    Glyphs[\"noteEmptyHalf\"] = \"\\uE1AE\";\n    // U+E1AD  Empty whole note\n    Glyphs[\"noteEmptyWhole\"] = \"\\uE1AD\";\n    // U+E1A6  F (black note)\n    Glyphs[\"noteFBlack\"] = \"\\uE1A6\";\n    // U+E1A5  F flat (black note)\n    Glyphs[\"noteFFlatBlack\"] = \"\\uE1A5\";\n    // U+E18E  F flat (half note)\n    Glyphs[\"noteFFlatHalf\"] = \"\\uE18E\";\n    // U+E177  F flat (whole note)\n    Glyphs[\"noteFFlatWhole\"] = \"\\uE177\";\n    // U+E18F  F (half note)\n    Glyphs[\"noteFHalf\"] = \"\\uE18F\";\n    // U+E1A7  F sharp (black note)\n    Glyphs[\"noteFSharpBlack\"] = \"\\uE1A7\";\n    // U+E190  F sharp (half note)\n    Glyphs[\"noteFSharpHalf\"] = \"\\uE190\";\n    // U+E179  F sharp (whole note)\n    Glyphs[\"noteFSharpWhole\"] = \"\\uE179\";\n    // U+E178  F (whole note)\n    Glyphs[\"noteFWhole\"] = \"\\uE178\";\n    // U+E163  Fa (black note)\n    Glyphs[\"noteFaBlack\"] = \"\\uE163\";\n    // U+E15B  Fa (half note)\n    Glyphs[\"noteFaHalf\"] = \"\\uE15B\";\n    // U+E153  Fa (whole note)\n    Glyphs[\"noteFaWhole\"] = \"\\uE153\";\n    // U+EEF6  Fi (black note)\n    Glyphs[\"noteFiBlack\"] = \"\\uEEF6\";\n    // U+EEED  Fi (half note)\n    Glyphs[\"noteFiHalf\"] = \"\\uEEED\";\n    // U+EEE4  Fi (whole note)\n    Glyphs[\"noteFiWhole\"] = \"\\uEEE4\";\n    // U+E1A9  G (black note)\n    Glyphs[\"noteGBlack\"] = \"\\uE1A9\";\n    // U+E1A8  G flat (black note)\n    Glyphs[\"noteGFlatBlack\"] = \"\\uE1A8\";\n    // U+E191  G flat (half note)\n    Glyphs[\"noteGFlatHalf\"] = \"\\uE191\";\n    // U+E17A  G flat (whole note)\n    Glyphs[\"noteGFlatWhole\"] = \"\\uE17A\";\n    // U+E192  G (half note)\n    Glyphs[\"noteGHalf\"] = \"\\uE192\";\n    // U+E1AA  G sharp (black note)\n    Glyphs[\"noteGSharpBlack\"] = \"\\uE1AA\";\n    // U+E193  G sharp (half note)\n    Glyphs[\"noteGSharpHalf\"] = \"\\uE193\";\n    // U+E17C  G sharp (whole note)\n    Glyphs[\"noteGSharpWhole\"] = \"\\uE17C\";\n    // U+E17B  G (whole note)\n    Glyphs[\"noteGWhole\"] = \"\\uE17B\";\n    // U+E1AB  H (black note)\n    Glyphs[\"noteHBlack\"] = \"\\uE1AB\";\n    // U+E194  H (half note)\n    Glyphs[\"noteHHalf\"] = \"\\uE194\";\n    // U+E1AC  H sharp (black note)\n    Glyphs[\"noteHSharpBlack\"] = \"\\uE1AC\";\n    // U+E195  H sharp (half note)\n    Glyphs[\"noteHSharpHalf\"] = \"\\uE195\";\n    // U+E17E  H sharp (whole note)\n    Glyphs[\"noteHSharpWhole\"] = \"\\uE17E\";\n    // U+E17D  H (whole note)\n    Glyphs[\"noteHWhole\"] = \"\\uE17D\";\n    // U+E1D4  Half note (minim) stem down\n    Glyphs[\"noteHalfDown\"] = \"\\uE1D4\";\n    // U+E1D3  Half note (minim) stem up\n    Glyphs[\"noteHalfUp\"] = \"\\uE1D3\";\n    // U+E165  La (black note)\n    Glyphs[\"noteLaBlack\"] = \"\\uE165\";\n    // U+E15D  La (half note)\n    Glyphs[\"noteLaHalf\"] = \"\\uE15D\";\n    // U+E155  La (whole note)\n    Glyphs[\"noteLaWhole\"] = \"\\uE155\";\n    // U+EEF9  Le (black note)\n    Glyphs[\"noteLeBlack\"] = \"\\uEEF9\";\n    // U+EEF0  Le (half note)\n    Glyphs[\"noteLeHalf\"] = \"\\uEEF0\";\n    // U+EEE7  Le (whole note)\n    Glyphs[\"noteLeWhole\"] = \"\\uEEE7\";\n    // U+EEF8  Li (black note)\n    Glyphs[\"noteLiBlack\"] = \"\\uEEF8\";\n    // U+EEEF  Li (half note)\n    Glyphs[\"noteLiHalf\"] = \"\\uEEEF\";\n    // U+EEE6  Li (whole note)\n    Glyphs[\"noteLiWhole\"] = \"\\uEEE6\";\n    // U+EEF5  Me (black note)\n    Glyphs[\"noteMeBlack\"] = \"\\uEEF5\";\n    // U+EEEC  Me (half note)\n    Glyphs[\"noteMeHalf\"] = \"\\uEEEC\";\n    // U+EEE3  Me (whole note)\n    Glyphs[\"noteMeWhole\"] = \"\\uEEE3\";\n    // U+E162  Mi (black note)\n    Glyphs[\"noteMiBlack\"] = \"\\uE162\";\n    // U+E15A  Mi (half note)\n    Glyphs[\"noteMiHalf\"] = \"\\uE15A\";\n    // U+E152  Mi (whole note)\n    Glyphs[\"noteMiWhole\"] = \"\\uE152\";\n    // U+E1D6  Quarter note (crotchet) stem down\n    Glyphs[\"noteQuarterDown\"] = \"\\uE1D6\";\n    // U+E1D5  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUp\"] = \"\\uE1D5\";\n    // U+EEF4  Ra (black note)\n    Glyphs[\"noteRaBlack\"] = \"\\uEEF4\";\n    // U+EEEB  Ra (half note)\n    Glyphs[\"noteRaHalf\"] = \"\\uEEEB\";\n    // U+EEE2  Ra (whole note)\n    Glyphs[\"noteRaWhole\"] = \"\\uEEE2\";\n    // U+E161  Re (black note)\n    Glyphs[\"noteReBlack\"] = \"\\uE161\";\n    // U+E159  Re (half note)\n    Glyphs[\"noteReHalf\"] = \"\\uE159\";\n    // U+E151  Re (whole note)\n    Glyphs[\"noteReWhole\"] = \"\\uE151\";\n    // U+EEF3  Ri (black note)\n    Glyphs[\"noteRiBlack\"] = \"\\uEEF3\";\n    // U+EEEA  Ri (half note)\n    Glyphs[\"noteRiHalf\"] = \"\\uEEEA\";\n    // U+EEE1  Ri (whole note)\n    Glyphs[\"noteRiWhole\"] = \"\\uEEE1\";\n    // U+EEF7  Se (black note)\n    Glyphs[\"noteSeBlack\"] = \"\\uEEF7\";\n    // U+EEEE  Se (half note)\n    Glyphs[\"noteSeHalf\"] = \"\\uEEEE\";\n    // U+EEE5  Se (whole note)\n    Glyphs[\"noteSeWhole\"] = \"\\uEEE5\";\n    // U+E1C9  Arrowhead left black (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftBlack\"] = \"\\uE1C9\";\n    // U+ECDC  Arrowhead left double whole (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftDoubleWhole\"] = \"\\uECDC\";\n    // U+E1C8  Arrowhead left white (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftWhite\"] = \"\\uE1C8\";\n    // U+E1B9  Diamond black (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondBlack\"] = \"\\uE1B9\";\n    // U+ECD4  Diamond double whole (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondDoubleWhole\"] = \"\\uECD4\";\n    // U+E1B8  Diamond white (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondWhite\"] = \"\\uE1B8\";\n    // U+E1C5  Isosceles triangle black (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleBlack\"] = \"\\uE1C5\";\n    // U+ECDA  Isosceles triangle double whole (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleDoubleWhole\"] = \"\\uECDA\";\n    // U+E1C4  Isosceles triangle white (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleWhite\"] = \"\\uE1C4\";\n    // U+E1C1  Inverted keystone black (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneBlack\"] = \"\\uE1C1\";\n    // U+ECD8  Inverted keystone double whole (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneDoubleWhole\"] = \"\\uECD8\";\n    // U+E1C0  Inverted keystone white (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneWhite\"] = \"\\uE1C0\";\n    // U+E1BD  Moon black (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonBlack\"] = \"\\uE1BD\";\n    // U+ECD6  Moon double whole (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonDoubleWhole\"] = \"\\uECD6\";\n    // U+E1C7  Moon left black (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftBlack\"] = \"\\uE1C7\";\n    // U+ECDB  Moon left double whole (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftDoubleWhole\"] = \"\\uECDB\";\n    // U+E1C6  Moon left white (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftWhite\"] = \"\\uE1C6\";\n    // U+E1BC  Moon white (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonWhite\"] = \"\\uE1BC\";\n    // U+E1C3  Quarter moon black (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonBlack\"] = \"\\uE1C3\";\n    // U+ECD9  Quarter moon double whole (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonDoubleWhole\"] = \"\\uECD9\";\n    // U+E1C2  Quarter moon white (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonWhite\"] = \"\\uE1C2\";\n    // U+E1B1  Round black (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundBlack\"] = \"\\uE1B1\";\n    // U+ECD0  Round double whole (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundDoubleWhole\"] = \"\\uECD0\";\n    // U+E1B0  Round white (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundWhite\"] = \"\\uE1B0\";\n    // U+E1B3  Square black (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareBlack\"] = \"\\uE1B3\";\n    // U+ECD1  Square double whole (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareDoubleWhole\"] = \"\\uECD1\";\n    // U+E1B2  Square white (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareWhite\"] = \"\\uE1B2\";\n    // U+E1B7  Triangle left black (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftBlack\"] = \"\\uE1B7\";\n    // U+ECD3  Triangle left double whole (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftDoubleWhole\"] = \"\\uECD3\";\n    // U+E1B6  Triangle left white (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftWhite\"] = \"\\uE1B6\";\n    // U+E1B5  Triangle right black (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightBlack\"] = \"\\uE1B5\";\n    // U+ECD2  Triangle right double whole (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightDoubleWhole\"] = \"\\uECD2\";\n    // U+E1B4  Triangle right white (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightWhite\"] = \"\\uE1B4\";\n    // U+E1BF  Triangle-round black (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundBlack\"] = \"\\uE1BF\";\n    // U+ECD7  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundDoubleWhole\"] = \"\\uECD7\";\n    // U+E1CB  Triangle-round left black (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftBlack\"] = \"\\uE1CB\";\n    // U+ECDD  Triangle-round left double whole (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftDoubleWhole\"] = \"\\uECDD\";\n    // U+E1CA  Triangle-round left white (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftWhite\"] = \"\\uE1CA\";\n    // U+E1BE  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundWhite\"] = \"\\uE1BE\";\n    // U+E1BB  Triangle up black (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpBlack\"] = \"\\uE1BB\";\n    // U+ECD5  Triangle up double whole (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpDoubleWhole\"] = \"\\uECD5\";\n    // U+E1BA  Triangle up white (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpWhite\"] = \"\\uE1BA\";\n    // U+E167  Si (black note)\n    Glyphs[\"noteSiBlack\"] = \"\\uE167\";\n    // U+E15F  Si (half note)\n    Glyphs[\"noteSiHalf\"] = \"\\uE15F\";\n    // U+E157  Si (whole note)\n    Glyphs[\"noteSiWhole\"] = \"\\uE157\";\n    // U+E164  So (black note)\n    Glyphs[\"noteSoBlack\"] = \"\\uE164\";\n    // U+E15C  So (half note)\n    Glyphs[\"noteSoHalf\"] = \"\\uE15C\";\n    // U+E154  So (whole note)\n    Glyphs[\"noteSoWhole\"] = \"\\uE154\";\n    // U+EEFA  Te (black note)\n    Glyphs[\"noteTeBlack\"] = \"\\uEEFA\";\n    // U+EEF1  Te (half note)\n    Glyphs[\"noteTeHalf\"] = \"\\uEEF1\";\n    // U+EEE8  Te (whole note)\n    Glyphs[\"noteTeWhole\"] = \"\\uEEE8\";\n    // U+E166  Ti (black note)\n    Glyphs[\"noteTiBlack\"] = \"\\uE166\";\n    // U+E15E  Ti (half note)\n    Glyphs[\"noteTiHalf\"] = \"\\uE15E\";\n    // U+E156  Ti (whole note)\n    Glyphs[\"noteTiWhole\"] = \"\\uE156\";\n    // U+E1D2  Whole note (semibreve)\n    Glyphs[\"noteWhole\"] = \"\\uE1D2\";\n    // U+E0A4  Black notehead\n    Glyphs[\"noteheadBlack\"] = \"\\uE0A4\";\n    // U+E0F7  Circle slash notehead\n    Glyphs[\"noteheadCircleSlash\"] = \"\\uE0F7\";\n    // U+E0B3  Circle X notehead\n    Glyphs[\"noteheadCircleX\"] = \"\\uE0B3\";\n    // U+E0B0  Circle X double whole\n    Glyphs[\"noteheadCircleXDoubleWhole\"] = \"\\uE0B0\";\n    // U+E0B2  Circle X half\n    Glyphs[\"noteheadCircleXHalf\"] = \"\\uE0B2\";\n    // U+E0B1  Circle X whole\n    Glyphs[\"noteheadCircleXWhole\"] = \"\\uE0B1\";\n    // U+E0E4  Circled black notehead\n    Glyphs[\"noteheadCircledBlack\"] = \"\\uE0E4\";\n    // U+E0E8  Black notehead in large circle\n    Glyphs[\"noteheadCircledBlackLarge\"] = \"\\uE0E8\";\n    // U+E0E7  Circled double whole notehead\n    Glyphs[\"noteheadCircledDoubleWhole\"] = \"\\uE0E7\";\n    // U+E0EB  Double whole notehead in large circle\n    Glyphs[\"noteheadCircledDoubleWholeLarge\"] = \"\\uE0EB\";\n    // U+E0E5  Circled half notehead\n    Glyphs[\"noteheadCircledHalf\"] = \"\\uE0E5\";\n    // U+E0E9  Half notehead in large circle\n    Glyphs[\"noteheadCircledHalfLarge\"] = \"\\uE0E9\";\n    // U+E0E6  Circled whole notehead\n    Glyphs[\"noteheadCircledWhole\"] = \"\\uE0E6\";\n    // U+E0EA  Whole notehead in large circle\n    Glyphs[\"noteheadCircledWholeLarge\"] = \"\\uE0EA\";\n    // U+E0EC  Cross notehead in large circle\n    Glyphs[\"noteheadCircledXLarge\"] = \"\\uE0EC\";\n    // U+E124  Double whole note cluster, 2nd\n    Glyphs[\"noteheadClusterDoubleWhole2nd\"] = \"\\uE124\";\n    // U+E128  Double whole note cluster, 3rd\n    Glyphs[\"noteheadClusterDoubleWhole3rd\"] = \"\\uE128\";\n    // U+E12E  Combining double whole note cluster, bottom\n    Glyphs[\"noteheadClusterDoubleWholeBottom\"] = \"\\uE12E\";\n    // U+E12D  Combining double whole note cluster, middle\n    Glyphs[\"noteheadClusterDoubleWholeMiddle\"] = \"\\uE12D\";\n    // U+E12C  Combining double whole note cluster, top\n    Glyphs[\"noteheadClusterDoubleWholeTop\"] = \"\\uE12C\";\n    // U+E126  Half note cluster, 2nd\n    Glyphs[\"noteheadClusterHalf2nd\"] = \"\\uE126\";\n    // U+E12A  Half note cluster, 3rd\n    Glyphs[\"noteheadClusterHalf3rd\"] = \"\\uE12A\";\n    // U+E134  Combining half note cluster, bottom\n    Glyphs[\"noteheadClusterHalfBottom\"] = \"\\uE134\";\n    // U+E133  Combining half note cluster, middle\n    Glyphs[\"noteheadClusterHalfMiddle\"] = \"\\uE133\";\n    // U+E132  Combining half note cluster, top\n    Glyphs[\"noteheadClusterHalfTop\"] = \"\\uE132\";\n    // U+E127  Quarter note cluster, 2nd\n    Glyphs[\"noteheadClusterQuarter2nd\"] = \"\\uE127\";\n    // U+E12B  Quarter note cluster, 3rd\n    Glyphs[\"noteheadClusterQuarter3rd\"] = \"\\uE12B\";\n    // U+E137  Combining quarter note cluster, bottom\n    Glyphs[\"noteheadClusterQuarterBottom\"] = \"\\uE137\";\n    // U+E136  Combining quarter note cluster, middle\n    Glyphs[\"noteheadClusterQuarterMiddle\"] = \"\\uE136\";\n    // U+E135  Combining quarter note cluster, top\n    Glyphs[\"noteheadClusterQuarterTop\"] = \"\\uE135\";\n    // U+E123  Cluster notehead black (round)\n    Glyphs[\"noteheadClusterRoundBlack\"] = \"\\uE123\";\n    // U+E122  Cluster notehead white (round)\n    Glyphs[\"noteheadClusterRoundWhite\"] = \"\\uE122\";\n    // U+E121  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlack\"] = \"\\uE121\";\n    // U+E120  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhite\"] = \"\\uE120\";\n    // U+E125  Whole note cluster, 2nd\n    Glyphs[\"noteheadClusterWhole2nd\"] = \"\\uE125\";\n    // U+E129  Whole note cluster, 3rd\n    Glyphs[\"noteheadClusterWhole3rd\"] = \"\\uE129\";\n    // U+E131  Combining whole note cluster, bottom\n    Glyphs[\"noteheadClusterWholeBottom\"] = \"\\uE131\";\n    // U+E130  Combining whole note cluster, middle\n    Glyphs[\"noteheadClusterWholeMiddle\"] = \"\\uE130\";\n    // U+E12F  Combining whole note cluster, top\n    Glyphs[\"noteheadClusterWholeTop\"] = \"\\uE12F\";\n    // U+EEAE  4/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesHalf\"] = \"\\uEEAE\";\n    // U+EEAD  8/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesWhole\"] = \"\\uEEAD\";\n    // U+EEAF  2/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhSeriesBlack\"] = \"\\uEEAF\";\n    // U+EEB5  2/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesBlack\"] = \"\\uEEB5\";\n    // U+EEB4  4/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesHalf\"] = \"\\uEEB4\";\n    // U+EEB3  8/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesWhole\"] = \"\\uEEB3\";\n    // U+EEA6  1/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesBlack\"] = \"\\uEEA6\";\n    // U+EEA5  2/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesHalf\"] = \"\\uEEA5\";\n    // U+EEA4  4/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesWhole\"] = \"\\uEEA4\";\n    // U+EEAC  2/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesBlack\"] = \"\\uEEAC\";\n    // U+EEAB  4/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesHalf\"] = \"\\uEEAB\";\n    // U+EEAA  8/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesWhole\"] = \"\\uEEAA\";\n    // U+EEA9  1/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesBlack\"] = \"\\uEEA9\";\n    // U+EEA8  2/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesHalf\"] = \"\\uEEA8\";\n    // U+EEA7  4/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesWhole\"] = \"\\uEEA7\";\n    // U+EEA3  1/6 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesBlack\"] = \"\\uEEA3\";\n    // U+EEA2  1/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesHalf\"] = \"\\uEEA2\";\n    // U+EEA1  2/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesWhole\"] = \"\\uEEA1\";\n    // U+EEB2  2/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesBlack\"] = \"\\uEEB2\";\n    // U+EEB1  4/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesHalf\"] = \"\\uEEB1\";\n    // U+EEB0  8/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesWhole\"] = \"\\uEEB0\";\n    // U+E0DB  Diamond black notehead\n    Glyphs[\"noteheadDiamondBlack\"] = \"\\uE0DB\";\n    // U+E0E2  Diamond black notehead (old)\n    Glyphs[\"noteheadDiamondBlackOld\"] = \"\\uE0E2\";\n    // U+E0DC  Diamond black notehead (wide)\n    Glyphs[\"noteheadDiamondBlackWide\"] = \"\\uE0DC\";\n    // U+E139  Black diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterBlack2nd\"] = \"\\uE139\";\n    // U+E13B  Black diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterBlack3rd\"] = \"\\uE13B\";\n    // U+E141  Combining black diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterBlackBottom\"] = \"\\uE141\";\n    // U+E140  Combining black diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterBlackMiddle\"] = \"\\uE140\";\n    // U+E13F  Combining black diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterBlackTop\"] = \"\\uE13F\";\n    // U+E138  White diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterWhite2nd\"] = \"\\uE138\";\n    // U+E13A  White diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterWhite3rd\"] = \"\\uE13A\";\n    // U+E13E  Combining white diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterWhiteBottom\"] = \"\\uE13E\";\n    // U+E13D  Combining white diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterWhiteMiddle\"] = \"\\uE13D\";\n    // U+E13C  Combining white diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterWhiteTop\"] = \"\\uE13C\";\n    // U+E0D7  Diamond double whole notehead\n    Glyphs[\"noteheadDiamondDoubleWhole\"] = \"\\uE0D7\";\n    // U+E0DF  Diamond double whole notehead (old)\n    Glyphs[\"noteheadDiamondDoubleWholeOld\"] = \"\\uE0DF\";\n    // U+E0D9  Diamond half notehead\n    Glyphs[\"noteheadDiamondHalf\"] = \"\\uE0D9\";\n    // U+E0E3  Half-filled diamond notehead\n    Glyphs[\"noteheadDiamondHalfFilled\"] = \"\\uE0E3\";\n    // U+E0E1  Diamond half notehead (old)\n    Glyphs[\"noteheadDiamondHalfOld\"] = \"\\uE0E1\";\n    // U+E0DA  Diamond half notehead (wide)\n    Glyphs[\"noteheadDiamondHalfWide\"] = \"\\uE0DA\";\n    // U+E0FC  Open diamond notehead\n    Glyphs[\"noteheadDiamondOpen\"] = \"\\uE0FC\";\n    // U+E0DD  Diamond white notehead\n    Glyphs[\"noteheadDiamondWhite\"] = \"\\uE0DD\";\n    // U+E0DE  Diamond white notehead (wide)\n    Glyphs[\"noteheadDiamondWhiteWide\"] = \"\\uE0DE\";\n    // U+E0D8  Diamond whole notehead\n    Glyphs[\"noteheadDiamondWhole\"] = \"\\uE0D8\";\n    // U+E0E0  Diamond whole notehead (old)\n    Glyphs[\"noteheadDiamondWholeOld\"] = \"\\uE0E0\";\n    // U+E0A0  Double whole (breve) notehead\n    Glyphs[\"noteheadDoubleWhole\"] = \"\\uE0A0\";\n    // U+E0A1  Double whole (breve) notehead (square)\n    Glyphs[\"noteheadDoubleWholeSquare\"] = \"\\uE0A1\";\n    // U+E0B4  Double whole notehead with X\n    Glyphs[\"noteheadDoubleWholeWithX\"] = \"\\uE0B4\";\n    // U+E0A3  Half (minim) notehead\n    Glyphs[\"noteheadHalf\"] = \"\\uE0A3\";\n    // U+E0FB  Filled half (minim) notehead\n    Glyphs[\"noteheadHalfFilled\"] = \"\\uE0FB\";\n    // U+E0B6  Half notehead with X\n    Glyphs[\"noteheadHalfWithX\"] = \"\\uE0B6\";\n    // U+E0F8  Heavy X notehead\n    Glyphs[\"noteheadHeavyX\"] = \"\\uE0F8\";\n    // U+E0F9  Heavy X with hat notehead\n    Glyphs[\"noteheadHeavyXHat\"] = \"\\uE0F9\";\n    // U+E0F4  Large arrow down (lowest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowDownBlack\"] = \"\\uE0F4\";\n    // U+E0F1  Large arrow down (lowest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowDownDoubleWhole\"] = \"\\uE0F1\";\n    // U+E0F3  Large arrow down (lowest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowDownHalf\"] = \"\\uE0F3\";\n    // U+E0F2  Large arrow down (lowest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowDownWhole\"] = \"\\uE0F2\";\n    // U+E0F0  Large arrow up (highest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowUpBlack\"] = \"\\uE0F0\";\n    // U+E0ED  Large arrow up (highest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowUpDoubleWhole\"] = \"\\uE0ED\";\n    // U+E0EF  Large arrow up (highest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowUpHalf\"] = \"\\uE0EF\";\n    // U+E0EE  Large arrow up (highest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowUpWhole\"] = \"\\uE0EE\";\n    // U+E0CB  Moon notehead black\n    Glyphs[\"noteheadMoonBlack\"] = \"\\uE0CB\";\n    // U+E0CA  Moon notehead white\n    Glyphs[\"noteheadMoonWhite\"] = \"\\uE0CA\";\n    // U+EEA0  Sine notehead (Nancarrow)\n    Glyphs[\"noteheadNancarrowSine\"] = \"\\uEEA0\";\n    // U+E0A5  Null notehead\n    Glyphs[\"noteheadNull\"] = \"\\uE0A5\";\n    // U+E0CE  Parenthesis notehead\n    Glyphs[\"noteheadParenthesis\"] = \"\\uE0CE\";\n    // U+E0F5  Opening parenthesis\n    Glyphs[\"noteheadParenthesisLeft\"] = \"\\uE0F5\";\n    // U+E0F6  Closing parenthesis\n    Glyphs[\"noteheadParenthesisRight\"] = \"\\uE0F6\";\n    // U+E0AF  Plus notehead black\n    Glyphs[\"noteheadPlusBlack\"] = \"\\uE0AF\";\n    // U+E0AC  Plus notehead double whole\n    Glyphs[\"noteheadPlusDoubleWhole\"] = \"\\uE0AC\";\n    // U+E0AE  Plus notehead half\n    Glyphs[\"noteheadPlusHalf\"] = \"\\uE0AE\";\n    // U+E0AD  Plus notehead whole\n    Glyphs[\"noteheadPlusWhole\"] = \"\\uE0AD\";\n    // U+E144  Combining black rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterBlackBottom\"] = \"\\uE144\";\n    // U+E143  Combining black rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterBlackMiddle\"] = \"\\uE143\";\n    // U+E142  Combining black rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterBlackTop\"] = \"\\uE142\";\n    // U+E147  Combining white rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterWhiteBottom\"] = \"\\uE147\";\n    // U+E146  Combining white rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterWhiteMiddle\"] = \"\\uE146\";\n    // U+E145  Combining white rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterWhiteTop\"] = \"\\uE145\";\n    // U+E113  Round black notehead\n    Glyphs[\"noteheadRoundBlack\"] = \"\\uE113\";\n    // U+E11C  Round black notehead, double slashed\n    Glyphs[\"noteheadRoundBlackDoubleSlashed\"] = \"\\uE11C\";\n    // U+E110  Large round black notehead\n    Glyphs[\"noteheadRoundBlackLarge\"] = \"\\uE110\";\n    // U+E118  Round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashed\"] = \"\\uE118\";\n    // U+E116  Large round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashedLarge\"] = \"\\uE116\";\n    // U+E114  Round white notehead\n    Glyphs[\"noteheadRoundWhite\"] = \"\\uE114\";\n    // U+E11D  Round white notehead, double slashed\n    Glyphs[\"noteheadRoundWhiteDoubleSlashed\"] = \"\\uE11D\";\n    // U+E111  Large round white notehead\n    Glyphs[\"noteheadRoundWhiteLarge\"] = \"\\uE111\";\n    // U+E119  Round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashed\"] = \"\\uE119\";\n    // U+E117  Large round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashedLarge\"] = \"\\uE117\";\n    // U+E115  Round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDot\"] = \"\\uE115\";\n    // U+E112  Large round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDotLarge\"] = \"\\uE112\";\n    // U+E104  Large white diamond\n    Glyphs[\"noteheadSlashDiamondWhite\"] = \"\\uE104\";\n    // U+E101  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEnds\"] = \"\\uE101\";\n    // U+E108  Muted slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsMuted\"] = \"\\uE108\";\n    // U+E100  Slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEnds\"] = \"\\uE100\";\n    // U+E107  Muted slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsMuted\"] = \"\\uE107\";\n    // U+E105  Small slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsSmall\"] = \"\\uE105\";\n    // U+E10A  White slash double whole\n    Glyphs[\"noteheadSlashWhiteDoubleWhole\"] = \"\\uE10A\";\n    // U+E103  White slash half\n    Glyphs[\"noteheadSlashWhiteHalf\"] = \"\\uE103\";\n    // U+E109  Muted white slash\n    Glyphs[\"noteheadSlashWhiteMuted\"] = \"\\uE109\";\n    // U+E102  White slash whole\n    Glyphs[\"noteheadSlashWhiteWhole\"] = \"\\uE102\";\n    // U+E106  Large X notehead\n    Glyphs[\"noteheadSlashX\"] = \"\\uE106\";\n    // U+E0CF  Slashed black notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedBlack1\"] = \"\\uE0CF\";\n    // U+E0D0  Slashed black notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedBlack2\"] = \"\\uE0D0\";\n    // U+E0D5  Slashed double whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedDoubleWhole1\"] = \"\\uE0D5\";\n    // U+E0D6  Slashed double whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedDoubleWhole2\"] = \"\\uE0D6\";\n    // U+E0D1  Slashed half notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedHalf1\"] = \"\\uE0D1\";\n    // U+E0D2  Slashed half notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedHalf2\"] = \"\\uE0D2\";\n    // U+E0D3  Slashed whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedWhole1\"] = \"\\uE0D3\";\n    // U+E0D4  Slashed whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedWhole2\"] = \"\\uE0D4\";\n    // U+E0B9  Square notehead black\n    Glyphs[\"noteheadSquareBlack\"] = \"\\uE0B9\";\n    // U+E11A  Large square black notehead\n    Glyphs[\"noteheadSquareBlackLarge\"] = \"\\uE11A\";\n    // U+E11B  Large square white notehead\n    Glyphs[\"noteheadSquareBlackWhite\"] = \"\\uE11B\";\n    // U+E0B8  Square notehead white\n    Glyphs[\"noteheadSquareWhite\"] = \"\\uE0B8\";\n    // U+E0C7  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlack\"] = \"\\uE0C7\";\n    // U+E0C3  Triangle notehead down double whole\n    Glyphs[\"noteheadTriangleDownDoubleWhole\"] = \"\\uE0C3\";\n    // U+E0C5  Triangle notehead down half\n    Glyphs[\"noteheadTriangleDownHalf\"] = \"\\uE0C5\";\n    // U+E0C6  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhite\"] = \"\\uE0C6\";\n    // U+E0C4  Triangle notehead down whole\n    Glyphs[\"noteheadTriangleDownWhole\"] = \"\\uE0C4\";\n    // U+E0C0  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlack\"] = \"\\uE0C0\";\n    // U+E0BF  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhite\"] = \"\\uE0BF\";\n    // U+E0C2  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlack\"] = \"\\uE0C2\";\n    // U+E0C1  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhite\"] = \"\\uE0C1\";\n    // U+E0CD  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlack\"] = \"\\uE0CD\";\n    // U+E0CC  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhite\"] = \"\\uE0CC\";\n    // U+E0BE  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlack\"] = \"\\uE0BE\";\n    // U+E0BA  Triangle notehead up double whole\n    Glyphs[\"noteheadTriangleUpDoubleWhole\"] = \"\\uE0BA\";\n    // U+E0BC  Triangle notehead up half\n    Glyphs[\"noteheadTriangleUpHalf\"] = \"\\uE0BC\";\n    // U+E0C9  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlack\"] = \"\\uE0C9\";\n    // U+E0C8  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhite\"] = \"\\uE0C8\";\n    // U+E0BD  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhite\"] = \"\\uE0BD\";\n    // U+E0BB  Triangle notehead up whole\n    Glyphs[\"noteheadTriangleUpWhole\"] = \"\\uE0BB\";\n    // U+E0B7  Void notehead with X\n    Glyphs[\"noteheadVoidWithX\"] = \"\\uE0B7\";\n    // U+E0A2  Whole (semibreve) notehead\n    Glyphs[\"noteheadWhole\"] = \"\\uE0A2\";\n    // U+E0FA  Filled whole (semibreve) notehead\n    Glyphs[\"noteheadWholeFilled\"] = \"\\uE0FA\";\n    // U+E0B5  Whole notehead with X\n    Glyphs[\"noteheadWholeWithX\"] = \"\\uE0B5\";\n    // U+E0A9  X notehead black\n    Glyphs[\"noteheadXBlack\"] = \"\\uE0A9\";\n    // U+E0A6  X notehead double whole\n    Glyphs[\"noteheadXDoubleWhole\"] = \"\\uE0A6\";\n    // U+E0A8  X notehead half\n    Glyphs[\"noteheadXHalf\"] = \"\\uE0A8\";\n    // U+E0AA  Ornate X notehead\n    Glyphs[\"noteheadXOrnate\"] = \"\\uE0AA\";\n    // U+E0AB  Ornate X notehead in ellipse\n    Glyphs[\"noteheadXOrnateEllipse\"] = \"\\uE0AB\";\n    // U+E0A7  X notehead whole\n    Glyphs[\"noteheadXWhole\"] = \"\\uE0A7\";\n    // U+EC91  a (baseline)\n    Glyphs[\"octaveBaselineA\"] = \"\\uEC91\";\n    // U+EC93  b (baseline)\n    Glyphs[\"octaveBaselineB\"] = \"\\uEC93\";\n    // U+EC95  m (baseline)\n    Glyphs[\"octaveBaselineM\"] = \"\\uEC95\";\n    // U+EC97  v (baseline)\n    Glyphs[\"octaveBaselineV\"] = \"\\uEC97\";\n    // U+E51F  Bassa\n    Glyphs[\"octaveBassa\"] = \"\\uE51F\";\n    // U+EC90  Loco\n    Glyphs[\"octaveLoco\"] = \"\\uEC90\";\n    // U+E51A  Left parenthesis for octave signs\n    Glyphs[\"octaveParensLeft\"] = \"\\uE51A\";\n    // U+E51B  Right parenthesis for octave signs\n    Glyphs[\"octaveParensRight\"] = \"\\uE51B\";\n    // U+EC92  a (superscript)\n    Glyphs[\"octaveSuperscriptA\"] = \"\\uEC92\";\n    // U+EC94  b (superscript)\n    Glyphs[\"octaveSuperscriptB\"] = \"\\uEC94\";\n    // U+EC96  m (superscript)\n    Glyphs[\"octaveSuperscriptM\"] = \"\\uEC96\";\n    // U+EC98  v (superscript)\n    Glyphs[\"octaveSuperscriptV\"] = \"\\uEC98\";\n    // U+E233  One-handed roll (Stevens)\n    Glyphs[\"oneHandedRollStevens\"] = \"\\uE233\";\n    // U+EE2E  Two Fusae\n    Glyphs[\"organGerman2Fusae\"] = \"\\uEE2E\";\n    // U+EE2C  Two Minimae\n    Glyphs[\"organGerman2Minimae\"] = \"\\uEE2C\";\n    // U+EE19  Combining double octave line above\n    Glyphs[\"organGerman2OctaveUp\"] = \"\\uEE19\";\n    // U+EE2F  Two Semifusae\n    Glyphs[\"organGerman2Semifusae\"] = \"\\uEE2F\";\n    // U+EE2D  Two Semiminimae\n    Glyphs[\"organGerman2Semiminimae\"] = \"\\uEE2D\";\n    // U+EE32  Three Fusae\n    Glyphs[\"organGerman3Fusae\"] = \"\\uEE32\";\n    // U+EE30  Three Minimae\n    Glyphs[\"organGerman3Minimae\"] = \"\\uEE30\";\n    // U+EE33  Three Semifusae\n    Glyphs[\"organGerman3Semifusae\"] = \"\\uEE33\";\n    // U+EE31  Three Semiminimae\n    Glyphs[\"organGerman3Semiminimae\"] = \"\\uEE31\";\n    // U+EE36  Four Fusae\n    Glyphs[\"organGerman4Fusae\"] = \"\\uEE36\";\n    // U+EE34  Four Minimae\n    Glyphs[\"organGerman4Minimae\"] = \"\\uEE34\";\n    // U+EE37  Four Semifusae\n    Glyphs[\"organGerman4Semifusae\"] = \"\\uEE37\";\n    // U+EE35  Four Semiminimae\n    Glyphs[\"organGerman4Semiminimae\"] = \"\\uEE35\";\n    // U+EE3A  Five Fusae\n    Glyphs[\"organGerman5Fusae\"] = \"\\uEE3A\";\n    // U+EE38  Five Minimae\n    Glyphs[\"organGerman5Minimae\"] = \"\\uEE38\";\n    // U+EE3B  Five Semifusae\n    Glyphs[\"organGerman5Semifusae\"] = \"\\uEE3B\";\n    // U+EE39  Five Semiminimae\n    Glyphs[\"organGerman5Semiminimae\"] = \"\\uEE39\";\n    // U+EE3E  Six Fusae\n    Glyphs[\"organGerman6Fusae\"] = \"\\uEE3E\";\n    // U+EE3C  Six Minimae\n    Glyphs[\"organGerman6Minimae\"] = \"\\uEE3C\";\n    // U+EE3F  Six Semifusae\n    Glyphs[\"organGerman6Semifusae\"] = \"\\uEE3F\";\n    // U+EE3D  Six Semiminimae\n    Glyphs[\"organGerman6Semiminimae\"] = \"\\uEE3D\";\n    // U+EE15  German organ tablature small A\n    Glyphs[\"organGermanALower\"] = \"\\uEE15\";\n    // U+EE09  German organ tablature great A\n    Glyphs[\"organGermanAUpper\"] = \"\\uEE09\";\n    // U+EE1C  Rhythm Dot\n    Glyphs[\"organGermanAugmentationDot\"] = \"\\uEE1C\";\n    // U+EE16  German organ tablature small B\n    Glyphs[\"organGermanBLower\"] = \"\\uEE16\";\n    // U+EE0A  German organ tablature great B\n    Glyphs[\"organGermanBUpper\"] = \"\\uEE0A\";\n    // U+EE25  Brevis (Binary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis2\"] = \"\\uEE25\";\n    // U+EE24  Brevis (Ternary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis3\"] = \"\\uEE24\";\n    // U+EE1E  Minima Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerMinimaRest\"] = \"\\uEE1E\";\n    // U+EE26  Semibrevis Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevis\"] = \"\\uEE26\";\n    // U+EE1D  Semibrevis Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevisRest\"] = \"\\uEE1D\";\n    // U+EE0C  German organ tablature small C\n    Glyphs[\"organGermanCLower\"] = \"\\uEE0C\";\n    // U+EE00  German organ tablature great C\n    Glyphs[\"organGermanCUpper\"] = \"\\uEE00\";\n    // U+EE0D  German organ tablature small Cis\n    Glyphs[\"organGermanCisLower\"] = \"\\uEE0D\";\n    // U+EE01  German organ tablature great Cis\n    Glyphs[\"organGermanCisUpper\"] = \"\\uEE01\";\n    // U+EE0E  German organ tablature small D\n    Glyphs[\"organGermanDLower\"] = \"\\uEE0E\";\n    // U+EE02  German organ tablature great D\n    Glyphs[\"organGermanDUpper\"] = \"\\uEE02\";\n    // U+EE0F  German organ tablature small Dis\n    Glyphs[\"organGermanDisLower\"] = \"\\uEE0F\";\n    // U+EE03  German organ tablature great Dis\n    Glyphs[\"organGermanDisUpper\"] = \"\\uEE03\";\n    // U+EE10  German organ tablature small E\n    Glyphs[\"organGermanELower\"] = \"\\uEE10\";\n    // U+EE04  German organ tablature great E\n    Glyphs[\"organGermanEUpper\"] = \"\\uEE04\";\n    // U+EE11  German organ tablature small F\n    Glyphs[\"organGermanFLower\"] = \"\\uEE11\";\n    // U+EE05  German organ tablature great F\n    Glyphs[\"organGermanFUpper\"] = \"\\uEE05\";\n    // U+EE12  German organ tablature small Fis\n    Glyphs[\"organGermanFisLower\"] = \"\\uEE12\";\n    // U+EE06  German organ tablature great Fis\n    Glyphs[\"organGermanFisUpper\"] = \"\\uEE06\";\n    // U+EE2A  Fusa\n    Glyphs[\"organGermanFusa\"] = \"\\uEE2A\";\n    // U+EE22  Fusa Rest\n    Glyphs[\"organGermanFusaRest\"] = \"\\uEE22\";\n    // U+EE13  German organ tablature small G\n    Glyphs[\"organGermanGLower\"] = \"\\uEE13\";\n    // U+EE07  German organ tablature great G\n    Glyphs[\"organGermanGUpper\"] = \"\\uEE07\";\n    // U+EE14  German organ tablature small Gis\n    Glyphs[\"organGermanGisLower\"] = \"\\uEE14\";\n    // U+EE08  German organ tablature great Gis\n    Glyphs[\"organGermanGisUpper\"] = \"\\uEE08\";\n    // U+EE17  German organ tablature small H\n    Glyphs[\"organGermanHLower\"] = \"\\uEE17\";\n    // U+EE0B  German organ tablature great H\n    Glyphs[\"organGermanHUpper\"] = \"\\uEE0B\";\n    // U+EE28  Minima\n    Glyphs[\"organGermanMinima\"] = \"\\uEE28\";\n    // U+EE20  Minima Rest\n    Glyphs[\"organGermanMinimaRest\"] = \"\\uEE20\";\n    // U+EE1A  Combining single octave line below\n    Glyphs[\"organGermanOctaveDown\"] = \"\\uEE1A\";\n    // U+EE18  Combining single octave line above\n    Glyphs[\"organGermanOctaveUp\"] = \"\\uEE18\";\n    // U+EE27  Semibrevis\n    Glyphs[\"organGermanSemibrevis\"] = \"\\uEE27\";\n    // U+EE1F  Semibrevis Rest\n    Glyphs[\"organGermanSemibrevisRest\"] = \"\\uEE1F\";\n    // U+EE2B  Semifusa\n    Glyphs[\"organGermanSemifusa\"] = \"\\uEE2B\";\n    // U+EE23  Semifusa Rest\n    Glyphs[\"organGermanSemifusaRest\"] = \"\\uEE23\";\n    // U+EE29  Semiminima\n    Glyphs[\"organGermanSemiminima\"] = \"\\uEE29\";\n    // U+EE21  Semiminima Rest\n    Glyphs[\"organGermanSemiminimaRest\"] = \"\\uEE21\";\n    // U+EE1B  Tie\n    Glyphs[\"organGermanTie\"] = \"\\uEE1B\";\n    // U+E59A  Ornament bottom left concave stroke\n    Glyphs[\"ornamentBottomLeftConcaveStroke\"] = \"\\uE59A\";\n    // U+E59B  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLarge\"] = \"\\uE59B\";\n    // U+E59C  Ornament bottom left convex stroke\n    Glyphs[\"ornamentBottomLeftConvexStroke\"] = \"\\uE59C\";\n    // U+E5A7  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStroke\"] = \"\\uE5A7\";\n    // U+E5A8  Ornament bottom right convex stroke\n    Glyphs[\"ornamentBottomRightConvexStroke\"] = \"\\uE5A8\";\n    // U+E581  Comma\n    Glyphs[\"ornamentComma\"] = \"\\uE581\";\n    // U+E57E  Double oblique straight lines NW-SE\n    Glyphs[\"ornamentDoubleObliqueLinesAfterNote\"] = \"\\uE57E\";\n    // U+E57D  Double oblique straight lines SW-NE\n    Glyphs[\"ornamentDoubleObliqueLinesBeforeNote\"] = \"\\uE57D\";\n    // U+E578  Curve below\n    Glyphs[\"ornamentDownCurve\"] = \"\\uE578\";\n    // U+E56F  Haydn ornament\n    Glyphs[\"ornamentHaydn\"] = \"\\uE56F\";\n    // U+E592  Ornament high left concave stroke\n    Glyphs[\"ornamentHighLeftConcaveStroke\"] = \"\\uE592\";\n    // U+E593  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStroke\"] = \"\\uE593\";\n    // U+E5A2  Ornament high right concave stroke\n    Glyphs[\"ornamentHighRightConcaveStroke\"] = \"\\uE5A2\";\n    // U+E5A3  Ornament high right convex stroke\n    Glyphs[\"ornamentHighRightConvexStroke\"] = \"\\uE5A3\";\n    // U+E576  Hook after note\n    Glyphs[\"ornamentHookAfterNote\"] = \"\\uE576\";\n    // U+E575  Hook before note\n    Glyphs[\"ornamentHookBeforeNote\"] = \"\\uE575\";\n    // U+E572  Left-facing half circle\n    Glyphs[\"ornamentLeftFacingHalfCircle\"] = \"\\uE572\";\n    // U+E574  Left-facing hook\n    Glyphs[\"ornamentLeftFacingHook\"] = \"\\uE574\";\n    // U+E597  Ornament left +\n    Glyphs[\"ornamentLeftPlus\"] = \"\\uE597\";\n    // U+E596  Ornament left shake t\n    Glyphs[\"ornamentLeftShakeT\"] = \"\\uE596\";\n    // U+E594  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStroke\"] = \"\\uE594\";\n    // U+E595  Ornament left vertical stroke with cross (+)\n    Glyphs[\"ornamentLeftVerticalStrokeWithCross\"] = \"\\uE595\";\n    // U+E598  Ornament low left concave stroke\n    Glyphs[\"ornamentLowLeftConcaveStroke\"] = \"\\uE598\";\n    // U+E599  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStroke\"] = \"\\uE599\";\n    // U+E5A5  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStroke\"] = \"\\uE5A5\";\n    // U+E5A6  Ornament low right convex stroke\n    Glyphs[\"ornamentLowRightConvexStroke\"] = \"\\uE5A6\";\n    // U+E59F  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStroke\"] = \"\\uE59F\";\n    // U+E56D  Mordent\n    Glyphs[\"ornamentMordent\"] = \"\\uE56D\";\n    // U+E57C  Oblique straight line NW-SE\n    Glyphs[\"ornamentObliqueLineAfterNote\"] = \"\\uE57C\";\n    // U+E57B  Oblique straight line SW-NE\n    Glyphs[\"ornamentObliqueLineBeforeNote\"] = \"\\uE57B\";\n    // U+E580  Oblique straight line tilted NW-SE\n    Glyphs[\"ornamentObliqueLineHorizAfterNote\"] = \"\\uE580\";\n    // U+E57F  Oblique straight line tilted SW-NE\n    Glyphs[\"ornamentObliqueLineHorizBeforeNote\"] = \"\\uE57F\";\n    // U+EA21  Oriscus\n    Glyphs[\"ornamentOriscus\"] = \"\\uEA21\";\n    // U+E588  Pincé (Couperin)\n    Glyphs[\"ornamentPinceCouperin\"] = \"\\uE588\";\n    // U+E570  Port de voix\n    Glyphs[\"ornamentPortDeVoixV\"] = \"\\uE570\";\n    // U+E5B2  Supported appoggiatura trill\n    Glyphs[\"ornamentPrecompAppoggTrill\"] = \"\\uE5B2\";\n    // U+E5B3  Supported appoggiatura trill with two-note suffix\n    Glyphs[\"ornamentPrecompAppoggTrillSuffix\"] = \"\\uE5B3\";\n    // U+E5BE  Cadence\n    Glyphs[\"ornamentPrecompCadence\"] = \"\\uE5BE\";\n    // U+E5C1  Cadence with upper prefix\n    Glyphs[\"ornamentPrecompCadenceUpperPrefix\"] = \"\\uE5C1\";\n    // U+E5C2  Cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompCadenceUpperPrefixTurn\"] = \"\\uE5C2\";\n    // U+E5BF  Cadence with turn\n    Glyphs[\"ornamentPrecompCadenceWithTurn\"] = \"\\uE5BF\";\n    // U+E5B1  Descending slide\n    Glyphs[\"ornamentPrecompDescendingSlide\"] = \"\\uE5B1\";\n    // U+E5C0  Double cadence with lower prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceLowerPrefix\"] = \"\\uE5C0\";\n    // U+E5C3  Double cadence with upper prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefix\"] = \"\\uE5C3\";\n    // U+E5C4  Double cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefixTurn\"] = \"\\uE5C4\";\n    // U+E5C7  Inverted mordent with upper prefix\n    Glyphs[\"ornamentPrecompInvertedMordentUpperPrefix\"] = \"\\uE5C7\";\n    // U+E5C5  Mordent with release\n    Glyphs[\"ornamentPrecompMordentRelease\"] = \"\\uE5C5\";\n    // U+E5C6  Mordent with upper prefix\n    Glyphs[\"ornamentPrecompMordentUpperPrefix\"] = \"\\uE5C6\";\n    // U+E5BC  Pre-beat port de voix followed by multiple mordent (Dandrieu)\n    Glyphs[\"ornamentPrecompPortDeVoixMordent\"] = \"\\uE5BC\";\n    // U+E5B0  Slide\n    Glyphs[\"ornamentPrecompSlide\"] = \"\\uE5B0\";\n    // U+E5B8  Slide-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompSlideTrillBach\"] = \"\\uE5B8\";\n    // U+E5B5  Slide-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompSlideTrillDAnglebert\"] = \"\\uE5B5\";\n    // U+E5B6  Slide-trill with one-note suffix (Marpurg)\n    Glyphs[\"ornamentPrecompSlideTrillMarpurg\"] = \"\\uE5B6\";\n    // U+E5B9  Slide-trill (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillMuffat\"] = \"\\uE5B9\";\n    // U+E5BA  Slide-trill with two-note suffix (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillSuffixMuffat\"] = \"\\uE5BA\";\n    // U+E5C8  Trill with lower suffix\n    Glyphs[\"ornamentPrecompTrillLowerSuffix\"] = \"\\uE5C8\";\n    // U+E5BB  Trill with two-note suffix (Dandrieu)\n    Glyphs[\"ornamentPrecompTrillSuffixDandrieu\"] = \"\\uE5BB\";\n    // U+E5BD  Trill with mordent\n    Glyphs[\"ornamentPrecompTrillWithMordent\"] = \"\\uE5BD\";\n    // U+E5B7  Turn-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompTurnTrillBach\"] = \"\\uE5B7\";\n    // U+E5B4  Turn-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompTurnTrillDAnglebert\"] = \"\\uE5B4\";\n    // U+EA20  Quilisma\n    Glyphs[\"ornamentQuilisma\"] = \"\\uEA20\";\n    // U+E571  Right-facing half circle\n    Glyphs[\"ornamentRightFacingHalfCircle\"] = \"\\uE571\";\n    // U+E573  Right-facing hook\n    Glyphs[\"ornamentRightFacingHook\"] = \"\\uE573\";\n    // U+E5A4  Ornament right vertical stroke\n    Glyphs[\"ornamentRightVerticalStroke\"] = \"\\uE5A4\";\n    // U+E587  Schleifer (long mordent)\n    Glyphs[\"ornamentSchleifer\"] = \"\\uE587\";\n    // U+E582  Shake\n    Glyphs[\"ornamentShake3\"] = \"\\uE582\";\n    // U+E584  Shake (Muffat)\n    Glyphs[\"ornamentShakeMuffat1\"] = \"\\uE584\";\n    // U+E57A  Short oblique straight line NW-SE\n    Glyphs[\"ornamentShortObliqueLineAfterNote\"] = \"\\uE57A\";\n    // U+E579  Short oblique straight line SW-NE\n    Glyphs[\"ornamentShortObliqueLineBeforeNote\"] = \"\\uE579\";\n    // U+E56C  Short trill\n    Glyphs[\"ornamentShortTrill\"] = \"\\uE56C\";\n    // U+E590  Ornament top left concave stroke\n    Glyphs[\"ornamentTopLeftConcaveStroke\"] = \"\\uE590\";\n    // U+E591  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStroke\"] = \"\\uE591\";\n    // U+E5A0  Ornament top right concave stroke\n    Glyphs[\"ornamentTopRightConcaveStroke\"] = \"\\uE5A0\";\n    // U+E5A1  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStroke\"] = \"\\uE5A1\";\n    // U+E56E  Tremblement\n    Glyphs[\"ornamentTremblement\"] = \"\\uE56E\";\n    // U+E589  Tremblement appuyé (Couperin)\n    Glyphs[\"ornamentTremblementCouperin\"] = \"\\uE589\";\n    // U+E566  Trill\n    Glyphs[\"ornamentTrill\"] = \"\\uE566\";\n    // U+E567  Turn\n    Glyphs[\"ornamentTurn\"] = \"\\uE567\";\n    // U+E568  Inverted turn\n    Glyphs[\"ornamentTurnInverted\"] = \"\\uE568\";\n    // U+E569  Turn with slash\n    Glyphs[\"ornamentTurnSlash\"] = \"\\uE569\";\n    // U+E56A  Turn up\n    Glyphs[\"ornamentTurnUp\"] = \"\\uE56A\";\n    // U+E56B  Inverted turn up\n    Glyphs[\"ornamentTurnUpS\"] = \"\\uE56B\";\n    // U+E577  Curve above\n    Glyphs[\"ornamentUpCurve\"] = \"\\uE577\";\n    // U+E583  Vertical line\n    Glyphs[\"ornamentVerticalLine\"] = \"\\uE583\";\n    // U+E59D  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEnd\"] = \"\\uE59D\";\n    // U+E59E  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEnd\"] = \"\\uE59E\";\n    // U+E510  Ottava\n    Glyphs[\"ottava\"] = \"\\uE510\";\n    // U+E511  Ottava alta\n    Glyphs[\"ottavaAlta\"] = \"\\uE511\";\n    // U+E512  Ottava bassa\n    Glyphs[\"ottavaBassa\"] = \"\\uE512\";\n    // U+E513  Ottava bassa (ba)\n    Glyphs[\"ottavaBassaBa\"] = \"\\uE513\";\n    // U+E51C  Ottava bassa (8vb)\n    Glyphs[\"ottavaBassaVb\"] = \"\\uE51C\";\n    // U+E22B  Penderecki unmeasured tremolo\n    Glyphs[\"pendereckiTremolo\"] = \"\\uE22B\";\n    // U+E717  Agogo\n    Glyphs[\"pictAgogo\"] = \"\\uE717\";\n    // U+E712  Almglocken\n    Glyphs[\"pictAlmglocken\"] = \"\\uE712\";\n    // U+E701  Anvil\n    Glyphs[\"pictAnvil\"] = \"\\uE701\";\n    // U+E6C3  Bamboo tube chimes\n    Glyphs[\"pictBambooChimes\"] = \"\\uE6C3\";\n    // U+E6FB  Bamboo scraper\n    Glyphs[\"pictBambooScraper\"] = \"\\uE6FB\";\n    // U+E6D4  Bass drum\n    Glyphs[\"pictBassDrum\"] = \"\\uE6D4\";\n    // U+E6D5  Bass drum on side\n    Glyphs[\"pictBassDrumOnSide\"] = \"\\uE6D5\";\n    // U+E7DE  Bow\n    Glyphs[\"pictBeaterBow\"] = \"\\uE7DE\";\n    // U+E7EB  Box for percussion beater\n    Glyphs[\"pictBeaterBox\"] = \"\\uE7EB\";\n    // U+E7DA  Brass mallets down\n    Glyphs[\"pictBeaterBrassMalletsDown\"] = \"\\uE7DA\";\n    // U+E7EE  Brass mallets left\n    Glyphs[\"pictBeaterBrassMalletsLeft\"] = \"\\uE7EE\";\n    // U+E7ED  Brass mallets right\n    Glyphs[\"pictBeaterBrassMalletsRight\"] = \"\\uE7ED\";\n    // U+E7D9  Brass mallets up\n    Glyphs[\"pictBeaterBrassMalletsUp\"] = \"\\uE7D9\";\n    // U+E7EA  Combining dashed circle for round beaters (plated)\n    Glyphs[\"pictBeaterCombiningDashedCircle\"] = \"\\uE7EA\";\n    // U+E7E9  Combining parentheses for round beaters (padded)\n    Glyphs[\"pictBeaterCombiningParentheses\"] = \"\\uE7E9\";\n    // U+E7A1  Double bass drum stick down\n    Glyphs[\"pictBeaterDoubleBassDrumDown\"] = \"\\uE7A1\";\n    // U+E7A0  Double bass drum stick up\n    Glyphs[\"pictBeaterDoubleBassDrumUp\"] = \"\\uE7A0\";\n    // U+E7E4  Finger\n    Glyphs[\"pictBeaterFinger\"] = \"\\uE7E4\";\n    // U+E7E6  Fingernails\n    Glyphs[\"pictBeaterFingernails\"] = \"\\uE7E6\";\n    // U+E7E5  Fist\n    Glyphs[\"pictBeaterFist\"] = \"\\uE7E5\";\n    // U+E7DD  Guiro scraper\n    Glyphs[\"pictBeaterGuiroScraper\"] = \"\\uE7DD\";\n    // U+E7E1  Hammer\n    Glyphs[\"pictBeaterHammer\"] = \"\\uE7E1\";\n    // U+E7D0  Metal hammer, down\n    Glyphs[\"pictBeaterHammerMetalDown\"] = \"\\uE7D0\";\n    // U+E7CF  Metal hammer, up\n    Glyphs[\"pictBeaterHammerMetalUp\"] = \"\\uE7CF\";\n    // U+E7CE  Plastic hammer, down\n    Glyphs[\"pictBeaterHammerPlasticDown\"] = \"\\uE7CE\";\n    // U+E7CD  Plastic hammer, up\n    Glyphs[\"pictBeaterHammerPlasticUp\"] = \"\\uE7CD\";\n    // U+E7CC  Wooden hammer, down\n    Glyphs[\"pictBeaterHammerWoodDown\"] = \"\\uE7CC\";\n    // U+E7CB  Wooden hammer, up\n    Glyphs[\"pictBeaterHammerWoodUp\"] = \"\\uE7CB\";\n    // U+E7E3  Hand\n    Glyphs[\"pictBeaterHand\"] = \"\\uE7E3\";\n    // U+E79D  Hard bass drum stick down\n    Glyphs[\"pictBeaterHardBassDrumDown\"] = \"\\uE79D\";\n    // U+E79C  Hard bass drum stick up\n    Glyphs[\"pictBeaterHardBassDrumUp\"] = \"\\uE79C\";\n    // U+E785  Hard glockenspiel stick down\n    Glyphs[\"pictBeaterHardGlockenspielDown\"] = \"\\uE785\";\n    // U+E787  Hard glockenspiel stick left\n    Glyphs[\"pictBeaterHardGlockenspielLeft\"] = \"\\uE787\";\n    // U+E786  Hard glockenspiel stick right\n    Glyphs[\"pictBeaterHardGlockenspielRight\"] = \"\\uE786\";\n    // U+E784  Hard glockenspiel stick up\n    Glyphs[\"pictBeaterHardGlockenspielUp\"] = \"\\uE784\";\n    // U+E791  Hard timpani stick down\n    Glyphs[\"pictBeaterHardTimpaniDown\"] = \"\\uE791\";\n    // U+E793  Hard timpani stick left\n    Glyphs[\"pictBeaterHardTimpaniLeft\"] = \"\\uE793\";\n    // U+E792  Hard timpani stick right\n    Glyphs[\"pictBeaterHardTimpaniRight\"] = \"\\uE792\";\n    // U+E790  Hard timpani stick up\n    Glyphs[\"pictBeaterHardTimpaniUp\"] = \"\\uE790\";\n    // U+E779  Hard xylophone stick down\n    Glyphs[\"pictBeaterHardXylophoneDown\"] = \"\\uE779\";\n    // U+E77B  Hard xylophone stick left\n    Glyphs[\"pictBeaterHardXylophoneLeft\"] = \"\\uE77B\";\n    // U+E77A  Hard xylophone stick right\n    Glyphs[\"pictBeaterHardXylophoneRight\"] = \"\\uE77A\";\n    // U+E778  Hard xylophone stick up\n    Glyphs[\"pictBeaterHardXylophoneUp\"] = \"\\uE778\";\n    // U+E7AB  Hard yarn beater down\n    Glyphs[\"pictBeaterHardYarnDown\"] = \"\\uE7AB\";\n    // U+E7AD  Hard yarn beater left\n    Glyphs[\"pictBeaterHardYarnLeft\"] = \"\\uE7AD\";\n    // U+E7AC  Hard yarn beater right\n    Glyphs[\"pictBeaterHardYarnRight\"] = \"\\uE7AC\";\n    // U+E7AA  Hard yarn beater up\n    Glyphs[\"pictBeaterHardYarnUp\"] = \"\\uE7AA\";\n    // U+E7D4  Jazz sticks down\n    Glyphs[\"pictBeaterJazzSticksDown\"] = \"\\uE7D4\";\n    // U+E7D3  Jazz sticks up\n    Glyphs[\"pictBeaterJazzSticksUp\"] = \"\\uE7D3\";\n    // U+E7E2  Knitting needle\n    Glyphs[\"pictBeaterKnittingNeedle\"] = \"\\uE7E2\";\n    // U+E7DF  Chime hammer up\n    Glyphs[\"pictBeaterMallet\"] = \"\\uE7DF\";\n    // U+E7EC  Chime hammer down\n    Glyphs[\"pictBeaterMalletDown\"] = \"\\uE7EC\";\n    // U+E79B  Medium bass drum stick down\n    Glyphs[\"pictBeaterMediumBassDrumDown\"] = \"\\uE79B\";\n    // U+E79A  Medium bass drum stick up\n    Glyphs[\"pictBeaterMediumBassDrumUp\"] = \"\\uE79A\";\n    // U+E78D  Medium timpani stick down\n    Glyphs[\"pictBeaterMediumTimpaniDown\"] = \"\\uE78D\";\n    // U+E78F  Medium timpani stick left\n    Glyphs[\"pictBeaterMediumTimpaniLeft\"] = \"\\uE78F\";\n    // U+E78E  Medium timpani stick right\n    Glyphs[\"pictBeaterMediumTimpaniRight\"] = \"\\uE78E\";\n    // U+E78C  Medium timpani stick up\n    Glyphs[\"pictBeaterMediumTimpaniUp\"] = \"\\uE78C\";\n    // U+E775  Medium xylophone stick down\n    Glyphs[\"pictBeaterMediumXylophoneDown\"] = \"\\uE775\";\n    // U+E777  Medium xylophone stick left\n    Glyphs[\"pictBeaterMediumXylophoneLeft\"] = \"\\uE777\";\n    // U+E776  Medium xylophone stick right\n    Glyphs[\"pictBeaterMediumXylophoneRight\"] = \"\\uE776\";\n    // U+E774  Medium xylophone stick up\n    Glyphs[\"pictBeaterMediumXylophoneUp\"] = \"\\uE774\";\n    // U+E7A7  Medium yarn beater down\n    Glyphs[\"pictBeaterMediumYarnDown\"] = \"\\uE7A7\";\n    // U+E7A9  Medium yarn beater left\n    Glyphs[\"pictBeaterMediumYarnLeft\"] = \"\\uE7A9\";\n    // U+E7A8  Medium yarn beater right\n    Glyphs[\"pictBeaterMediumYarnRight\"] = \"\\uE7A8\";\n    // U+E7A6  Medium yarn beater up\n    Glyphs[\"pictBeaterMediumYarnUp\"] = \"\\uE7A6\";\n    // U+E79F  Metal bass drum stick down\n    Glyphs[\"pictBeaterMetalBassDrumDown\"] = \"\\uE79F\";\n    // U+E79E  Metal bass drum stick up\n    Glyphs[\"pictBeaterMetalBassDrumUp\"] = \"\\uE79E\";\n    // U+E7C8  Metal beater down\n    Glyphs[\"pictBeaterMetalDown\"] = \"\\uE7C8\";\n    // U+E7E0  Metal hammer\n    Glyphs[\"pictBeaterMetalHammer\"] = \"\\uE7E0\";\n    // U+E7CA  Metal beater, left\n    Glyphs[\"pictBeaterMetalLeft\"] = \"\\uE7CA\";\n    // U+E7C9  Metal beater, right\n    Glyphs[\"pictBeaterMetalRight\"] = \"\\uE7C9\";\n    // U+E7C7  Metal beater, up\n    Glyphs[\"pictBeaterMetalUp\"] = \"\\uE7C7\";\n    // U+E7D2  Snare sticks down\n    Glyphs[\"pictBeaterSnareSticksDown\"] = \"\\uE7D2\";\n    // U+E7D1  Snare sticks up\n    Glyphs[\"pictBeaterSnareSticksUp\"] = \"\\uE7D1\";\n    // U+E799  Soft bass drum stick down\n    Glyphs[\"pictBeaterSoftBassDrumDown\"] = \"\\uE799\";\n    // U+E798  Soft bass drum stick up\n    Glyphs[\"pictBeaterSoftBassDrumUp\"] = \"\\uE798\";\n    // U+E781  Soft glockenspiel stick down\n    Glyphs[\"pictBeaterSoftGlockenspielDown\"] = \"\\uE781\";\n    // U+E783  Soft glockenspiel stick left\n    Glyphs[\"pictBeaterSoftGlockenspielLeft\"] = \"\\uE783\";\n    // U+E782  Soft glockenspiel stick right\n    Glyphs[\"pictBeaterSoftGlockenspielRight\"] = \"\\uE782\";\n    // U+E780  Soft glockenspiel stick up\n    Glyphs[\"pictBeaterSoftGlockenspielUp\"] = \"\\uE780\";\n    // U+E789  Soft timpani stick down\n    Glyphs[\"pictBeaterSoftTimpaniDown\"] = \"\\uE789\";\n    // U+E78B  Soft timpani stick left\n    Glyphs[\"pictBeaterSoftTimpaniLeft\"] = \"\\uE78B\";\n    // U+E78A  Soft timpani stick right\n    Glyphs[\"pictBeaterSoftTimpaniRight\"] = \"\\uE78A\";\n    // U+E788  Soft timpani stick up\n    Glyphs[\"pictBeaterSoftTimpaniUp\"] = \"\\uE788\";\n    // U+E7DB  Soft xylophone beaters\n    Glyphs[\"pictBeaterSoftXylophone\"] = \"\\uE7DB\";\n    // U+E771  Soft xylophone stick down\n    Glyphs[\"pictBeaterSoftXylophoneDown\"] = \"\\uE771\";\n    // U+E773  Soft xylophone stick left\n    Glyphs[\"pictBeaterSoftXylophoneLeft\"] = \"\\uE773\";\n    // U+E772  Soft xylophone stick right\n    Glyphs[\"pictBeaterSoftXylophoneRight\"] = \"\\uE772\";\n    // U+E770  Soft xylophone stick up\n    Glyphs[\"pictBeaterSoftXylophoneUp\"] = \"\\uE770\";\n    // U+E7A3  Soft yarn beater down\n    Glyphs[\"pictBeaterSoftYarnDown\"] = \"\\uE7A3\";\n    // U+E7A5  Soft yarn beater left\n    Glyphs[\"pictBeaterSoftYarnLeft\"] = \"\\uE7A5\";\n    // U+E7A4  Soft yarn beater right\n    Glyphs[\"pictBeaterSoftYarnRight\"] = \"\\uE7A4\";\n    // U+E7A2  Soft yarn beater up\n    Glyphs[\"pictBeaterSoftYarnUp\"] = \"\\uE7A2\";\n    // U+E7DC  Spoon-shaped wooden mallet\n    Glyphs[\"pictBeaterSpoonWoodenMallet\"] = \"\\uE7DC\";\n    // U+E7AF  Superball beater down\n    Glyphs[\"pictBeaterSuperballDown\"] = \"\\uE7AF\";\n    // U+E7B1  Superball beater left\n    Glyphs[\"pictBeaterSuperballLeft\"] = \"\\uE7B1\";\n    // U+E7B0  Superball beater right\n    Glyphs[\"pictBeaterSuperballRight\"] = \"\\uE7B0\";\n    // U+E7AE  Superball beater up\n    Glyphs[\"pictBeaterSuperballUp\"] = \"\\uE7AE\";\n    // U+E7D6  Triangle beater down\n    Glyphs[\"pictBeaterTriangleDown\"] = \"\\uE7D6\";\n    // U+E7EF  Triangle beater plain\n    Glyphs[\"pictBeaterTrianglePlain\"] = \"\\uE7EF\";\n    // U+E7D5  Triangle beater up\n    Glyphs[\"pictBeaterTriangleUp\"] = \"\\uE7D5\";\n    // U+E7D8  Wire brushes down\n    Glyphs[\"pictBeaterWireBrushesDown\"] = \"\\uE7D8\";\n    // U+E7D7  Wire brushes up\n    Glyphs[\"pictBeaterWireBrushesUp\"] = \"\\uE7D7\";\n    // U+E795  Wood timpani stick down\n    Glyphs[\"pictBeaterWoodTimpaniDown\"] = \"\\uE795\";\n    // U+E797  Wood timpani stick left\n    Glyphs[\"pictBeaterWoodTimpaniLeft\"] = \"\\uE797\";\n    // U+E796  Wood timpani stick right\n    Glyphs[\"pictBeaterWoodTimpaniRight\"] = \"\\uE796\";\n    // U+E794  Wood timpani stick up\n    Glyphs[\"pictBeaterWoodTimpaniUp\"] = \"\\uE794\";\n    // U+E77D  Wood xylophone stick down\n    Glyphs[\"pictBeaterWoodXylophoneDown\"] = \"\\uE77D\";\n    // U+E77F  Wood xylophone stick left\n    Glyphs[\"pictBeaterWoodXylophoneLeft\"] = \"\\uE77F\";\n    // U+E77E  Wood xylophone stick right\n    Glyphs[\"pictBeaterWoodXylophoneRight\"] = \"\\uE77E\";\n    // U+E77C  Wood xylophone stick up\n    Glyphs[\"pictBeaterWoodXylophoneUp\"] = \"\\uE77C\";\n    // U+E714  Bell\n    Glyphs[\"pictBell\"] = \"\\uE714\";\n    // U+E72A  Bell of cymbal\n    Glyphs[\"pictBellOfCymbal\"] = \"\\uE72A\";\n    // U+E713  Bell plate\n    Glyphs[\"pictBellPlate\"] = \"\\uE713\";\n    // U+E71A  Bell tree\n    Glyphs[\"pictBellTree\"] = \"\\uE71A\";\n    // U+E751  Bird whistle\n    Glyphs[\"pictBirdWhistle\"] = \"\\uE751\";\n    // U+E6F7  Board clapper\n    Glyphs[\"pictBoardClapper\"] = \"\\uE6F7\";\n    // U+E6DD  Bongos\n    Glyphs[\"pictBongos\"] = \"\\uE6DD\";\n    // U+E6E1  Brake drum\n    Glyphs[\"pictBrakeDrum\"] = \"\\uE6E1\";\n    // U+E743  Cabasa\n    Glyphs[\"pictCabasa\"] = \"\\uE743\";\n    // U+E761  Cannon\n    Glyphs[\"pictCannon\"] = \"\\uE761\";\n    // U+E755  Car horn\n    Glyphs[\"pictCarHorn\"] = \"\\uE755\";\n    // U+E6F8  Castanets\n    Glyphs[\"pictCastanets\"] = \"\\uE6F8\";\n    // U+E6F9  Castanets with handle\n    Glyphs[\"pictCastanetsWithHandle\"] = \"\\uE6F9\";\n    // U+E6B0  Celesta\n    Glyphs[\"pictCelesta\"] = \"\\uE6B0\";\n    // U+E716  Cencerro\n    Glyphs[\"pictCencerro\"] = \"\\uE716\";\n    // U+E7FE  Center (Weinberg)\n    Glyphs[\"pictCenter1\"] = \"\\uE7FE\";\n    // U+E7FF  Center (Ghent)\n    Glyphs[\"pictCenter2\"] = \"\\uE7FF\";\n    // U+E800  Center (Caltabiano)\n    Glyphs[\"pictCenter3\"] = \"\\uE800\";\n    // U+E748  Chain rattle\n    Glyphs[\"pictChainRattle\"] = \"\\uE748\";\n    // U+E6C2  Chimes\n    Glyphs[\"pictChimes\"] = \"\\uE6C2\";\n    // U+E726  Chinese cymbal\n    Glyphs[\"pictChineseCymbal\"] = \"\\uE726\";\n    // U+E805  Choke (Weinberg)\n    Glyphs[\"pictChokeCymbal\"] = \"\\uE805\";\n    // U+E6F2  Claves\n    Glyphs[\"pictClaves\"] = \"\\uE6F2\";\n    // U+E7E7  Coins\n    Glyphs[\"pictCoins\"] = \"\\uE7E7\";\n    // U+E6DE  Conga\n    Glyphs[\"pictConga\"] = \"\\uE6DE\";\n    // U+E711  Cow bell\n    Glyphs[\"pictCowBell\"] = \"\\uE711\";\n    // U+E720  Crash cymbals\n    Glyphs[\"pictCrashCymbals\"] = \"\\uE720\";\n    // U+E6AE  Crotales\n    Glyphs[\"pictCrotales\"] = \"\\uE6AE\";\n    // U+E80C  Combining crush for stem\n    Glyphs[\"pictCrushStem\"] = \"\\uE80C\";\n    // U+E6E4  Cuica\n    Glyphs[\"pictCuica\"] = \"\\uE6E4\";\n    // U+E728  Cymbal tongs\n    Glyphs[\"pictCymbalTongs\"] = \"\\uE728\";\n    // U+E7F9  Damp\n    Glyphs[\"pictDamp1\"] = \"\\uE7F9\";\n    // U+E7FA  Damp 2\n    Glyphs[\"pictDamp2\"] = \"\\uE7FA\";\n    // U+E7FB  Damp 3\n    Glyphs[\"pictDamp3\"] = \"\\uE7FB\";\n    // U+E7FC  Damp 4\n    Glyphs[\"pictDamp4\"] = \"\\uE7FC\";\n    // U+E80D  Combining X for stem (dead note)\n    Glyphs[\"pictDeadNoteStem\"] = \"\\uE80D\";\n    // U+E7E8  Drum stick\n    Glyphs[\"pictDrumStick\"] = \"\\uE7E8\";\n    // U+E757  Duck call\n    Glyphs[\"pictDuckCall\"] = \"\\uE757\";\n    // U+E729  Edge of cymbal\n    Glyphs[\"pictEdgeOfCymbal\"] = \"\\uE729\";\n    // U+E6A9  Empty trapezoid\n    Glyphs[\"pictEmptyTrap\"] = \"\\uE6A9\";\n    // U+E727  Finger cymbals\n    Glyphs[\"pictFingerCymbals\"] = \"\\uE727\";\n    // U+E740  Flexatone\n    Glyphs[\"pictFlexatone\"] = \"\\uE740\";\n    // U+E6F5  Football rattle\n    Glyphs[\"pictFootballRatchet\"] = \"\\uE6F5\";\n    // U+E765  Glass harmonica\n    Glyphs[\"pictGlassHarmonica\"] = \"\\uE765\";\n    // U+E764  Glass harp\n    Glyphs[\"pictGlassHarp\"] = \"\\uE764\";\n    // U+E6C6  Glass plate chimes\n    Glyphs[\"pictGlassPlateChimes\"] = \"\\uE6C6\";\n    // U+E6C5  Glass tube chimes\n    Glyphs[\"pictGlassTubeChimes\"] = \"\\uE6C5\";\n    // U+E6A0  Glockenspiel\n    Glyphs[\"pictGlsp\"] = \"\\uE6A0\";\n    // U+E6AA  Glockenspiel (Smith Brindle)\n    Glyphs[\"pictGlspSmithBrindle\"] = \"\\uE6AA\";\n    // U+E6E2  Goblet drum (djembe, dumbek)\n    Glyphs[\"pictGobletDrum\"] = \"\\uE6E2\";\n    // U+E732  Gong\n    Glyphs[\"pictGong\"] = \"\\uE732\";\n    // U+E733  Gong with button (nipple)\n    Glyphs[\"pictGongWithButton\"] = \"\\uE733\";\n    // U+E6F3  Guiro\n    Glyphs[\"pictGuiro\"] = \"\\uE6F3\";\n    // U+E7C4  Hard gum beater, down\n    Glyphs[\"pictGumHardDown\"] = \"\\uE7C4\";\n    // U+E7C6  Hard gum beater, left\n    Glyphs[\"pictGumHardLeft\"] = \"\\uE7C6\";\n    // U+E7C5  Hard gum beater, right\n    Glyphs[\"pictGumHardRight\"] = \"\\uE7C5\";\n    // U+E7C3  Hard gum beater, up\n    Glyphs[\"pictGumHardUp\"] = \"\\uE7C3\";\n    // U+E7C0  Medium gum beater, down\n    Glyphs[\"pictGumMediumDown\"] = \"\\uE7C0\";\n    // U+E7C2  Medium gum beater, left\n    Glyphs[\"pictGumMediumLeft\"] = \"\\uE7C2\";\n    // U+E7C1  Medium gum beater, right\n    Glyphs[\"pictGumMediumRight\"] = \"\\uE7C1\";\n    // U+E7BF  Medium gum beater, up\n    Glyphs[\"pictGumMediumUp\"] = \"\\uE7BF\";\n    // U+E7BC  Soft gum beater, down\n    Glyphs[\"pictGumSoftDown\"] = \"\\uE7BC\";\n    // U+E7BE  Soft gum beater, left\n    Glyphs[\"pictGumSoftLeft\"] = \"\\uE7BE\";\n    // U+E7BD  Soft gum beater, right\n    Glyphs[\"pictGumSoftRight\"] = \"\\uE7BD\";\n    // U+E7BB  Soft gum beater, up\n    Glyphs[\"pictGumSoftUp\"] = \"\\uE7BB\";\n    // U+E7F6  Half-open\n    Glyphs[\"pictHalfOpen1\"] = \"\\uE7F6\";\n    // U+E7F7  Half-open 2 (Weinberg)\n    Glyphs[\"pictHalfOpen2\"] = \"\\uE7F7\";\n    // U+E715  Handbell\n    Glyphs[\"pictHandbell\"] = \"\\uE715\";\n    // U+E722  Hi-hat\n    Glyphs[\"pictHiHat\"] = \"\\uE722\";\n    // U+E723  Hi-hat cymbals on stand\n    Glyphs[\"pictHiHatOnStand\"] = \"\\uE723\";\n    // U+E767  Jaw harp\n    Glyphs[\"pictJawHarp\"] = \"\\uE767\";\n    // U+E719  Jingle bells\n    Glyphs[\"pictJingleBells\"] = \"\\uE719\";\n    // U+E756  Klaxon horn\n    Glyphs[\"pictKlaxonHorn\"] = \"\\uE756\";\n    // U+E807  Right hand (Agostini)\n    Glyphs[\"pictLeftHandCircle\"] = \"\\uE807\";\n    // U+E763  Lion's roar\n    Glyphs[\"pictLionsRoar\"] = \"\\uE763\";\n    // U+E6B1  Lithophone\n    Glyphs[\"pictLithophone\"] = \"\\uE6B1\";\n    // U+E6DF  Log drum\n    Glyphs[\"pictLogDrum\"] = \"\\uE6DF\";\n    // U+E75A  Lotus flute\n    Glyphs[\"pictLotusFlute\"] = \"\\uE75A\";\n    // U+E6A6  Marimba\n    Glyphs[\"pictMar\"] = \"\\uE6A6\";\n    // U+E6AC  Marimba (Smith Brindle)\n    Glyphs[\"pictMarSmithBrindle\"] = \"\\uE6AC\";\n    // U+E741  Maraca\n    Glyphs[\"pictMaraca\"] = \"\\uE741\";\n    // U+E742  Maracas\n    Glyphs[\"pictMaracas\"] = \"\\uE742\";\n    // U+E759  Megaphone\n    Glyphs[\"pictMegaphone\"] = \"\\uE759\";\n    // U+E6C8  Metal plate chimes\n    Glyphs[\"pictMetalPlateChimes\"] = \"\\uE6C8\";\n    // U+E6C7  Metal tube chimes\n    Glyphs[\"pictMetalTubeChimes\"] = \"\\uE6C7\";\n    // U+E766  Musical saw\n    Glyphs[\"pictMusicalSaw\"] = \"\\uE766\";\n    // U+E804  Normal position (Caltabiano)\n    Glyphs[\"pictNormalPosition\"] = \"\\uE804\";\n    // U+E7F4  On rim\n    Glyphs[\"pictOnRim\"] = \"\\uE7F4\";\n    // U+E7F8  Open\n    Glyphs[\"pictOpen\"] = \"\\uE7F8\";\n    // U+E7F5  Closed / rim shot\n    Glyphs[\"pictOpenRimShot\"] = \"\\uE7F5\";\n    // U+E760  Pistol shot\n    Glyphs[\"pictPistolShot\"] = \"\\uE760\";\n    // U+E752  Police whistle\n    Glyphs[\"pictPoliceWhistle\"] = \"\\uE752\";\n    // U+E6FA  Quijada (jawbone)\n    Glyphs[\"pictQuijada\"] = \"\\uE6FA\";\n    // U+E747  Rainstick\n    Glyphs[\"pictRainstick\"] = \"\\uE747\";\n    // U+E6F4  Ratchet\n    Glyphs[\"pictRatchet\"] = \"\\uE6F4\";\n    // U+E6FC  Reco-reco\n    Glyphs[\"pictRecoReco\"] = \"\\uE6FC\";\n    // U+E806  Left hand (Agostini)\n    Glyphs[\"pictRightHandSquare\"] = \"\\uE806\";\n    // U+E801  Rim or edge (Weinberg)\n    Glyphs[\"pictRim1\"] = \"\\uE801\";\n    // U+E802  Rim (Ghent)\n    Glyphs[\"pictRim2\"] = \"\\uE802\";\n    // U+E803  Rim (Caltabiano)\n    Glyphs[\"pictRim3\"] = \"\\uE803\";\n    // U+E7FD  Rim shot for stem\n    Glyphs[\"pictRimShotOnStem\"] = \"\\uE7FD\";\n    // U+E762  Sandpaper blocks\n    Glyphs[\"pictSandpaperBlocks\"] = \"\\uE762\";\n    // U+E7F3  Scrape around rim (counter-clockwise)\n    Glyphs[\"pictScrapeAroundRim\"] = \"\\uE7F3\";\n    // U+E80E  Scrape around rim (clockwise)\n    Glyphs[\"pictScrapeAroundRimClockwise\"] = \"\\uE80E\";\n    // U+E7F1  Scrape from center to edge\n    Glyphs[\"pictScrapeCenterToEdge\"] = \"\\uE7F1\";\n    // U+E7F2  Scrape from edge to center\n    Glyphs[\"pictScrapeEdgeToCenter\"] = \"\\uE7F2\";\n    // U+E718  Shell bells\n    Glyphs[\"pictShellBells\"] = \"\\uE718\";\n    // U+E6C4  Shell chimes\n    Glyphs[\"pictShellChimes\"] = \"\\uE6C4\";\n    // U+E753  Siren\n    Glyphs[\"pictSiren\"] = \"\\uE753\";\n    // U+E746  Sistrum\n    Glyphs[\"pictSistrum\"] = \"\\uE746\";\n    // U+E724  Sizzle cymbal\n    Glyphs[\"pictSizzleCymbal\"] = \"\\uE724\";\n    // U+E710  Sleigh bell\n    Glyphs[\"pictSleighBell\"] = \"\\uE710\";\n    // U+E734  Slide brush on gong\n    Glyphs[\"pictSlideBrushOnGong\"] = \"\\uE734\";\n    // U+E750  Slide whistle\n    Glyphs[\"pictSlideWhistle\"] = \"\\uE750\";\n    // U+E6E0  Slit drum\n    Glyphs[\"pictSlitDrum\"] = \"\\uE6E0\";\n    // U+E6D1  Snare drum\n    Glyphs[\"pictSnareDrum\"] = \"\\uE6D1\";\n    // U+E6D3  Military snare drum\n    Glyphs[\"pictSnareDrumMilitary\"] = \"\\uE6D3\";\n    // U+E6D2  Snare drum, snares off\n    Glyphs[\"pictSnareDrumSnaresOff\"] = \"\\uE6D2\";\n    // U+E6AF  Steel drums\n    Glyphs[\"pictSteelDrums\"] = \"\\uE6AF\";\n    // U+E7F0  Stick shot\n    Glyphs[\"pictStickShot\"] = \"\\uE7F0\";\n    // U+E7B2  Superball\n    Glyphs[\"pictSuperball\"] = \"\\uE7B2\";\n    // U+E721  Suspended cymbal\n    Glyphs[\"pictSuspendedCymbal\"] = \"\\uE721\";\n    // U+E808  Combining swish for stem\n    Glyphs[\"pictSwishStem\"] = \"\\uE808\";\n    // U+E6E3  Indian tabla\n    Glyphs[\"pictTabla\"] = \"\\uE6E3\";\n    // U+E730  Tam-tam\n    Glyphs[\"pictTamTam\"] = \"\\uE730\";\n    // U+E731  Tam-tam with beater (Smith Brindle)\n    Glyphs[\"pictTamTamWithBeater\"] = \"\\uE731\";\n    // U+E6DB  Tambourine\n    Glyphs[\"pictTambourine\"] = \"\\uE6DB\";\n    // U+E6F1  Temple blocks\n    Glyphs[\"pictTempleBlocks\"] = \"\\uE6F1\";\n    // U+E6D6  Tenor drum\n    Glyphs[\"pictTenorDrum\"] = \"\\uE6D6\";\n    // U+E744  Thundersheet\n    Glyphs[\"pictThundersheet\"] = \"\\uE744\";\n    // U+E6DC  Timbales\n    Glyphs[\"pictTimbales\"] = \"\\uE6DC\";\n    // U+E6D0  Timpani\n    Glyphs[\"pictTimpani\"] = \"\\uE6D0\";\n    // U+E6D7  Tom-tom\n    Glyphs[\"pictTomTom\"] = \"\\uE6D7\";\n    // U+E6D8  Chinese tom-tom\n    Glyphs[\"pictTomTomChinese\"] = \"\\uE6D8\";\n    // U+E6DA  Indo-American tom tom\n    Glyphs[\"pictTomTomIndoAmerican\"] = \"\\uE6DA\";\n    // U+E6D9  Japanese tom-tom\n    Glyphs[\"pictTomTomJapanese\"] = \"\\uE6D9\";\n    // U+E700  Triangle\n    Glyphs[\"pictTriangle\"] = \"\\uE700\";\n    // U+E6B2  Tubaphone\n    Glyphs[\"pictTubaphone\"] = \"\\uE6B2\";\n    // U+E6C0  Tubular bells\n    Glyphs[\"pictTubularBells\"] = \"\\uE6C0\";\n    // U+E80A  Combining turn left for stem\n    Glyphs[\"pictTurnLeftStem\"] = \"\\uE80A\";\n    // U+E80B  Combining turn left or right for stem\n    Glyphs[\"pictTurnRightLeftStem\"] = \"\\uE80B\";\n    // U+E809  Combining turn right for stem\n    Glyphs[\"pictTurnRightStem\"] = \"\\uE809\";\n    // U+E6A7  Vibraphone\n    Glyphs[\"pictVib\"] = \"\\uE6A7\";\n    // U+E6A8  Metallophone (vibraphone motor off)\n    Glyphs[\"pictVibMotorOff\"] = \"\\uE6A8\";\n    // U+E6AD  Vibraphone (Smith Brindle)\n    Glyphs[\"pictVibSmithBrindle\"] = \"\\uE6AD\";\n    // U+E745  Vibraslap\n    Glyphs[\"pictVibraslap\"] = \"\\uE745\";\n    // U+E725  Vietnamese hat cymbal\n    Glyphs[\"pictVietnameseHat\"] = \"\\uE725\";\n    // U+E6F6  Whip\n    Glyphs[\"pictWhip\"] = \"\\uE6F6\";\n    // U+E6C1  Wind chimes (glass)\n    Glyphs[\"pictWindChimesGlass\"] = \"\\uE6C1\";\n    // U+E754  Wind machine\n    Glyphs[\"pictWindMachine\"] = \"\\uE754\";\n    // U+E758  Wind whistle (or mouth siren)\n    Glyphs[\"pictWindWhistle\"] = \"\\uE758\";\n    // U+E6F0  Wood block\n    Glyphs[\"pictWoodBlock\"] = \"\\uE6F0\";\n    // U+E7B4  Wound beater, hard core down\n    Glyphs[\"pictWoundHardDown\"] = \"\\uE7B4\";\n    // U+E7B6  Wound beater, hard core left\n    Glyphs[\"pictWoundHardLeft\"] = \"\\uE7B6\";\n    // U+E7B5  Wound beater, hard core right\n    Glyphs[\"pictWoundHardRight\"] = \"\\uE7B5\";\n    // U+E7B3  Wound beater, hard core up\n    Glyphs[\"pictWoundHardUp\"] = \"\\uE7B3\";\n    // U+E7B8  Wound beater, soft core down\n    Glyphs[\"pictWoundSoftDown\"] = \"\\uE7B8\";\n    // U+E7BA  Wound beater, soft core left\n    Glyphs[\"pictWoundSoftLeft\"] = \"\\uE7BA\";\n    // U+E7B9  Wound beater, soft core right\n    Glyphs[\"pictWoundSoftRight\"] = \"\\uE7B9\";\n    // U+E7B7  Wound beater, soft core up\n    Glyphs[\"pictWoundSoftUp\"] = \"\\uE7B7\";\n    // U+E6A1  Xylophone\n    Glyphs[\"pictXyl\"] = \"\\uE6A1\";\n    // U+E6A3  Bass xylophone\n    Glyphs[\"pictXylBass\"] = \"\\uE6A3\";\n    // U+E6AB  Xylophone (Smith Brindle)\n    Glyphs[\"pictXylSmithBrindle\"] = \"\\uE6AB\";\n    // U+E6A2  Tenor xylophone\n    Glyphs[\"pictXylTenor\"] = \"\\uE6A2\";\n    // U+E6A5  Trough tenor xylophone\n    Glyphs[\"pictXylTenorTrough\"] = \"\\uE6A5\";\n    // U+E6A4  Trough xylophone\n    Glyphs[\"pictXylTrough\"] = \"\\uE6A4\";\n    // U+E632  Buzz pizzicato\n    Glyphs[\"pluckedBuzzPizzicato\"] = \"\\uE632\";\n    // U+E638  Damp\n    Glyphs[\"pluckedDamp\"] = \"\\uE638\";\n    // U+E639  Damp all\n    Glyphs[\"pluckedDampAll\"] = \"\\uE639\";\n    // U+E63B  Damp for stem\n    Glyphs[\"pluckedDampOnStem\"] = \"\\uE63B\";\n    // U+E637  Fingernail flick\n    Glyphs[\"pluckedFingernailFlick\"] = \"\\uE637\";\n    // U+E633  Left-hand pizzicato\n    Glyphs[\"pluckedLeftHandPizzicato\"] = \"\\uE633\";\n    // U+E63A  Plectrum\n    Glyphs[\"pluckedPlectrum\"] = \"\\uE63A\";\n    // U+E631  Snap pizzicato above\n    Glyphs[\"pluckedSnapPizzicatoAbove\"] = \"\\uE631\";\n    // U+E630  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelow\"] = \"\\uE630\";\n    // U+E636  With fingernails\n    Glyphs[\"pluckedWithFingernails\"] = \"\\uE636\";\n    // U+E514  Quindicesima\n    Glyphs[\"quindicesima\"] = \"\\uE514\";\n    // U+E515  Quindicesima alta\n    Glyphs[\"quindicesimaAlta\"] = \"\\uE515\";\n    // U+E516  Quindicesima bassa\n    Glyphs[\"quindicesimaBassa\"] = \"\\uE516\";\n    // U+E51D  Quindicesima bassa (mb)\n    Glyphs[\"quindicesimaBassaMb\"] = \"\\uE51D\";\n    // U+E500  Repeat last bar\n    Glyphs[\"repeat1Bar\"] = \"\\uE500\";\n    // U+E501  Repeat last two bars\n    Glyphs[\"repeat2Bars\"] = \"\\uE501\";\n    // U+E502  Repeat last four bars\n    Glyphs[\"repeat4Bars\"] = \"\\uE502\";\n    // U+E505  Repeat bar lower dot\n    Glyphs[\"repeatBarLowerDot\"] = \"\\uE505\";\n    // U+E504  Repeat bar slash\n    Glyphs[\"repeatBarSlash\"] = \"\\uE504\";\n    // U+E503  Repeat bar upper dot\n    Glyphs[\"repeatBarUpperDot\"] = \"\\uE503\";\n    // U+E044  Single repeat dot\n    Glyphs[\"repeatDot\"] = \"\\uE044\";\n    // U+E043  Repeat dots\n    Glyphs[\"repeatDots\"] = \"\\uE043\";\n    // U+E040  Left (start) repeat sign\n    Glyphs[\"repeatLeft\"] = \"\\uE040\";\n    // U+E041  Right (end) repeat sign\n    Glyphs[\"repeatRight\"] = \"\\uE041\";\n    // U+E042  Right and left repeat sign\n    Glyphs[\"repeatRightLeft\"] = \"\\uE042\";\n    // U+E4ED  1024th rest\n    Glyphs[\"rest1024th\"] = \"\\uE4ED\";\n    // U+E4EA  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128th\"] = \"\\uE4EA\";\n    // U+E4E7  16th (semiquaver) rest\n    Glyphs[\"rest16th\"] = \"\\uE4E7\";\n    // U+E4EB  256th rest\n    Glyphs[\"rest256th\"] = \"\\uE4EB\";\n    // U+E4E8  32nd (demisemiquaver) rest\n    Glyphs[\"rest32nd\"] = \"\\uE4E8\";\n    // U+E4EC  512th rest\n    Glyphs[\"rest512th\"] = \"\\uE4EC\";\n    // U+E4E9  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64th\"] = \"\\uE4E9\";\n    // U+E4E6  Eighth (quaver) rest\n    Glyphs[\"rest8th\"] = \"\\uE4E6\";\n    // U+E4E2  Double whole (breve) rest\n    Glyphs[\"restDoubleWhole\"] = \"\\uE4E2\";\n    // U+E4F3  Double whole rest on leger lines\n    Glyphs[\"restDoubleWholeLegerLine\"] = \"\\uE4F3\";\n    // U+E4EE  Multiple measure rest\n    Glyphs[\"restHBar\"] = \"\\uE4EE\";\n    // U+E4EF  H-bar, left half\n    Glyphs[\"restHBarLeft\"] = \"\\uE4EF\";\n    // U+E4F0  H-bar, middle\n    Glyphs[\"restHBarMiddle\"] = \"\\uE4F0\";\n    // U+E4F1  H-bar, right half\n    Glyphs[\"restHBarRight\"] = \"\\uE4F1\";\n    // U+E4E4  Half (minim) rest\n    Glyphs[\"restHalf\"] = \"\\uE4E4\";\n    // U+E4F5  Half rest on leger line\n    Glyphs[\"restHalfLegerLine\"] = \"\\uE4F5\";\n    // U+E4E1  Longa rest\n    Glyphs[\"restLonga\"] = \"\\uE4E1\";\n    // U+E4E0  Maxima rest\n    Glyphs[\"restMaxima\"] = \"\\uE4E0\";\n    // U+E4E5  Quarter (crotchet) rest\n    Glyphs[\"restQuarter\"] = \"\\uE4E5\";\n    // U+E4F2  Old-style quarter (crotchet) rest\n    Glyphs[\"restQuarterOld\"] = \"\\uE4F2\";\n    // U+E4F6  Z-style quarter (crotchet) rest\n    Glyphs[\"restQuarterZ\"] = \"\\uE4F6\";\n    // U+E4E3  Whole (semibreve) rest\n    Glyphs[\"restWhole\"] = \"\\uE4E3\";\n    // U+E4F4  Whole rest on leger line\n    Glyphs[\"restWholeLegerLine\"] = \"\\uE4F4\";\n    // U+E001  Reversed brace\n    Glyphs[\"reversedBrace\"] = \"\\uE001\";\n    // U+E006  Reversed bracket bottom\n    Glyphs[\"reversedBracketBottom\"] = \"\\uE006\";\n    // U+E005  Reversed bracket top\n    Glyphs[\"reversedBracketTop\"] = \"\\uE005\";\n    // U+E04D  Right repeat sign within bar\n    Glyphs[\"rightRepeatSmall\"] = \"\\uE04D\";\n    // U+EF00  Scale degree 1\n    Glyphs[\"scaleDegree1\"] = \"\\uEF00\";\n    // U+EF01  Scale degree 2\n    Glyphs[\"scaleDegree2\"] = \"\\uEF01\";\n    // U+EF02  Scale degree 3\n    Glyphs[\"scaleDegree3\"] = \"\\uEF02\";\n    // U+EF03  Scale degree 4\n    Glyphs[\"scaleDegree4\"] = \"\\uEF03\";\n    // U+EF04  Scale degree 5\n    Glyphs[\"scaleDegree5\"] = \"\\uEF04\";\n    // U+EF05  Scale degree 6\n    Glyphs[\"scaleDegree6\"] = \"\\uEF05\";\n    // U+EF06  Scale degree 7\n    Glyphs[\"scaleDegree7\"] = \"\\uEF06\";\n    // U+EF07  Scale degree 8\n    Glyphs[\"scaleDegree8\"] = \"\\uEF07\";\n    // U+EF08  Scale degree 9\n    Glyphs[\"scaleDegree9\"] = \"\\uEF08\";\n    // U+E06F  Schäffer clef\n    Glyphs[\"schaefferClef\"] = \"\\uE06F\";\n    // U+E072  Schäffer F clef to G clef change\n    Glyphs[\"schaefferFClefToGClef\"] = \"\\uE072\";\n    // U+E071  Schäffer G clef to F clef change\n    Glyphs[\"schaefferGClefToFClef\"] = \"\\uE071\";\n    // U+E070  Schäffer previous clef\n    Glyphs[\"schaefferPreviousClef\"] = \"\\uE070\";\n    // U+E047  Segno\n    Glyphs[\"segno\"] = \"\\uE047\";\n    // U+E04A  Segno (serpent)\n    Glyphs[\"segnoSerpent1\"] = \"\\uE04A\";\n    // U+E04B  Segno (serpent with vertical lines)\n    Glyphs[\"segnoSerpent2\"] = \"\\uE04B\";\n    // U+E06B  Semi-pitched percussion clef 1\n    Glyphs[\"semipitchedPercussionClef1\"] = \"\\uE06B\";\n    // U+E06C  Semi-pitched percussion clef 2\n    Glyphs[\"semipitchedPercussionClef2\"] = \"\\uE06C\";\n    // U+EC52  Flat\n    Glyphs[\"smnFlat\"] = \"\\uEC52\";\n    // U+EC53  Flat (white)\n    Glyphs[\"smnFlatWhite\"] = \"\\uEC53\";\n    // U+EC57  Double flat history sign\n    Glyphs[\"smnHistoryDoubleFlat\"] = \"\\uEC57\";\n    // U+EC55  Double sharp history sign\n    Glyphs[\"smnHistoryDoubleSharp\"] = \"\\uEC55\";\n    // U+EC56  Flat history sign\n    Glyphs[\"smnHistoryFlat\"] = \"\\uEC56\";\n    // U+EC54  Sharp history sign\n    Glyphs[\"smnHistorySharp\"] = \"\\uEC54\";\n    // U+EC58  Natural (N)\n    Glyphs[\"smnNatural\"] = \"\\uEC58\";\n    // U+EC50  Sharp stem up\n    Glyphs[\"smnSharp\"] = \"\\uEC50\";\n    // U+EC59  Sharp stem down\n    Glyphs[\"smnSharpDown\"] = \"\\uEC59\";\n    // U+EC51  Sharp (white) stem up\n    Glyphs[\"smnSharpWhite\"] = \"\\uEC51\";\n    // U+EC5A  Sharp (white) stem down\n    Glyphs[\"smnSharpWhiteDown\"] = \"\\uEC5A\";\n    // U+E00A  Split bar divider (bar spans a system break)\n    Glyphs[\"splitBarDivider\"] = \"\\uE00A\";\n    // U+E010  1-line staff\n    Glyphs[\"staff1Line\"] = \"\\uE010\";\n    // U+E01C  1-line staff (narrow)\n    Glyphs[\"staff1LineNarrow\"] = \"\\uE01C\";\n    // U+E016  1-line staff (wide)\n    Glyphs[\"staff1LineWide\"] = \"\\uE016\";\n    // U+E011  2-line staff\n    Glyphs[\"staff2Lines\"] = \"\\uE011\";\n    // U+E01D  2-line staff (narrow)\n    Glyphs[\"staff2LinesNarrow\"] = \"\\uE01D\";\n    // U+E017  2-line staff (wide)\n    Glyphs[\"staff2LinesWide\"] = \"\\uE017\";\n    // U+E012  3-line staff\n    Glyphs[\"staff3Lines\"] = \"\\uE012\";\n    // U+E01E  3-line staff (narrow)\n    Glyphs[\"staff3LinesNarrow\"] = \"\\uE01E\";\n    // U+E018  3-line staff (wide)\n    Glyphs[\"staff3LinesWide\"] = \"\\uE018\";\n    // U+E013  4-line staff\n    Glyphs[\"staff4Lines\"] = \"\\uE013\";\n    // U+E01F  4-line staff (narrow)\n    Glyphs[\"staff4LinesNarrow\"] = \"\\uE01F\";\n    // U+E019  4-line staff (wide)\n    Glyphs[\"staff4LinesWide\"] = \"\\uE019\";\n    // U+E014  5-line staff\n    Glyphs[\"staff5Lines\"] = \"\\uE014\";\n    // U+E020  5-line staff (narrow)\n    Glyphs[\"staff5LinesNarrow\"] = \"\\uE020\";\n    // U+E01A  5-line staff (wide)\n    Glyphs[\"staff5LinesWide\"] = \"\\uE01A\";\n    // U+E015  6-line staff\n    Glyphs[\"staff6Lines\"] = \"\\uE015\";\n    // U+E021  6-line staff (narrow)\n    Glyphs[\"staff6LinesNarrow\"] = \"\\uE021\";\n    // U+E01B  6-line staff (wide)\n    Glyphs[\"staff6LinesWide\"] = \"\\uE01B\";\n    // U+E00B  Staff divide arrow down\n    Glyphs[\"staffDivideArrowDown\"] = \"\\uE00B\";\n    // U+E00C  Staff divide arrow up\n    Glyphs[\"staffDivideArrowUp\"] = \"\\uE00C\";\n    // U+E00D  Staff divide arrows\n    Glyphs[\"staffDivideArrowUpDown\"] = \"\\uE00D\";\n    // U+EB98  Lower 1 staff position\n    Glyphs[\"staffPosLower1\"] = \"\\uEB98\";\n    // U+EB99  Lower 2 staff positions\n    Glyphs[\"staffPosLower2\"] = \"\\uEB99\";\n    // U+EB9A  Lower 3 staff positions\n    Glyphs[\"staffPosLower3\"] = \"\\uEB9A\";\n    // U+EB9B  Lower 4 staff positions\n    Glyphs[\"staffPosLower4\"] = \"\\uEB9B\";\n    // U+EB9C  Lower 5 staff positions\n    Glyphs[\"staffPosLower5\"] = \"\\uEB9C\";\n    // U+EB9D  Lower 6 staff positions\n    Glyphs[\"staffPosLower6\"] = \"\\uEB9D\";\n    // U+EB9E  Lower 7 staff positions\n    Glyphs[\"staffPosLower7\"] = \"\\uEB9E\";\n    // U+EB9F  Lower 8 staff positions\n    Glyphs[\"staffPosLower8\"] = \"\\uEB9F\";\n    // U+EB90  Raise 1 staff position\n    Glyphs[\"staffPosRaise1\"] = \"\\uEB90\";\n    // U+EB91  Raise 2 staff positions\n    Glyphs[\"staffPosRaise2\"] = \"\\uEB91\";\n    // U+EB92  Raise 3 staff positions\n    Glyphs[\"staffPosRaise3\"] = \"\\uEB92\";\n    // U+EB93  Raise 4 staff positions\n    Glyphs[\"staffPosRaise4\"] = \"\\uEB93\";\n    // U+EB94  Raise 5 staff positions\n    Glyphs[\"staffPosRaise5\"] = \"\\uEB94\";\n    // U+EB95  Raise 6 staff positions\n    Glyphs[\"staffPosRaise6\"] = \"\\uEB95\";\n    // U+EB96  Raise 7 staff positions\n    Glyphs[\"staffPosRaise7\"] = \"\\uEB96\";\n    // U+EB97  Raise 8 staff positions\n    Glyphs[\"staffPosRaise8\"] = \"\\uEB97\";\n    // U+E210  Combining stem\n    Glyphs[\"stem\"] = \"\\uE210\";\n    // U+E215  Combining bow on bridge stem\n    Glyphs[\"stemBowOnBridge\"] = \"\\uE215\";\n    // U+E216  Combining bow on tailpiece stem\n    Glyphs[\"stemBowOnTailpiece\"] = \"\\uE216\";\n    // U+E217  Combining buzz roll stem\n    Glyphs[\"stemBuzzRoll\"] = \"\\uE217\";\n    // U+E218  Combining damp stem\n    Glyphs[\"stemDamp\"] = \"\\uE218\";\n    // U+E21F  Combining harp string noise stem\n    Glyphs[\"stemHarpStringNoise\"] = \"\\uE21F\";\n    // U+E21A  Combining multiphonics (black) stem\n    Glyphs[\"stemMultiphonicsBlack\"] = \"\\uE21A\";\n    // U+E21C  Combining multiphonics (black and white) stem\n    Glyphs[\"stemMultiphonicsBlackWhite\"] = \"\\uE21C\";\n    // U+E21B  Combining multiphonics (white) stem\n    Glyphs[\"stemMultiphonicsWhite\"] = \"\\uE21B\";\n    // U+E213  Combining Penderecki unmeasured tremolo stem\n    Glyphs[\"stemPendereckiTremolo\"] = \"\\uE213\";\n    // U+E21E  Combining rim shot stem\n    Glyphs[\"stemRimShot\"] = \"\\uE21E\";\n    // U+E211  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesang\"] = \"\\uE211\";\n    // U+E214  Combining sul ponticello (bow behind bridge) stem\n    Glyphs[\"stemSulPonticello\"] = \"\\uE214\";\n    // U+E21D  Combining sussurando stem\n    Glyphs[\"stemSussurando\"] = \"\\uE21D\";\n    // U+E212  Combining swished stem\n    Glyphs[\"stemSwished\"] = \"\\uE212\";\n    // U+E219  Combining vibrato pulse accent (Saunders) stem\n    Glyphs[\"stemVibratoPulse\"] = \"\\uE219\";\n    // U+E232  Stockhausen irregular tremolo (\"Morsen\", like Morse code)\n    Glyphs[\"stockhausenTremolo\"] = \"\\uE232\";\n    // U+E618  Bow behind bridge (sul ponticello)\n    Glyphs[\"stringsBowBehindBridge\"] = \"\\uE618\";\n    // U+E62A  Bow behind bridge on four strings\n    Glyphs[\"stringsBowBehindBridgeFourStrings\"] = \"\\uE62A\";\n    // U+E627  Bow behind bridge on one string\n    Glyphs[\"stringsBowBehindBridgeOneString\"] = \"\\uE627\";\n    // U+E629  Bow behind bridge on three strings\n    Glyphs[\"stringsBowBehindBridgeThreeStrings\"] = \"\\uE629\";\n    // U+E628  Bow behind bridge on two strings\n    Glyphs[\"stringsBowBehindBridgeTwoStrings\"] = \"\\uE628\";\n    // U+E619  Bow on top of bridge\n    Glyphs[\"stringsBowOnBridge\"] = \"\\uE619\";\n    // U+E61A  Bow on tailpiece\n    Glyphs[\"stringsBowOnTailpiece\"] = \"\\uE61A\";\n    // U+E626  Change bow direction, indeterminate\n    Glyphs[\"stringsChangeBowDirection\"] = \"\\uE626\";\n    // U+E610  Down bow\n    Glyphs[\"stringsDownBow\"] = \"\\uE610\";\n    // U+EE82  Down bow, away from body\n    Glyphs[\"stringsDownBowAwayFromBody\"] = \"\\uEE82\";\n    // U+EE84  Down bow, beyond bridge\n    Glyphs[\"stringsDownBowBeyondBridge\"] = \"\\uEE84\";\n    // U+EE80  Down bow, towards body\n    Glyphs[\"stringsDownBowTowardsBody\"] = \"\\uEE80\";\n    // U+E611  Turned down bow\n    Glyphs[\"stringsDownBowTurned\"] = \"\\uE611\";\n    // U+E622  Fouetté\n    Glyphs[\"stringsFouette\"] = \"\\uE622\";\n    // U+E615  Half-harmonic\n    Glyphs[\"stringsHalfHarmonic\"] = \"\\uE615\";\n    // U+E614  Harmonic\n    Glyphs[\"stringsHarmonic\"] = \"\\uE614\";\n    // U+E620  Jeté (gettato) above\n    Glyphs[\"stringsJeteAbove\"] = \"\\uE620\";\n    // U+E621  Jeté (gettato) below\n    Glyphs[\"stringsJeteBelow\"] = \"\\uE621\";\n    // U+E617  Mute off\n    Glyphs[\"stringsMuteOff\"] = \"\\uE617\";\n    // U+E616  Mute on\n    Glyphs[\"stringsMuteOn\"] = \"\\uE616\";\n    // U+E61B  Overpressure, down bow\n    Glyphs[\"stringsOverpressureDownBow\"] = \"\\uE61B\";\n    // U+E61F  Overpressure, no bow direction\n    Glyphs[\"stringsOverpressureNoDirection\"] = \"\\uE61F\";\n    // U+E61D  Overpressure possibile, down bow\n    Glyphs[\"stringsOverpressurePossibileDownBow\"] = \"\\uE61D\";\n    // U+E61E  Overpressure possibile, up bow\n    Glyphs[\"stringsOverpressurePossibileUpBow\"] = \"\\uE61E\";\n    // U+E61C  Overpressure, up bow\n    Glyphs[\"stringsOverpressureUpBow\"] = \"\\uE61C\";\n    // U+EE88  Scrape, circular clockwise\n    Glyphs[\"stringsScrapeCircularClockwise\"] = \"\\uEE88\";\n    // U+EE89  Scrape, circular counter-clockwise\n    Glyphs[\"stringsScrapeCircularCounterclockwise\"] = \"\\uEE89\";\n    // U+EE86  Scrape, parallel inward\n    Glyphs[\"stringsScrapeParallelInward\"] = \"\\uEE86\";\n    // U+EE87  Scrape, parallel outward\n    Glyphs[\"stringsScrapeParallelOutward\"] = \"\\uEE87\";\n    // U+E624  Thumb position\n    Glyphs[\"stringsThumbPosition\"] = \"\\uE624\";\n    // U+E625  Turned thumb position\n    Glyphs[\"stringsThumbPositionTurned\"] = \"\\uE625\";\n    // U+EE8A  Triple chop, inward\n    Glyphs[\"stringsTripleChopInward\"] = \"\\uEE8A\";\n    // U+EE8B  Triple chop, outward\n    Glyphs[\"stringsTripleChopOutward\"] = \"\\uEE8B\";\n    // U+E612  Up bow\n    Glyphs[\"stringsUpBow\"] = \"\\uE612\";\n    // U+EE83  Up bow, away from body\n    Glyphs[\"stringsUpBowAwayFromBody\"] = \"\\uEE83\";\n    // U+EE85  Up bow, beyond bridge\n    Glyphs[\"stringsUpBowBeyondBridge\"] = \"\\uEE85\";\n    // U+EE81  Up bow, towards body\n    Glyphs[\"stringsUpBowTowardsBody\"] = \"\\uEE81\";\n    // U+E613  Turned up bow\n    Glyphs[\"stringsUpBowTurned\"] = \"\\uE613\";\n    // U+E623  Vibrato pulse accent (Saunders) for stem\n    Glyphs[\"stringsVibratoPulse\"] = \"\\uE623\";\n    // U+EE72  Swiss rudiments doublé black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackDouble\"] = \"\\uEE72\";\n    // U+EE70  Swiss rudiments flam black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackFlam\"] = \"\\uEE70\";\n    // U+EE73  Swiss rudiments doublé half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfDouble\"] = \"\\uEE73\";\n    // U+EE71  Swiss rudiments flam half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfFlam\"] = \"\\uEE71\";\n    // U+E007  System divider\n    Glyphs[\"systemDivider\"] = \"\\uE007\";\n    // U+E009  Extra long system divider\n    Glyphs[\"systemDividerExtraLong\"] = \"\\uE009\";\n    // U+E008  Long system divider\n    Glyphs[\"systemDividerLong\"] = \"\\uE008\";\n    // U+E1FC  Augmentation dot\n    Glyphs[\"textAugmentationDot\"] = \"\\uE1FC\";\n    // U+E1F5  Black note, fractional 16th beam, long stem\n    Glyphs[\"textBlackNoteFrac16thLongStem\"] = \"\\uE1F5\";\n    // U+E1F4  Black note, fractional 16th beam, short stem\n    Glyphs[\"textBlackNoteFrac16thShortStem\"] = \"\\uE1F4\";\n    // U+E1F6  Black note, fractional 32nd beam, long stem\n    Glyphs[\"textBlackNoteFrac32ndLongStem\"] = \"\\uE1F6\";\n    // U+E1F3  Black note, fractional 8th beam, long stem\n    Glyphs[\"textBlackNoteFrac8thLongStem\"] = \"\\uE1F3\";\n    // U+E1F2  Black note, fractional 8th beam, short stem\n    Glyphs[\"textBlackNoteFrac8thShortStem\"] = \"\\uE1F2\";\n    // U+E1F1  Black note, long stem\n    Glyphs[\"textBlackNoteLongStem\"] = \"\\uE1F1\";\n    // U+E1F0  Black note, short stem\n    Glyphs[\"textBlackNoteShortStem\"] = \"\\uE1F0\";\n    // U+E1FA  Continuing 16th beam for long stem\n    Glyphs[\"textCont16thBeamLongStem\"] = \"\\uE1FA\";\n    // U+E1F9  Continuing 16th beam for short stem\n    Glyphs[\"textCont16thBeamShortStem\"] = \"\\uE1F9\";\n    // U+E1FB  Continuing 32nd beam for long stem\n    Glyphs[\"textCont32ndBeamLongStem\"] = \"\\uE1FB\";\n    // U+E1F8  Continuing 8th beam for long stem\n    Glyphs[\"textCont8thBeamLongStem\"] = \"\\uE1F8\";\n    // U+E1F7  Continuing 8th beam for short stem\n    Glyphs[\"textCont8thBeamShortStem\"] = \"\\uE1F7\";\n    // U+E209  Headless black note, fractional 16th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thLongStem\"] = \"\\uE209\";\n    // U+E208  Headless black note, fractional 16th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thShortStem\"] = \"\\uE208\";\n    // U+E20A  Headless black note, fractional 32nd beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac32ndLongStem\"] = \"\\uE20A\";\n    // U+E207  Headless black note, fractional 8th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thLongStem\"] = \"\\uE207\";\n    // U+E206  Headless black note, fractional 8th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thShortStem\"] = \"\\uE206\";\n    // U+E205  Headless black note, long stem\n    Glyphs[\"textHeadlessBlackNoteLongStem\"] = \"\\uE205\";\n    // U+E204  Headless black note, short stem\n    Glyphs[\"textHeadlessBlackNoteShortStem\"] = \"\\uE204\";\n    // U+E1FD  Tie\n    Glyphs[\"textTie\"] = \"\\uE1FD\";\n    // U+E202  Tuplet number 3 for long stem\n    Glyphs[\"textTuplet3LongStem\"] = \"\\uE202\";\n    // U+E1FF  Tuplet number 3 for short stem\n    Glyphs[\"textTuplet3ShortStem\"] = \"\\uE1FF\";\n    // U+E203  Tuplet bracket end for long stem\n    Glyphs[\"textTupletBracketEndLongStem\"] = \"\\uE203\";\n    // U+E200  Tuplet bracket end for short stem\n    Glyphs[\"textTupletBracketEndShortStem\"] = \"\\uE200\";\n    // U+E201  Tuplet bracket start for long stem\n    Glyphs[\"textTupletBracketStartLongStem\"] = \"\\uE201\";\n    // U+E1FE  Tuplet bracket start for short stem\n    Glyphs[\"textTupletBracketStartShortStem\"] = \"\\uE1FE\";\n    // U+E080  Time signature 0\n    Glyphs[\"timeSig0\"] = \"\\uE080\";\n    // U+ECF0  Reversed time signature 0\n    Glyphs[\"timeSig0Reversed\"] = \"\\uECF0\";\n    // U+ECE0  Turned time signature 0\n    Glyphs[\"timeSig0Turned\"] = \"\\uECE0\";\n    // U+E081  Time signature 1\n    Glyphs[\"timeSig1\"] = \"\\uE081\";\n    // U+ECF1  Reversed time signature 1\n    Glyphs[\"timeSig1Reversed\"] = \"\\uECF1\";\n    // U+ECE1  Turned time signature 1\n    Glyphs[\"timeSig1Turned\"] = \"\\uECE1\";\n    // U+E082  Time signature 2\n    Glyphs[\"timeSig2\"] = \"\\uE082\";\n    // U+ECF2  Reversed time signature 2\n    Glyphs[\"timeSig2Reversed\"] = \"\\uECF2\";\n    // U+ECE2  Turned time signature 2\n    Glyphs[\"timeSig2Turned\"] = \"\\uECE2\";\n    // U+E083  Time signature 3\n    Glyphs[\"timeSig3\"] = \"\\uE083\";\n    // U+ECF3  Reversed time signature 3\n    Glyphs[\"timeSig3Reversed\"] = \"\\uECF3\";\n    // U+ECE3  Turned time signature 3\n    Glyphs[\"timeSig3Turned\"] = \"\\uECE3\";\n    // U+E084  Time signature 4\n    Glyphs[\"timeSig4\"] = \"\\uE084\";\n    // U+ECF4  Reversed time signature 4\n    Glyphs[\"timeSig4Reversed\"] = \"\\uECF4\";\n    // U+ECE4  Turned time signature 4\n    Glyphs[\"timeSig4Turned\"] = \"\\uECE4\";\n    // U+E085  Time signature 5\n    Glyphs[\"timeSig5\"] = \"\\uE085\";\n    // U+ECF5  Reversed time signature 5\n    Glyphs[\"timeSig5Reversed\"] = \"\\uECF5\";\n    // U+ECE5  Turned time signature 5\n    Glyphs[\"timeSig5Turned\"] = \"\\uECE5\";\n    // U+E086  Time signature 6\n    Glyphs[\"timeSig6\"] = \"\\uE086\";\n    // U+ECF6  Reversed time signature 6\n    Glyphs[\"timeSig6Reversed\"] = \"\\uECF6\";\n    // U+ECE6  Turned time signature 6\n    Glyphs[\"timeSig6Turned\"] = \"\\uECE6\";\n    // U+E087  Time signature 7\n    Glyphs[\"timeSig7\"] = \"\\uE087\";\n    // U+ECF7  Reversed time signature 7\n    Glyphs[\"timeSig7Reversed\"] = \"\\uECF7\";\n    // U+ECE7  Turned time signature 7\n    Glyphs[\"timeSig7Turned\"] = \"\\uECE7\";\n    // U+E088  Time signature 8\n    Glyphs[\"timeSig8\"] = \"\\uE088\";\n    // U+ECF8  Reversed time signature 8\n    Glyphs[\"timeSig8Reversed\"] = \"\\uECF8\";\n    // U+ECE8  Turned time signature 8\n    Glyphs[\"timeSig8Turned\"] = \"\\uECE8\";\n    // U+E089  Time signature 9\n    Glyphs[\"timeSig9\"] = \"\\uE089\";\n    // U+ECF9  Reversed time signature 9\n    Glyphs[\"timeSig9Reversed\"] = \"\\uECF9\";\n    // U+ECE9  Turned time signature 9\n    Glyphs[\"timeSig9Turned\"] = \"\\uECE9\";\n    // U+EC80  Left bracket for whole time signature\n    Glyphs[\"timeSigBracketLeft\"] = \"\\uEC80\";\n    // U+EC82  Left bracket for numerator only\n    Glyphs[\"timeSigBracketLeftSmall\"] = \"\\uEC82\";\n    // U+EC81  Right bracket for whole time signature\n    Glyphs[\"timeSigBracketRight\"] = \"\\uEC81\";\n    // U+EC83  Right bracket for numerator only\n    Glyphs[\"timeSigBracketRightSmall\"] = \"\\uEC83\";\n    // U+E09F  Control character for denominator digit\n    Glyphs[\"timeSigCombDenominator\"] = \"\\uE09F\";\n    // U+E09E  Control character for numerator digit\n    Glyphs[\"timeSigCombNumerator\"] = \"\\uE09E\";\n    // U+E096  Time signature comma\n    Glyphs[\"timeSigComma\"] = \"\\uE096\";\n    // U+E08A  Common time\n    Glyphs[\"timeSigCommon\"] = \"\\uE08A\";\n    // U+ECFA  Reversed common time\n    Glyphs[\"timeSigCommonReversed\"] = \"\\uECFA\";\n    // U+ECEA  Turned common time\n    Glyphs[\"timeSigCommonTurned\"] = \"\\uECEA\";\n    // U+EC85  Cut time (Bach)\n    Glyphs[\"timeSigCut2\"] = \"\\uEC85\";\n    // U+EC86  Cut triple time (9/8)\n    Glyphs[\"timeSigCut3\"] = \"\\uEC86\";\n    // U+E08B  Cut time\n    Glyphs[\"timeSigCutCommon\"] = \"\\uE08B\";\n    // U+ECFB  Reversed cut time\n    Glyphs[\"timeSigCutCommonReversed\"] = \"\\uECFB\";\n    // U+ECEB  Turned cut time\n    Glyphs[\"timeSigCutCommonTurned\"] = \"\\uECEB\";\n    // U+E08F  Time signature equals\n    Glyphs[\"timeSigEquals\"] = \"\\uE08F\";\n    // U+E098  Time signature fraction ½\n    Glyphs[\"timeSigFractionHalf\"] = \"\\uE098\";\n    // U+E09A  Time signature fraction ⅓\n    Glyphs[\"timeSigFractionOneThird\"] = \"\\uE09A\";\n    // U+E097  Time signature fraction ¼\n    Glyphs[\"timeSigFractionQuarter\"] = \"\\uE097\";\n    // U+E099  Time signature fraction ¾\n    Glyphs[\"timeSigFractionThreeQuarters\"] = \"\\uE099\";\n    // U+E09B  Time signature fraction ⅔\n    Glyphs[\"timeSigFractionTwoThirds\"] = \"\\uE09B\";\n    // U+E08E  Time signature fraction slash\n    Glyphs[\"timeSigFractionalSlash\"] = \"\\uE08E\";\n    // U+E090  Time signature minus\n    Glyphs[\"timeSigMinus\"] = \"\\uE090\";\n    // U+E091  Time signature multiply\n    Glyphs[\"timeSigMultiply\"] = \"\\uE091\";\n    // U+E09D  Open time signature (Penderecki)\n    Glyphs[\"timeSigOpenPenderecki\"] = \"\\uE09D\";\n    // U+E094  Left parenthesis for whole time signature\n    Glyphs[\"timeSigParensLeft\"] = \"\\uE094\";\n    // U+E092  Left parenthesis for numerator only\n    Glyphs[\"timeSigParensLeftSmall\"] = \"\\uE092\";\n    // U+E095  Right parenthesis for whole time signature\n    Glyphs[\"timeSigParensRight\"] = \"\\uE095\";\n    // U+E093  Right parenthesis for numerator only\n    Glyphs[\"timeSigParensRightSmall\"] = \"\\uE093\";\n    // U+E08C  Time signature +\n    Glyphs[\"timeSigPlus\"] = \"\\uE08C\";\n    // U+E08D  Time signature + (for numerators)\n    Glyphs[\"timeSigPlusSmall\"] = \"\\uE08D\";\n    // U+EC84  Time signature slash separator\n    Glyphs[\"timeSigSlash\"] = \"\\uEC84\";\n    // U+E09C  Open time signature\n    Glyphs[\"timeSigX\"] = \"\\uE09C\";\n    // U+E220  Combining tremolo 1\n    Glyphs[\"tremolo1\"] = \"\\uE220\";\n    // U+E221  Combining tremolo 2\n    Glyphs[\"tremolo2\"] = \"\\uE221\";\n    // U+E222  Combining tremolo 3\n    Glyphs[\"tremolo3\"] = \"\\uE222\";\n    // U+E223  Combining tremolo 4\n    Glyphs[\"tremolo4\"] = \"\\uE223\";\n    // U+E224  Combining tremolo 5\n    Glyphs[\"tremolo5\"] = \"\\uE224\";\n    // U+E22E  Divide measured tremolo by 2\n    Glyphs[\"tremoloDivisiDots2\"] = \"\\uE22E\";\n    // U+E22F  Divide measured tremolo by 3\n    Glyphs[\"tremoloDivisiDots3\"] = \"\\uE22F\";\n    // U+E230  Divide measured tremolo by 4\n    Glyphs[\"tremoloDivisiDots4\"] = \"\\uE230\";\n    // U+E231  Divide measured tremolo by 6\n    Glyphs[\"tremoloDivisiDots6\"] = \"\\uE231\";\n    // U+E225  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1\"] = \"\\uE225\";\n    // U+E226  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2\"] = \"\\uE226\";\n    // U+E227  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3\"] = \"\\uE227\";\n    // U+E228  Fingered tremolo 4\n    Glyphs[\"tremoloFingered4\"] = \"\\uE228\";\n    // U+E229  Fingered tremolo 5\n    Glyphs[\"tremoloFingered5\"] = \"\\uE229\";\n    // U+E5F2  Triple-tongue above\n    Glyphs[\"tripleTongueAbove\"] = \"\\uE5F2\";\n    // U+E5F3  Triple-tongue below\n    Glyphs[\"tripleTongueBelow\"] = \"\\uE5F3\";\n    // U+E880  Tuplet 0\n    Glyphs[\"tuplet0\"] = \"\\uE880\";\n    // U+E881  Tuplet 1\n    Glyphs[\"tuplet1\"] = \"\\uE881\";\n    // U+E882  Tuplet 2\n    Glyphs[\"tuplet2\"] = \"\\uE882\";\n    // U+E883  Tuplet 3\n    Glyphs[\"tuplet3\"] = \"\\uE883\";\n    // U+E884  Tuplet 4\n    Glyphs[\"tuplet4\"] = \"\\uE884\";\n    // U+E885  Tuplet 5\n    Glyphs[\"tuplet5\"] = \"\\uE885\";\n    // U+E886  Tuplet 6\n    Glyphs[\"tuplet6\"] = \"\\uE886\";\n    // U+E887  Tuplet 7\n    Glyphs[\"tuplet7\"] = \"\\uE887\";\n    // U+E888  Tuplet 8\n    Glyphs[\"tuplet8\"] = \"\\uE888\";\n    // U+E889  Tuplet 9\n    Glyphs[\"tuplet9\"] = \"\\uE889\";\n    // U+E88A  Tuplet colon\n    Glyphs[\"tupletColon\"] = \"\\uE88A\";\n    // U+E22C  Wieniawski unmeasured tremolo\n    Glyphs[\"unmeasuredTremolo\"] = \"\\uE22C\";\n    // U+E22D  Wieniawski unmeasured tremolo (simpler)\n    Glyphs[\"unmeasuredTremoloSimple\"] = \"\\uE22D\";\n    // U+E069  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1\"] = \"\\uE069\";\n    // U+E06A  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2\"] = \"\\uE06A\";\n    // U+E517  Ventiduesima\n    Glyphs[\"ventiduesima\"] = \"\\uE517\";\n    // U+E518  Ventiduesima alta\n    Glyphs[\"ventiduesimaAlta\"] = \"\\uE518\";\n    // U+E519  Ventiduesima bassa\n    Glyphs[\"ventiduesimaBassa\"] = \"\\uE519\";\n    // U+E51E  Ventiduesima bassa (mb)\n    Glyphs[\"ventiduesimaBassaMb\"] = \"\\uE51E\";\n    // U+E649  Finger click (Stockhausen)\n    Glyphs[\"vocalFingerClickStockhausen\"] = \"\\uE649\";\n    // U+E64B  Halb gesungen (semi-sprechgesang)\n    Glyphs[\"vocalHalbGesungen\"] = \"\\uE64B\";\n    // U+E640  Mouth closed\n    Glyphs[\"vocalMouthClosed\"] = \"\\uE640\";\n    // U+E642  Mouth open\n    Glyphs[\"vocalMouthOpen\"] = \"\\uE642\";\n    // U+E644  Mouth pursed\n    Glyphs[\"vocalMouthPursed\"] = \"\\uE644\";\n    // U+E641  Mouth slightly open\n    Glyphs[\"vocalMouthSlightlyOpen\"] = \"\\uE641\";\n    // U+E643  Mouth wide open\n    Glyphs[\"vocalMouthWideOpen\"] = \"\\uE643\";\n    // U+E647  Nasal voice\n    Glyphs[\"vocalNasalVoice\"] = \"\\uE647\";\n    // U+E645  Sprechgesang\n    Glyphs[\"vocalSprechgesang\"] = \"\\uE645\";\n    // U+E648  Tongue click (Stockhausen)\n    Glyphs[\"vocalTongueClickStockhausen\"] = \"\\uE648\";\n    // U+E64A  Tongue and finger click (Stockhausen)\n    Glyphs[\"vocalTongueFingerClickStockhausen\"] = \"\\uE64A\";\n    // U+E646  Combining sussurando for stem\n    Glyphs[\"vocalsSussurando\"] = \"\\uE646\";\n    // U+EAAA  Arpeggiato wiggle segment, downwards\n    Glyphs[\"wiggleArpeggiatoDown\"] = \"\\uEAAA\";\n    // U+EAAE  Arpeggiato arrowhead down\n    Glyphs[\"wiggleArpeggiatoDownArrow\"] = \"\\uEAAE\";\n    // U+EAAC  Arpeggiato downward swash\n    Glyphs[\"wiggleArpeggiatoDownSwash\"] = \"\\uEAAC\";\n    // U+EAA9  Arpeggiato wiggle segment, upwards\n    Glyphs[\"wiggleArpeggiatoUp\"] = \"\\uEAA9\";\n    // U+EAAD  Arpeggiato arrowhead up\n    Glyphs[\"wiggleArpeggiatoUpArrow\"] = \"\\uEAAD\";\n    // U+EAAB  Arpeggiato upward swash\n    Glyphs[\"wiggleArpeggiatoUpSwash\"] = \"\\uEAAB\";\n    // U+EAC9  Circular motion segment\n    Glyphs[\"wiggleCircular\"] = \"\\uEAC9\";\n    // U+EAC0  Constant circular motion segment\n    Glyphs[\"wiggleCircularConstant\"] = \"\\uEAC0\";\n    // U+EAC1  Constant circular motion segment (flipped)\n    Glyphs[\"wiggleCircularConstantFlipped\"] = \"\\uEAC1\";\n    // U+EAC3  Constant circular motion segment (flipped, large)\n    Glyphs[\"wiggleCircularConstantFlippedLarge\"] = \"\\uEAC3\";\n    // U+EAC2  Constant circular motion segment (large)\n    Glyphs[\"wiggleCircularConstantLarge\"] = \"\\uEAC2\";\n    // U+EACB  Circular motion end\n    Glyphs[\"wiggleCircularEnd\"] = \"\\uEACB\";\n    // U+EAC8  Circular motion segment, large\n    Glyphs[\"wiggleCircularLarge\"] = \"\\uEAC8\";\n    // U+EAC7  Circular motion segment, larger\n    Glyphs[\"wiggleCircularLarger\"] = \"\\uEAC7\";\n    // U+EAC6  Circular motion segment, larger still\n    Glyphs[\"wiggleCircularLargerStill\"] = \"\\uEAC6\";\n    // U+EAC5  Circular motion segment, largest\n    Glyphs[\"wiggleCircularLargest\"] = \"\\uEAC5\";\n    // U+EACA  Circular motion segment, small\n    Glyphs[\"wiggleCircularSmall\"] = \"\\uEACA\";\n    // U+EAC4  Circular motion start\n    Glyphs[\"wiggleCircularStart\"] = \"\\uEAC4\";\n    // U+EAAF  Glissando wiggle segment\n    Glyphs[\"wiggleGlissando\"] = \"\\uEAAF\";\n    // U+EABD  Group glissando 1\n    Glyphs[\"wiggleGlissandoGroup1\"] = \"\\uEABD\";\n    // U+EABE  Group glissando 2\n    Glyphs[\"wiggleGlissandoGroup2\"] = \"\\uEABE\";\n    // U+EABF  Group glissando 3\n    Glyphs[\"wiggleGlissandoGroup3\"] = \"\\uEABF\";\n    // U+EAF0  Quasi-random squiggle 1\n    Glyphs[\"wiggleRandom1\"] = \"\\uEAF0\";\n    // U+EAF1  Quasi-random squiggle 2\n    Glyphs[\"wiggleRandom2\"] = \"\\uEAF1\";\n    // U+EAF2  Quasi-random squiggle 3\n    Glyphs[\"wiggleRandom3\"] = \"\\uEAF2\";\n    // U+EAF3  Quasi-random squiggle 4\n    Glyphs[\"wiggleRandom4\"] = \"\\uEAF3\";\n    // U+EABB  Sawtooth line segment\n    Glyphs[\"wiggleSawtooth\"] = \"\\uEABB\";\n    // U+EABA  Narrow sawtooth line segment\n    Glyphs[\"wiggleSawtoothNarrow\"] = \"\\uEABA\";\n    // U+EABC  Wide sawtooth line segment\n    Glyphs[\"wiggleSawtoothWide\"] = \"\\uEABC\";\n    // U+EAB8  Square wave line segment\n    Glyphs[\"wiggleSquareWave\"] = \"\\uEAB8\";\n    // U+EAB7  Narrow square wave line segment\n    Glyphs[\"wiggleSquareWaveNarrow\"] = \"\\uEAB7\";\n    // U+EAB9  Wide square wave line segment\n    Glyphs[\"wiggleSquareWaveWide\"] = \"\\uEAB9\";\n    // U+EAA4  Trill wiggle segment\n    Glyphs[\"wiggleTrill\"] = \"\\uEAA4\";\n    // U+EAA3  Trill wiggle segment, fast\n    Glyphs[\"wiggleTrillFast\"] = \"\\uEAA3\";\n    // U+EAA2  Trill wiggle segment, faster\n    Glyphs[\"wiggleTrillFaster\"] = \"\\uEAA2\";\n    // U+EAA1  Trill wiggle segment, faster still\n    Glyphs[\"wiggleTrillFasterStill\"] = \"\\uEAA1\";\n    // U+EAA0  Trill wiggle segment, fastest\n    Glyphs[\"wiggleTrillFastest\"] = \"\\uEAA0\";\n    // U+EAA5  Trill wiggle segment, slow\n    Glyphs[\"wiggleTrillSlow\"] = \"\\uEAA5\";\n    // U+EAA6  Trill wiggle segment, slower\n    Glyphs[\"wiggleTrillSlower\"] = \"\\uEAA6\";\n    // U+EAA7  Trill wiggle segment, slower still\n    Glyphs[\"wiggleTrillSlowerStill\"] = \"\\uEAA7\";\n    // U+EAA8  Trill wiggle segment, slowest\n    Glyphs[\"wiggleTrillSlowest\"] = \"\\uEAA8\";\n    // U+EAEE  Vibrato largest, slower\n    Glyphs[\"wiggleVIbratoLargestSlower\"] = \"\\uEAEE\";\n    // U+EAE0  Vibrato medium, slower\n    Glyphs[\"wiggleVIbratoMediumSlower\"] = \"\\uEAE0\";\n    // U+EAB0  Vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibrato\"] = \"\\uEAB0\";\n    // U+EAE5  Vibrato large, fast\n    Glyphs[\"wiggleVibratoLargeFast\"] = \"\\uEAE5\";\n    // U+EAE4  Vibrato large, faster\n    Glyphs[\"wiggleVibratoLargeFaster\"] = \"\\uEAE4\";\n    // U+EAE3  Vibrato large, faster still\n    Glyphs[\"wiggleVibratoLargeFasterStill\"] = \"\\uEAE3\";\n    // U+EAE2  Vibrato large, fastest\n    Glyphs[\"wiggleVibratoLargeFastest\"] = \"\\uEAE2\";\n    // U+EAE6  Vibrato large, slow\n    Glyphs[\"wiggleVibratoLargeSlow\"] = \"\\uEAE6\";\n    // U+EAE7  Vibrato large, slower\n    Glyphs[\"wiggleVibratoLargeSlower\"] = \"\\uEAE7\";\n    // U+EAE8  Vibrato large, slowest\n    Glyphs[\"wiggleVibratoLargeSlowest\"] = \"\\uEAE8\";\n    // U+EAEC  Vibrato largest, fast\n    Glyphs[\"wiggleVibratoLargestFast\"] = \"\\uEAEC\";\n    // U+EAEB  Vibrato largest, faster\n    Glyphs[\"wiggleVibratoLargestFaster\"] = \"\\uEAEB\";\n    // U+EAEA  Vibrato largest, faster still\n    Glyphs[\"wiggleVibratoLargestFasterStill\"] = \"\\uEAEA\";\n    // U+EAE9  Vibrato largest, fastest\n    Glyphs[\"wiggleVibratoLargestFastest\"] = \"\\uEAE9\";\n    // U+EAED  Vibrato largest, slow\n    Glyphs[\"wiggleVibratoLargestSlow\"] = \"\\uEAED\";\n    // U+EAEF  Vibrato largest, slowest\n    Glyphs[\"wiggleVibratoLargestSlowest\"] = \"\\uEAEF\";\n    // U+EADE  Vibrato medium, fast\n    Glyphs[\"wiggleVibratoMediumFast\"] = \"\\uEADE\";\n    // U+EADD  Vibrato medium, faster\n    Glyphs[\"wiggleVibratoMediumFaster\"] = \"\\uEADD\";\n    // U+EADC  Vibrato medium, faster still\n    Glyphs[\"wiggleVibratoMediumFasterStill\"] = \"\\uEADC\";\n    // U+EADB  Vibrato medium, fastest\n    Glyphs[\"wiggleVibratoMediumFastest\"] = \"\\uEADB\";\n    // U+EADF  Vibrato medium, slow\n    Glyphs[\"wiggleVibratoMediumSlow\"] = \"\\uEADF\";\n    // U+EAE1  Vibrato medium, slowest\n    Glyphs[\"wiggleVibratoMediumSlowest\"] = \"\\uEAE1\";\n    // U+EAD7  Vibrato small, fast\n    Glyphs[\"wiggleVibratoSmallFast\"] = \"\\uEAD7\";\n    // U+EAD6  Vibrato small, faster\n    Glyphs[\"wiggleVibratoSmallFaster\"] = \"\\uEAD6\";\n    // U+EAD5  Vibrato small, faster still\n    Glyphs[\"wiggleVibratoSmallFasterStill\"] = \"\\uEAD5\";\n    // U+EAD4  Vibrato small, fastest\n    Glyphs[\"wiggleVibratoSmallFastest\"] = \"\\uEAD4\";\n    // U+EAD8  Vibrato small, slow\n    Glyphs[\"wiggleVibratoSmallSlow\"] = \"\\uEAD8\";\n    // U+EAD9  Vibrato small, slower\n    Glyphs[\"wiggleVibratoSmallSlower\"] = \"\\uEAD9\";\n    // U+EADA  Vibrato small, slowest\n    Glyphs[\"wiggleVibratoSmallSlowest\"] = \"\\uEADA\";\n    // U+EAD0  Vibrato smallest, fast\n    Glyphs[\"wiggleVibratoSmallestFast\"] = \"\\uEAD0\";\n    // U+EACF  Vibrato smallest, faster\n    Glyphs[\"wiggleVibratoSmallestFaster\"] = \"\\uEACF\";\n    // U+EACE  Vibrato smallest, faster still\n    Glyphs[\"wiggleVibratoSmallestFasterStill\"] = \"\\uEACE\";\n    // U+EACD  Vibrato smallest, fastest\n    Glyphs[\"wiggleVibratoSmallestFastest\"] = \"\\uEACD\";\n    // U+EAD1  Vibrato smallest, slow\n    Glyphs[\"wiggleVibratoSmallestSlow\"] = \"\\uEAD1\";\n    // U+EAD2  Vibrato smallest, slower\n    Glyphs[\"wiggleVibratoSmallestSlower\"] = \"\\uEAD2\";\n    // U+EAD3  Vibrato smallest, slowest\n    Glyphs[\"wiggleVibratoSmallestSlowest\"] = \"\\uEAD3\";\n    // U+EACC  Vibrato start\n    Glyphs[\"wiggleVibratoStart\"] = \"\\uEACC\";\n    // U+EAB1  Wide vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibratoWide\"] = \"\\uEAB1\";\n    // U+EAB5  Wavy line segment\n    Glyphs[\"wiggleWavy\"] = \"\\uEAB5\";\n    // U+EAB4  Narrow wavy line segment\n    Glyphs[\"wiggleWavyNarrow\"] = \"\\uEAB4\";\n    // U+EAB6  Wide wavy line segment\n    Glyphs[\"wiggleWavyWide\"] = \"\\uEAB6\";\n    // U+E5F4  Closed hole\n    Glyphs[\"windClosedHole\"] = \"\\uE5F4\";\n    // U+E5FB  Flatter embouchure\n    Glyphs[\"windFlatEmbouchure\"] = \"\\uE5FB\";\n    // U+E5F6  Half-closed hole\n    Glyphs[\"windHalfClosedHole1\"] = \"\\uE5F6\";\n    // U+E5F7  Half-closed hole 2\n    Glyphs[\"windHalfClosedHole2\"] = \"\\uE5F7\";\n    // U+E5F8  Half-open hole\n    Glyphs[\"windHalfClosedHole3\"] = \"\\uE5F8\";\n    // U+E5FE  Somewhat relaxed embouchure\n    Glyphs[\"windLessRelaxedEmbouchure\"] = \"\\uE5FE\";\n    // U+E600  Somewhat tight embouchure\n    Glyphs[\"windLessTightEmbouchure\"] = \"\\uE600\";\n    // U+E60A  Mouthpiece or hand pop\n    Glyphs[\"windMouthpiecePop\"] = \"\\uE60A\";\n    // U+E607  Combining multiphonics (black) for stem\n    Glyphs[\"windMultiphonicsBlackStem\"] = \"\\uE607\";\n    // U+E609  Combining multiphonics (black and white) for stem\n    Glyphs[\"windMultiphonicsBlackWhiteStem\"] = \"\\uE609\";\n    // U+E608  Combining multiphonics (white) for stem\n    Glyphs[\"windMultiphonicsWhiteStem\"] = \"\\uE608\";\n    // U+E5F9  Open hole\n    Glyphs[\"windOpenHole\"] = \"\\uE5F9\";\n    // U+E606  Much more reed (push inwards)\n    Glyphs[\"windReedPositionIn\"] = \"\\uE606\";\n    // U+E604  Normal reed position\n    Glyphs[\"windReedPositionNormal\"] = \"\\uE604\";\n    // U+E605  Very little reed (pull outwards)\n    Glyphs[\"windReedPositionOut\"] = \"\\uE605\";\n    // U+E5FD  Relaxed embouchure\n    Glyphs[\"windRelaxedEmbouchure\"] = \"\\uE5FD\";\n    // U+E60B  Rim only\n    Glyphs[\"windRimOnly\"] = \"\\uE60B\";\n    // U+E5FC  Sharper embouchure\n    Glyphs[\"windSharpEmbouchure\"] = \"\\uE5FC\";\n    // U+E603  Very tight embouchure / strong air pressure\n    Glyphs[\"windStrongAirPressure\"] = \"\\uE603\";\n    // U+E5F5  Three-quarters closed hole\n    Glyphs[\"windThreeQuartersClosedHole\"] = \"\\uE5F5\";\n    // U+E5FF  Tight embouchure\n    Glyphs[\"windTightEmbouchure\"] = \"\\uE5FF\";\n    // U+E5FA  Trill key\n    Glyphs[\"windTrillKey\"] = \"\\uE5FA\";\n    // U+E601  Very tight embouchure\n    Glyphs[\"windVeryTightEmbouchure\"] = \"\\uE601\";\n    // U+E602  Very relaxed embouchure / weak air-pressure\n    Glyphs[\"windWeakAirPressure\"] = \"\\uE602\";\n})(Glyphs || (Glyphs = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonicalNotes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get rootValues() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indexes of the root notes.*/\n    static get rootIndexes() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonicalNotes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonicIntervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonicAccidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { rootIndex: 0, intVal: 0 },\n            cn: { rootIndex: 0, intVal: 0 },\n            'c#': { rootIndex: 0, intVal: 1 },\n            'c##': { rootIndex: 0, intVal: 2 },\n            cb: { rootIndex: 0, intVal: 11 },\n            cbb: { rootIndex: 0, intVal: 10 },\n            d: { rootIndex: 1, intVal: 2 },\n            dn: { rootIndex: 1, intVal: 2 },\n            'd#': { rootIndex: 1, intVal: 3 },\n            'd##': { rootIndex: 1, intVal: 4 },\n            db: { rootIndex: 1, intVal: 1 },\n            dbb: { rootIndex: 1, intVal: 0 },\n            e: { rootIndex: 2, intVal: 4 },\n            en: { rootIndex: 2, intVal: 4 },\n            'e#': { rootIndex: 2, intVal: 5 },\n            'e##': { rootIndex: 2, intVal: 6 },\n            eb: { rootIndex: 2, intVal: 3 },\n            ebb: { rootIndex: 2, intVal: 2 },\n            f: { rootIndex: 3, intVal: 5 },\n            fn: { rootIndex: 3, intVal: 5 },\n            'f#': { rootIndex: 3, intVal: 6 },\n            'f##': { rootIndex: 3, intVal: 7 },\n            fb: { rootIndex: 3, intVal: 4 },\n            fbb: { rootIndex: 3, intVal: 3 },\n            g: { rootIndex: 4, intVal: 7 },\n            gn: { rootIndex: 4, intVal: 7 },\n            'g#': { rootIndex: 4, intVal: 8 },\n            'g##': { rootIndex: 4, intVal: 9 },\n            gb: { rootIndex: 4, intVal: 6 },\n            gbb: { rootIndex: 4, intVal: 5 },\n            a: { rootIndex: 5, intVal: 9 },\n            an: { rootIndex: 5, intVal: 9 },\n            'a#': { rootIndex: 5, intVal: 10 },\n            'a##': { rootIndex: 5, intVal: 11 },\n            ab: { rootIndex: 5, intVal: 8 },\n            abb: { rootIndex: 5, intVal: 7 },\n            b: { rootIndex: 6, intVal: 11 },\n            bn: { rootIndex: 6, intVal: 11 },\n            'b#': { rootIndex: 6, intVal: 0 },\n            'b##': { rootIndex: 6, intVal: 1 },\n            bb: { rootIndex: 6, intVal: 10 },\n            bbb: { rootIndex: 6, intVal: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonicalNotes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonicIntervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.intVal;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonicalNotes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonicIntervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverseInterval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverseInterval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.rootIndexes[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Fraction } from './fraction';\nimport { Glyphs } from './glyphs';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { accidental: 'b', num: 1 },\n    Dm: { accidental: 'b', num: 1 },\n    Bb: { accidental: 'b', num: 2 },\n    Gm: { accidental: 'b', num: 2 },\n    Eb: { accidental: 'b', num: 3 },\n    Cm: { accidental: 'b', num: 3 },\n    Ab: { accidental: 'b', num: 4 },\n    Fm: { accidental: 'b', num: 4 },\n    Db: { accidental: 'b', num: 5 },\n    Bbm: { accidental: 'b', num: 5 },\n    Gb: { accidental: 'b', num: 6 },\n    Ebm: { accidental: 'b', num: 6 },\n    Cb: { accidental: 'b', num: 7 },\n    Abm: { accidental: 'b', num: 7 },\n    G: { accidental: '#', num: 1 },\n    Em: { accidental: '#', num: 1 },\n    D: { accidental: '#', num: 2 },\n    Bm: { accidental: '#', num: 2 },\n    A: { accidental: '#', num: 3 },\n    'F#m': { accidental: '#', num: 3 },\n    E: { accidental: '#', num: 4 },\n    'C#m': { accidental: '#', num: 4 },\n    B: { accidental: '#', num: 5 },\n    'G#m': { accidental: '#', num: 5 },\n    'F#': { accidental: '#', num: 6 },\n    'D#m': { accidental: '#', num: 6 },\n    'C#': { accidental: '#', num: 7 },\n    'A#m': { accidental: '#', num: 7 },\n};\nconst clefs = {\n    treble: { lineShift: 0 },\n    bass: { lineShift: 6 },\n    tenor: { lineShift: 4 },\n    alto: { lineShift: 3 },\n    soprano: { lineShift: 1 },\n    percussion: { lineShift: 0 },\n    'mezzo-soprano': { lineShift: 2 },\n    'baritone-c': { lineShift: 5 },\n    'baritone-f': { lineShift: 5 },\n    subbass: { lineShift: 7 },\n    french: { lineShift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, intVal: 0 },\n    CN: { index: 0, intVal: 0 },\n    'C#': { index: 0, intVal: 1 },\n    'C##': { index: 0, intVal: 2 },\n    CB: { index: 0, intVal: 11 },\n    CBB: { index: 0, intVal: 10 },\n    D: { index: 1, intVal: 2 },\n    DN: { index: 1, intVal: 2 },\n    'D#': { index: 1, intVal: 3 },\n    'D##': { index: 1, intVal: 4 },\n    DB: { index: 1, intVal: 1 },\n    DBB: { index: 1, intVal: 0 },\n    E: { index: 2, intVal: 4 },\n    EN: { index: 2, intVal: 4 },\n    'E#': { index: 2, intVal: 5 },\n    'E##': { index: 2, intVal: 6 },\n    EB: { index: 2, intVal: 3 },\n    EBB: { index: 2, intVal: 2 },\n    F: { index: 3, intVal: 5 },\n    FN: { index: 3, intVal: 5 },\n    'F#': { index: 3, intVal: 6 },\n    'F##': { index: 3, intVal: 7 },\n    FB: { index: 3, intVal: 4 },\n    FBB: { index: 3, intVal: 3 },\n    G: { index: 4, intVal: 7 },\n    GN: { index: 4, intVal: 7 },\n    'G#': { index: 4, intVal: 8 },\n    'G##': { index: 4, intVal: 9 },\n    GB: { index: 4, intVal: 6 },\n    GBB: { index: 4, intVal: 5 },\n    A: { index: 5, intVal: 9 },\n    AN: { index: 5, intVal: 9 },\n    'A#': { index: 5, intVal: 10 },\n    'A##': { index: 5, intVal: 11 },\n    AB: { index: 5, intVal: 8 },\n    ABB: { index: 5, intVal: 7 },\n    B: { index: 6, intVal: 11 },\n    BN: { index: 6, intVal: 11 },\n    'B#': { index: 6, intVal: 12 },\n    'B##': { index: 6, intVal: 13 },\n    BB: { index: 6, intVal: 10 },\n    BBB: { index: 6, intVal: 9 },\n    R: { index: 6 },\n    X: { index: 6 },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': '\\ue262' /*accidentalSharp*/,\n    '##': '\\ue263' /*accidentalDoubleSharp*/,\n    b: '\\ue260' /*accidentalFlat*/,\n    bb: '\\ue264' /*accidentalDoubleFlat*/,\n    n: '\\ue261' /*accidentalNatural*/,\n    '{': '\\ue26a' /*accidentalParensLeft*/,\n    '}': '\\ue26b' /*accidentalParensRight*/,\n    db: '\\ue281' /*accidentalThreeQuarterTonesFlatZimmermann*/,\n    d: '\\ue280' /*accidentalQuarterToneFlatStein*/,\n    '++': '\\ue283' /*accidentalThreeQuarterTonesSharpStein*/,\n    '+': '\\ue282' /*accidentalQuarterToneSharpStein*/,\n    '+-': '\\ue446' /*accidentalKucukMucennebSharp*/,\n    bs: '\\ue442' /*accidentalBakiyeFlat*/,\n    bss: '\\ue440' /*accidentalBuyukMucennebFlat*/,\n    o: '\\ue461' /*accidentalSori*/,\n    k: '\\ue460' /*accidentalKoron*/,\n    bbs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    '++-': '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    ashs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    afhf: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        secondOnBottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spacedOutTetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spacedOutPentachord: [1, 2, 3, 2, 1],\n        verySpacedOutPentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spacedOutHexachord: [1, 3, 2, 1, 3, 2],\n        verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: '\\ue1e7' /*augmentationDot*/, betweenLines: true },\n    av: {\n        aboveCode: '\\ue4a6' /*articStaccatissimoAbove*/,\n        belowCode: '\\ue4a7' /*articStaccatissimoBelow*/,\n        betweenLines: true,\n    },\n    'a>': {\n        aboveCode: '\\ue4a0' /*articAccentAbove*/,\n        belowCode: '\\ue4a1' /*articAccentBelow*/,\n        betweenLines: true,\n    },\n    'a-': {\n        aboveCode: '\\ue4a4' /*articTenutoAbove*/,\n        belowCode: '\\ue4a5' /*articTenutoBelow*/,\n        betweenLines: true,\n    },\n    'a^': {\n        aboveCode: '\\ue4ac' /*articMarcatoAbove*/,\n        belowCode: '\\ue4ad' /*articMarcatoBelow*/,\n        betweenLines: false,\n    },\n    'a+': { code: '\\ue633' /*pluckedLeftHandPizzicato*/, betweenLines: false },\n    ao: {\n        aboveCode: '\\ue631' /*pluckedSnapPizzicatoAbove*/,\n        belowCode: '\\ue630' /*pluckedSnapPizzicatoBelow*/,\n        betweenLines: false,\n    },\n    ah: { code: '\\ue614' /*stringsHarmonic*/, betweenLines: false },\n    'a@': { aboveCode: '\\ue4c0' /*fermataAbove*/, belowCode: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@a': { code: '\\ue4c0' /*fermataAbove*/, betweenLines: false },\n    'a@u': { code: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@s': { aboveCode: '\\ue4c4' /*fermataShortAbove*/, belowCode: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@as': { code: '\\ue4c4' /*fermataShortAbove*/, betweenLines: false },\n    'a@us': { code: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@l': { aboveCode: '\\ue4c6' /*fermataLongAbove*/, belowCode: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@al': { code: '\\ue4c6' /*fermataLongAbove*/, betweenLines: false },\n    'a@ul': { code: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@vl': {\n        aboveCode: '\\ue4c8' /*fermataVeryLongAbove*/,\n        belowCode: '\\ue4c9' /*fermataVeryLongBelow*/,\n        betweenLines: false,\n    },\n    'a@avl': { code: '\\ue4c8' /*fermataVeryLongAbove*/, betweenLines: false },\n    'a@uvl': { code: '\\ue4c9' /*fermataVeryLongBelow*/, betweenLines: false },\n    'a|': { code: '\\ue612' /*stringsUpBow*/, betweenLines: false },\n    am: { code: '\\ue610' /*stringsDownBow*/, betweenLines: false },\n    'a,': { code: '\\ue805' /*pictChokeCymbal*/, betweenLines: false }, // Choked\n};\nconst ornaments = {\n    mordent: '\\ue56c' /*ornamentShortTrill*/,\n    mordentInverted: '\\ue56d' /*ornamentMordent*/,\n    turn: '\\ue567' /*ornamentTurn*/,\n    turnInverted: '\\ue569' /*ornamentTurnSlash*/,\n    tr: '\\ue566' /*ornamentTrill*/,\n    upprall: '\\ue5b5' /*ornamentPrecompSlideTrillDAnglebert*/,\n    downprall: '\\ue5c3' /*ornamentPrecompDoubleCadenceUpperPrefix*/,\n    prallup: '\\ue5bb' /*ornamentPrecompTrillSuffixDandrieu*/,\n    pralldown: '\\ue5c8' /*ornamentPrecompTrillLowerSuffix*/,\n    upmordent: '\\ue5b8' /*ornamentPrecompSlideTrillBach*/,\n    downmordent: '\\ue5c4' /*ornamentPrecompDoubleCadenceUpperPrefixTurn*/,\n    lineprall: '\\ue5b2' /*ornamentPrecompAppoggTrill*/,\n    prallprall: '\\ue56e' /*ornamentTremblement*/,\n    scoop: '\\ue5d0' /*brassScoop*/,\n    doit: '\\ue5d5' /*brassDoitMedium*/,\n    fall: '\\ue5d7' /*brassFallLipShort*/,\n    doitLong: '\\ue5d2' /*brassLiftMedium*/,\n    fallLong: '\\ue5de' /*brassFallRoughMedium*/,\n    bend: '\\ue5e3' /*brassBend*/,\n    plungerClosed: '\\ue5e5' /*brassMuteClosed*/,\n    plungerOpen: '\\ue5e7' /*brassMuteOpen*/,\n    flip: '\\ue5e1' /*brassFlip*/,\n    jazzTurn: '\\ue5e4' /*brassJazzTurn*/,\n    smear: '\\ue5e2' /*brassSmear*/,\n};\nexport class Tables {\n    /**\n     * @returns the `Font` object at the head of the music font stack.\n     */\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octaveShift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {\n        let options = { octaveShift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        type = type.toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        let octave = parseInt(pieces[1], 10);\n        // .octaveShift is the shift to compensate for clef 8va/8vb.\n        octave -= options.octaveShift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).lineShift;\n        // Integer value for note arithmetic.\n        const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        let code = '';\n        let glyphName = 'N';\n        if (pieces.length > 2 && pieces[2]) {\n            glyphName = pieces[2].toUpperCase();\n        }\n        else if (type !== 'N') {\n            glyphName = type;\n        }\n        else\n            glyphName = key;\n        code = this.codeNoteHead(glyphName, duration);\n        return {\n            key,\n            octave,\n            line,\n            intValue,\n            code,\n            displaced: false,\n        };\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(accidental) {\n        var _a;\n        return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;\n    }\n    static ornamentCodes(ornament) {\n        var _a;\n        return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.accidental) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.accidental];\n        const accList = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            accList.push({ type: keySpec.accidental, line });\n        }\n        return accList;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                return '\\ue0d8' /*noteheadDiamondWhole*/;\n            case 'D1':\n                return '\\ue0d9' /*noteheadDiamondHalf*/;\n            case 'D2':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'D3':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            /* Triangle */\n            case 'T0':\n                return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n            case 'T1':\n                return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n            case 'T2':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'T3':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            /* Cross */\n            case 'X0':\n                return '\\ue0a7' /*noteheadXWhole*/;\n            case 'X1':\n                return '\\ue0a8' /*noteheadXHalf*/;\n            case 'X2':\n                return '\\ue0a9' /*noteheadXBlack*/;\n            case 'X3':\n                return '\\ue0b3' /*noteheadCircleX*/;\n            /* Square */\n            case 'S1':\n                return '\\ue0b8' /*noteheadSquareWhite*/;\n            case 'S2':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            /* Rectangle */\n            case 'R1':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'R2':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'DO':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'RE':\n                return '\\ue0cb' /*noteheadMoonBlack*/;\n            case 'MI':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'FA':\n                return '\\ue0c0' /*noteheadTriangleLeftBlack*/;\n            case 'FAUP':\n                return '\\ue0c2' /*noteheadTriangleRightBlack*/;\n            case 'SO':\n                return '\\ue0a4' /*noteheadBlack*/;\n            case 'LA':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            case 'TI':\n                return '\\ue0cd' /*noteheadTriangleRoundDownBlack*/;\n            case 'DI': // Diamond\n            case 'H': // Harmonics\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d7' /*noteheadDiamondDoubleWhole*/;\n                    case '1':\n                        return '\\ue0d8' /*noteheadDiamondWhole*/;\n                    case '2':\n                        return '\\ue0d9' /*noteheadDiamondHalf*/;\n                    default:\n                        return '\\ue0db' /*noteheadDiamondBlack*/;\n                }\n            case 'X':\n            case 'M': // Muted\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a6' /*noteheadXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a7' /*noteheadXWhole*/;\n                    case '2':\n                        return '\\ue0a8' /*noteheadXHalf*/;\n                    default:\n                        return '\\ue0a9' /*noteheadXBlack*/;\n                }\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0b0' /*noteheadCircleXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0b1' /*noteheadCircleXWhole*/;\n                    case '2':\n                        return '\\ue0b2' /*noteheadCircleXHalf*/;\n                    default:\n                        return '\\ue0b3' /*noteheadCircleX*/;\n                }\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0e7' /*noteheadCircledDoubleWhole*/;\n                    case '1':\n                        return '\\ue0e6' /*noteheadCircledWhole*/;\n                    case '2':\n                        return '\\ue0e5' /*noteheadCircledHalf*/;\n                    default:\n                        return '\\ue0e4' /*noteheadCircledBlack*/;\n                }\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a1' /*noteheadDoubleWholeSquare*/;\n                    case '1':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    case '2':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    default:\n                        return '\\ue0b9' /*noteheadSquareBlack*/;\n                }\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0ba' /*noteheadTriangleUpDoubleWhole*/;\n                    case '1':\n                        return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n                    case '2':\n                        return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n                    default:\n                        return '\\ue0be' /*noteheadTriangleUpBlack*/;\n                }\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0c3' /*noteheadTriangleDownDoubleWhole*/;\n                    case '1':\n                        return '\\ue0c4' /*noteheadTriangleDownWhole*/;\n                    case '2':\n                        return '\\ue0c5' /*noteheadTriangleDownHalf*/;\n                    default:\n                        return '\\ue0c7' /*noteheadTriangleDownBlack*/;\n                }\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d5' /*noteheadSlashedDoubleWhole1*/;\n                    case '1':\n                        return '\\ue0d3' /*noteheadSlashedWhole1*/;\n                    case '2':\n                        return '\\ue0d1' /*noteheadSlashedHalf1*/;\n                    default:\n                        return '\\ue0cf' /*noteheadSlashedBlack1*/;\n                }\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d6' /*noteheadSlashedDoubleWhole2*/;\n                    case '1':\n                        return '\\ue0d4' /*noteheadSlashedWhole2*/;\n                    case '2':\n                        return '\\ue0d2' /*noteheadSlashedHalf2*/;\n                    default:\n                        return '\\ue0d0' /*noteheadSlashedBlack2*/;\n                }\n            case 'R':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue4e2' /*restDoubleWhole*/;\n                    case '1':\n                        return '\\ue4e3' /*restWhole*/;\n                    case '2':\n                        return '\\ue4e4' /*restHalf*/;\n                    case '4':\n                        return '\\ue4e5' /*restQuarter*/;\n                    case '8':\n                        return '\\ue4e6' /*rest8th*/;\n                    case '16':\n                        return '\\ue4e7' /*rest16th*/;\n                    case '32':\n                        return '\\ue4e8' /*rest32nd*/;\n                    case '64':\n                        return '\\ue4e9' /*rest64th*/;\n                    case '128':\n                        return '\\ue4ea' /*rest128th*/;\n                }\n                break;\n            case 'S':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue10a' /*noteheadSlashWhiteDoubleWhole*/;\n                    case '1':\n                        return '\\ue102' /*noteheadSlashWhiteWhole*/;\n                    case '2':\n                        return '\\ue103' /*noteheadSlashWhiteHalf*/;\n                    default:\n                        return '\\ue100' /*noteheadSlashVerticalEnds*/;\n                }\n            default:\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a0' /*noteheadDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a2' /*noteheadWhole*/;\n                    case '2':\n                        return '\\ue0a3' /*noteheadHalf*/;\n                    default:\n                        return '\\ue0a4' /*noteheadBlack*/;\n                }\n        }\n        return Glyphs.null;\n    }\n}\nTables.UNISON = true;\nTables.SOFTMAX_FACTOR = 10;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nTables.durationCodes = {\n    '1/2': {\n        stem: false,\n    },\n    1: {\n        stem: false,\n    },\n    2: {\n        stem: true,\n    },\n    4: {\n        stem: true,\n    },\n    8: {\n        stem: true,\n        beamCount: 1,\n        stemBeamExtension: 0,\n        codeFlagUp: '\\ue240' /*flag8thUp*/,\n    },\n    16: {\n        beamCount: 2,\n        stemBeamExtension: 0,\n        stem: true,\n        codeFlagUp: '\\ue242' /*flag16thUp*/,\n    },\n    32: {\n        beamCount: 3,\n        stemBeamExtension: 7.5,\n        stem: true,\n        codeFlagUp: '\\ue244' /*flag32ndUp*/,\n    },\n    64: {\n        beamCount: 4,\n        stemBeamExtension: 15,\n        stem: true,\n        codeFlagUp: '\\ue246' /*flag64thUp*/,\n    },\n    128: {\n        beamCount: 5,\n        stemBeamExtension: 22.5,\n        stem: true,\n        codeFlagUp: '\\ue248' /*flag128thUp*/,\n    },\n};\n/**\n * Customize this by calling Flow.setMusicFont(...fontNames);\n */\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: '\\u266f',\n    // ♭ accidental flat\n    flat: '\\u266d',\n    // ♮ accidental natural\n    natural: '\\u266e',\n    // △ major seventh\n    triangle: '\\u25b3',\n    // ø half-diminished\n    'o-with-slash': '\\u00f8',\n    // ° diminished\n    degrees: '\\u00b0',\n    // ○ diminished\n    circle: '\\u25cb',\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    numBeats: 4,\n    beatValue: 4,\n    resolution: RESOLUTION,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Accidental_checkCollision;\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const noteheadAccidentalPadding = Metrics.get('Accidental.noteheadAccidentalPadding');\n        const leftShift = state.leftShift + noteheadAccidentalPadding;\n        const accidentalSpacing = Metrics.get('Accidental.accidentalSpacing');\n        const additionalPadding = Metrics.get('Accidental.leftPadding'); // padding to the left of all accidentals\n        const accidentalLinePositionsAndSpaceNeeds = [];\n        let prevNote = undefined;\n        let extraXSpaceNeededForLeftDisplacedNotehead = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const accidental = accidentals[i];\n            const note = accidental.getNote();\n            const stave = note.getStave();\n            const index = accidental.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    // If the current extra left-space needed isn't as big as this note's,\n                    // then we need to use this note's.\n                    extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    y,\n                    line: accLine,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                    spacingBetweenStaveLines: lineSpace,\n                });\n            }\n            else {\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    line: props.line,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                });\n            }\n        }\n        // Sort accidentals by line number.\n        accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);\n        const staveLineAccidentalLayoutMetrics = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let maxExtraXSpaceNeeded = 0;\n        // Create an array of unique line numbers (staveLineAccidentalLayoutMetrics)\n        // from accidentalLinePositionsAndSpaceNeeds\n        for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {\n            const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];\n            const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;\n            const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];\n            let currentLineMetric;\n            // if this is the first line, or a new line, add a staveLineAccidentalLayoutMetric\n            if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {\n                currentLineMetric = {\n                    line: accidentalLinePositionAndSpaceNeeds.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                };\n                staveLineAccidentalLayoutMetrics.push(currentLineMetric);\n            }\n            else {\n                currentLineMetric = priorLineMetric;\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            if (accidentalType !== 'b' && accidentalType !== 'bb') {\n                currentLineMetric.flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (accidentalType !== '##') {\n                currentLineMetric.dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            currentLineMetric.numAcc++;\n            // Track the total xOffset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;\n            // if this extraXSpaceNeeded is the largest so far, use it as the starting point for\n            // all accidental columns.\n            maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = __classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])\n                ? 'a'\n                : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'secondOnBottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spacedOutTetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spacedOutPentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'verySpacedOutPentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spacedOutHexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'verySpacedOutHexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {\n                        if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to xOffsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger xOffset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = leftShift + maxExtraXSpaceNeeded;\n        columnXOffsets[0] = leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;\n                accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.leftShift = totalShift + additionalPadding;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        this.text = '';\n        if (!this.cautionary) {\n            this.text += Tables.accidentalCodes(this.type);\n            this.fontInfo.size = Metrics.get('Accidental.fontSize');\n        }\n        else {\n            this.text += Tables.accidentalCodes('{');\n            this.text += Tables.accidentalCodes(this.type);\n            this.text += Tables.accidentalCodes('}');\n            this.fontInfo.size = Metrics.get('Accidental.cautionary.fontSize');\n        }\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(this.note)) {\n            this.fontInfo.size = Metrics.get('Accidental.grace.fontSize');\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        this.reset();\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        const accX = start.x;\n        const accY = start.y;\n        L('Rendering: ', type, accX, accY);\n        this.renderText(ctx, accX - this.width, accY);\n    }\n}\n_a = Accidental, _Accidental_checkCollision = function _Accidental_checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n        // then line 2 is on top\n        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n        if (line1.dblSharpLine)\n            clearance -= 0.5;\n    }\n    else {\n        // line 1 is on top\n        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n        if (line2.dblSharpLine)\n            clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line1, Line2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n};\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + Font.convertSizeToPixelValue(annotation.fontInfo.size)) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphWidth();\n            // Get the text width from the font metrics.\n            const textWidth = annotation.getWidth();\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.renderOptions.drawStem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.topTextLine + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.topTextLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.topTextLine);\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.textLine + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.textLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.textLine);\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.textLine);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // Apply style might not save context, if this.style is undefined, so we\n        // still need to save context state just before this, since we will be\n        // changing ctx parameters below.\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        const textWidth = this.getWidth();\n        const textHeight = Font.convertSizeToPixelValue(this.fontInfo.size);\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - textWidth;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - textWidth / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - textWidth / 2;\n        }\n        let stemExt = {};\n        let spacing = 0;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (hasStem) {\n            stemExt = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;\n            if (hasStem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.textLine) - 1;\n            const yb = stave.getYForBottomText(this.textLine);\n            y = yt + (yb - yt) / 2 + textHeight / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (hasStem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        this.renderText(ctx, x, y);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super();\n        this.stemUpYOffset = 0;\n        this.stemDownYOffset = 0;\n        this.stemUpYBaseOffset = 0;\n        this.stemDownYBaseOffset = 0;\n        // Default notehead x bounds\n        this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;\n        this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;\n        // Y bounds for top/bottom most notehead\n        this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;\n        this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;\n        // Stem top extension\n        this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;\n        // Direction of the stem\n        this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        var _a, _b, _c, _d;\n        // Changing where the stem meets the head\n        this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;\n        this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;\n        this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;\n        this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(xBegin, xEnd) {\n        this.xBegin = xBegin;\n        this.xEnd = xEnd;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stemDirection = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stemExtension = ext;\n    }\n    getExtension() {\n        return this.stemExtension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(yTop, yBottom) {\n        this.yTop = yTop;\n        this.yBottom = yBottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;\n        const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension); // parentheses just for grouping.\n        return unsignedHeight * this.stemDirection;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stemDirection === Stem.UP;\n        const ys = [this.yTop, this.yBottom];\n        const stemHeight = Stem.HEIGHT + this.stemExtension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Metrics.get('Stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stemX;\n        let stemY;\n        const stemDirection = this.stemDirection;\n        let yBaseOffset = 0;\n        if (stemDirection === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stemX = this.xBegin;\n            stemY = this.yTop + this.stemDownYOffset;\n            yBaseOffset = this.stemDownYBaseOffset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stemX = this.xEnd;\n            stemY = this.yBottom - this.stemUpYOffset;\n            yBaseOffset = this.stemUpYBaseOffset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'), { pointerBBox: true });\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);\n        ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns.\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nexport function getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nexport function getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nexport function getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.topTextLine, ABOVE);\n                const curTop = noteLine + state.topTextLine + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.betweenLines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.textLine, BELOW);\n                const curBottom = noteLine + state.textLine + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.betweenLines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));\n        state.leftShift += overlap / 2;\n        state.rightShift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes default positions (see https://w3c.github.io/smufl/latest/tables/articulation.html):\n     * - Even codes will be positioned ABOVE\n     * - Odd codes will be positioned BELOW\n     */\n    constructor(type) {\n        var _a;\n        super();\n        this.heightShift = 0;\n        this.type = type;\n        this.position = ABOVE;\n        if (!Tables.articulationCodes(this.type)) {\n            if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)\n                this.position = ABOVE;\n            else\n                this.position = BELOW;\n        }\n        this.articulation = { betweenLines: false };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, betweenLines: false };\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||\n            this.articulation.code ||\n            Glyphs.null;\n        this.text = code;\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.betweenLines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, textLine } = this;\n        const canSitBetweenLines = this.articulation.betweenLines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        let y = {\n            [ABOVE]: () => {\n                this.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                this.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                this.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        this.renderText(ctx, x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Tickable_preFormatted, _Tickable_postFormatted;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        _Tickable_preFormatted.set(this, false);\n        _Tickable_postFormatted.set(this, false);\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.alignCenter = false;\n        this.centerXShift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignoreTicks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\")) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.xShift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.centerXShift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.centerXShift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.alignCenter;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(alignCenter) {\n        this.alignCenter = alignCenter;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return a list of Tuplets. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet (if this is not provided, all tuplets are reset).\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\"))\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_preFormatted, value, \"f\");\n    }\n    get preFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_preFormatted, \"f\");\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_postFormatted, \"f\"))\n            return this;\n        __classPrivateFieldSet(this, _Tickable_postFormatted, true, \"f\");\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_postFormatted, value, \"f\");\n    }\n    get postFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_postFormatted, \"f\");\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n_Tickable_preFormatted = new WeakMap(), _Tickable_postFormatted = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author: Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, doubleBar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (doubleBar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let xShift = 3;\n        if (!begin) {\n            xShift = -5;\n        }\n        staveCtx.fillRect(x + xShift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dotRadius = 2;\n        // Shift dots left or right\n        if (begin) {\n            xShift += 4;\n        }\n        else {\n            xShift -= 4;\n        }\n        const dotX = x + xShift + dotRadius / 2;\n        // calculate the y offset based on number of stave lines\n        let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dotY = topY + yOffset + dotRadius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dotY += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport class ChordSymbolBlock extends Element {\n    constructor(text, symbolModifier, xShift, yShift, vAlign) {\n        super();\n        this.text = text;\n        this.symbolModifier = symbolModifier;\n        this.xShift = xShift;\n        this.yShift = yShift;\n        this.vAlign = vAlign;\n    }\n    isSuperscript() {\n        return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    isSubscript() {\n        return this.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return Metrics.get('ChordSymbol.superSubRatio');\n    }\n    static get spacingBetweenBlocks() {\n        return Metrics.get('ChordSymbol.spacing');\n    }\n    static get superscriptOffset() {\n        return Metrics.get('ChordSymbol.superscriptOffset');\n    }\n    static get subscriptOffset() {\n        return Metrics.get('ChordSymbol.subscriptOffset');\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const note = symbol.checkAttachedNote();\n            let lineSpaces = 1;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = block.isSuperscript();\n                const sub = block.isSubscript();\n                block.setXShift(width);\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If a subscript immediately follows a superscript block, try to\n                // overlay them.\n                if (sub && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (prev.isSuperscript()) {\n                        // slide the symbol over so it lines up with superscript\n                        block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);\n                        block.vAlign = true;\n                        width +=\n                            -prev.getWidth() -\n                                ChordSymbol.minPadding +\n                                (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);\n                    }\n                }\n                width += block.getWidth() + ChordSymbol.minPadding;\n            }\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.topTextLine);\n                state.topTextLine += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.textLine + 1);\n                state.textLine += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                if (isStemmableNote(note)) {\n                    const glyphWidth = note.getGlyphWidth();\n                    if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                        maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                        leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;\n                    }\n                    else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                        maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                        rightWidth = Math.max(rightWidth, width);\n                    }\n                    else {\n                        leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;\n                        rightWidth = Math.max(rightWidth, width / 2);\n                        maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                        maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                    }\n                }\n                symbol.width = width;\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.reportWidth = true;\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    getSymbolBlock(params = {}) {\n        var _a, _b;\n        const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);\n        if (symbolBlock.isSubscript()) {\n            symbolBlock.setYShift(this.subscriptOffset);\n        }\n        if (symbolBlock.isSuperscript()) {\n            symbolBlock.setYShift(this.superscriptOffset);\n        }\n        if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {\n            const { family, size, weight, style } = this.fontInfo;\n            const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n            symbolBlock.setFont(family, smallerFontSize, weight, style);\n        }\n        else {\n            symbolBlock.setFont(this.fontInfo);\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    addText(text, parameters = {}) {\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);\n    }\n    /** Add a glyph block. */\n    addGlyph(glyph, params = {}) {\n        return this.addText(ChordSymbol.glyphs[glyph], params);\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const glyph = ChordSymbol.glyphs[char];\n            if (glyph) {\n                str += glyph;\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    addLine(params = {}) {\n        // Two csymMinor glyphs next to each other.\n        return this.addText('\\ue874\\ue874' /*{csymMinor}{csymMinor}*/, params);\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.fontInfo);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;\n                y = Math.max(y, stemBase + spacing * (this.textLine + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.textLine), topY - 10);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            L('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());\n            symbol.renderText(ctx, x, y);\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: '\\ue870' /*csymDiminished*/,\n    dim: '\\ue870' /*csymDiminished*/,\n    halfDiminished: '\\ue871' /*csymHalfDiminished*/,\n    '+': '\\ue872' /*csymAugmented*/,\n    augmented: '\\ue872' /*csymAugmented*/,\n    majorSeventh: '\\ue873' /*csymMajorSeventh*/,\n    minor: '\\ue874' /*csymMinor*/,\n    '-': '\\ue874' /*csymMinor*/,\n    '(': '\\u0028' /*csymParensLeftTall*/,\n    leftParen: '\\u0028' /*csymParensLeftTall*/,\n    ')': '\\u0029' /*csymParensRightTall*/,\n    rightParen: '\\u0029' /*csymParensRightTall*/,\n    leftBracket: '\\ue877' /*csymBracketLeftTall*/,\n    rightBracket: '\\ue878' /*csymBracketRightTall*/,\n    leftParenTall: '\\u0028' /*csymParensLeftVeryTall*/,\n    rightParenTall: '\\u0029' /*csymParensRightVeryTall*/,\n    '/': '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    over: '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    '#': '\\ued62' /*csymAccidentalSharp*/,\n    b: '\\ued60' /*csymAccidentalFlat*/,\n};\nChordSymbol.symbolModifiers = SymbolModifiers;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = Tables.durationCodes[duration];\n        if (code === undefined) {\n            code = Tables.durationCodes['4'];\n        }\n        // Try and get the note head\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        // Merge duration props for 'duration' with the note head properties.\n        if (codeNoteHead !== Glyphs.null) {\n            code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });\n        }\n        return code;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        var _a;\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.durationOverride) {\n            // Custom duration\n            this.setDuration(noteStruct.durationOverride);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignoreTicks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.xShift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.alignCenter) {\n            this.setCenterAlignment(noteStruct.alignCenter);\n        }\n        // The render surface.\n        this.renderOptions = {\n            annotationSpacing: 5,\n            strokePx: 1,\n            yShift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(textLine) {\n        return this.checkStave().getYForTopText(textLine);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType(Category.Dot).length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam !== undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        const parentheses = this.checkModifierContext().getMembers('Parenthesis');\n        // consider parentheses on noteheads, dots should be to the right of them\n        if (parentheses.length !== 0) {\n            px += parentheses[0].getWidth() + 1;\n        }\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes xShift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Metrics.get('Stave.padding', 0);\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieStartX += noteGlyphWidth / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieEndX += noteGlyphWidth / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignoreTicks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let lastWidth = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.topTextLine < stringPos) {\n                    state.topTextLine = stringPos;\n                }\n            }\n            bend.setXShift(lastWidth);\n            lastWidth = bend.getWidth();\n            bend.setTextLine(state.topTextLine);\n        }\n        state.rightShift += lastWidth;\n        state.topTextLine += 1;\n        return true;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     */\n    constructor(phrase) {\n        super();\n        this.xShift = 0;\n        this.tap = '';\n        this.renderOptions = {\n            lineWidth: 1.5,\n            lineStyle: '#777777',\n            bendWidth: 8,\n            releaseWidth: 8,\n        };\n        this.phrase = phrase;\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.xShift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getTextHeight() {\n        const element = new Element(Category.Bend);\n        element.setText(this.phrase[0].text);\n        return element.getHeight();\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const measureText = (text) => {\n            const element = new Element(Category.Bend);\n            element.setText(text);\n            return element.getWidth();\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;\n                bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;\n                bend.drawWidth = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.xShift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const xShift = this.xShift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.textLine is relative to top string in the group.\n        const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;\n        const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cpX = x + width;\n            const cpY = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cpX, cpY, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            const renderX = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, renderX, annotationY);\n            ctx.restore();\n        };\n        let lastBend = undefined;\n        let lastBendDrawWidth = 0;\n        let lastDrawnWidth = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.drawWidth)\n                bend.drawWidth = 0;\n            if (i === 0)\n                bend.drawWidth += xShift;\n            lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);\n            if (bend.type === Bend.UP) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderArrowHead(start.x, bendHeight, +1);\n                }\n                renderBend(start.x, start.y, lastDrawnWidth, bendHeight);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (lastBend && lastBend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (!lastBend) {\n                    lastDrawnWidth = bend.drawWidth;\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n            }\n            renderText(start.x + lastDrawnWidth, bend.text);\n            lastBend = bend;\n            lastBendDrawWidth = bend.drawWidth;\n            lastBend.x = start.x;\n            start.x += lastDrawnWidth;\n        }\n        if (!lastBend || lastBend.x === undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (lastBend.type === Bend.UP) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, +1);\n        }\n        else if (lastBend.type === Bend.DOWN) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements dot modifiers for notes.\nimport { Modifier } from './modifier';\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {\n                const dot = new Dot();\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const rightShift = state.rightShift;\n        const dotSpacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dotList = [];\n        const maxShiftMap = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = rightShift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const noteId = note.getAttribute('id');\n            dotList.push({ line: props.line, note, noteId, dot });\n            maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);\n        }\n        // Sort dots by line number.\n        dotList.sort((a, b) => b.line - a.line);\n        let dotShift = rightShift;\n        let xWidth = 0;\n        let lastLine = null;\n        let lastNote = null;\n        let prevDottedSpace = null;\n        let halfShiftY = 0;\n        for (let i = 0; i < dotList.length; ++i) {\n            const { dot, note, noteId, line } = dotList[i];\n            // Reset the position of the dot every line.\n            if (line !== lastLine || note !== lastNote) {\n                dotShift = maxShiftMap[noteId];\n            }\n            if (!note.isRest() && line !== lastLine) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    halfShiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    halfShiftY = 0.5;\n                    if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                    else if (line + halfShiftY === prevDottedSpace) {\n                        // previous space is dotted, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                }\n            }\n            // Convert halfShiftY to a multiplier for dots.draw().\n            if (note.isRest()) {\n                dot.dotShiftY += -halfShiftY;\n            }\n            else {\n                dot.dotShiftY = -halfShiftY;\n            }\n            prevDottedSpace = line + halfShiftY;\n            dot.setXShift(dotShift);\n            dotShift += dot.getWidth() + dotSpacing; // spacing\n            xWidth = dotShift > xWidth ? dotShift : xWidth;\n            lastLine = line;\n            lastNote = note;\n        }\n        // Update state.\n        state.rightShift += xWidth;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dotShiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dotShiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.xShift + this.width - this.radius;\n        const y = start.y + this.yShift + this.dotShiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { leftShift, rightShift } = state;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textHeight = Metrics.get('FretHandFinger.fontSize');\n            if (num.position === ModifierPosition.ABOVE) {\n                state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (leftShift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            numsList.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            let numShift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = numsList[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = leftShift + shiftL;\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + numShiftL);\n                numShift = leftShift + numWidth; // spacing\n                xWidthL = numShift > xWidthL ? numShift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numShift = shiftRight + numWidth; // spacing\n                xWidthR = numShift > xWidthR ? numShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.setFretHandFinger(finger);\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n    }\n    setFretHandFinger(finger) {\n        this.text = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.text;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dotX = start.x + this.xOffset;\n        let dotY = start.y + this.yOffset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dotX -= 4;\n                dotY -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dotX -= 2;\n                dotY += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        this.renderText(ctx, dotX, dotY);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.customGlyph = false;\n        // map notehead SMuFL codes to the corresponding SMuFL code with ledger line\n        this.ledger = {\n            '\\ue4e3' /*restWhole*/: '\\ue4f4' /*restWholeLegerLine*/,\n            '\\ue4e4' /*restHalf*/: '\\ue4f5' /*restHalfLegerLine*/,\n        };\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.noteType)\n            this.noteType = noteStruct.noteType;\n        this.displaced = noteStruct.displaced || false;\n        this.stemDirection = noteStruct.stemDirection || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {\n            this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];\n        }\n        this.text = this.glyphProps.codeHead;\n        if (noteStruct.customGlyphCode) {\n            this.customGlyph = true;\n            this.text = noteStruct.customGlyphCode;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.renderOptions = Object.assign({}, this.renderOptions);\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);\n    }\n    /** Get the `BoundingBox` for the `NoteHead`. */\n    getBoundingBox() {\n        return new BoundingBox(this.getAbsoluteX() - this.textMetrics.actualBoundingBoxLeft, this.y - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", this.x, this.y);\n        this.renderText(ctx, this.getAbsoluteX() - this.x, 0);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.flag = new Element();\n        this.flagStyle = {};\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag() {\n        var _a, _b, _c;\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = \n            // codeFlagDown = codeFlagUp + 1\n            // if codeFlagUp is undefined, codePoint will be 0\n            this.getStemDirection() === Stem.DOWN\n                ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)\n                : (_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null;\n            this.flag.setText(flagCode);\n            this.flag.fontInfo = this.fontInfo;\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beamCount;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        const beamIsUndefined = this.beam === undefined;\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n            case '16':\n                length = beamIsUndefined ? 35 : 25;\n                break;\n            case '32':\n                length = beamIsUndefined ? 45 : 35;\n                break;\n            case '64':\n                length = beamIsUndefined ? 50 : 40;\n                break;\n            case '128':\n                length = beamIsUndefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stemDirection)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stemDirection;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stemDirection = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const xBegin = this.getAbsoluteX() + this.xShift;\n        const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();\n        const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;\n        return stemX;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        const flagHeight = this.flag.getHeight();\n        const scale = this.getFontScale();\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        // Use stemBeamExtension with beams\n        if (this.beam) {\n            return glyphProps.stemBeamExtension * scale;\n        }\n        // If the flag is longer than the stem, extend the stem by the difference.\n        return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stemExtensionOverride = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StaveNote_noteHeads, _StaveNote_sortedKeyProps;\nimport { BoundingBox } from './boundingbox';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = __classPrivateFieldGet(notes[i], _StaveNote_sortedKeyProps, \"f\");\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL =\n                    line +\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);\n                minL =\n                    line -\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection,\n                stemMax,\n                stemMin,\n                voiceShift: notes[i].getVoiceShiftWidth(),\n                isDisplaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            // If .draw is true or undefined, we set draw[i] = true\n            draw[i] = notesList[i].note.renderOptions.draw !== false;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.renderOptions.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        const noteUHead = __classPrivateFieldGet(noteU.note, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.code;\n                        const noteLHead = __classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\")[__classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\").length - 1].keyProps.code;\n                        if (\n                        // If unison is not configured, shift\n                        !Tables.UNISON ||\n                            // If we have different noteheads, shift\n                            noteUHead !== noteLHead ||\n                            // If we have different dot values, shift\n                            noteU.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                .length !==\n                                noteL.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                    .length ||\n                            // If the notes are quite close but not on the same line, shift\n                            (lineDiff < 1 && lineDiff > 0) ||\n                            // If styles are different, shift\n                            JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line !== noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.note.duration < noteL.note.duration) {\n                            // upper voice is shorter, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.rightShift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.renderOptions.draw = false;\n            // Hide lower voice rest\n            noteL.note.renderOptions.draw = false;\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.rightShift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        _StaveNote_noteHeads.set(this, void 0);\n        // Sorted variant of keyProps used internally.\n        _StaveNote_sortedKeyProps.set(this, []);\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dotShiftY = 0;\n        // for displaced ledger lines\n        this.useDefaultHeadX = false;\n        // Drawing\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        this.modifiers = [];\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // number of stroke px to the left and right of head\n            strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.autoStem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this.setStave(stave);\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.useDefaultHeadX = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                noteType: this.noteType,\n                displaced,\n                stemDirection,\n                customGlyphCode: noteProps.code,\n                line: noteProps.line,\n            });\n            notehead.fontInfo = this.fontInfo;\n            this.addChildElement(notehead);\n            __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[__classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].index] = notehead;\n        }\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\");\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.line;\n        this.maxLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        var _a;\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, this.noteType, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").push({ keyProps, index });\n        });\n        __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        const boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            boundingBox.mergeWith(notehead.getBoundingBox());\n        });\n        const { yTop, yBottom } = this.getNoteHeadBounds();\n        // eslint-disable-next-line\n        const noteStemHeight = this.stem.getHeight();\n        const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n        const flagY = this.getStemDirection() === Stem.DOWN\n            ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n            : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n        if (!this.isRest() && this.hasStem()) {\n            boundingBox.mergeWith(new BoundingBox(this.getAbsoluteX(), flagY, 0, 0));\n        }\n        if (this.hasFlag()) {\n            const bbFlag = this.flag.getBoundingBox();\n            boundingBox.mergeWith(bbFlag.move(flagX, flagY));\n        }\n        return boundingBox;\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        const val = this.glyphProps.codeHead;\n        return val >= '\\ue4e0' && val <= '\\ue4ff';\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `textLine`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(yTop, yBottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.xShift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.xShift + 2;\n            if (this.stemDirection === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += this.flag.getWidth();\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        // addtional y shifts for rests\n        let restShift = 0;\n        switch (__classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].getText()) {\n            case '\\ue4e2' /*restDoubleWhole*/:\n            case '\\ue4e3' /*restWhole*/:\n                restShift += 0.5;\n                break;\n            case '\\ue4e4' /*restHalf*/:\n            case '\\ue4e5' /*restQuarter*/:\n            case '\\ue4e6' /*rest8th*/:\n            case '\\ue4e7' /*rest16th*/:\n                restShift -= 0.5;\n                break;\n            case '\\ue4e8' /*rest32nd*/:\n            case '\\ue4e9' /*rest64th*/:\n                restShift -= 1.5;\n                break;\n            case '\\ue4ea' /*rest128th*/:\n                restShift -= 2.5;\n                break;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flagStyle = style;\n    }\n    getFlagStyle() {\n        return this.flagStyle;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.noteHeads[0].getWidth();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} yTop the highest notehead bound\n     * @property {number} yBottom the lowest notehead bound\n     * @property {number|Null} displacedX the starting x for displaced noteheads\n     * @property {number|Null} nonDisplacedX the starting x for non-displaced noteheads\n     * @property {number} highestLine the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowestLine the lowest notehead line\n     * @property {number|false} highestDisplacedLine the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowestDisplacedLine\n     * @property {number} highestNonDisplacedLine\n     * @property {number} lowestNonDisplacedLine\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            yTop,\n            yBottom,\n            displacedX,\n            nonDisplacedX,\n            highestLine,\n            lowestLine,\n            highestDisplacedLine,\n            lowestDisplacedLine,\n            highestNonDisplacedLine,\n            lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.xShift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").slice();\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { renderOptions: { strokePx }, } = this;\n        const ctx = this.checkContext();\n        const width = this.getGlyphWidth() + strokePx * 2;\n        const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highestLine < 6 && lowestLine > 0)\n            return;\n        const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = minX - strokePx;\n            else if (normal)\n                x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;\n            else\n                x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highestLine; ++line) {\n            const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;\n            const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowestLine; --line) {\n            const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;\n            const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index];\n            if (notehead === noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.codeFlagUp !== undefined;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam && !this.isRest();\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : // Up stems are above the note head and have flags on the right.\n                    yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            // Draw the Flag\n            this.applyStyle(ctx, this.flagStyle);\n            this.flag.renderText(ctx, flagX, flagY);\n            this.restoreStyle(ctx, this.flagStyle);\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'), { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const superStemExtension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return superStemExtension;\n        }\n        const stemDirection = this.getStemDirection();\n        if (stemDirection !== this.calculateOptimalStemDirection()) {\n            return superStemExtension; // no adjustment for manually set stem direction.\n        }\n        let midLineDistance;\n        const MIDDLE_LINE = 3;\n        if (stemDirection === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            midLineDistance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            midLineDistance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const linesOverOctaveFromMidLine = midLineDistance - 3.5;\n        if (linesOverOctaveFromMidLine <= 0) {\n            return superStemExtension;\n        }\n        const stave = this.getStave();\n        let spacingBetweenLines = 10;\n        if (stave !== undefined) {\n            spacingBetweenLines = stave.getSpacingBetweenLines();\n        }\n        return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.renderOptions.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\n_StaveNote_noteHeads = new WeakMap(), _StaveNote_sortedKeyProps = new WeakMap();\nStaveNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text = '') {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.renderOptions = {\n            cp1: 8,\n            cp2: 12,\n            textShiftX: 0,\n            firstXShift: 0,\n            lastXShift: 0,\n            yShift: 7,\n            tieSpacing: 0,\n        };\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes) {\n            notes.firstIndexes = [0];\n        }\n        if (!notes.lastIndexes) {\n            notes.lastIndexes = [0];\n        }\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.firstNote || !this.notes.lastNote;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.renderOptions.cp1;\n        let cp2 = this.renderOptions.cp2;\n        if (Math.abs(params.lastX - params.firstX) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const firstXShift = this.renderOptions.firstXShift;\n        const lastXShift = this.renderOptions.lastXShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        // setNotes(...) verified that firstIndexes and lastIndexes are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        // eslint-disable-next-line\n        const lastIndexes = this.notes.lastIndexes;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;\n            // firstY and lastY are specified in pixels.\n            const firstY = params.firstYs[firstIndexes[i]] + yShift;\n            const lastY = params.lastYs[lastIndexes[i]] + yShift;\n            if (isNaN(firstY) || isNaN(lastY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');\n            }\n            const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;\n            const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.firstX + firstXShift, firstY);\n            ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);\n            ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    /**\n     * @param firstX specified in pixels\n     * @param lastX specified in pixels\n     */\n    renderTieText(firstX, lastX) {\n        var _a, _b, _c;\n        const ctx = this.checkContext();\n        let centerX = (firstX + lastX) / 2;\n        centerX -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.notes.firstNote;\n        const lastNote = this.notes.lastNote;\n        // Provide some default values so the compiler doesn't complain.\n        // firstX and lastX are in pixels.\n        let firstX = 0;\n        let lastX = 0;\n        let firstYs = [0];\n        let lastYs = [0];\n        let stemDirection = 0;\n        if (firstNote) {\n            firstX = firstNote.getTieRightX() + this.renderOptions.tieSpacing;\n            stemDirection = firstNote.getStemDirection();\n            firstYs = firstNote.getYs();\n        }\n        else if (lastNote) {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstYs = lastNote.getYs();\n            this.notes.firstIndexes = this.notes.lastIndexes;\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX() + this.renderOptions.tieSpacing;\n            stemDirection = lastNote.getStemDirection();\n            lastYs = lastNote.getYs();\n        }\n        else if (firstNote) {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastYs = firstNote.getYs();\n            this.notes.lastIndexes = this.notes.firstIndexes;\n        }\n        if (this.direction) {\n            stemDirection = this.direction;\n        }\n        this.renderTie({\n            firstX,\n            lastX,\n            firstYs,\n            lastYs,\n            direction: stemDirection,\n        });\n        this.renderTieText(firstX, lastX);\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.renderOptions.cp1 = 9;\n        this.renderOptions.cp2 = 11;\n        this.renderOptions.yShift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError, sumArray } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    numBeats: parseInt(match[1]),\n                    beatValue: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);\n        // until tickables are added, the smallestTickCount is the same as the stated totalTicks duration.\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode (Voice.Mode.SOFT, STRICT, or FULL) */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode` or Voice.Mode\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        const boundingBox = this.tickables[0].getBoundingBox();\n        for (let i = 1; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (!tickable.getStave() && this.stave)\n                tickable.setStave(this.stave);\n            const bb = tickable.getBoundingBox();\n            boundingBox.mergeWith(bb);\n        }\n        return boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        this.expTicksUsed = 0; // reset\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.  (It is not the sum of the softmax(t) over all tickables)\n     *\n     * Note that the \"exp\" of \"expTicksUsed\" stands for \"expontential\" ticks used,\n     * not \"expected\" ticks used.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = sumArray(this.tickables.map(exp));\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenoteGroups, state) {\n        const groupSpacingStave = 4;\n        const groupSpacingTab = 0;\n        if (!gracenoteGroups || gracenoteGroups.length === 0)\n            return false;\n        const groupList = [];\n        let prevNote = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenoteGroups.length; ++i) {\n            const gracenoteGroup = gracenoteGroups[i];\n            const note = gracenoteGroup.getNote();\n            const isStavenote = isStaveNote(note);\n            const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;\n            if (isStavenote && note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prevNote = note;\n            }\n            groupList.push({ shift: shiftL, gracenoteGroup, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let groupShift = groupList[0].shift;\n        let formatWidth;\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            gracenoteGroup.preFormat();\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            groupShift = Math.max(formatWidth, groupShift);\n        }\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);\n        }\n        state.leftShift += groupShift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(graceNotes, showSlur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.graceNotes = graceNotes;\n        this.width = 0;\n        this.showSlur = showSlur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.renderOptions = {\n            slurYShift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.graceNotes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(graceNotes) {\n        graceNotes = graceNotes || this.graceNotes;\n        if (graceNotes.length > 1) {\n            const beam = new Beam(graceNotes);\n            beam.renderOptions.beamWidth = 3;\n            beam.renderOptions.partialBeamLength = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.graceNotes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.showSlur) {\n            // Create and draw slur.\n            const isStavenote = isStaveNote(note);\n            const TieClass = isStavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                lastNote: this.graceNotes[0],\n                firstNote: note,\n                firstIndexes: [0],\n                lastIndexes: [0],\n            });\n            this.slur.renderOptions.cp2 = 12;\n            this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.leftShift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignoreTicks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks === undefined) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        var _a;\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n// MIT License\nimport { getBottomY, getInitialOffset, getTopY } from './articulation';\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let rightShift = state.rightShift; // jazz ornaments calculate r/l shift separately\n        let leftShift = state.leftShift;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (ornament.position === ModifierPosition.RIGHT) {\n                ornament.xShift += rightShift + 2;\n                rightShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.LEFT) {\n                ornament.xShift -= leftShift + ornament.width + 2;\n                leftShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.ABOVE) {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.leftShift = leftShift + width / 2;\n        state.rightShift = rightShift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentLeft() {\n        return ['scoop'];\n    }\n    static get ornamentRight() {\n        return ['doit', 'fall', 'fallLong', 'doitLong'];\n    }\n    static get ornamentYShift() {\n        return ['fallLong'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        // Default position ABOVE\n        this.position = ModifierPosition.ABOVE;\n        if (Ornament.ornamentRight.indexOf(type) >= 0) {\n            this.position = ModifierPosition.RIGHT;\n        }\n        if (Ornament.ornamentLeft.indexOf(type) >= 0) {\n            this.position = ModifierPosition.LEFT;\n        }\n        this.type = type;\n        this.delayed = false;\n        this.renderOptions = {\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        this.text = Tables.ornamentCodes(this.type);\n    }\n    /** Set note attached to ornament. */\n    setNote(note) {\n        super.setNote(note);\n        // articulations above/below the line can be stacked.\n        if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {\n            // Unfortunately we don't know the stem direction.  So we base it\n            // on the line number, but also allow it to be overridden.\n            if (note.getLineNumber() >= 3) {\n                this.position = Modifier.Position.ABOVE;\n            }\n            else {\n                this.position = Modifier.Position.BELOW;\n            }\n        }\n        return this;\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        this.accidentalUpper = new Element();\n        this.accidentalUpper.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        this.accidentalLower = new Element();\n        this.accidentalLower.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        const staffSpace = stave.getSpacingBetweenLines();\n        const initialOffset = getInitialOffset(note, this.position);\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;\n        if (this.position === ModifierPosition.ABOVE) {\n            glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;\n        }\n        if (this.position === ModifierPosition.BELOW) {\n            glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;\n        }\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = note.getTickContext().getX();\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                const nextContext = TickContext.getNextContext(note.getTickContext());\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);\n            glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;\n        }\n        // ornament requires yShift\n        if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {\n            this.yShift += this.getHeight();\n        }\n        this.renderText(ctx, glyphX -\n            (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0), glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;\n            this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Rodrigo Vilar\n// MIT License\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Category } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index) + parenthesis.width;\n                xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        if (this.position === Modifier.Position.RIGHT) {\n            this.text = '\\uE0F6'; /*noteheadParenthesisRight*/\n        }\n        else if (this.position === Modifier.Position.LEFT) {\n            this.text = '\\uE0F5'; /*noteheadParenthesisLeft*/\n        }\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.setFont(note.getFont());\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        this.renderText(ctx, start.x, start.y);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        this.curTransfrom = context.getTransform();\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id, attrs) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    openRotation(angleDegrees, x, y) {\n        this.curTransfrom = this.context2D.getTransform();\n        this.context2D.translate(x, y);\n        this.context2D.rotate((angleDegrees * Math.PI) / 180);\n        this.context2D.translate(-x, -y);\n    }\n    closeRotation() {\n        this.context2D.setTransform(this.curTransfrom);\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Gregory Ristow (2015)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SVGContext_instances, _SVGContext_getShadowStyle;\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Metrics } from './metrics';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        _SVGContext_instances.add(this);\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Metrics.get('fontFamily'),\n            'font-size': '10pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadowAttributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.stateStack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    openRotation(angleDegrees, x, y) {\n        this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);\n    }\n    closeRotation() {\n        this.closeGroup();\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadowAttributes.color = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.shadowAttributes.width = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBoxOrMinX, minY, width, height) {\n        if (typeof viewBoxOrMinX === 'string') {\n            this.svg.setAttribute('viewBox', viewBoxOrMinX);\n        }\n        else {\n            const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length === 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        SVGContext.measureTextElement.setText(text);\n        SVGContext.measureTextElement.setFont(this.attributes['font-family'], this.attributes['font-size'], this.attributes['font-weight'], this.attributes['font-style']);\n        const bb = SVGContext.measureTextElement.getBoundingBox();\n        return { x: bb.x, y: bb.y, width: bb.w, height: bb.h };\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    // TODO: State should be deep-copied.\n    save() {\n        this.stateStack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadowAttributes: {\n                width: this.shadowAttributes.width,\n                color: this.shadowAttributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    // TODO: State should be deep-restored.\n    restore() {\n        const savedState = this.stateStack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadowAttributes.width = state.shadowAttributes.width;\n            this.shadowAttributes.color = state.shadowAttributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\n_SVGContext_instances = new WeakSet(), _SVGContext_getShadowStyle = function _SVGContext_getShadowStyle() {\n    const sa = this.shadowAttributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n};\nSVGContext.measureTextElement = new Element();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 === 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        /**\n         * The modifier context's leftShift state.\n         */\n        const leftShift = state.leftShift;\n        /**\n         * The modifier context's rightShift state.\n         */\n        const rightShift = state.rightShift;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let extraXSpaceForDisplacedNotehead = 0;\n        let shiftRight = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.textLine = mc.getState().topTextLine;\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.textLine = mc.getState().textLine;\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (pos === Modifier.Position.LEFT) {\n                        extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            numsList.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: extraXSpaceForDisplacedNotehead,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort string numbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            const note = numsList[i].note;\n            const pos = numsList[i].pos;\n            const num = numsList[i].num;\n            const line = numsList[i].line;\n            const shiftR = numsList[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            let numXShift = 0;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);\n                numXShift = numWidth; // spacing\n                xWidthL = Math.max(numXShift, xWidthL);\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numXShift += numWidth; // spacing\n                xWidthR = numXShift > xWidthR ? numXShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.stringNumber = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.xShift = 0;\n        this.yShift = 0;\n        this.textLine = 0;\n        this.stemOffset = 0;\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.stringNumber = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.lastNote = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dotX = start.x + this.xShift + this.xOffset;\n        let stemExt = {};\n        if (note.hasStem()) {\n            stemExt = note.checkStem().getExtents();\n        }\n        let dotY = start.y + this.yShift + this.yOffset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.UP) {\n                        dotY = stemExt.topY + Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY -=\n                        this.radius +\n                            Metrics.get('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.DOWN) {\n                        dotY = stemExt.topY - Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY +=\n                        this.radius +\n                            Metrics.get('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.radius / 2 + Metrics.get('StringNumber.leftPadding');\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += this.radius / 2 + Metrics.get('StringNumber.rightPadding');\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.fontInfo);\n        const x = dotX - ctx.measureText(this.stringNumber).width / 2;\n        ctx.fillText('' + this.stringNumber, x, dotY + 4.5);\n        const lastNote = this.lastNote;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const leftShift = state.leftShift;\n        const strokeSpacing = 5;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = leftShift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + strokeSpacing, xShift);\n        }, 0);\n        state.leftShift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ allVoices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.allVoices = this.options.allVoices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.renderOptions = {\n            fontScale: Metrics.get('Stroke.fontSize'),\n        };\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.noteEnd = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let yPositions = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const lineSpace = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                yPositions = note.getYs();\n                for (let n = 0; n < yPositions.length; n++) {\n                    if (this.note === notes[i] || this.allVoices) {\n                        topY = Math.min(topY, yPositions[n]);\n                        botY = Math.max(botY, yPositions[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrowY = 0;\n        let textY = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = '\\ueb78' /*arrowheadBlackUp*/;\n                arrowY = topY;\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = '\\ueb7c' /*arrowheadBlackDown*/;\n                arrowY = botY + lineSpace;\n                topY -= lineSpace / 2;\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.xShift, topY, 1, botY - topY);\n        }\n        else {\n            // Select the wiggle glyph depending on the arrow direction\n            const lineGlyph = arrow === '\\ueb7c' /*arrowheadBlackDown*/ ? '\\ueaaa' /*wiggleArpeggiatoDown*/ : '\\ueaa9'; /*wiggleArpeggiatoUp*/\n            let txt = '';\n            const el = new Element();\n            // add glyphs until the required length is achieved\n            while (el.getWidth() < botY - topY) {\n                txt += lineGlyph;\n                el.setText(txt);\n            }\n            if (this.type === Stroke.Type.RASQUEDO_DOWN ||\n                this.type === Stroke.Type.ROLL_DOWN ||\n                this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n                ctx.openRotation(90, x + this.xShift, topY);\n                el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = topY + el.getWidth() + 5;\n            }\n            else {\n                ctx.openRotation(-90, x + this.xShift, botY);\n                el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = botY - el.getWidth() - 5;\n            }\n        }\n        // Draw the arrow head\n        if (arrowY !== 0) {\n            const el = new Element();\n            el.setText(arrow);\n            el.renderText(ctx, \n            // Center the arrow head substracting its width / 2\n            x + this.xShift - el.getWidth() / 2, arrowY);\n        }\n        // Draw the rasquedo \"R\"\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            const el = new Element('Stroke.text');\n            el.setText('R');\n            el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASQUEDO_DOWN ? el.getHeight() : 0));\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let textLine = state.topTextLine;\n        let width = 0;\n        let shift = state.rightShift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            textLine = textLine - (bendHeight + 1);\n        }\n        else {\n            state.topTextLine += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(textLine);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.rightShift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.renderOptions = {\n            code: 0xeab0,\n            width: 20,\n        };\n        this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.renderOptions.width = width;\n        this.text = String.fromCodePoint(this.renderOptions.code);\n        const items = Math.round(this.renderOptions.width / this.getWidth());\n        for (let i = 1; i < items; i++) {\n            this.text += String.fromCodePoint(this.renderOptions.code);\n        }\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.renderOptions.code = code;\n        return this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x;\n        const vy = note.getYForTopText(this.textLine) + 5;\n        this.renderText(ctx, vx, vy);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.).  The ModifierContext works with tickables\n// that are at the same tick to ensure that they and their modifiers\n// all have proper alignment.  (Note that the ModifierContext also\n// runs the spacing of the tickable).\n//\n// see https://github.com/0xfe/vexflow/wiki/How-Formatting-Works\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            leftShift: 0,\n            rightShift: 0,\n            textLine: 0,\n            topTextLine: 0,\n        };\n        // Current members -- a mapping of Category (string) to a list of Tickables, Modifiers,\n        // StaveNotes, TabNotes, etc.\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Get the width of the entire\n     */\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.leftShift;\n    }\n    getRightShift() {\n        return this.state.rightShift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.leftShift + this.state.rightShift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.leftShift + state.rightShift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Co-author: Benjamin W. Bohl\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;\n        return {\n            treble: {\n                code: gClef,\n                line: 3,\n            },\n            bass: {\n                code: fClef,\n                line: 1,\n            },\n            alto: {\n                code: cClef,\n                line: 2,\n            },\n            tenor: {\n                code: cClef,\n                line: 1,\n            },\n            percussion: {\n                code: unpitchedPercussionClef1,\n                line: 2,\n            },\n            soprano: {\n                code: cClef,\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: cClef,\n                line: 3,\n            },\n            'baritone-c': {\n                code: cClef,\n                line: 0,\n            },\n            'baritone-f': {\n                code: fClef,\n                line: 2,\n            },\n            subbass: {\n                code: fClef,\n                line: 0,\n            },\n            french: {\n                code: gClef,\n                line: 4,\n            },\n            tab: {\n                code: sixStringTabClef,\n                line: 2.5,\n            },\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.code = Clef.types['treble'].code;\n        this.line = Clef.types['treble'].line;\n        this.size = 'default';\n        this.type = 'treble';\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size = 'default', annotation) {\n        this.type = type;\n        this.code = Clef.types[type].code;\n        this.line = Clef.types[type].line;\n        this.size = size !== null && size !== void 0 ? size : 'default';\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation === '8va') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8va;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8va;\n            }\n        }\n        if (annotation === '8vb') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8vb;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8vb;\n            }\n        }\n        this.text = this.code;\n        this.fontInfo.size = Math.floor(Clef.getPoint(this.size));\n        return this;\n    }\n    /** Get point for clefs. */\n    static getPoint(size) {\n        // for sizes other than 'default', clef is 2/3 of the default value\n        return size === 'default' ? Metrics.get('fontSize') : (Metrics.get('fontSize') * 2) / 3;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        this.renderText(ctx, 0, stave.getYForLine(this.line));\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Element } from './element';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `keySpec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphs = [];\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc, stave) {\n        const code = Tables.accidentalCodes(acc.type);\n        const glyph = new Element(Category.KeySignature);\n        glyph.setText(code);\n        // Determine spacing between current accidental and the next accidental\n        const extraWidth = 1;\n        // Place the glyph on the stave\n        glyph.setYShift(stave.getYForLine(acc.line));\n        if (this.glyphs.length > 0) {\n            const prevGlyph = this.glyphs[this.glyphs.length - 1];\n            glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);\n        }\n        this.glyphs.push(glyph);\n        // Expand size of key signature\n        this.width += glyph.getWidth() + extraWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancelAccList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!differentTypes) {\n                index = cancelAccList.length - naturals + i;\n            }\n            const acc = cancelAccList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancelAccList[0].type,\n        };\n    }\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);\n            }\n        }\n        this.formatted = true;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            glyph.renderText(ctx, this.x, 0);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { Metrics } from './metrics';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, yShift) {\n        super();\n        this.symbolType = type;\n        this.x = x;\n        this.xShift = 0;\n        this.yShift = yShift;\n    }\n    setShiftX(x) {\n        this.xShift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.yShift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbolType) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSegnoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSegnoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue048' /*coda*/;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.coda.offsetY'));\n        return this;\n    }\n    drawSegnoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue047' /*segno*/;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.segno.offsetY'));\n        return this;\n    }\n    drawSymbolText(stave, x, text, drawCoda) {\n        const ctx = stave.checkContext();\n        let textX = 0;\n        this.text = text;\n        if (drawCoda) {\n            this.text += ' \\ue048' /*coda*/;\n        }\n        this.setFont(Metrics.getFontInfo('Repetition.text'));\n        switch (this.symbolType) {\n            // To the left\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                textX = stave.getVerticalBarWidth();\n                break;\n            // To the right\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n            default:\n                textX =\n                    x -\n                        (stave.getNoteStartX() - this.x) +\n                        stave.getWidth() -\n                        this.width -\n                        Metrics.get('Repetition.text.offsetX');\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) + Metrics.get('Repetition.text.offsetY');\n        this.renderText(ctx, textX, y);\n        return this;\n    }\n}\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x, yShift, drawRect = true) {\n        super();\n        this.setStaveSection(section);\n        this.x = x;\n        this.yShift = yShift;\n        this.drawRect = drawRect;\n    }\n    setStaveSection(section) {\n        this.text = section;\n        return this;\n    }\n    draw(stave, xShift) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;\n        const width = this.width + 2 * padding; // add left & right padding\n        const height = this.height + 2 * padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.yShift;\n        const x = this.x + xShift;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        this.renderText(ctx, xShift + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Radosaw Eichler 2012\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StaveTempo_durationToCode;\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shiftY) {\n        super();\n        _StaveTempo_durationToCode.set(this, {\n            '1/2': '\\ue1d0' /*metNoteDoubleWhole*/,\n            1: '\\ueca2' /*metNoteWhole*/,\n            2: '\\ueca3' /*metNoteHalfUp*/,\n            4: '\\ueca5' /*metNoteQuarterUp*/,\n            8: '\\ueca7' /*metNote8thUp*/,\n            16: '\\ueca9' /*metNote16thUp*/,\n            32: '\\uecab' /*metNote32ndUp*/,\n            64: '\\uecad' /*metNote64thUp*/,\n            128: '\\uecaf' /*metNote128thUp*/,\n            256: '\\uecb1' /*metNote256thUp*/,\n            512: '\\uecb3' /*metNote512thUp*/,\n            1024: '\\uecb5' /*metNote1024thUp*/,\n        });\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.setXShift(10);\n        this.setYShift(shiftY);\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    draw(stave, shiftX) {\n        var _a;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = (_a = this.tempo.dots) !== null && _a !== void 0 ? _a : 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + shiftX;\n        const y = stave.getYForTopText(1);\n        ctx.save();\n        if (name) {\n            this.text = name;\n            this.fontInfo = Metrics.getFontInfo('StaveTempo.name');\n            this.renderText(ctx, shiftX, y);\n            x += this.getWidth();\n        }\n        if (duration && bpm) {\n            if (name) {\n                x += 2;\n                ctx.setFont(Metrics.getFontInfo('StaveTempo'));\n                ctx.fillText('(', x + this.xShift, y + this.yShift);\n                x += 5;\n            }\n            x += 3;\n            const el = new Element('StaveTempo.glyph');\n            el.setText(__classPrivateFieldGet(this, _StaveTempo_durationToCode, \"f\")[Tables.sanitizeDuration(duration)]);\n            el.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += el.getWidth();\n            // Draw dot\n            ctx.setFont(Metrics.getFontInfo('StaveTempo.glyph'));\n            for (let i = 0; i < dots; i++) {\n                x += 6;\n                ctx.fillText('\\uecb7' /*metAugmentationDot*/, x + this.xShift, y + 2 + this.yShift);\n            }\n            ctx.setFont(Metrics.getFontInfo('StaveTempo'));\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 + this.xShift, y + this.yShift);\n        }\n        ctx.restore();\n        return this;\n    }\n}\n_StaveTempo_durationToCode = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: '\\uE047' /*segno*/,\n            tr: '\\uE566' /*ornamentTrill*/,\n            mordent: '\\uE56D' /*ornamentMordent*/,\n            mordentUpper: '\\uE56C' /*ornamentShortTrill*/,\n            mordentLower: '\\uE56D' /*ornamentMordent*/,\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            coda: '\\uE048' /*coda*/,\n            pedalOpen: '\\uE650' /*keyboardPedalPed*/,\n            pedalClose: '\\uE655' /*keyboardPedalUp*/,\n            caesuraStraight: '\\uE4D1' /*caesura*/,\n            caesuraCurved: '\\uE4D4' /*caesuraCurved*/,\n            breath: '\\uE4CE' /*breathMarkComma*/,\n            tick: '\\uE4CF' /*breathMarkTick*/,\n            turn: '\\uE567' /*ornamentTurn*/,\n            turnInverted: '\\uE569' /*ornamentTurnSlash*/,\n        };\n    }\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';\n        if (noteStruct.glyph) {\n            this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;\n        }\n        if (noteStruct.font) {\n            this.setFont(noteStruct.font);\n        }\n        else if (noteStruct.glyph === undefined) {\n            this.setFont(Metrics.getFontInfo('TextNote.text.fontSize'));\n        }\n        // Scale the font size by 1/1.3.\n        const smallerFontSize = Font.convertSizeToPointValue(this.fontInfo.size) * 0.769231;\n        if (noteStruct.superscript) {\n            this.superscript = new Element('TexNote.subSuper');\n            this.superscript.setText(noteStruct.superscript);\n            this.superscript.setFontSize(smallerFontSize);\n        }\n        if (noteStruct.subscript) {\n            this.subscript = new Element('TexNote.subSuper');\n            this.subscript.setText(noteStruct.subscript);\n            this.subscript.setFontSize(smallerFontSize);\n        }\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignoreTicks = noteStruct.ignoreTicks || false;\n        this.justification = TextJustification.LEFT;\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        const y = stave.getYForLine(this.line + -3);\n        this.applyStyle(ctx);\n        this.renderText(ctx, x, y);\n        const height = this.getHeight();\n        if (this.superscript) {\n            this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);\n        }\n        if (this.subscript) {\n            this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);\n        }\n        this.restoreStyle(ctx);\n    }\n}\nTextNote.Justification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, label, x, yShift) {\n        super();\n        this.type = type;\n        this.x = x;\n        this.yShift = yShift;\n        this.text = label;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;\n        const vertHeight = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.type) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {\n            this.renderText(ctx, x + 5, topY - this.yShift + 15);\n        }\n        ctx.fillRect(this.x + x, topY, width, 1);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        var _a, _b, _c;\n        super();\n        this.setText(text);\n        this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.position = position;\n        this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - this.width - 24;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX();\n                if (this.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - this.width / 2;\n                }\n                else if (this.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - this.width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2);\n                }\n                else {\n                    y = stave.getYForBottomText(2);\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        this.renderText(ctx, x, y + 4);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) === false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\n/**\n * A TimeSignature is a StaveModifier that can make its appropriate Glyphs directly from\n * a provided \"timeSpec\" such as \"4/4\", \"C|\" (cut time), or even something more advanced\n * such as \"3/4(6/8)\" or \"2/4+5/8\".\n */\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.isNumeric = true;\n        this.topStartX = 0;\n        this.botStartX = 0;\n        this.lineShift = 0;\n        this.topText = new Element();\n        this.botText = new Element();\n        this.validateArgs = validateArgs;\n        const padding = customPadding;\n        this.topLine = 1;\n        this.bottomLine = 3;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    static getTimeSigCode(key, smallSig = false) {\n        let code = Glyphs.null;\n        switch (key) {\n            case 'C':\n                code = Glyphs.timeSigCommon;\n                break;\n            case 'C|':\n                code = Glyphs.timeSigCutCommon;\n                break;\n            case '+':\n                code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;\n                break;\n            case '-':\n                code = Glyphs.timeSigMinus;\n                break;\n            case '(':\n                code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;\n                break;\n            case ')':\n                code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;\n                break;\n            default:\n                code = String.fromCodePoint(0xe080 + Number(key[0])) /* timeSigN = Glyphs.timeSig0 + N */;\n                break;\n        }\n        return code;\n    }\n    /**\n     * Returns a new TimeSignatureGlyph (a Glyph subclass that knows how to draw both\n     * top and bottom digits along with plus signs etc.)\n     */\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        // note that 'code' is ignored by TimeSignatureGlyph when rendering.\n        let txt = '';\n        let topWidth = 0;\n        let height = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);\n            txt += code;\n        }\n        this.topText.setText(txt);\n        topWidth = this.topText.getWidth();\n        height = this.topText.getHeight();\n        let botWidth = 0;\n        txt = '';\n        for (let i = 0; i < botDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(botDigits[i], true);\n            txt += code;\n        }\n        this.botText.setText(txt);\n        botWidth = this.botText.getWidth();\n        height = Math.max(height, this.botText.getHeight());\n        // If the height of the digits is more than two staff spaces (20), shift to the next line\n        // in order to center the digits on lines 1 and 5 rather than 2 and 4.\n        this.lineShift = height > 24 ? 1 : 0;\n        this.width = Math.max(topWidth, botWidth);\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n    }\n    /**\n     * Set a new time signature specification without changing customPadding, etc.\n     *\n     * The getter for this is `getTimeSpec` not `getTimeSig`.\n     */\n    setTimeSig(timeSpec) {\n        var _a, _b;\n        this.timeSpec = timeSpec;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const code = TimeSignature.getTimeSigCode(timeSpec);\n            this.line = 2;\n            this.text = code;\n            this.isNumeric = false;\n        }\n        else {\n            if (this.validateArgs) {\n                assertIsValidTimeSig(timeSpec);\n            }\n            const parts = timeSpec.split('/');\n            this.line = 0;\n            this.isNumeric = true;\n            this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');\n        }\n        return this;\n    }\n    /**\n     * Return the timeSpec (such as '4/4' or 'C|' or even '2/4+3/8') of the TimeSignature\n     */\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    /**\n     * Return the staff line that the TimeSignature sits on.  Generally 0 for numerator/\n     * denominator time signatures such as 3/4 and 2 for cut/common.\n     */\n    getLine() {\n        return this.line;\n    }\n    /**\n     * Set the line number that the TimeSignature sits on.  Half-values are acceptable\n     * for spaces, etc. Can be altered, for instance, for signatures that sit above the\n     * staff in large orchestral scores.\n     */\n    setLine(line) {\n        this.line = line;\n    }\n    /**\n     * Return a boolean on whether this TimeSignature is drawn with one or more numbers\n     * (such as 4/4) or not (as in cut time).\n     */\n    getIsNumeric() {\n        return this.isNumeric;\n    }\n    /**\n     * Set whether this TimeSignature is drawn with one or more numbers.\n     */\n    setIsNumeric(isNumeric) {\n        this.isNumeric = isNumeric;\n    }\n    /**\n     * Draw the time signature on a Stave using its RenderContext.  Both setStave\n     * and setContext must already be run.\n     */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.drawAt(ctx, stave, this.x);\n    }\n    drawAt(ctx, stave, x) {\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        if (this.isNumeric) {\n            let startX = x + this.topStartX;\n            let y = 0;\n            if (this.botText.getText().length > 0)\n                y = stave.getYForLine(this.topLine - this.lineShift);\n            else\n                y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;\n            this.topText.renderText(ctx, startX, y);\n            startX = x + this.botStartX;\n            y = stave.getYForLine(this.bottomLine + this.lineShift);\n            this.botText.renderText(ctx, startX, y);\n        }\n        else {\n            this.renderText(ctx, x - this.x, stave.getYForLine(this.line));\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { KeySignature } from './keysignature';\nimport { Metrics } from './metrics';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        return Metrics.get('Stave.padding') + Metrics.get('Stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        return Metrics.get('Stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.startX = x + 5;\n        this.endX = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, fillStyle: '#999999', leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacingBetweenLinesPx * spacing;\n    }\n    resetLines() {\n        this.options.lineConfig = [];\n        for (let i = 0; i < this.options.numLines; i++) {\n            this.options.lineConfig.push({ visible: true });\n        }\n        this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;\n        this.options.bottomTextPosition = this.options.numLines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.startX = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.startX;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.endX;\n    }\n    getTieStartX() {\n        return this.startX;\n    }\n    getTieEndX() {\n        return this.endX;\n    }\n    getNumLines() {\n        return this.options.numLines;\n    }\n    setNumLines(n) {\n        this.options.numLines = n;\n        this.resetLines();\n        return this;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.startX += shift;\n        this.endX += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.endX = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.endX);\n        return this;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fillStyle, strokeStyle: this.options.fillStyle, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let startX = this.startX - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {\n            startX -= begBarline.getWidth();\n        }\n        return startX;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, label, y) {\n        this.modifiers.push(new Volta(type, label, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize) {\n            staveSection.setFontSize(fontSize);\n        }\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setStaveText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacingBetweenLinesPx;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;\n        return scoreBottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.numLines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.topTextPosition);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottomTextPosition + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        var _a, _b, _c, _d;\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.startX = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;\n                    widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;\n                }\n                widths.left = (_c = -layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0;\n                widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.endX = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const numLines = this.options.numLines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < numLines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.lineConfig[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.verticalBarWidth;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.lineConfig;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param lineNumber The index of the line to configure.\n     * @param lineConfig An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(lineNumber, lineConfig) {\n        if (lineNumber >= this.options.numLines || lineNumber < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (lineConfig.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof lineConfig.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.lineConfig[lineNumber] = lineConfig;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param linesConfiguration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the numLines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(linesConfiguration) {\n        if (linesConfiguration.length !== this.options.numLines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const lineConfig in linesConfiguration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (linesConfiguration[lineConfig].visible === undefined) {\n                linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];\n            }\n            this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);\n        }\n        this.options.lineConfig = linesConfiguration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            // Calculate min start X for the category\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Consider only the first instance\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Calculate adjustement required for the stave\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                // Apply adjustment to all the modifiers in and beyond the category\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                // Apply adjustment also to note start.\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        // Make sure that staves are formatted\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        // Align Clefs\n        adjustCategoryStartX(Category.Clef);\n        // Align key signatures\n        adjustCategoryStartX(Category.KeySignature);\n        // Align time signatures\n        adjustCategoryStartX(Category.TimeSignature);\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let xShift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        xShift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + xShift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(topStave, bottomStave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.topStave = topStave;\n        this.bottomStave = bottomStave;\n        this.type = StaveConnector.type.DOUBLE;\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.xShift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        var _a, _b;\n        const textElement = new Element('StaveConnector.text');\n        textElement.setText(text);\n        textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.texts.push(textElement);\n        return this;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.topStave.getYForLine(0);\n        let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;\n        let width = 3;\n        let topX = this.topStave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.topStave.getX() + this.topStave.getWidth();\n        }\n        let attachmentHeight = botY - topY;\n        const element = new Element();\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= 5;\n                topY -= this.thickness;\n                attachmentHeight += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.topStave.getX() - 2 + this.xShift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachmentHeight / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachmentHeight;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachmentHeight;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachmentHeight;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachmentHeight;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachmentHeight;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachmentHeight;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachmentHeight = botY - topY;\n                element.setText('\\ue003' /* bracketTop */);\n                element.renderText(ctx, topX - 5, topY);\n                element.setText('\\ue004' /* bracketBottom */);\n                element.renderText(ctx, topX - 5, botY);\n                topX -= 5;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachmentHeight -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachmentHeight);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachmentHeight);\n        }\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const textElement = this.texts[i];\n            const x = this.topStave.getX() - textElement.getWidth() - 24;\n            const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;\n            textElement.renderText(ctx, x, y + 4);\n        }\n    }\n}\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util';\nimport { Voice } from './voice';\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length === 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        var _a, _b;\n        options = Object.assign({ stavePadding: Metrics.get('Stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autoBeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autoBeam: true})`\n     *    * Setting `alignRests` a struct is needed `(context, stave, notes, {alignRests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autoBeam: true, alignRests: true})`\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            autoBeam: false,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.autoBeam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { alignRests: options.alignRests })\n            .formatToStave([voice], stave, { alignRests: options.alignRests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autoBeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {\n        let opts = {\n            autoBeam,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.autoBeam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { alignRests: opts.alignRests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const line = currTickable.getLineForRest();\n                if (line !== 3) {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Metrics.get('Stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length === 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const configMinPadding = Metrics.get('Stave.endPaddingMin');\n        const configMaxPadding = Metrics.get('Stave.endPaddingMax');\n        const leftPadding = Metrics.get('Stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.alignRests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ alignRests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.alignRests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.numNotes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   numNotes: fit this many notes into...\n *   notesOccupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of numNotes : notesOccupied.\n *       numNotes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notesOccupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between numNotes and\n *     notesOccupied is greater than 1.\n *\n *   yOffset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    constructor(notes, options = {}) {\n        super();\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.numNotes = this.options.numNotes !== undefined ? this.options.numNotes : notes.length;\n        this.notesOccupied = this.options.notesOccupied || 2;\n        if (this.options.bracketed !== undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed !== undefined ? this.options.ratioed : Math.abs(this.notesOccupied - this.numNotes) > 1;\n        this.textElement = new Element('Tuplet');\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.numNotes;\n    }\n    getNotesOccupied() {\n        return this.notesOccupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notesOccupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        let numerator = '';\n        let denominator = '';\n        let n = this.numNotes;\n        while (n >= 1) {\n            numerator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + numerator;\n            n = Math.floor(n / 10);\n        }\n        if (this.ratioed) {\n            n = this.notesOccupied;\n            while (n >= 1) {\n                denominator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + denominator;\n                n = Math.floor(n / 10);\n            }\n            denominator = '\\uE88A' /* tupletColon */ + denominator;\n        }\n        this.textElement.setText(numerator + denominator);\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const firstNote = this.notes[0];\n        let maxTupletCount = countTuplets(firstNote, location);\n        let minTupletCount = countTuplets(firstNote, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        var _a;\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual yOffset:\n        const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base yPosition\n        const firstNote = this.notes[0];\n        let yPosition;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().topTextLine);\n                }\n                const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;\n                if (note.hasStem() || note.isRest()) {\n                    const topY = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE\n                        : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;\n                    yPosition = Math.min(topY, yPosition);\n                    if (modLines > 0) {\n                        yPosition = Math.min(modY, yPosition);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = 4; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);\n                }\n            });\n            yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottomY = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE\n                        : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;\n                    if (bottomY > yPosition) {\n                        yPosition = bottomY;\n                    }\n                }\n            }\n        }\n        return yPosition + nestedTupletYOffset + yOffset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        let xPos = 0;\n        let yPos = 0;\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const firstNote = this.notes[0];\n        const lastNote = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            xPos = firstNote.getStemX();\n            this.width = lastNote.getStemX() - xPos;\n        }\n        else {\n            xPos = firstNote.getTieLeftX() - 5;\n            this.width = lastNote.getTieRightX() - xPos + 5;\n        }\n        // determine y value for tuplet\n        yPos = this.getYPosition();\n        const notationCenterX = xPos + this.width / 2;\n        const notationStartX = notationCenterX - this.textElement.getWidth() / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (lineWidth > 0) {\n                ctx.fillRect(xPos, yPos, lineWidth, 1);\n                ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);\n                ctx.fillRect(xPos, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(xPos + this.width, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw text\n        this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Beam_stemDirection, _Beam_ticks, _Beam_yShift, _Beam_breakOnIndexes, _Beam_beamCount, _Beam_unbeamable, _Beam_forcedPartialDirections;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(timeSig) {\n        if (!timeSig || timeSig === 'c') {\n            timeSig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[timeSig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(timeSig.split('/')[0], 10);\n            const beatValue = parseInt(timeSig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stemDirection a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stemDirection, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\n     *   stemDirection: -1,\n     *   beamRests: true,\n     *   beamMiddleOnly: true,\n     *   showStemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stemDirection set to apply the same direction to all notes\n     * @param config.beamRests set to `true` to include rests in the beams\n     * @param config.beamMiddleOnly set to `true` to only beam rests in the middle of the beat\n     * @param config.showStemlets set to `true` to draw stemlets for rests\n     * @param config.maintainStemDirections set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(notes) {\n            return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beamRests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintainStemDirections) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stemDirection) {\n                        stemDirection = config.stemDirection;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.showStemlets) {\n                beam.renderOptions.showStemlets = true;\n            }\n            if (config.secondaryBreaks) {\n                beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);\n            }\n            if (config.flatBeams === true) {\n                beam.renderOptions.flatBeams = true;\n                beam.renderOptions.flatBeamOffset = config.flatBeamOffset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, autoStem = false) {\n        super();\n        this.slope = 0;\n        _Beam_stemDirection.set(this, void 0);\n        _Beam_ticks.set(this, void 0);\n        _Beam_yShift.set(this, 0);\n        _Beam_breakOnIndexes.set(this, void 0);\n        _Beam_beamCount.set(this, void 0);\n        _Beam_unbeamable.set(this, void 0);\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        _Beam_forcedPartialDirections.set(this, {});\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        __classPrivateFieldSet(this, _Beam_ticks, notes[0].getIntrinsicTicks(), \"f\");\n        if (__classPrivateFieldGet(this, _Beam_ticks, \"f\") >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        __classPrivateFieldSet(this, _Beam_stemDirection, notes[0].getStemDirection(), \"f\");\n        let stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Figure out optimal stem direction based on given notes\n        if (autoStem && isStaveNote(notes[0])) {\n            stemDirection = calculateStemDirection(notes);\n        }\n        else if (autoStem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (autoStem) {\n                note.setStemDirection(stemDirection);\n                __classPrivateFieldSet(this, _Beam_stemDirection, stemDirection, \"f\");\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        __classPrivateFieldSet(this, _Beam_beamCount, this.getBeamCount(), \"f\");\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, [], \"f\");\n        this.renderOptions = {\n            beamWidth: 5,\n            maxSlope: 0.25,\n            minSlope: -0.25,\n            slopeIterations: 20,\n            slopeCost: 100,\n            showStemlets: false,\n            stemletExtension: 7,\n            partialBeamLength: 10,\n            flatBeams: false,\n            minFlatBeamOffset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indexes` to break the secondary beam at. */\n    breakSecondaryAt(indexes) {\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, indexes, \"f\");\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        return this;\n    }\n    /**\n     * @param firstX specified in pixels.\n     * @param firstY specified in pixels.\n     *\n     * @return the y coordinate for linear function.\n     */\n    getSlopeY(x, firstX, firstY, slope) {\n        return firstY + (x - firstX) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (maxSlope - minSlope) / slopeIterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = minSlope; slope <= maxSlope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.renderOptions.slopeCost = 0\n            const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        __classPrivateFieldSet(this, _Beam_yShift, yShift, \"f\");\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        // works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        // based on the highest or lowest note (again, based on the stem\n        // direction). This also takes into account the added height due to\n        // the width of the beams.\n        const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;\n        const newOffset = extremeY + extremeTest * -stemDirection;\n        if (stemDirection === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stemDirection === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flatBeamOffset) {\n            // Set the offset for the group based on the calculations above.\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.UP && offset < flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        // For flat beams, the slope and yShift are 0.\n        this.slope = 0;\n        __classPrivateFieldSet(this, _Beam_yShift, 0, \"f\");\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {\n            beamY = this.renderOptions.flatBeamOffset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;\n        const yShift = __classPrivateFieldGet(this, _Beam_yShift, \"f\");\n        const beamCount = __classPrivateFieldGet(this, _Beam_beamCount, \"f\");\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== __classPrivateFieldGet(this, _Beam_stemDirection, \"f\")) {\n                    const beamCount = note.getGlyphProps().beamCount;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beamCount > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beamCount;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.renderOptions.beamWidth * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && showStemlets) {\n                    const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;\n        const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);\n        const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);\n        const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);\n        if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_BOTH;\n        }\n        else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_LEFT;\n        }\n        else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tickOfDuration = Tables.durationToTicks(duration);\n        let beamStarted = false;\n        const beamLines = [];\n        let currentBeam = undefined;\n        const partialBeamLength = this.renderOptions.partialBeamLength;\n        let previousShouldBreak = false;\n        let tickTally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tickTally += ticks;\n            let shouldBreak = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indexes were set up through breakSecondaryAt()\n                shouldBreak = __classPrivateFieldGet(this, _Beam_breakOnIndexes, \"f\").indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {\n                    tickTally = 0;\n                    shouldBreak = true;\n                }\n            }\n            const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;\n            const stemX = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prevNote = this.notes[i - 1];\n            const nextNote = this.notes[i + 1];\n            const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;\n            const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;\n            const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            // const beamAlone = noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            if (noteGetsBeam) {\n                // This note gets a beam at the current level\n                if (beamStarted) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    currentBeam = beamLines[beamLines.length - 1];\n                    currentBeam.end = stemX;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (shouldBreak) {\n                        beamStarted = false;\n                        if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    currentBeam = { start: stemX, end: undefined };\n                    beamStarted = true;\n                    if (beamAlone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prevTick = prevNote.getIntrinsicTicks();\n                        const nextTick = nextNote.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                        else {\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                    }\n                    else if (!nextNoteGetsBeam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previousShouldBreak || i === 0) && nextNote) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                    else if (shouldBreak) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        currentBeam.end = currentBeam.start - partialBeamLength;\n                        beamStarted = false;\n                    }\n                    beamLines.push(currentBeam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beamStarted = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previousShouldBreak = shouldBreak;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const lastBeam = beamLines[beamLines.length - 1];\n        if (lastBeam && lastBeam.end === undefined) {\n            lastBeam.end = lastBeam.start - partialBeamLength;\n        }\n        return beamLines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                stem.setNoteHeadXBounds(stemX, stemX);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const validBeamDurations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.renderOptions.beamWidth * __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Draw the beams.\n        for (let i = 0; i < validBeamDurations.length; ++i) {\n            const duration = validBeamDurations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beamLine = beamLines[j];\n                const startBeamX = beamLine.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beamLine.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (__classPrivateFieldGet(this, _Beam_unbeamable, \"f\"))\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n_Beam_stemDirection = new WeakMap(), _Beam_ticks = new WeakMap(), _Beam_yShift = new WeakMap(), _Beam_breakOnIndexes = new WeakMap(), _Beam_beamCount = new WeakMap(), _Beam_unbeamable = new WeakMap(), _Beam_forcedPartialDirections = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size = 'default', annotation) {\n        super({ duration: 'b' });\n        this.setType(type, size, annotation);\n        this.ignoreTicks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.clef = new Clef(type, size, annotation);\n        this.setWidth(this.clef.getWidth());\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.clef.renderText(ctx, this.getAbsoluteX() - this.x, stave.getYForLine(this.clef.line));\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\n// Helper to draw the hairpin.\nfunction renderHairpin(ctx, params) {\n    const beginX = params.beginX;\n    const endX = params.endX;\n    const y = params.y;\n    const halfHeight = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(beginX, y - halfHeight);\n        ctx.lineTo(endX, y);\n        ctx.lineTo(beginX, y + halfHeight);\n    }\n    else {\n        ctx.moveTo(endX, y - halfHeight);\n        ctx.lineTo(beginX, y);\n        ctx.lineTo(endX, y + halfHeight);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extendLeft: 0,\n            extendRight: 0,\n            // Vertical shift\n            yShift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tickContext = this.getTickContext();\n        const nextContext = TickContext.getNextContext(tickContext);\n        const beginX = this.getAbsoluteX();\n        const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);\n        renderHairpin(ctx, {\n            beginX: beginX - this.options.extendLeft,\n            endX: endX + this.options.extendRight,\n            y: y + this.options.yShift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    xShift: pixels to shift\n    //    yShift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const xShift = this.renderOptions.xShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        const firstX = params.firstX + xShift;\n        const firstY = params.firstY + yShift;\n        const lastX = params.lastX - xShift;\n        const lastY = params.lastY + yShift;\n        const thickness = this.renderOptions.thickness;\n        const cps = this.renderOptions.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const controlPointSpacing = (lastX - firstX) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(firstX, firstY);\n        ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);\n        ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.from;\n        const lastNote = this.to;\n        let firstX;\n        let lastX;\n        let firstY;\n        let lastY;\n        let stemDirection = 0;\n        let metric = 'baseY';\n        let endMetric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.renderOptions.position);\n        const positionEnd = getPosition(this.renderOptions.positionEnd);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            endMetric = 'topY';\n        }\n        if (positionEnd === CurvePosition.NEAR_HEAD) {\n            endMetric = 'baseY';\n        }\n        else if (positionEnd === CurvePosition.NEAR_TOP) {\n            endMetric = 'topY';\n        }\n        if (firstNote) {\n            firstX = firstNote.getTieRightX();\n            stemDirection = firstNote.getStemDirection();\n            firstY = firstNote.getStemExtents()[metric];\n        }\n        else {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstY = lastNote.getStemExtents()[metric];\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX();\n            stemDirection = lastNote.getStemDirection();\n            lastY = lastNote.getStemExtents()[endMetric];\n        }\n        else {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastY = firstNote.getStemExtents()[endMetric];\n        }\n        this.renderCurve({\n            firstX,\n            lastX,\n            firstY,\n            lastY,\n            direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const autoStem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });\n        if (!autoStem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Any glyph that is set to appear on a Stave and take up musical time and graphical space.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignoreTicks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.text = glyph;\n        return this;\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        this.renderText(ctx, x, stave.getYForLine(this.options.line));\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stemExtensionOverride) {\n            return this.stemExtensionOverride;\n        }\n        let ret = super.getStemExtension();\n        ret = Stem.HEIGHT * this.getFontScale() - Stem.HEIGHT + ret;\n        return ret;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const scale = this.getFontScale();\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {\n                    stem: 6 * scale,\n                    beam: 5 * scale,\n                });\n            }\n            else {\n                const stemDirection = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteHeadWidth = this.noteHeads[0].getWidth();\n                const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;\n                const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;\n                const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;\n                if (stemDirection === Stem.DOWN) {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y - noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y + noteHeadWidth,\n                    };\n                }\n                else {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y + noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y - noteHeadWidth,\n                    };\n                }\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * scale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beamSlope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beamAngle = Math.atan(beamSlope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beamAngle) * slashBeamOffset,\n            dy: Math.sin(beamAngle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;\n        const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;\n        const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;\n        const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;\n        const ret = {\n            x1: stemX - protrusionStemDeltaX,\n            y1: stemY + slashStemOffset - protrusionStemDeltaY,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,\n            y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,\n        };\n        return ret;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements multiple measure rests.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _MultiMeasureRest_hasPaddingLeft, _MultiMeasureRest_hasPaddingRight, _MultiMeasureRest_hasLineThickness, _MultiMeasureRest_hasSymbolSpacing;\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param numberOfMeasures Number of measures.\n     * @param options The options object.\n     */\n    constructor(numberOfMeasures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        _MultiMeasureRest_hasPaddingLeft.set(this, false);\n        _MultiMeasureRest_hasPaddingRight.set(this, false);\n        _MultiMeasureRest_hasLineThickness.set(this, false);\n        _MultiMeasureRest_hasSymbolSpacing.set(this, false);\n        const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Metrics.get('MultiMeasureRest.fontSize'); // same as TimeSignature.\n        this.fontInfo.size = fontSize;\n        this.numberOfMeasures = numberOfMeasures;\n        this.text = '';\n        const t = `${this.numberOfMeasures}`;\n        for (const digit of t) {\n            // 0xe080 is timeSig0. We calculate the code point for timeSigN to assemble the digits via SMuFL glyphs.\n            this.text += String.fromCodePoint(0xe080 + Number(digit));\n        }\n        // Keep track of whether these four options were provided.\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingLeft, typeof options.paddingLeft === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingRight, typeof options.paddingRight === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasLineThickness, typeof options.lineThickness === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasSymbolSpacing, typeof options.symbolSpacing === 'number', \"f\");\n        this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Metrics.get('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right) {\n        const options = this.renderOptions;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let txt = '\\ue4ef'; /*restHBarLeft*/\n        const el = new Element();\n        el.setText(txt);\n        // Add middle bars until the right padding is reached\n        for (let i = 1; (i + 2) * el.getWidth() + left <= right; i++) {\n            txt += '\\ue4f0'; /*restHBarMiddle*/\n        }\n        txt += '\\ue4f1'; /*restHBarRight*/\n        el.setText(txt);\n        el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);\n    }\n    drawSymbols(stave, ctx, left, right) {\n        const n4 = Math.floor(this.numberOfMeasures / 4);\n        const n = this.numberOfMeasures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.renderOptions;\n        const elMiddle = new Element();\n        let txt = '';\n        for (let i = 0; i < n4; ++i) {\n            txt += '\\ue4e1' /*restLonga*/ + ' ';\n        }\n        for (let i = 0; i < n2; ++i) {\n            txt += '\\ue4e2' /*restDoubleWhole*/ + ' ';\n        }\n        elMiddle.setText(txt);\n        const elTop = new Element();\n        txt = '';\n        for (let i = 0; i < n1; ++i) {\n            txt += '\\ue4e3' /*restWhole*/ + ' ';\n        }\n        elTop.setText(txt);\n        const width = elMiddle.getWidth() + elTop.getWidth();\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        elMiddle.renderText(ctx, x, yMiddle);\n        x += elMiddle.getWidth();\n        elTop.renderText(ctx, x, yTop);\n        x += elTop.getWidth();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.renderOptions;\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingLeft, \"f\")) {\n            left = stave.getX() + options.paddingLeft;\n        }\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingRight, \"f\")) {\n            right = stave.getX() + stave.getWidth() - options.paddingRight;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        if (options.useSymbols) {\n            this.drawSymbols(stave, ctx, left, right);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right);\n        }\n        if (options.showNumber) {\n            this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);\n        }\n    }\n}\n_MultiMeasureRest_hasPaddingLeft = new WeakMap(), _MultiMeasureRest_hasPaddingRight = new WeakMap(), _MultiMeasureRest_hasLineThickness = new WeakMap(), _MultiMeasureRest_hasSymbolSpacing = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, ctx, x, y) {\n    var _a;\n    const glyph = new Element(PedalMarking.CATEGORY);\n    glyph.setText((_a = PedalMarking.GLYPHS[name]) !== null && _a !== void 0 ? _a : name);\n    glyph.renderText(ctx, x - (glyph.getWidth() - Tables.STAVE_LINE_DISTANCE) / 2, y);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.customDepressText = '';\n        this.customReleaseText = '';\n        this.renderOptions = {\n            bracketHeight: 10,\n            textMarginRight: 6,\n            bracketLineWidth: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.customDepressText = depress || '';\n        this.customReleaseText = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let prevX;\n        let prevY;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            isPedalDepressed = !isPedalDepressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prevX) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const nextNoteIsSame = notes[index + 1] === note;\n            const prevNoteIsSame = notes[index - 1] === note;\n            let xShift = 0;\n            if (isPedalDepressed) {\n                // Adjustment for release+depress\n                xShift = prevNoteIsSame ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.customDepressText) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const textWidth = ctx.measureText(this.customDepressText).width;\n                        ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                        xShift = textWidth / 2 + this.renderOptions.textMarginRight;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedalDepress', ctx, x, y);\n                        xShift = 20 + this.renderOptions.textMarginRight;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.renderOptions.bracketHeight);\n                    ctx.lineTo(x + xShift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                xShift = nextNoteIsSame ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x + xShift, y);\n                ctx.lineTo(x, y - this.renderOptions.bracketHeight);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prevX = x + xShift;\n            prevY = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            isPedalDepressed = !isPedalDepressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            let textWidth = 0;\n            if (isPedalDepressed) {\n                if (this.customDepressText) {\n                    textWidth = ctx.measureText(this.customDepressText).width;\n                    ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalDepress', ctx, x, y);\n                }\n            }\n            else {\n                if (this.customReleaseText) {\n                    textWidth = ctx.measureText(this.customReleaseText).width;\n                    ctx.fillText(this.customReleaseText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalRelease', ctx, x, y);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.renderOptions.color);\n        ctx.setFillStyle(this.renderOptions.color);\n        ctx.setFont(Metrics.getFontInfo('PedalMarking.text'));\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.renderOptions.bracketLineWidth);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedalDepress: '\\uE650' /*keyboardPedalPed*/,\n    pedalRelease: '\\uE655' /*keyboardPedalUp*/,\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { GlyphNote } from './glyphnote';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': '\\uE500' /*repeat1Bar*/,\n    '2': '\\uE501' /*repeat2Bars*/,\n    '4': '\\uE502' /*repeat4Bars*/,\n    slash: '\\uE504' /*repeatBarSlash*/,\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || '\\uE500'; /*repeat1Bar*/\n        super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `renderOptions`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    firstNote: Note,\n    //    lastNote: Note,\n    //    firstIndexes: [n1, n2, n3],\n    //    lastIndexes: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.renderOptions = {\n            // Space to add to the left or the right\n            paddingLeft: 4,\n            paddingRight: 3,\n            // The width of the line in pixels\n            lineWidth: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            lineDash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            roundedEnd: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            drawStartArrow: false,\n            drawEndArrow: false,\n            // The length of the arrowhead sides\n            arrowheadLength: 10,\n            // The angle of the arrowhead\n            arrowheadAngle: Math.PI / 8,\n            // The position of the text\n            textPositionVertical: StaveLine.TextVerticalPosition.TOP,\n            textJustification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes)\n            notes.firstIndexes = [0];\n        if (!notes.lastIndexes)\n            notes.lastIndexes = [0];\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.firstIndexes = notes.firstIndexes;\n        this.lastNote = notes.lastNote;\n        this.lastIndexes = notes.lastIndexes;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const renderOptions = this.renderOptions;\n        if (renderOptions.lineDash) {\n            ctx.setLineDash(renderOptions.lineDash);\n        }\n        if (renderOptions.lineWidth) {\n            ctx.setLineWidth(renderOptions.lineWidth);\n        }\n        if (renderOptions.roundedEnd) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Apply the text styling to the context\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.fontInfo);\n        const renderOptions = this.renderOptions;\n        const color = renderOptions.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;\n        let endX;\n        let endY;\n        let startX;\n        let startY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            endX = Math.round(x1 + (x2 - x1) * ratio);\n            endY = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            endX = x2;\n            endY = y2;\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            startX = x1 + (x2 - x1) * (1 - ratio);\n            startY = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            startX = x1;\n            startY = y1;\n        }\n        if (this.renderOptions.color) {\n            ctx.setStrokeStyle(this.renderOptions.color);\n            ctx.setFillStyle(this.renderOptions.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const lineAngle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));\n        let angle1;\n        let angle2;\n        let topX;\n        let topY;\n        let bottomX;\n        let bottomY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;\n            topX = x2 + Math.cos(angle1) * h;\n            topY = y2 + Math.sin(angle1) * h;\n            angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;\n            bottomX = x2 + Math.cos(angle2) * h;\n            bottomY = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            angle1 = lineAngle + this.renderOptions.arrowheadAngle;\n            topX = x1 + Math.cos(angle1) * h;\n            topY = y1 + Math.sin(angle1) * h;\n            angle2 = lineAngle - this.renderOptions.arrowheadAngle;\n            bottomX = x1 + Math.cos(angle2) * h;\n            bottomY = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        const renderOptions = this.renderOptions;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indexes and draw lines\n        let startPosition = { x: 0, y: 0 };\n        let endPosition = { x: 0, y: 0 };\n        this.firstIndexes.forEach((firstIndex, i) => {\n            const lastIndex = this.lastIndexes[i];\n            // Get initial coordinates for the start/end of the line\n            startPosition = firstNote.getModifierStartXY(2, firstIndex);\n            endPosition = lastNote.getModifierStartXY(1, lastIndex);\n            const upwardsSlope = startPosition.y > endPosition.y;\n            // Adjust `x` coordinates for modifiers\n            startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;\n            endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;\n            // Adjust first `x` coordinates for displacements\n            const noteheadWidth = firstNote.getGlyphWidth();\n            const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;\n            if (firstDisplaced && firstNote.getStemDirection() === 1) {\n                startPosition.x += noteheadWidth + renderOptions.paddingLeft;\n            }\n            // Adjust last `x` coordinates for displacements\n            const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;\n            if (lastDisplaced && lastNote.getStemDirection() === -1) {\n                endPosition.x -= noteheadWidth + renderOptions.paddingRight;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            startPosition.y += upwardsSlope ? -3 : 1;\n            endPosition.y += upwardsSlope ? 2 : 0;\n            this.drawArrowLine(ctx, startPosition, endPosition);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const textWidth = ctx.measureText(this.text).width;\n        const justification = renderOptions.textJustification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = startPosition.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const deltaX = endPosition.x - startPosition.x;\n            const centerX = deltaX / 2 + startPosition.x;\n            x = centerX - textWidth / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = endPosition.x - textWidth;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const verticalPosition = renderOptions.textPositionVertical;\n        if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {\n            y = firstNote.checkStave().getYForTopText();\n        }\n        else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n        return this;\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n        return this;\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            topStave: this.partStaves[0],\n            bottomStave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ leftBar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const optionsDetails = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(optionsDetails);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(optionsDetails);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        var _a;\n        return new BoundingBox(this.options.x, this.options.y, this.options.width, ((_a = this.lastY) !== null && _a !== void 0 ? _a : 0) - this.options.y);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Gets the unused strings grouped together if consecutive.\n * @param numLines The number of lines.\n * @param stringsUsed An array of numbers representing which strings have fret positions.\n * @returns\n */\nfunction getUnusedStringGroups(numLines, stringsUsed) {\n    const stemThrough = [];\n    let group = [];\n    for (let string = 1; string <= numLines; string++) {\n        const isUsed = stringsUsed.indexOf(string) > -1;\n        if (!isUsed) {\n            group.push(string);\n        }\n        else {\n            stemThrough.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stemThrough.push(group);\n    return stemThrough;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stemY - The `y` coordinate the stem is located on\n// * unusedStrings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stemDirection - The direction of the stem\nfunction getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {\n    const upStem = stemDirection !== 1;\n    const downStem = stemDirection !== -1;\n    const lineSpacing = stave.getSpacingBetweenLines();\n    const totalLines = stave.getNumLines();\n    const stemLines = [];\n    unusedStrings.forEach((strings) => {\n        const containsLastString = strings.indexOf(totalLines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((upStem && containsFirstString) || (downStem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const lineYs = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === totalLines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= lineSpacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += lineSpacing / 2 - 1;\n            }\n            // Store the y value\n            lineYs.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stemDirection === 1 && isTopBound) {\n                lineYs.push(stemY - 2);\n            }\n            else if (stemDirection === -1 && isBottomBound) {\n                lineYs.push(stemY + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stemLines.push(lineYs.sort((a, b) => a - b));\n    });\n    return stemLines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `drawStem` when rendering the note\n    constructor(noteStruct, drawStem = false) {\n        super(noteStruct);\n        this.fretElement = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // Flag to draw a stem\n            drawStem, \n            // Flag to draw dot modifiers\n            drawDots: drawStem, \n            // Flag to extend the main stem through the stave and fret positions\n            drawStemThroughStave: false, \n            // vertical shift from stave line\n            yShift: 0 });\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stemDirection) {\n            this.setStemDirection(noteStruct.stemDirection);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.renderOptions.drawStem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;\n    }\n    static tabToElement(fret) {\n        let el;\n        if (fret.toUpperCase() === 'X') {\n            el = new Element('TabNote');\n            el.setText('\\ue263' /*accidentalDoubleSharp*/);\n        }\n        else {\n            el = new Element('TabNote.text');\n            el.setText(fret);\n            el.setYShift(el.getHeight() / 2);\n        }\n        return el;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.fretElement = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const el = TabNote.tabToElement(fret.toString());\n            this.fretElement.push(el);\n            this.width = Math.max(el.getWidth(), this.width);\n        }\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const noteGlyphWidth = this.width;\n            x = noteGlyphWidth / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const numLines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = numLines - 0.5;\n        const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyphProps, renderOptions: { drawStem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam === undefined && drawStem;\n        // Now it's the flag's turn.\n        if (glyphProps.codeFlagUp && shouldDrawFlag) {\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();\n            // Draw the Flag\n            this.applyStyle(context, this.flagStyle);\n            this.flag.renderText(context, flagX, flagY);\n            this.restoreStyle(context, this.flagStyle);\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.renderOptions.drawDots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.renderOptions.drawStem;\n        const stemThrough = this.renderOptions.drawStemThroughStave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.renderOptions.yShift;\n            const el = this.fretElement[i];\n            // Center the fret text beneath the stem\n            const tabX = x - el.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);\n            el.renderText(ctx, tabX, y);\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const renderStem = this.beam === undefined && this.renderOptions.drawStem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && renderStem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);\n        super(x, y, width, tabOptions);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.textElement = new Element('TextBracket');\n        this.textElement.setText(text);\n        this.superscriptElement = new Element('TextBracket');\n        this.superscriptElement.setText(superscript);\n        const smallerFontSize = Font.scaleSize(this.fontInfo.size, 0.714286);\n        this.superscriptElement.setFontSize(smallerFontSize);\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.renderOptions = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            lineWidth: 1,\n            showBracket: true,\n            bracketHeight: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underlineSuperscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        this.textElement.setFont(this.fontInfo);\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        const { family, size, weight, style } = this.fontInfo;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        this.superscriptElement.setFont(family, smallerFontSize, weight, style);\n        const options = this.renderOptions;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.lineWidth);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.renderOptions.dashed = dashed;\n        if (dash)\n            this.renderOptions.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracketHeight = this.renderOptions.bracketHeight * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        this.textElement.renderText(ctx, start.x, start.y);\n        // Get the width and height for the octave number\n        const mainWidth = this.textElement.getWidth();\n        const mainHeight = this.textElement.getHeight();\n        // Calculate the y position for the super script\n        const superY = start.y - mainHeight / 2.5;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);\n        // Determine width and height of the superscript\n        const superWidth = this.superscriptElement.getWidth();\n        const superHeight = this.superscriptElement.getHeight();\n        // Setup initial coordinates for the bracket line\n        let startX = start.x;\n        let lineY = superY;\n        const endX = stop.x + this.stop.getGlyphWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            startX += mainWidth + superWidth + 5;\n            lineY -= superHeight / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            lineY += superHeight / 2.7;\n            startX += mainWidth + 2;\n            if (!this.renderOptions.underlineSuperscript) {\n                startX += superWidth;\n            }\n        }\n        if (this.renderOptions.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);\n            // Ending Bracket\n            if (this.renderOptions.showBracket) {\n                Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(startX, lineY);\n            // Main line\n            ctx.lineTo(endX, lineY);\n            if (this.renderOptions.showBracket) {\n                // Ending bracket\n                ctx.lineTo(endX, lineY + bracketHeight);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            r: '\\uE523' /*dynamicRinforzando*/,\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.text = '';\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.text = '';\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph = TextDynamics.GLYPHS[letter];\n            if (!glyph)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            // Add the glyph\n            this.text += glyph;\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        this.renderText(this.checkContext(), x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getWidth());\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracketData) {\n        super();\n        this.vibrato = new Vibrato();\n        if (bracketData.start)\n            this.start = bracketData.start;\n        if (bracketData.stop)\n            this.stop = bracketData.stop;\n        this.line = 1;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.vibrato.setVibratoCode(code);\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.vibrato.setVibratoWidth(stopX - startX);\n        L('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);\n        this.vibrato.renderText(ctx, startX, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId === null) {\n            return;\n        }\n        if (elementId === '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {\n            ornament.setPosition(params.position);\n        }\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.topStave, params.bottomStave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.code)\n            vibratoBracket.setVibratoCode(params.options.code);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // vertical shift from stave line\n            yShift: 0.3 });\n        this.updateWidth();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const isSupportedType = Music.scaleTypes[this.keyParts.type];\n        if (!isSupportedType) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.rootIndexes[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote !== undefined) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote !== undefined) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// @author Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   yShift: px,         // vertical offset\n     *   leftShiftTicks: 0, // left horizontal offset expressed in ticks\n     *   rightShiftTicks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt === null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);\n        const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);\n        const hairpinOptions = {\n            height: options.height,\n            yShift: options.yShift,\n            leftShiftPx,\n            rightShiftPx,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n        new StaveHairpin({\n            firstNote: notes.firstNote,\n            lastNote: notes.lastNote,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpinOptions)\n            .setPosition(position)\n            .draw();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.renderOptions = {\n            height: 10,\n            yShift: 0,\n            leftShiftPx: 0,\n            rightShiftPx: 0,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        this.renderOptions = options;\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.lastNote = notes.lastNote;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.renderOptions.yShift + 20;\n        let yShift = params.firstY;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            yShift = params.firstY - params.staffHeight;\n        }\n        const leftShiftPx = this.renderOptions.leftShiftPx;\n        const rightShiftPx = this.renderOptions.rightShiftPx;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            firstX: start.x,\n            lastX: end.x,\n            firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staffHeight: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     * @param notes.firstNote the starting note of the slide\n     * @param notes.lastNote the ending note of the slide\n     * @param notes.firstIndexes specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.lastIndexes currently unused. we assume it's the same as firstIndexes.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let firstFret = notes.firstNote.getPositions()[0].fret;\n            if (typeof firstFret === 'string') {\n                firstFret = parseInt(firstFret, 10);\n            }\n            let lastFret = notes.lastNote.getPositions()[0].fret;\n            if (typeof lastFret === 'string') {\n                lastFret = parseInt(lastFret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(firstFret) || isNaN(lastFret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.renderOptions.cp1 = 11;\n        this.renderOptions.cp2 = 14;\n        this.renderOptions.yShift = 0.5;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const firstX = params.firstX; // pixel units\n        const firstYs = params.firstYs;\n        const lastX = params.lastX; // pixel units\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;\n            if (isNaN(slideY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(firstX, slideY + 3 * direction);\n            ctx.lineTo(lastX, slideY - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.text = '\\uE220' /*tremolo1*/;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const scale = note.getFontScale();\n        const ySpacing = Metrics.get(`Tremolo.spacing`) * stemDirection * scale;\n        const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);\n        let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);\n        this.fontInfo.size = Metrics.get(`Tremolo.fontSize`) * scale;\n        for (let i = 0; i < this.num; ++i) {\n            this.renderText(ctx, x, y);\n            y += ySpacing;\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","import { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Metrics, MetricsDefaults } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class Flow {\n    static get BUILD() {\n        return {\n            /** version number. */\n            VERSION: VERSION,\n            /** git commit ID that this library was built from. */\n            ID: ID,\n            /** The date when this library was compiled. */\n            DATE: DATE,\n        };\n    }\n    /**\n     * Examples:\n     * ```\n     * Vex.Flow.setMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\n     * ```\n     *\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\n     * 'Bravura', 'Gonville', 'Custom'.\n     *\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\n     * which includes a single music font. Calling this method is unnecessary.\n     *\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\n     * In this case, the default music font stack is empty.\n     * Example:\n     * ```\n     * await Vex.Flow.fetchMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Petaluma');\n     * ... (do VexFlow stuff) ...\n     * ```\n     * See `demos/fonts/` for more examples.\n     *\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\n     */\n    static setMusicFont(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        MetricsDefaults.fontFamily = fontNames.join(',');\n    }\n    static getMusicFont() {\n        return Metrics.get('fontFamily').split(',');\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get UNISON() {\n        return Tables.UNISON;\n    }\n    static set UNISON(unison) {\n        Tables.UNISON = unison;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.GlyphNote = GlyphNote;\nFlow.Glyphs = Glyphs;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nFlow.SymbolModifiers = SymbolModifiers;\nFlow.CurvePosition = CurvePosition;\nFlow.FontWeight = FontWeight;\nFlow.FontStyle = FontStyle;\nFlow.ModifierPosition = ModifierPosition;\nFlow.RendererBackends = RendererBackends;\nFlow.RendererLineEndType = RendererLineEndType;\nFlow.BarlineType = BarlineType;\nFlow.StaveModifierPosition = StaveModifierPosition;\nFlow.VoltaType = VoltaType;\nFlow.TextBracketPosition = TextBracketPosition;\nFlow.TextJustification = TextJustification;\nFlow.VoiceMode = VoiceMode;\n","export const VERSION = '5.0.0-alpha.3';\nexport const ID = 'be773cdcf2d021c3011642a3ce09829188a4b63f';\nexport const DATE = '2023-10-03T22:12:18.099Z';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Utility methods used by the rest of the VexFlow codebase.\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\nexport class Vex {\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\n    //   arr.forEach(callbackFn);\n    // }\n    /**\n     * Take `arr` and return a new list consisting of the sorted, unique,\n     * contents of arr. Does not modify `arr`.\n     */\n    // eslint-disable-next-line\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    /** Check if array `arr` contains `obj`. */\n    // eslint-disable-next-line\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Get the 2D Canvas context from DOM element with id `canvasId`.\n    static getCanvasContext(canvasId) {\n        if (!canvasId) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasId);\n        }\n        const canvas = document.getElementById(canvasId);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n    // eslint-disable-next-line\n    static benchmark(s, f) {\n        const startTime = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - startTime;\n        log(s, elapsed + 'ms');\n    }\n    // Get stack trace.\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// vexflow.ts is the entry point for the build output file vexflow.js.\n// It statically bundles all the music engraving fonts, and sets the music font stack to:\n// Flow.setMusicFont('Bravura', 'Roboto Slab');\n// The webpack config inside Gruntfile.js sets the mode to 'production' to produce a minified build.\nimport { Flow } from '../src/flow';\nFlow.setMusicFont('Bravura', 'Roboto Slab');\n// Re-export all exports from index.ts.\nexport * from '../src/index';\n// Also collect all exports into a default export for CJS projects.\nexport * as default from '../src/index';\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isAccidental","Category","Accidental","isAnnotation","Annotation","isBarline","Barline","isDot","Dot","isGraceNote","GraceNote","isGraceNoteGroup","GraceNoteGroup","isNote","Note","isRenderContext","RenderContext","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","warn","err","stack","midLine","a","b","n","parseInt","prefix","text","upperFirst","s","charAt","toUpperCase","normalizeAngle","Math","PI","sumArray","arr","reduce","_a","_Fraction_fractionA","_Fraction_fractionB","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","Fraction","GCD","Number","isNaN","t","LCM","LCMM","length","shift","numerator","denominator","set","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","copy","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","toMixedString","q","parse","str","i","split","Metrics","getFontInfo","family","size","weight","style","defaultValue","keyParts","lastKeyPart","pop","curr","MetricsDefaults","retVal","keyPart","fontFamily","fontSize","fontScale","fontWeight","fontStyle","cautionary","grace","noteheadAccidentalPadding","leftPadding","accidentalSpacing","Bend","ChordSymbol","spacing","subscriptOffset","superscriptOffset","superSubRatio","FretHandFinger","GraceTabNote","NoteHead","minPadding","PedalMarking","Repetition","offsetX","offsetY","coda","segno","Stave","padding","endPaddingMax","endPaddingMin","unalignedNotePadding","StaveConnector","StaveLine","StaveSection","StaveTempo","glyph","name","StaveText","StaveTie","StringNumber","verticalPadding","stemPadding","rightPadding","Stroke","TabSlide","TabTie","TextBracket","TextNote","Tremolo","Volta","BoundingBox","that","y","w","h","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","newX","newY","newW","max","newH","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Font","convertSizeToPixelValue","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","convertSizeToPointValue","validate","fromCSSString","NORMAL","cssFontShorthand","document","createElement","font","toCSSString","fontInfo","st","trim","wt","sz","scaleSize","scaleFactor","isBold","parsedWeight","isItalic","ITALIC","loadWebFont","fontName","woffURL","fontFace","FontFace","load","fonts","loadWebFonts","fontNames","allFiles","WEB_FONT_FILES","keys","host","WEB_FONT_HOST","fontPath","px","em","in","mm","cm","Academico","Bravura","BravuraText","GonvilleSmufl","Gootville","GootvilleText","Leland","LelandText","Petaluma","MuseJazz","MuseJazzText","FinaleAsh","FinaleAshText","FinaleJazz","FinaleJazzText","FinaleBroadway","FinaleBroadwayText","FinaleMaestro","FinaleMaestroText","_Registry_defaultRegistry","__classPrivateFieldSet","Index","id","type","class","Registry","getDefaultRegistry","enableDefaultRegistry","registry","disableDefaultRegistry","index","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","_c","getElementsByAttribute","attribute","indexAttr","indexAttrVal","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","_Element_context","_Element_attrs","_Element_fontInfo","_Element_fontScale","_Element_text","_Element_metricsValid","_Element_textMetrics","_Element_height","_Element_width","_Element_txtCanvas","Element","newID","ID","children","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","width","xShift","yShift","rendered","addChildElement","child","push","getCategory","setStyle","setGroupStyle","forEach","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","indexOf","addClass","removeClass","splice","isRendered","setRendered","getAttributes","getSVGElement","suffix","element","oldID","getBoundingBox","textMetrics","height","getContext","setContext","setFont","defaultTextFont","fontIsObject","fontIsString","sizeWeightStyleAreUndefined","assign","getFont","setFontSize","getFontSize","getFontScale","fontSizeInPoints","fontSizeInPixels","getWidth","measureText","setWidth","setYShift","getYShift","setXShift","getXShift","setText","getText","renderText","ctx","xPos","yPos","fillText","txtCanvas","getTextMetrics","getHeight","setOriginX","bbox","setOriginY","setOrigin","WeakMap","_Modifier_spacingFromNextModifier","_Modifier_modifierContext","ModifierPosition","Glyphs","Modifier","Position","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","LEFT","right","RIGHT","textLine","position","reset","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","checkModifierContext","setModifierContext","c","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","tickContext","getTickContext","metrics","getMetrics","stave","getStave","subNoteXOffset","modLeftPx","modRightPx","subNote","subTickContext","setStave","setXOffset","Music","NUM_TONES","canonicalNotes","roots","rootValues","rootIndexes","diatonicIntervals","diatonicAccidentals","unison","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","rootIndex","intVal","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","parts","rootValue","multiplier","reverseInterval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","scale","noteLocation","scaleMap","rootName","noteName","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","lineShift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","CN","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","X","bs","bss","bbs","ashs","afhf","articulations","betweenLines","av","aboveCode","belowCode","ao","ah","am","ornaments","mordent","mordentInverted","turn","turnInverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","Tables","currentMusicFont","MUSIC_FONT_STACK","clefProperties","clef","keyProperties","keyOctaveGlyph","params","options","octaveShift","duration","sanitizeDuration","pieces","intValue","glyphName","codeNoteHead","displaced","integerToNote","integer","textWidth","articulationCodes","artic","accidentalCodes","ornamentCodes","ornament","spec","keySpec","notes","accList","getKeySignatures","hasKeySignature","durationNumber","durationToFraction","durationToNumber","durationToTicks","ticks","null","UNISON","SOFTMAX_FACTOR","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RENDER_PRECISION_PLACES","durationCodes","stem","beamCount","stemBeamExtension","codeFlagUp","NOTATION_FONT_SCALE","TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalColumnsTable","secondOnBottom","spacedOutTetrachord","spacedOutPentachord","verySpacedOutPentachord","spacedOutHexachord","verySpacedOutHexachord","unicode","sharp","flat","natural","triangle","degrees","circle","validTypes","ci","cx","sf","sb","sq","tu","td","TIME4_4","numBeats","beatValue","resolution","_Accidental_checkCollision","AnnotationHorizontalJustify","AnnotationVerticalJustify","L","DEBUG","format","leftShift","additionalPadding","accidentalLinePositionsAndSpaceNeeds","prevNote","extraXSpaceNeededForLeftDisplacedNotehead","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","round","extraXSpaceNeeded","spacingBetweenStaveLines","sort","staveLineAccidentalLayoutMetrics","maxExtraXSpaceNeeded","accidentalLinePositionAndSpaceNeeds","accidentalType","priorLineMetric","currentLineMetric","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","applyAccidentals","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getModifiers","modifier","addModifier","getGraceNotes","setAsCautionary","start","getModifierStartXY","accX","accY","clearance","clearanceRequired","collision","Stem","UP","DOWN","WIDTH","HEIGHT","_d","_e","_f","_g","stemUpYOffset","stemDownYOffset","stemUpYBaseOffset","stemDownYBaseOffset","xBegin","xEnd","yTop","yBottom","stemExtension","stemDirection","hide","isStemlet","stemletHeight","renderHeightAdjustment","setOptions","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","yOffset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stemX","stemY","yBaseOffset","stemletYOffset","openGroup","pointerBBox","beginPath","moveTo","lineTo","stroke","closeGroup","minAnnotationPadding","annotations","leftWidth","rightWidth","maxLeftGlyphWidth","maxRightGlyphWidth","annotation","verticalSpaceNeeded","glyphWidth","getGlyphWidth","horizontalJustification","hasStem","getStemDirection","lines","renderOptions","drawStem","getStem","getNoteType","getNumLines","verticalJustification","VerticalJustify","TOP","noteLine","getLineNumber","leastString","topTextLine","BOTTOM","greatestString","curBottom","rightOverlap","rightShift","leftOverlap","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","textHeight","getStemX","stemExt","checkStave","checkStem","getYs","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","getTopY","stemTipY","stemBaseY","getBottomY","getInitialOffset","isOnStemTip","Articulation","maxGlyphWidth","getIncrement","articulation","increment","curTop","maxWidth","articWidth","overlap","easyScoreHook","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","heightShift","codePointAt","setBetweenLines","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","INITIAL_OFFSET","offsetDirection","articLine","snappedLine","snapLineToStaff","drawDot","color","arc","closePath","fill","_Tickable_preFormatted","_Tickable_postFormatted","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolModifiers","Tickable","intrinsicTicks","tickMultiplier","modifiers","tupletStack","alignCenter","centerXShift","ignoreTicks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","flag","modifierContext","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","getGlyphProps","codeHead","plotMetrics","xStart","leftDisplacedHeadPx","xPre1","xAbs","xPost1","notePx","xPost2","rightDisplacedHeadPx","xFreedomRight","xWidth","x1","x2","yy","spaceDeviation","parseDuration","durationString","dots","parseNoteStruct","noteStruct","durationProps","customTypes","currentTicks","parsedNoteStruct","JSON","stringify","keyProps","noteType","durationOverride","glyphProps","customGlyphs","playNote","annotationSpacing","strokePx","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getDuration","isDotted","getModifiersByType","getBeam","beam","checkBeam","hasBeam","setBeam","signature","filter","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","parentheses","getMembers","getState","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifier","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","typeString","single","SINGLE","double","DOUBLE","end","END","repeatBegin","REPEAT_BEGIN","repeatEnd","REPEAT_END","repeatBoth","REPEAT_BOTH","none","NONE","thickness","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","doubleBar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dotX","dotRadius","dotY","BarNote","barline","bends","lastWidth","stringPos","phrase","tap","lineStyle","bendWidth","releaseWidth","updateWidth","setTap","getTextHeight","totalWidth","additionalWidth","drawWidth","lowestY","bendHeight","annotationY","renderBend","cpX","cpY","quadraticCurveTo","renderRelease","renderArrowHead","yBase","renderX","lastBend","lastBendDrawWidth","lastDrawnWidth","ChordSymbolBlock","symbolModifier","vAlign","isSuperscript","SUPERSCRIPT","isSubscript","SUBSCRIPT","spacingBetweenBlocks","symbols","symbol","lineSpaces","j","symbolBlocks","sup","sub","prev","getVertical","getReportWidth","getHorizontal","horizontal","vertical","reportWidth","setReportWidth","getSymbolBlock","symbolBlock","smallerFontSize","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","glyphs","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","stemBase","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","over","symbolModifiers","getDots","buildAndAttach","all","dot","dotList","maxShiftMap","noteId","dotShift","lastLine","lastNote","prevDottedSpace","halfShiftY","dotShiftY","radius","setDotShiftY","forceFlagRight","nums","numsList","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","numShift","numWidth","fingerings","fingeringString","number","Fingering","fingering","finger","setFretHandFinger","xOffset","getFretHandFinger","setOffsetX","setOffsetY","customGlyph","ledger","customGlyphCode","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","getYForNote","flagStyle","setStem","buildStem","buildFlag","hasFlag","flagCode","String","fromCodePoint","getBaseCustomNoteHeadGlyphProps","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","frac","beamIsUndefined","setStemDirection","getCenterGlyphX","flagHeight","stemExtensionOverride","setStemLength","stemOptions","_StaveNote_noteHeads","_StaveNote_sortedKeyProps","shiftRestVertical","rest","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","LEDGER_LINE_OFFSET","minNoteheadPadding","notesList","minL","stemMax","stemMin","maxL","isrest","voiceShift","getVoiceShiftWidth","noteU","noteM","noteL","voiceXShift","lineSpacing","lineDiff","noteUHead","noteLHead","centerRest","ledgerLineStyle","useDefaultHeadX","calculateKeyProps","autoStem","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","calcNoteDisplacements","noteProps","notehead","calculateOptimalStemDirection","getNoteHeadBounds","noteStemHeight","flagX","flagY","bbFlag","resultLine","thisLine","val","isChord","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","restShift","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","getFlagStyle","noteHeads","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","Infinity","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","minX","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","drawModifiers","noteheadParam","noteheadStyle","hasNoBeam","drawFlag","drawNoteHeads","superStemExtension","midLineDistance","linesOverOctaveFromMidLine","spacingBetweenLines","shouldRenderStem","setNotes","cp1","cp2","textShiftX","firstXShift","lastXShift","tieSpacing","firstNote","firstIndexes","lastIndexes","isPartial","renderTie","firstYs","lastYs","lastX","firstX","firstY","lastY","topControlPointY","bottomControlPointY","renderTieText","centerX","getNotes","getTieStartX","getTieEndX","createHammeron","createPulloff","VoiceMode","Voice","Mode","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","expTicksUsed","reCalculateExpTicksUsed","pow","softmax","tickValue","v","exp","addTickable","addTickables","gracenoteGroups","groupList","gracenoteGroup","isStavenote","formatWidth","groupShift","graceNotes","showSlur","slur","slurYShift","beams","formatter","Formatter","joinVoices","getMinTotalWidth","beamNotes","Beam","beamWidth","partialBeamLength","graceNote","TieClass","NoteSubGroup","groups","group","TickContext","getNextContext","tContext","contexts","tContexts","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","tickablesByVoice","totalLeftPx","totalRightPx","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","tick","Ornament","ornamentNoteTransition","ornamentAttack","ornamentAlignWithNoteHead","ornamentRelease","ornamentLeft","ornamentRight","ornamentYShift","ornamentArticulation","delayed","accidentalLowerPadding","accidentalUpperPadding","adjustForStemDirection","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","glyphX","glyphY","delayXShift","startX","nextContext","charCodeAt","Parenthesis","parenthesis","isHTMLCanvas","global","HTMLCanvasElement","toDataURL","isHTMLDiv","HTMLDivElement","appendChild","CanvasContext","CANVAS_BROWSER_SIZE_LIMIT","sanitizeCanvasDims","limit","context2D","curTransfrom","getTransform","canvas","clearRect","cls","attrs","openRotation","angleDegrees","translate","rotate","closeRotation","setTransform","setBackgroundFillStyle","blur","sqrt","setLineCap","capType","lineCap","setLineDash","dash","resize","devicePixelRatio","dpr","rect","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","_SVGContext_instances","_SVGContext_getShadowStyle","ATTRIBUTES_TO_IGNORE","path","TWO_PI","SVGContext","precision","backgroundFillStyle","fontCSSString","svg","create","parent","pen","NaN","defaultFontAttributes","scaleX","scaleY","attributes","groupAttributes","applyAttributes","shadowAttributes","stateStack","svgElementType","createElementNS","lineDash","visibleWidth","visibleHeight","setViewBox","viewBoxOrMinX","minY","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","y1","y2","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","sweep","measureTextElement","txt","textContent","savedState","fontAttributes","RendererBackends","RendererLineEndType","WeakSet","sa","Renderer","buildContext","elementId","backend","background","renderer","lastContext","getCanvasContext","Backends","CANVAS","getSVGContext","SVG","drawDashedLine","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","arg0","arg1","maybeElement","willReadFrequently","LineEndType","extraXSpaceForDisplacedNotehead","glyphLine","numXShift","stringNumber","stemOffset","dashed","leg","drawCircle","setLineEndType","setStringNumber","setLastNote","setDashed","setDrawCircle","len","pattern","strokes","strokeList","string","getPositions","strokeShift","allVoices","addEndNote","noteEnd","yPositions","arrow","arrowY","textY","Type","BRUSH_DOWN","ROLL_DOWN","RASQUEDO_DOWN","BRUSH_UP","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","lineGlyph","el","Vibrato","vibratos","vibrato","setVibratoWidth","items","setVibratoCode","vx","vy","ModifierContext","members","formatted","member","getLeftShift","Clef","types","gClef","fClef","cClef","unpitchedPercussionClef1","sixStringTabClef","tab","gClef8va","fClef8va","gClef8vb","fClef8vb","getPoint","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","paddingForced","convertToGlyph","acc","nextAcc","prevGlyph","cancelKey","convertToCancelAccList","cancelAccList","differentTypes","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","alterKey","convertToAlterAccList","firstAccidentalType","getEndClef","getClef","symbolType","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSegnoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","drawCoda","textX","getVerticalBarWidth","section","drawRect","setStaveSection","headroom","_StaveTempo_durationToCode","TextJustification","VoltaType","tempo","shiftY","setTempo","shiftX","bpm","GLYPHS","mordentUpper","mordentLower","p","z","pedalOpen","pedalClose","caesuraStraight","caesuraCurved","breath","superscript","subscript","smooth","justification","Justification","getBottomLineY","label","vertHeight","BEGIN_END","TimeSignature","timeSpec","customPadding","validateArgs","isNumeric","topStartX","botStartX","topText","botText","topLine","bottomLine","setTimeSig","getTimeSigCode","smallSig","timeSigCommon","timeSigCutCommon","timeSigPlusSmall","timeSigPlus","timeSigMinus","timeSigParensLeftSmall","timeSigParensLeft","timeSigParensRightSmall","timeSigParensRight","makeTimeSignatureGlyph","topDigits","botDigits","topWidth","botWidth","numbers","test","assertIsValidTimeSig","getTimeSpec","getIsNumeric","setIsNumeric","drawAt","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","defaultPadding","endX","measure","endClef","verticalBarWidth","numLines","leftBar","rightBar","spacingBetweenLinesPx","spaceAboveStaffLn","spaceBelowStaffLn","topTextPosition","bottomTextPosition","lineConfig","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","visible","setNoteStartX","getNoteEndX","setNumLines","mod","setMeasure","getMeasure","getModifierXShift","begBarline","setRepetitionType","setVoltaType","setSection","staveSection","setStaveText","getLineForY","getYForGlyphs","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","getConfigForLines","setConfigForLine","lineNumber","setConfigForLines","linesConfiguration","formatBegModifiers","staves","adjustCategoryStartX","minStartX","adjustX","allModifiers","bAdjust","maxX","drawBoldDoubleLine","topX","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","topStave","bottomStave","texts","newType","values","textElement","SINGLE_RIGHT","THIN_DOUBLE","attachmentHeight","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","SimpleFormat","paddingBetween","accumulator","plotDebugging","stavePadding","contextGaps","gaps","gap","totalCost","toFixed","total","FormatAndDraw","autoBeam","alignRests","applyAndGetBeams","formatToStave","FormatAndDrawTab","tabstave","tabnotes","opts","notevoice","tabvoice","AlignRestsToNotes","alignAllNotes","alignTuplets","currTickable","prevTickable","formatterOptions","globalSoftmax","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","array","list","modifierContexts","lossHistory","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","tickToContextMap","Map","integerTicks","staveTickToContextMap","newContext","makeContext","addToContext","tickList","createContexts","contextArray","getTickContexts","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","tickWidth","paddingMax","paddingMin","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","optionsParam","TupletLocation","Tuplet","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","numNotes","bracketed","some","ratioed","setTupletLocation","location","resolveGlyphs","attach","detach","setBracketed","setRatioed","setNotesOccupied","fromCharCode","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nestedTupletYOffset","yPosition","modLines","modY","lineCheck","nn","bottomY","notationStartX","_Beam_stemDirection","_Beam_ticks","_Beam_yShift","_Beam_breakOnIndexes","_Beam_beamCount","_Beam_unbeamable","_Beam_forcedPartialDirections","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_RIGHT","BEAM_BOTH","getDefaultBeamGroups","timeSig","beatTotal","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","memo","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beamRests","breaksOnFirstOrLastRest","beamMiddleOnly","breakOnStemChange","maintainStemDirections","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","showStemlets","secondaryBreaks","secondaryBreakTicks","flatBeams","flatBeamOffset","slope","stemWeight","maxSlope","minSlope","slopeIterations","slopeCost","stemletExtension","minFlatBeamOffset","breakSecondaryAt","setPartialBeamSideAt","side","unsetPartialBeamSideAt","getSlopeY","calculateSlope","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","crossStemExtension","totalBeamWidth","lookupBeamDirection","nextTick","forcedBeamDirection","lookupDuration","prevNoteGetsBeam","nextNoteGetsBeam","noteGetsBeam","getBeamLines","tickOfDuration","beamStarted","beamLines","currentBeam","previousShouldBreak","tickTally","shouldBreak","beamAlone","beamDirection","lastBeam","drawStems","drawBeamLines","validBeamDurations","beamThickness","beamLine","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","Crescendo","extendLeft","extendRight","decrescendo","setHeight","setDecrescendo","decresc","beginX","halfHeight","reverse","renderHairpin","CurvePosition","Curve","nearHead","NEAR_HEAD","nearTop","NEAR_TOP","from","to","positionEnd","invert","cps","renderCurve","cp0x","cp0y","controlPointSpacing","metric","endMetric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","LINE","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","setId","commaSeparatedRegex","setClass","defaults","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","setGlyph","slash","ret","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","noteHeadWidth","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beamSlope","beamAngle","atan","iPointOnBeam","slashAngle","protrusionStemDeltaX","protrusionStemDeltaY","protrusionBeamDeltaX","protrusionBeamDeltaY","stem0X","KeySigNote","_MultiMeasureRest_hasPaddingLeft","_MultiMeasureRest_hasPaddingRight","_MultiMeasureRest_hasLineThickness","_MultiMeasureRest_hasSymbolSpacing","MultiMeasureRest","numberOfMeasures","xs","numberGlyphPoint","digit","lineThickness","symbolSpacing","useSymbols","showNumber","numberLine","serifThickness","semibreveRestGlyphScale","getXs","drawLine","drawSymbols","n4","n2","n1","elMiddle","elTop","yMiddle","drawPedalGlyph","createSustain","createSostenuto","pedal","MIXED","setCustomText","createUnaCorda","TEXT","customDepressText","customReleaseText","bracketHeight","textMarginRight","bracketLineWidth","depress","release","drawBracketed","prevX","prevY","isPedalDepressed","nextNoteIsSame","prevNoteIsSame","drawText","pedalDepress","pedalRelease","mixed","CODES","RepeatNote","drawArrowHead","roundedEnd","drawStartArrow","drawEndArrow","arrowheadLength","arrowheadAngle","textPositionVertical","TextVerticalPosition","textJustification","applyLineStyle","applyFontStyle","drawArrowLine","pt1","pt2","bothArrows","distance","ratio","endY","startY","lineAngle","angle1","angle2","bottomX","startPosition","endPosition","firstIndex","lastIndex","upwardsSlope","noteheadWidth","verticalPosition","System","partStaves","partStaveInfos","partVoices","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","getStaves","getVoices","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","addVoices","optionsDetails","debugNoteMetricsYs","part","fretElement","positions","ghost","drawDots","drawStemThroughStave","setGhost","tabToElement","fret","getStemY","stemDownLine","stemStartLine","drawStemThrough","stemThrough","unusedStrings","stringsUsed","getUnusedStringGroups","stemLines","upStem","downStem","totalLines","strings","containsLastString","containsFirstString","lineYs","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tabX","renderStem","TabStave","addTabGlyph","TextBracketPosition","stop","superscriptElement","showBracket","underlineSuperscript","mainWidth","mainHeight","superY","superWidth","superHeight","lineY","TextDynamics","sequence","letter","TimeSigNote","VibratoBracket","bracketData","stopX","Factory","newFromElementId","renderQ","systems","initRenderer","staveSpace","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","chordSymbol","upperAccidental","lowerAccidental","numMeasures","multiMeasureRest","secondaryBeamBreaks","partialBeamDirections","entries","curve","tie","vibratoBracket","textBracket","system","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","StaveHairpin","FormatByTicksAndDraw","ppt","pixelsPerTick","leftShiftPx","leftShiftTicks","rightShiftPx","rightShiftTicks","hairpinOptions","setRenderOptions","hairpin","dis","staffHeight","CRESC","DECRESC","SLIDE_UP","SLIDE_DOWN","createSlideUp","createSlideDown","firstFret","lastFret","slideY","ySpacing","Tuning","names","standard","dagdad","dropd","standardBanjo","tuningString","tuningValues","setTuning","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","Flow","BUILD","VERSION","DATE","setMusicFont","getMusicFont","Vex","sortAndUnique","cmp","eq","newArr","last","contains","canvasId","benchmark","startTime","Date","getTime","stackTrace"],"sourceRoot":""}