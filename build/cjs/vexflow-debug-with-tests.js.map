{"version":3,"file":"vexflow-debug-with-tests.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;ACVO;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACFP;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACsC;AACA;AACN;AACE;AAC+D;AAC3D;AACtC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,+CAAQ;AACxC;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2CAAM;AAChD;AACA,kCAAkC,2CAAM;AACxC,kCAAkC,2CAAM,yCAAyC;AACjF;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAA6C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAgE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D,6BAA6B,2CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,yCAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAY;AACxC;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,wBAAwB,4DAAgB;AACxC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM;AAC/B,iCAAiC,2CAAM;AACvC;AACA;AACA,yBAAyB,2CAAM,mBAAmB;AAClD,yBAAyB,2CAAM;AAC/B,yBAAyB,2CAAM,mBAAmB;AAClD,iCAAiC,2CAAM;AACvC;AACA;AACA,YAAY,uDAAW;AACvB,iCAAiC,2CAAM;AACvC;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAO,2CAA2C,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC5cA;AACA;AAC8B;AAC0B;AAC1B;AACI;AACiC;AACtC;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kEAAkE;AAC5D;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,8DAA8D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,+CAAQ;AACxC;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,mCAAmC,uCAAI,sDAAsD,2CAAM;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uCAAI;AACjF;AACA;AACA,gBAAgB,qDAAS;AACzB;AACA;AACA;AACA,kEAAkE,2CAAM;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAe;AACpC;AACA;AACA,8DAA8D,2CAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA,sCAAsC,uCAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA,sCAAsC,uCAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uCAAI;AAC7E,8CAA8C,uDAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2CAAM;AAC7C,6CAA6C,uCAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2CAAM;AACnD,6CAA6C,uCAAI;AACjD;AACA;AACA,kEAAkE,2CAAM;AACxE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChRA;AACA;AACA;AACkC;AACI;AACR;AACI;AAC2D;AAClD;AAC3C;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA,QAAQ,eAAe,EAAE,+CAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAW,UAAU,uDAAW;AAC9D;AACP;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAS;AACtB;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACO;AACP;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAS;AACtB;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,2EAA2E,uCAAI;AAC/E,2DAA2D,uCAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,+CAAQ;AAC1C;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uCAAI;AACjF;AACA;AACA,gBAAgB,2DAAe;AAC/B;AACA;AACA,8DAA8D,2CAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,iCAAiC,+CAAQ;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2CAAM;AACnB;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,YAAY,2CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,OAAO,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrVA;AACA;AAC8B;AACwB;AACf;AACV;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,uCAAI;AACjC;AACA,eAAe,gDAAQ;AACvB;AACA,uBAAuB,sDAAW;AAClC,gBAAgB,eAAe;AAC/B;AACA,sBAAsB;AACtB;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,kDAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACoC;AACE;AACR;AACI;AACQ;AACqB;AACzB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,eAAe,uCAAI;AACnB;AACA,WAAW,uCAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACO,mBAAmB,6CAAO;AACjC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA;AACA,6CAA6C,+CAAQ;AACrD;AACA,oBAAoB,+CAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iCAAiC,+CAAQ;AACzC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,0CAA0C,2CAAM;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uFAAuF,+CAAQ;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAQ;AACrD;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iDAAiD,+CAAQ;AACzD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,2CAAM;AAC9D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uCAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,2CAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gEAAgE,uCAAI,QAAQ,mDAAc,UAAU,mDAAc;AAClH;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,8DAA8D,2CAAM;AACpE,sBAAsB,+CAAY;AAClC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wBAAwB,uDAAW;AACnC;AACA;AACA,6BAA6B,qDAAS;AACtC;AACA;AACA,8CAA8C,uCAAI,MAAM,uCAAI;AAC5D;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB,gDAAgD,IAAI;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB,8CAA8C,IAAI;AAC1F;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,kCAAkC;AAClC;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA,uCAAuC,uCAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uCAAI;AAClC;AACA;AACA,mCAAmC,uCAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uCAAI;AACvC;AACA;AACA,mCAAmC,uCAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B,2CAA2C,IAAI;AAC9F;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,kEAAkE,uCAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2CAAM,gCAAgC;AACxE,4CAA4C,2CAAM;AAClD,4CAA4C,2CAAM;AAClD,oCAAoC,2CAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uCAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACh1BA;AACA;AACoC;AACE;AACY;AACZ;AACtC;AACO,mBAAmB,+CAAQ;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,gBAAgB,qDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAAO,CAAC,gDAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6CAAO,CAAC,gDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+CAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,+CAAQ;AAC7D;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtOA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AAC8B;AACkB;AACJ;AACP;AACrC;AACA;AACA;AACA;AACO,4BAA4B,yDAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,mDAAY;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAY;AACxyBAAyB,uCAAI;AAC7B,8BAA8B,uCAAI;AAClC,0BAA0B,uCAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACN;AACQ;AACJ;AACsB;AAC3B;AAC7B;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO,+BAA+B,6CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,oEAAoE;AAC9D;AACP;AACA;AACA;AACA,CAAC,gEAAgE;AAC1D;AACP;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA;AACA;AACO,0BAA0B,+CAAQ;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uCAAI;AACnD;AACA;AACA,6CAA6C,uCAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD,oCAAoC,uCAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,iEAAiE,iBAAiB,MAAM;AACxF;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,8CAA8C,WAAW,UAAU;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+CAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,2CAAM;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrXA;AACA;AACA;AACkC;AACqC;AACrC;AACK;AACV;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,yDAAa;AACvC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAkE,EAAE,2CAAM;AAC1F;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2CAAM;AACpC,4BAA4B,2CAAM;AAClC;AACA,8BAA8B,2CAAM;AACpC,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA,8BAA8B,2CAAM;AACpC,4BAA4B,2CAAM;AAClC;AACA,8BAA8B,2CAAM;AACpC,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2CAAM,6BAA6B,2CAAM;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjJA;AACA;AACA;AAC8B;AACA;AACS;AACvC;AACO,uBAAuB,uCAAI;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,uCAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACc;AACL;AACV;AAC7B;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,uCAAI;AACnC;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACoC;AACG;AACD;AAC/B;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC,oBAAoB,6CAAO;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AACsC;AACsC;AACtC;AAC/B,kBAAkB,+CAAQ;AACjC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AAC8C;AAClB;AACsB;AAClB;AACE;AACJ;AACsB;AACpD;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8BAA8B;AACrE,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA,sDAAsD;AACtD;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA,qBAAqB,8CAAO;AAC5B,gBAAgB,8BAA8B;AAC9C;AACA,iFAAiF,UAAU,WAAW,EAAE;AACxG;AACA,oCAAoC,yCAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0CAA0C;AAC1C;AACA;AACA,kCAAkC,gBAAgB;AAClD,kCAAkC,4CAA4C;AAC9E;AACA,kDAAkD,uCAAI,MAAM,uCAAI;AAChE;AACA;AACA;AACA;AACA;AACA,wDAAwD,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,UAAU;AAClC,YAAY,qCAAG,0BAA0B,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,qDAAqD,+BAA+B,uDAAY,gBAAgB,2DAAc,sCAAsC,cAAc;AAClL,qBAAqB;AACrB;AACA;AACA;AACA,0BAA0B,2CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA,4BAA4B;AAC5B,kCAAkC,oDAAoD;AACtF;AACA;AACA;AACA,6BAA6B;AAC7B,kCAAkC,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChaA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AAC4C;AACd;AACQ;AACJ;AACK;AACgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,2CAAM;AAC9B;AACA,cAAc,+CAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,UAAU;AACnF;AACA,yEAAyE,yDAAyD,EAAE,UAAU;AAC9I;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,kCAAkC;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2CAAM;AACtC;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,4BAA4B,uCAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uCAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAI;AACnB;AACA;AACA;AACA,eAAe,uCAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC,uBAAuB,uCAAI,aAAa,uCAAI;AAC5C;AACA;AACA,+BAA+B,qDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1fvB;AACA;AACA;AACA;AAC0C;AACwD;AACpD;AACV;AACN;AACc;AACN;AACN;AACQ;AACA;AACU;AACV;AACA;AACA;AACU;AACR;AACU;AACE;AACR;AACR;AACQ;AACR;AACI;AACV;AACkB;AACV;AACA;AACF;AACQ;AACZ;AACE;AACE;AACM;AACE;AACR;AACM;AACA;AACV;AACkB;AACF;AAClB;AACK;AACrC;AACA;AACA;AACA,QAAQ,2CAAG;AACX;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,6BAA6B,YAAY,4BAA4B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY,6CAA6C,EAAE;AAC7G;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,gBAAgB,uCAAuC;AACvD;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAY;AAC5B,0BAA0B,gDAAQ;AAClC;AACA;AACA,0BAA0B,gDAAQ;AAClC;AACA;AACA,uBAAuB,gDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAA8E,2CAA2C;AAC3J,0BAA0B,0CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAA8E,2CAA2C;AAC3J,0BAA0B,gDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,eAAe;AACf,6BAA6B,+CAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA,0BAA0B,mDAAU;AACpC;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB,oEAA2B,mBAAmB,kEAAyB,SAAS;AACvI,+BAA+B,mDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE,gCAAgC,qDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB;AAC9D,6BAA6B,gDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4CAA4C;AAC9E,yBAAyB,wDAAY;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B;AACjE,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,iCAAiC,wDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA,mBAAmB,8DAAe;AAClC;AACA;AACA,4BAA4B,+CAAO;AACnC,qCAAqC,gEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,0BAA0B,0CAAK;AAC/B;AACA;AACA;AACA;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAS;AAC5B;AACA;AACA,kCAAkC,wBAAwB;AAC1D,2BAA2B,4CAAM;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAQ;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAc;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,2BAA2B,4CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY,6CAA6C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,mBAAmB,iDAAS;AAC5B;AACA;AACA,kCAAkC;AAClC;AACA,eAAe;AACf,0BAA0B,wDAAY;AACtC,sBAAsB,wDAAY;AAClC;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C,0BAA0B,wDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1f0C;AACwD;AACpD;AACV;AACN;AACA;AACc;AACI;AACuE;AACzF;AACQ;AACE;AACO;AACnB;AACY;AACJ;AACA;AACiB;AACb;AACF;AACY;AACV;AACA;AACN;AACM;AACU;AACJ;AACJ;AACI;AACJ;AACc;AACJ;AACE;AACtB;AACF;AACQ;AACQ;AACR;AACM;AACV;AACY;AACR;AACU;AAC6B;AACnC;AACV;AACsB;AACJ;AACJ;AACN;AAC+B;AAC/B;AACO;AACL;AACF;AACF;AACU;AAClB;AACgB;AACX;AACO;AACR;AACe;AACb;AACE;AACA;AACJ;AAC+B;AACnB;AACW;AACb;AACI;AACJ;AACR;AACF;AACA;AACY;AACV;AACc;AACP;AACpC;AACP;AACA;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA,gBAAgB,yCAAE;AAClB;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAa;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA,eAAe,4CAAM;AACrB;AACA;A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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAA8C;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,sBAAsB,oBAAoB,EAAE,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AChUA;AACA;AAC8B;AACA;AACQ;AACc;AACpB;AACkB;AAChB;AACU;AACM;AACqB;AACvC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0BAA0B;AACtE;AACA,YAAY,kDAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB,IAAI;AAClE;AACA,0CAA0C,6DAAe;AACzD,6BAA6B,qDAAW;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC,cAAc,2CAAM,gCAAgC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uCAAI;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8BAA8B,4EAA4E,SAAS,6EAA6E,OAAO,6BAA6B;AACpO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD,8EAA8E,iBAAiB;AAC/F;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B,0CAAK,CAAC,2CAAM,kBAAkB,0CAAK;AAC7D;AACA,yCAAyC,uCAAI;AAC7C;AACA;AACA,wCAAwC,gCAAgC;AACxE,6CAA6C,uCAAuC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,8BAA8B,0CAAK,CAAC,2CAAM,kBAAkB,0CAAK;AACjE;AACA,6BAA6B,0CAAK,CAAC,2CAAM,kBAAkB,0CAAK;AAChE;AACA,sCAAsC,uCAAI;AAC1C;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA,2DAA2D,6BAA6B;AACxF;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD,qCAAqC,2CAAM,mCAAmC;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2CAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,+CAAQ;AAC7B;AACA;AACA,qBAAqB,+CAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,oCAAoC,0CAAK;AACzC,0BAA0B,+CAAY;AACtC;AACA,yCAAyC,+CAAQ;AACjD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+CAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA,2CAA2C,6DAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,qDAAW;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,8CAA8C;AAC9D;AACA,6BAA6B,+CAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2CAAM;AACvC,iCAAiC,2CAAM;AACvC,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yCAAyC;AAClF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA,2EAA2E,yCAAK;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACn2BA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACuC;AACD;AACtC;AACO;AACP;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,oCAAoC,EAAE,IAAI,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe,GAAG,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzNA;AACA;AACA;AACwD;AACtB;AACK;AACD;AAC/B,6BAA6B,+CAAQ;AAC5C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAM;AACrC,iCAAiC,uDAAgB;AACjD,kDAAkD,2CAAM;AACxD;AACA,iCAAiC,uDAAgB;AACjD,+CAA+C,2CAAM;AACrD;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA,iDAAiD;AACjD;AACA;AACA,6BAA6B,+CAAQ;AACrC;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa,IAAI;AAC5C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ,gBAAgB;AAChD,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnJA;AACA;AACA;AACgD;AACK;AACf;AACtC;AACO,wBAAwB,yDAAa;AAC5C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AAC8B;AACS;AAChC,wBAAwB,uCAAI;AACnC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChoCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpiDAAiD;AACjD;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,gDAAgD;AAChD;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA,gDAAgD;AAChD;AACA,yCAAyC;AACzC;AACA,6CAA6C,YAAY;AACzD;AACA,oDAAoD,YAAY;AAChE;AACA,6CAA6C,YAAY;AACzD;AACA,gDAAgD,YAAY;AAC5D;AACA,uDAAuD,YAAY;AACnE;AACA,gDAAgwBAAwB;;;;;;;;;;;;;;;;;;;;ACnrMzB;AACwC;AACV;AACI;AACK;AACD;AAC/B,wBAAwB,iDAAS;AACxC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,2CAAM,qFAAqF;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uCAAI,qCAAqC,uCAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,4CAA4C,uCAAI;AAChD,wCAAwC,2CAAM;AAC9C,4CAA4C,uCAAI;AAChD,sCAAsC,uCAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACU;AACF;AACE;AACF;AACJ;AACA;AACkB;AACvB;AACG;AAChC;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACO,6BAA6B,+CAAQ;AAC5C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA,gCAAgC,uDAAW;AAC3C;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA,uGAAuG,iDAAS;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA,wBAAwB,2CAAM;AAC9B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iDAAS;AAC1C;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uDAAW;AAC3C,2CAA2C,+CAAQ,GAAG,2CAAM;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACM;AACG;AAChC,2BAA2B,6CAAO;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAI,YAAY,GAAG;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AAC6B;AACA;AACE;AACL;AACH;AACA;AACO;AACE;AACF;AACP;AACI;AACC;AACJ;AACF;AACM;AACF;AACA;AACH;AACA;AACvB;AAC4B;AACD;AACM;AACL;AACA;AACA;AACK;AACF;AACF;AACE;AACF;AACF;AACO;AACC;AACX;AACD;AACI;AACI;AACJ;AACG;AACL;AACM;AACJ;AACK;AACL;AACE;AACL;AACO;AACE;AACF;AACH;AACI;AACJ;AACM;AACH;AACF;AACD;AACD;AACE;AACN;AACS;AACD;AACL;AACG;AACJ;AACzB;AAC0B;AACC;AACA;AACF;AACK;AACC;AACJ;AACA;AACG;AACE;AACF;AACJ;AACD;AACA;AACG;AACL;AACvB;AACsB;AACI;AACO;AACT;AACF;;;;;;;;;;;;;;;;;ACzFtB;AACA;AACA;AACA;AACA;AACgC;AACM;AAC/B;AACP;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAK;AACrC;AACA,sBAAsB,+CAAY,0CAA0C,SAAS;AACrF;AACA,uFAAuF,yCAAK;AAC5F;AACA;AACA;AACA,6BAA6B,yCAAK;AAClC,wBAAwB,IAAI,yCAAK,eAAe;AAChD,+CAA+C,yCAAK;AACpD,6BAA6B,yCAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACmC;AACrC;AACK;AACN;AAC1B,2BAA2B,yDAAa;AAC/C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAqB;AAC9C,8BAA8B,2CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM;AAC3B,0BAA0B,6CAAO,CAAC,gDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAAM,cAAc,8CAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iEAAqB;AACjE;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtNA;AACA;AAC8C;AAChB;AACS;AAChC,yBAAyB,uCAAI;AACpC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,gBAAgB,eAAe;AAC/B,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACoC;AACG;AACQ;AACxC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,6CAAO;AACrC;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAO,sCAAsC,UAAU;AAC/D,eAAe,8CAAO,oCAAoC,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AACA;AACI;AAChB;AACc;AAChB;AACsB;AACA;AACJ;AACR;AACM;AACJ;AACM;AACX;AACI;AACI;AACP;AACpC;AACA;AACA;AACA;AACA,QAAQ,2CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAS,gBAAgB,iDAAQ;AACzC,QAAQ,sDAAW,gBAAgB,iDAAQ;AAC3C,QAAQ,qCAAG,gBAAgB,iDAAQ;AACnC,QAAQ,2DAAc,gBAAgB,iDAAQ;AAC9C,QAAQ,mDAAU,gBAAgB,iDAAQ;AAC1C,QAAQ,6CAAM,gBAAgB,iDAAQ;AACtC,QAAQ,2DAAc,gBAAgB,iDAAQ;AAC9C,QAAQ,uDAAY,gBAAgB,iDAAQ;AAC5C,QAAQ,wDAAY,gBAAgB,iDAAQ;AAC5C,QAAQ,uDAAY,gBAAgB,iDAAQ;AAC5C,QAAQ,+CAAQ,gBAAgB,iDAAQ;AACxC,QAAQ,mDAAU,gBAAgB,iDAAQ;AAC1C,QAAQ,qDAAW,gBAAgB,iDAAQ;AAC3C,QAAQ,uCAAI,gBAAgB,iDAAQ;AACpC,QAAQ,8CAAO,gBAAgB,iDAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAS,4BAA4B,iDAAQ;AACrD;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACoC;AACoB;AACtB;AACgB;AACjB;AAC1B,+BAA+B,6CAAO;AAC7C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,0FAA0F,2CAAM,4CAA4C;AAC5I;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mHAAmH,2CAAM,kEAAkE,2CAAM,gGAAgG;AAC9U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,uBAAuB,6CAAO;AAC9B;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAO;AACpC;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA,0BAA0B,6CAAO;AACjC;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iEAAqB;AACrE,yCAAyC,qDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1JA;AACA;AACsC;AACtC;AACO;AACP;AACA;AACA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CA;AACA;AACA;AACA,0BAA0B,+CAAY,uCAAuC,KAAK,IAAI,UAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,KAAK,IAAI,UAAU;AAC5F;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,UAAU;AACnF;AACA;AACA,sBAAsB,+CAAY,mCAAmC,MAAM,IAAI,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClXA;AACA;AACkC;AACQ;AACR;AACI;AACC;AACQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,+CAAQ;AAClC;AACA;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA,mBAAmB,2CAAM;AACzB;AACA,mBAAmB,2CAAM;AACzB;AACA,mBAAmB,2CAAM;AACzB;AACA;AACA,6BAA6B,2CAAM;AACnC;AACA,6BAA6B,2CAAM;AACnC,iDAAiD,WAAW,wBAAwB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,QAAQ,uDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,2CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,2BAA2B;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,sCAAsC;AACtC,uCAAuC;AACvC,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2CAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxfA;AACA;AAC4C;AACd;AACA;AACI;AACK;AACD;AACtC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,uCAAI;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,uCAAI;AAC7D;AACA;AACA;AACA,0BAA0B,uCAAI;AAC9B,QAAQ,8CAAO,kEAAkE,cAAc,cAAc,cAAc;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,yDAAyD,2CAAM,2BAA2B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uCAAI;AAC/C;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACF;AACJ;AACK;AACP;AACzB,2BAA2B,+CAAQ;AAC1C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,iDAAS;AACtC,yBAAyB,yCAAK;AAC9B;AACA;AACA,wBAAwB,2CAAM;AAC9B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACuE;AACnC;AACoB;AACtB;AACU;AACL;AACV;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,+CAAQ;AACtC;AACA;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,2CAA2C;AAC3C;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA,sCAAsC,uDAAgB;AACtD;AACA;AACA;AACA,2CAA2C,uDAAgB;AAC3D;AACA;AACA;AACA,2CAA2C,uDAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAgB;AACxC;AACA,4BAA4B,uDAAgB;AAC5C;AACA;AACA,4BAA4B,uDAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAQ;AACxC;AACA;AACA,gCAAgC,+CAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6CAAO;AAC1C,qCAAqC,2CAAM;AAC3C;AACA;AACA;AACA;AACA;AACA,mCAAmC,6CAAO;AAC1C,qCAAqC,2CAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAgB;AAC9C;AACA;AACA;AACA,8BAA8B,uDAAgB;AAC9C,qBAAqB,sDAAO;AAC5B;AACA,8BAA8B,uDAAgB;AAC9C,qBAAqB,yDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qDAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAgB,4BAA4B,uDAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxOA;AACA;AACA;AACwD;AACjB;AACvC;AACO,0BAA0B,+CAAQ;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD,iDAAiD,uDAAgB;AACjE,iDAAiD,uDAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAgB;AACxC;AACA;AACA;AACA,wBAAwB,uDAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,+CAAQ;AACtF,8BAA8B,+CAAQ;AACtC,kCAAkC;AAClC;AACA,mCAAmC,+CAAQ;AAC3C,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA;AACA;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AAC2C;AAC3C;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc;AACnE,kDAAkD,4BAA4B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACoC;AACF;AACK;AACI;AAC3C;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAO;AAC7B;AACA;AACA,kDAAkD,2CAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,6CAAO;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,2BAA2B,yEAAyE;AACpG;AACA;AACA;AACA;AACA;AACA,oIAAoI;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;;;;;;;;;;AClI9B;AACA;AACuC;AAChC;AACP;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACgD;AACN;AACI;AACR;AACU;AACzC;AACP;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAY,gDAAgD,aAAa;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAY;AACjC,8BAA8B,+CAAY;AAC1C;AACA,2DAA2D,0BAA0B;AACrF;AACA,8BAA8B,+CAAY;AAC1C;AACA,+BAA+B,yDAAa;AAC5C;AACA;AACA,qBAAqB,+CAAS;AAC9B,8BAA8B,+CAAY;AAC1C;AACA,+BAA+B,mDAAU;AACzC;AACA;AACA,0BAA0B,+CAAY,8CAA8C,QAAQ;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9HA;AACwC;AACD;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,iDAAS;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,mDAAmD;AACnD,yCAAyC,8CAA8C;AACvF;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAC4C;AACd;AACM;AACU;AACQ;AACE;AACT;AACD;AACJ;AACF;AACH;AACH;AACc;AACE;AACZ;AACtC;AACA;AACA;AACA;AACA,KAAK,kDAAO;AACZ,KAAK,uCAAI;AACT,KAAK,uDAAY;AACjB,KAAK,0DAAa;AAClB;AACA;AACA,KAAK,0DAAa;AAClB,KAAK,uDAAY;AACjB,KAAK,kDAAO;AACZ,KAAK,uCAAI;AACT;AACO,oBAAoB,6CAAO;AAClC;AACA,eAAe,iDAAQ;AACvB;AACA;AACA;AACA;AACA,eAAe,4CAAM,iCAAiC,4CAAM;AAC5D;AACA;AACA;AACA,eAAe,4CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,uCAAuC,+GAA+G,4CAAM,6HAA6H;AACzR,wBAAwB;AACxB,wCAAwC;AACxC;AACA;AACA,6BAA6B,kDAAO,wBAAwB,sDAAW,UAAU,sDAAW;AAC5F;AACA,gCAAgC,kDAAO,yBAAyB,sDAAW,UAAU,sDAAW;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAM;AAC3C;AACA;AACA,0DAA0D,4CAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mFAAmF,4CAAM,uBAAuB;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA,8BAA8B,iEAAqB;AACnD;AACA;AACA;AACA,oDAAoD,iEAAqB;AACzE;AACA;AACA;AACA;AACA,qCAAqC,sDAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAU;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,+CAAK;AACrC;AACA;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAU;AAC1C;AACA;AACA;AACA,6CAA6C;AAC7C,gCAAgC,iDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iEAAqB;AACxD;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B,EAAE,sDAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAqB;AAC5C;AACA,yBAAyB,iEAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,kDAAkD,uCAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iEAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAqB;AAC5C;AACA,0DAA0D,uDAAY;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iEAAqB;AAC1E;AACA;AACA;AACA;AACA,uBAAuB,iEAAqB;AAC5C;AACA,2DAA2D,0DAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,iEAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAqB;AAC5C;AACA,6BAA6B,uDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iEAAqB;AACxE;AACA;AACA,8BAA8B,iEAAqB;AACnD;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA,6CAA6C,iEAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAa;AAC1C;AACA;AACA;AACA,uDAAuD,iEAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iEAAqB;AACpE,+CAA+C,iEAAqB;AACpE;AACA;AACA,gEAAgE,sDAAW;AAC3E;AACA,0CAA0C,kDAAO,CAAC,sDAAW;AAC7D;AACA;AACA,0CAA0C,kDAAO,CAAC,sDAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,6BAA6B,sDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iEAAqB;AAC1E;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qDAAqD,iEAAqB;AAC1E;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wDAAwD,iEAAqB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,iDAAQ;AACrC;AACA,6BAA6B,iDAAQ;AACrC;AACA,6BAA6B,iDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iDAAiD,iEAAqB,QAAQ,iDAAQ;AACtF;AACA,2CAA2C,sDAAW;AACtD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,iDAAiD,iEAAqB,QAAQ,iDAAQ;AACtF;AACA,2CAA2C,sDAAW;AACtD;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;ACxsBA;AACA;AACA;AACuE;AACrC;AACK;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B,sBAAsB,yDAAa;AAC1C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAqrMA;AACA;AACoC;AACF;AACK;AACD;AACtC;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,6CAAO;AAC3C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,yBAAyB,2CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B,GAAG;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY,qDAAqD,UAAU;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACE;AACC;AACD;AAC/B,2BAA2B,6CAAO;AACzC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+CAAQ,gCAAgC,+CAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACF;AACa;AACR;AACD;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,6CAAO;AACtC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClyDAAyD,2CAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAiB;;;;;;;;;;;;;;;;;;;AC9Q/C;AACA;AACA;AACA;AACoC;AACG;AACN;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AAChD,4BAA4B,6CAAO;AAC1C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AAC4C;AACN;AACR;AACQ;AACR;AACkB;AACd;AACK;AACsB;AAC7D;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA,iFAAiF,uCAAI;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAO;AACrC;AACA;AACA;AACA;AACA;AACO,wBAAwB,yDAAa;AAC5C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4IAA4I,2CAAM;AAClJ;AACA;AACA,6IAA6I,2CAAM;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM;AAC/B;AACA;AACA;AACA,8FAA8F,gDAAQ;AACtG;AACA,kGAAkG,gDAAQ;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uCAAI;AAC9B,QAAQ,8CAAO,kEAAkE,cAAc,cAAc,cAAc;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,yDAAyD,2CAAM;AAC/D;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,uCAAI;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI,GAAG,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uCAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uCAAI,MAAM,uCAAI;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA,8BAA8B;AAC9B,0BAA0B,2CAAM;AAChC;AACA,0BAA0B,+CAAY,qDAAqD,IAAI;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,iBAAiB;AACjG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAW;AAC1C;AACA;AACA;AACA,SAAS;AACT,gBAAgB,gBAAgB;AAChC;AACA;AACA,wCAAwC,2CAAM;AAC9C,kDAAkD,uCAAI;AACtD;AACA;AACA;AACA,0FAA0F,qDAAW;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uCAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,4BAA4B,EAAE,+CAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uCAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uCAAI;AACjF;AACA;AACA,iGAAiG,uCAAI;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uCAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B,kBAAkB,QAAQ;AAC1B;AACA,kBAAkB,QAAQ;AAC1B,kBAAkB,cAAc;AAChC;AACA,kBAAkB,cAAc;AAChC,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB,UAAU,IAAI;AAC/C;AACA;AACA,oEAAoE,uCAAI;AACxE;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,kJAAkJ;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,4CAA4C,2CAAM;AAClD,sDAAsD,uCAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mBAAmB;AACxF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,8BAA8B,uCAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxhCA;AACA;AACgD;AACd;AACK;AAChC,yBAAyB,yDAAa;AAC7C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2CAAM;AAC3D;AACA;AACA;AACA;AACA;AACA,qDAAqD,2CAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAM;AAC9B;AACA,8DAA8D,2CAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/HA;AACA;AACgD;AACT;AAChC,2BAA2B,yDAAa;AAC/C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACoC;AACmC;AACrC;AACK;AAChC,yBAAyB,yDAAa;AAC7C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,iEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC,qFAAqF,2CAAM;AAC3F;AACA;AACA;AACA;AACA,wBAAwB,2CAAM;AAC9B,4BAA4B,UAAU;AACtC;AACA;AACA;AACA,wBAAwB,2CAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACuE;AACd;AAClB;AACD;AAC/B,wBAAwB,yDAAa;AAC5C;AACA,eAAe,gDAAQ;AACvB;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,+CAAQ;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iEAAqB;AACtC,iBAAiB,iEAAqB;AACtC;AACA,sCAAsC,iEAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iEAAqB;AACtC,iBAAiB,iEAAqB;AACtC;AACA,2CAA2C,wDAAiB;AAC5D;AACA;AACA,gDAAgD,wDAAiB;AACjE;AACA;AACA,sCAAsC,iEAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACoC;AACG;AACD;AAC/B,uBAAuB,6CAAO;AACrC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxLA;AACA;AACgD;AACT;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB,oBAAoB,yDAAa;AACxC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACoC;AACF;AACK;AACI;AAC3C;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO,mBAAmB,6CAAO;AACjC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA,eAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2CAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpKA;AACA;AACA;AACA;AACA;AACoC;AACF;AACJ;AACA;AACI;AACK;AACD;AAC/B,4BAA4B,uCAAI;AACvC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA,wBAAwB,6CAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA,wCAAwC,uCAAI;AAC5C;AACA,gFAAgF,2CAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uCAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,wBAAwB,uCAAI;AAC5B,0BAA0B,uCAAI,qBAAqB,uCAAI;AACvD,sBAAsB,+CAAY,2CAA2C,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uCAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uCAAI,+BAA+B,uCAAI;AACnE;AACA;AACA;AACA,8CAA8C,uCAAI;AAClD;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AACA;AACA;AACwD;AAClB;AACR;AACI;AACmC;AAC/B;AAC/B,2BAA2B,+CAAQ;AAC1C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA,2DAA2D,2CAAM;AACjE;AACA,4BAA4B,uDAAgB;AAC5C;AACA;AACA;AACA,iCAAiC,uDAAgB;AACjD;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD,gCAAgC,+CAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA,sCAAsC;AACtC;AACA;AACA,6BAA6B,+CAAQ;AACrC;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ,iBAAiB;AACjD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,0BAA0B;AAC1B,4BAA4B;AAC5B,mBAAmB,+CAAQ,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAQ,4BAA4B,+CAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uCAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA;AACA,4DAA4D,uCAAI;AAChE,8CAA8C,2CAAM;AACpD;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC,4CAA4C,2CAAM;AAClD;AACA;AACA,iBAAiB,+CAAQ;AACzB;AACA;AACA;AACA,4DAA4D,uCAAI;AAChE,8CAA8C,2CAAM;AACpD;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC,4CAA4C,2CAAM;AAClD;AACA;AACA,iBAAiB,+CAAQ;AACzB,0CAA0C,2CAAM;AAChD;AACA,iBAAiB,+CAAQ;AACzB,0CAA0C,2CAAM;AAChD;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAQ;AACxB;AACA;AACA,gBAAgB,+CAAQ;AACxB;AACA;AACA;AACA;AACA,qBAAqB,+CAAQ;AAC7B;AACA;AACA,oBAAoB,+CAAQ;AAC5B;AACA,qBAAqB,+CAAQ;AAC7B;AACA;AACA,oBAAoB,+CAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxPA;AACA;AACA;AACA;AACA;AACoC;AACE;AACJ;AACqC;AACjC;AAC/B,qBAAqB,+CAAQ;AACpC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA,wBAAwB,OAAO;AAC/B;AACA,yBAAyB;AACzB;AACA,qBAAqB,qDAAS;AAC9B;AACA,wBAAwB,cAAc;AACtC,yBAAyB;AACzB;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,SAAS;AACT;AACA;AACA,oDAAoD,eAAe;AACnE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA,uBAAuB,2CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,gBAAgB,kDAAM;AACtB;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY,mCAAmC,WAAW;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH;AACxH;AACA,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACqD;AACL;AACd;AAC4B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACO,yBAAyB,yDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2CAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,2BAA2B,uCAAI;AAC/B,yBAAyB,uCAAI;AAC7B,2BAA2B,6CAAU;AACrC,0BAA0B,4CAAS;AACnC;AACA,qCAAqC,sBAAsB;AAC3D,0CAA0C,iFAAiF;AAC3H;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6CAAM;AAC9C;AACA,qCAAqC,6CAAM;AAC3C;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE,GAAG,EAAE,WAAW,aAAa,eAAe,EAAE,IAAI,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA,wDAAwD,qBAAqB;AAC7E;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gDAAgD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAc;AAC3C,2BAA2B,qDAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,EAAE,IAAI,GAAG,QAAQ,EAAE,QAAQ,QAAQ,IAAI,EAAE,IAAI;AAC9E,6BAA6B,QAAQ,EAAE,QAAQ,QAAQ,IAAI,EAAE,GAAG;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,EAAE,IAAI,GAAG,QAAQ,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,sBAAsB,gBAAgB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB,4DAA4D;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB;AAC/E,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe,KAAK,SAAS;AACnE;AACA;;;;;;;;;;;;;;;;;;;;;;AChkBA;AACA;AAC4C;AACR;AACI;AACV;AACE;AACO;AACD;AACtC;AACA;AACA;AACA;AACA;AACO,qBAAqB,6CAAO;AACnC;AACA,eAAe,gDAAQ;AACvB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,qDAAqD,iLAAiL,cAAc,yBAAyB,YAAY,mDAAmD,0BAA0B;AACtW;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAyD,EAAE;AACpF;AACA;AACA;AACA,yBAAyB;AACzB,yDAAyD,WAAW;AACpE,iDAAiD,aAAa;AAC9D,UAAU,EAAE;AACZ;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D,gGAAgG,wFAAwF;AACxL,gDAAgD,+EAA+E,aAAa,uBAAuB;AACnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yCAAK;AACrD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mEAAmE,yCAAK;AACxE;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAW;AAC1C,QAAQ,yCAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,uCAAI;AAC5B,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;AC7MA;AACsC;AACJ;AACI;AACtC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;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,wDAAwD;AACpE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,kEAAkE;AAC9E;AACA;AACA;AACA;AACA,KAAK;AACL,UAAU,yDAAyD;AACnE,YAAY,iGAAiG;AAC7G,aAAa,sDAAsD;AACnE,aAAa,sDAAsD;AACnE,aAAa,2GAA2G;AACxH,cAAc,2DAA2D;AACzE,cAAc,2DAA2D;AACzE,aAAa,yGAAyG;AACtH,cAAc,0DAA0D;AACxE,cAAc,0DAA0D;AACxE;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe,8DAA8D;AAC7E,eAAe,8DAA8D;AAC7E,YAAY,sDAAsD;AAClE,UAAU,wDAAwD;AAClE,YAAY,yDAAyD;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2EAA2E;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C,yCAAyC,IAAI;AAC7C,2CAA2C,IAAI;AAC/C,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,SAAS;AACxG;AACA;AACA;AACA,wBAAwB;AACxB;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,kFAAkF,eAAe;AACnI;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,8EAA8E,QAAQ;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,oDAAoD,QAAQ;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,gDAAgD,KAAK;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,SAAS;AACnG;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzeAAe,2CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACv5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACE;AACR;AACA;AACkB;AACd;AACY;AACC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACO,sBAAsB,yDAAa;AAC1C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA,2DAA2D;AAC3D;AACA,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAAM,6BAA6B;AACrD,0BAA0B,uCAAI;AAC9B,QAAQ,8CAAO,kEAAkE,cAAc,cAAc,cAAc;AAC3H;AACA;AACA;AACA;AACA;AACA,kCAAkC,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uCAAI,kCAAkC,uCAAI;AACjF;AACA;AACA;AACA;AACA,qBAAqB,6CAAO;AAC5B;AACA;AACA;AACA;AACA,qBAAqB,6CAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,yBAAyB,+CAAQ;AACjC,wBAAwB;AACxB;AACA,8BAA8B,+CAAQ;AACtC,gCAAgC;AAChC;AACA,8BAA8B,+CAAQ,gCAAgC,+CAAQ;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uCAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mCAAmC,UAAU,IAAI;AACjE;AACA;AACA;AACA;AACA;AACA,sDAAsD,uCAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAK;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChXA;AACA;AACA;AACA;AACA;AACkC;AACK;AACD;AAC/B,uBAAuB,2CAAM;AACpC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sCAAsC;AACtC;AACA,oCAAoC;AACpC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChGA;AACgC;AACO;AAChC,uBAAuB,yCAAK;AACnC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,2CAA2C,4DAA4D;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACsC;AACC;AAChC,qBAAqB,+CAAQ;AACpC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACoC;AACN;AACQ;AACJ;AACK;AACI;AAC3C;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA,CAAC,kDAAkD;AAC5C,0BAA0B,6CAAO;AACxC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8EAA8E;AAChG;AACA;AACA;AACA,+BAA+B,6CAAO;AACtC;AACA;AACA,sCAAsC,6CAAO;AAC7C;AACA,gCAAgC,uCAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA,gCAAgC,uCAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,2CAAM;AAChF;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA,wBAAwB;AACxB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAQ;AACpB;AACA;AACA,gBAAgB,+CAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrKA;AACA;AAC8B;AACI;AACK;AACa;AACpD;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,uCAAI;AACtC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe,2CAAM,2BAA2B;AAC7F,6BAA6B,8CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACoC;AACN;AACA;AACI;AACK;AAChC;AACP;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,uCAAI;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA,gCAAgC,uCAAI;AACpC;AACA,mCAAmC,6CAAO;AAC1C;AACA;AACA;AACA;AACA,iCAAiC,6CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACoC;AACE;AACJ;AACK;AACQ;AAC/C;AACA;AACA;AACA;AACO,uBAAuB,6CAAO;AACrC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+CAAQ,QAAQ;AACzC,iCAAiC;AACjC,kCAAkC,+CAAQ;AAC1C;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2CAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;;;;;;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACsC;AACA;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAAQ;AACvC,4BAA4B,+CAAQ;AACpC,sCAAsC;AACtC,mCAAmC;AACnC;AACA,0BAA0B;AAC1B;AACA,wBAAwB;AACxB,0BAA0B;AAC1B,6BAA6B;AAC7B,oCAAoC;AACpC;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,sCAAsC;AACtC,uCAAuC;AACvC,4BAA4B;AAC5B,6BAA6B;AAC7B,8BAA8B;AAC9B,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uHAAuH;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACoC;AACF;AACqC;AAChC;AACD;AACtC;AACA;AACA;AACA,kBAAkB,+CAAY,2CAA2C,SAAS;AAClF;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2CAA2C,SAAS;AACtF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,yDAAa;AAChD;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA,yBAAyB,iEAAqB;AAC9C;AACA;AACA;AACA;AACA,mBAAmB,2CAAM;AACzB;AACA;AACA,uBAAuB,2CAAM;AAC7B;AACA;AACA,uBAAuB,2CAAM;AAC7B;AACA;AACA,kCAAkC,2CAAM,oBAAoB,2CAAM;AAClE;AACA;AACA,uBAAuB,2CAAM;AAC7B;AACA;AACA,kCAAkC,2CAAM,0BAA0B,2CAAM;AACxE;AACA;AACA,kCAAkC,2CAAM,2BAA2B,2CAAM;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAskB;AACT;AAChC,0BAA0B,uCAAI;AACrC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA,gBAAgB,eAAe;AAC/B,2BAA2B,yDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACwC;AACF;AACR;AACI;AACkB;AACpD;AACO,sBAAsB,+CAAQ;AACrC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAW,SAAS,iDAAS;AACnD,yBAAyB,2CAAM;AAC/B,2DAA2D,uCAAI,6BAA6B,uCAAI,aAAa,uCAAI;AACjH;AACA,6BAA6B,2CAAM;AACnC,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvCA;AACA;AACkC;AACI;AACtC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2CAA2C,aAAa;AAC1F;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,yBAAyB,GAAG,UAAU;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,qDAAqD,QAAQ;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAAM,sBAAsB,GAAG,OAAO;AACxD;AACA;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACI;AACV;AACI;AACK;AACD;AAC/B;AACP;AACA;AACA;AACA,CAAC,wCAAwC;AAClC,qBAAqB,6CAAO;AACnC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAO;AACtC;AACA,QAAQ,iDAAS;AACjB;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,2CAAM;AAC5E;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2CAAM;AACvE;AACA,6DAA6D,uCAAI;AACjE,uDAAuD,2CAAM;AAC7D,4DAA4D,2CAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,4EAA4E,2CAAM;AAClF,4BAA4B,uBAAuB;AACnD;AACA,yEAAyE,uCAAI;AAC7E,qEAAqE,2CAAM;AAC3E,gEAAgE,2CAAM;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACltH7B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAM;AACrB,eAAe,qBAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM,6BAA6B,MAAM;AACjF;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAC8B;AACa;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uCAAI;;;;;;;;;;;;;;;;;;;ACpEf;AACA;AAC8B;AACQ;AACJ;AACK;AACvC;AACO,sBAAsB,+CAAQ;AACrC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uCAAI;AAC7C;AACA,yGAAyG,2CAAM;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+CAAQ;AACtD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACoC;AACG;AACV;AACO;AACpC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACO,6BAA6B,6CAAO;AAC3C;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACoC;AACE;AACJ;AACK;AACkB;AAClD;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACO,oBAAoB,6CAAO;AAClC;AACA,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAQ;AACrC;AACA;AACA;AACA,2BAA2B,2CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uCAAuC,2CAAM,aAAa;AAC9F;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5PA;AACA;AACA;AACA;AACA;AACA;AACsC;AACtC;AACO;AACP;AACA;AACA,mBAAmB,mDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mBAAmB,mDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACsD;AACP;AACZ;AACF;AACY;AACN;AACkB;AACtB;AACE;AACQ;AACV;AACc;AACA;AACD;AACX;AACrC;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kDAAkD,6DAAY;AAC9D;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA,gDAAgD,qDAAS;AACzD;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,oBAAoB,8CAAK,WAAW,8CAAK;AACzC;AACA,IAAI,uDAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,gBAAgB,8CAAK,WAAW,8CAAK;AACrC;AACA,IAAI,uDAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,gBAAgB,8CAAK,WAAW,8CAAK;AACrC;AACA,IAAI,uDAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,6BAA6B,uDAAU;AACvC,6BAA6B,uDAAU;AACvC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,6BAA6B,uDAAU;AACvC,6BAA6B,uDAAU;AACvC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT;AACA,IAAI,yCAAG,8BAA8B,WAAW;AAChD,kBAAkB,2CAAI;AACtB,sBAAsB,8CAAK;AAC3B;AACA;AACA,KAAK;AACL;AACA,0BAA0B,qDAAS,GAAG,eAAe;AACrD;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA,4BAA4B,2CAAI;AAChC,IAAI,+DAAY;AAChB;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAS,2BAA2B,oBAAoB;AAC5D;AACA,QAAQ,2CAAI;AACZ;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,4EAA4E,iBAAiB;AAC7F;AACA,gBAAgB,gBAAgB;AAChC,gCAAgC,kDAAkD;AAClF;AACA;AACA,oBAAoB,+CAA+C;AACnE;AACA;AACA;AACA,yBAAyB,6CAA6C,4CAAI,KAAK;AAC/E,wCAAwC,iBAAiB;AACzD,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA,wEAAwE,uDAAU;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA,yBAAyB,6CAA6C;AACtE;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAA0D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAS,0BAA0B,oBAAoB;AAC3D;AACA,QAAQ,2CAAI;AACZ;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,+DAA+D;AACxF;AACA;AACA;AACA,yBAAyB,2FAA2F;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4FAA4F;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAS,0BAA0B,oBAAoB;AAC3D;AACA,QAAQ,2CAAI;AACZ;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAe;AACnD;AACA;AACA,YAAY,0DAAW;AACvB;AACA;AACA,QAAQ,2CAAI;AACZ,QAAQ,2CAAI;AACZ;AACA,cAAc,+DAAY;AAC1B;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA8D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA8D;AACnF;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA8D;AACnF;AACA;AACA;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kEAAkE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAS,0BAA0B,oBAAoB;AAC3D;AACA,QAAQ,2CAAI;AACZ;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AAC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,qDAAS;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+DAAY;AACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpjC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACoB;AACvB;AAChB;AACA;AACA;AACU;AACM;AACR;AACN;AACQ;AACV;AACI;AACE;AACE;AACF;AACJ;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,+DAAY;AAC9B;AACA,oCAAoC,kDAAO;AAC3C,sCAAsC,sDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAQ;AACjC,IAAI,mDAAQ;AACZ,cAAc,+DAAY;AAC1B;AACA,oBAAoB,OAAO;AAC3B;AACA,oBAAoB,aAAa;AACjC,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D,yCAAyC,2DAAgB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS,kBAAkB,2CAAI,IAAI,MAAM,2CAAI,mBAAmB;AAChE;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,qCAAqC,uDAAU,eAAe,gDAAM;AACpE;AACA,oBAAoB,qCAAqC;AACzD,oBAAoB,4CAA4C;AAChE;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,4CAA4C,uDAAU;AACtD,iBAAiB,gDAAM;AACvB;AACA;AACA,oBAAoB,qCAAqC,oCAAoC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AQ,qDAAS;AACjB;AACA;AACA;AACA,+DAAY;AACiB;;;;;;;;;;;;;;;;;;;;AC3b7B;AACA;AACA;AACA;AACA;AACA;AAC8D;AAC3B;AACQ;AACN;AACF;AACnC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yGAAyG,aAAa;AACtH;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,iGAAiG,aAAa;AAC9G;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,mDAAQ;AAChC,kBAAkB,2CAAI;AACtB,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D,sDAAsD,2CAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,sGAAsG,aAAa;AACnH,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AACxE;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,iFAAiF,aAAa;AAC9F,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,2CAAI;AACtB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,2CAAI;AACtB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,KAAK,aAAa;AAClD,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,KAAK,aAAa;AAClD,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,2EAA2E,aAAa;AACxF,kBAAkB,2CAAI;AACtB,qBAAqB,mDAAQ;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,uEAAuE,aAAa;AACpF,kBAAkB,2CAAI;AACtB,qBAAqB,mDAAQ;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,6BAA6B,OAAO;AACpC,0FAA0F,aAAa;AACvG,6BAA6B,QAAQ;AACrC,sEAAsE,aAAa;AACnF,6BAA6B,QAAQ;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,2CAAI,qCAAqC,2CAAI;AACxD,WAAW,2CAAI,qCAAqC,2CAAI;AACxD,WAAW,2CAAI,qCAAqC,2CAAI;AACxD;AACA;AACA,IAAI,6CAAK;AACT;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,6BAA6B,OAAO;AACpC,0FAA0F,aAAa;AACvG,6BAA6B,QAAQ;AACrC,sEAAsE,aAAa;AACnF,6BAA6B,QAAQ;AACrC,uGAAuG,eAAe;AACtH,wBAAwB,mDAAQ;AAChC,wBAAwB,mDAAQ,YAAY,mDAAQ;AACpD,wBAAwB,mDAAQ,aAAa,mDAAQ,aAAa,mDAAQ;AAC1E;AACA;AACA;AACA,WAAW,2CAAI;AACf,WAAW,2CAAI;AACf,WAAW,2CAAI;AACf;AACA;AACA,IAAI,6CAAK;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA,yDAAyD,kCAAkC;AAC3F,SAAS,aAAa;AACtB,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,gBAAgB;AAC5B,wGAAwG,aAAa;AACrH,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,wGAAwG,aAAa;AACrH,kBAAkB,2CAAI,oCAAoC,2CAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,iFAAiF,aAAa;AAC9F,kBAAkB,2CAAI,yCAAyC,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,8EAA8E,aAAa;AAC3F,kBAAkB,2CAAI,yCAAyC,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,2CAAI,yCAAyC,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,+FAA+F,aAAa;AAC5G,kBAAkB,2CAAI,yCAAyC,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAAI,uCAAuC,sBAAsB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB,kBAAkB,2CAAI,uCAAuC,sBAAsB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,2CAAI,uCAAuC,iBAAiB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+D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DxB;AACA;AACA;AACA;AACA;AAC8D;AAC2C;AAClE;AACvC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,YAAY;AAC3F,aAAa,yDAAM,KAAK,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY,mCAAmC,YAAY,WAAW,yDAAM;AAC5H,gDAAgD,cAAc,qCAAqC,cAAc,WAAW,yDAAM;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D,8CAA8C,YAAY;AAC1D,4BAA4B,YAAY;AACxC,iBAAiB,yDAAM;AACvB;AACA,uDAAuD,cAAc;AACrE,uDAAuD,cAAc;AACrE,4BAA4B,cAAc;AAC1C,iBAAiB,yDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,YAAY,KAAK,6BAA6B;AACtH,sDAAsD,YAAY,KAAK,0BAA0B;AACjG,iBAAiB,yDAAM,KAAK,aAAa;AACzC;AACA,8EAA8E,cAAc;AAC5F;AACA,aAAa;AACb,sDAAsD,cAAc,KAAK,0BAA0B;AACnG,iBAAiB,yDAAM,KAAK,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA,qDAAqD,YAAY,KAAK,yBAAyB,YAAY;AAC3G;AACA,qDAAqD,YAAY,KAAK,yBAAyB,YAAY;AAC3G,iBAAiB,yDAAM,KAAK,aAAa;AACzC;A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;AACQ;AAC7C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,gBAAgB,yDAAW;AACjD,oBAAoB,gBAAgB,yDAAW;AAC/C;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,mDAAQ;AACrE;AACA,6DAA6D,mDAAQ;AACrE;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,gCAAgC,6CAAK;AACrC;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,0FAA0F,0CAA0C;AACpI;AACA,gCAAgC,sBAAsB;AACtD;AACA,uEAAuE,uDAAU;AACjF;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA,wEAAwE,uDAAU;AAClF;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA,2EAA2E,uDAAU;AACrF;AACA,2EAA2E,uDAAU;AACrF;AACA,QAAQ,qDAAS;AACjB;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,0DAA0D,qDAAS,GAAG,mCAAmC;AACzG,0BAA0B,6CAAK;AAC/B;AACA;AACA,wEAAwE,uDAAU;AAClF;AACA,wEAAwE,uDAAU;AAClF;AACA,QAAQ,qDAAS;AACjB;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,yEAAyE,qDAAS,GAAG,gBAAgB;AACrG,gCAAgC,sBAAsB;AACtD;AACA;AACA,+FAA+F,WAAW;AAC1G;AACA,+FAA+F,WAAW;AAC1G;AACA,QAAQ,qDAAS;AACjB;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,+DAAY;AACgB;;;;;;;;;;;;;;;;AC3X5B;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,sBAAsB,8CAA8C;AACpE,qBAAqB,yBAAyB,iBAAiB;AAC/D,sBAAsB,4CAA4C;AAClE,qBAAqB,0BAA0B,iBAAiB;AAChE,sBAAsB,6CAA6C;AACnE,qBAAqB,4BAA4B,iBAAiB;AAClE,sBAAsB,+CAA+C;AACrE,qBAAqB,yBAAyB,iBAAiB;AAC/D,sBAAsB,4CAA4C;AAClE,qBAAqB,kCAAkC,iBAAiB;AACxE,sBAAsB,qDAAqD;AAC3E,qBAAqB,+BAA+B,iBAAiB;AACrE,sBAAsB,kDAAkD;AACxE,qBAAqB,+BAA+B,iBAAiB;AACrE,sBAAsB,kDAAkD;AACxE,qBAAqB,4BAA4B,iBAAiB;AAClE,sBAAsB,+CAA+C;AACrE,qBAAqB,2BAA2B,iBAAiB;AACjE,sBAAsB,8CAA8C;AACpE,qBAAqB,2BAA2B,oCAAoC;AACpF,sBAAsB,+DAA+D;AACrF,qBAAqB,2BAA2B,oCAAoC;AACpF,sBAAsB,8DAA8D;AACpF;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA,+DAAY;AACS;;;;;;;;;;;;;;;;;ACtIrB;AACA;AACA;AACA;AACsD;AACjB;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+EAA+E;AAC7G;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,+EAA+E;AAC7G;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,qEAAqE;AACnG;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B,iDAAiD;AAC3E,0BAA0B,sCAAsC;AAChE,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAuD;AACjF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAA+D;AACzF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAuD;AACjF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAA+D;AACzF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAuD;AACjF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAA+D;AACzF,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,UAAU,8BAA8B,8CAA8C;AACxG;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,cAAc,+DAAY,4BAA4B,6CAAK;AAC3D;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,wCAAwC,YAAY;AACpD;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,mFAAmF,0BAA0B;AAC7G;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACc;;;;;;;;;;;;;;;;;ACrT1B;AACA;AACA;AACA;AAC8D;AACjB;AAC7C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAY;AACpC,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAM;AACvB;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,kDAAkD,YAAY;AAC9D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,oDAAoD,YAAY;AAChE,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,8CAA8C,YAAY;AAC1D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAa;AACnC,yBAAyB,qDAAa;AACtC;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,cAAc;AAChC;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,+DAAY;AACU;;;;;;;;;;;;;;;;;;;;;;;;;ACvItB;AACA;AACA;AACA;AACsD;AACnB;AACF;AACY;AACY;AACtB;AACE;AACQ;AACI;AACZ;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAe;AAC/C;AACA,QAAQ,yDAAW;AACnB;AACA,IAAI,2CAAI;AACR;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,8DAA8D;AACtF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,sEAAsE;AAC9F,YAAY,qDAAS,GAAG,qEAAqE;AAC7F,YAAY,qDAAS,GAAG,wEAAwE;AAChG,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,2FAA2F;AACnH,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,sEAAsE;AAC9F;AACA,IAAI,yCAAG,yBAAyB,WAAW;AAC3C,IAAI,yCAAG,kDAAkD,WAAW;AACpE,IAAI,yCAAG,wCAAwC,WAAW;AAC1D,qBAAqB,2CAAI;AACzB,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA,IAAI,+DAAY;AAChB;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF;AACA,IAAI,yCAAG,gEAAgE,WAAW;AAClF,IAAI,yCAAG,gEAAgE,WAAW;AAClF,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG,+BAA+B,UAAU;AAChD,IAAI,yCAAG;AACP;AACA,YAAY,qDAAS,GAAG,8DAA8D;AACtF,YAAY,qDAAS,GAAG,8DAA8D;AACtF,YAAY,qDAAS,GAAG,8DAA8D;AACtF,YAAY,qDAAS,GAAG,qEAAqE;AAC7F,YAAY,qDAAS,GAAG,8DAA8D;AACtF;AACA,IAAI,yCAAG,0BAA0B,WAAW;AAC5C,IAAI,yCAAG,+BAA+B,WAAW;AACjD,uBAAuB,6CAAK,WAAW,6CAAK;AAC5C,uBAAuB,6CAAK,WAAW,6CAAK;AAC5C,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA,6BAA6B,2CAAI;AACjC,6BAA6B,2CAAI;AACjC,IAAI,+DAAY;AAChB;AACA;AACA,+DAAY;AACQ;;;;;;;;;;;;;;;;;;;;;;;;AC7HpB;AACA;AACA;AACA;AACsD;AACH;AACN;AACU;AACZ;AACM;AACM;AACpB;AACI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,0CAA0C,YAAY;AACtD;AACA,KAAK;AACL;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,KAAK;AACL;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,yCAAyC,YAAY;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,KAAK;AACL;AACA;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,sEAAsE,cAAc;AACpF,KAAK;AACL;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,sEAAsE,cAAc;AACpF,KAAK;AACL;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iDAAO;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC,oCAAoC,YAAY;AAChD,wFAAwF,sDAAO;AAC/F,sEAAsE,eAAe;AACrF,sBAAsB,eAAe;AACrC,qEAAqE,sDAAO;AAC5E,yEAAyE,eAAe;AACxF,sBAAsB,oCAAoC;AAC1D;AACA;AACA;AACA;AACA,+DAAY;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;AClDxB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACkB;AAClB;AACuB;AACP;AACN;AACI;AACN;AACN;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,qBAAqB,uDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAAI;AACtB,UAAU,MAAM,2CAAI,kBAAkB;AACtC,UAAU,MAAM,2CAAI,iBAAiB;AACrC;AACA;AACA;AACA;AACA,2EAA2E,2CAAI;AAC/E,6EAA6E,iDAAU;AACvF,4EAA4E,gDAAS;AACrF;AACA,kBAAkB,mDAAQ,GAAG,uBAAuB,cAAc;AAClE;AACA,mBAAmB,qDAAS,GAAG,8BAA8B;AAC7D,mBAAmB,qDAAS,GAAG,8BAA8B;AAC7D,mBAAmB,yDAAW,GAAG,qBAAqB;AACtD;AACA;AACA,mEAAmE,gDAAS;AAC5E;AACA,eAAe,2CAAI;AACnB,uBAAuB,2CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI,iCAAiC,2CAAI;AAClE;AACA;AACA;AACA;AACA,yBAAyB,2CAAI;AAC7B;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,8BAA8B,2CAAI,uCAAuC;AACzE;AACA,qBAAqB,2CAAI;AACzB;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC,kCAAkC,OAAO;AACzC;AACA;AACA,4BAA4B,+DAA+D;AAC3F,4BAA4B,wDAAwD;AACpF,4BAA4B,+DAA+D;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAoD;AAC5E,8BAA8B,mDAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2CAAI;AACR,oBAAoB,+DAAY;AAChC,kCAAkC,OAAO;AACzC;AACA;AACA,4BAA4B,+DAA+D;AAC3F,4BAA4B,wDAAwD;AACpF,4BAA4B,+DAA+D;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrJrB;AACA;AACA;AACA;AACsD;AACP;AAC2B;AACvB;AAChB;AACA;AACF;AACQ;AACN;AACY;AACF;AACU;AACJ;AAChB;AACQ;AACN;AACkB;AACV;AACV;AACgB;AACZ;AACF;AACE;AACvC;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,sBAAsB;AAC1G,qGAAqG,qBAAqB;AAC1H,gFAAgF,qBAAqB;AACrG;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA;AACA;AACA;AACA,mEAAmE,4BAA4B;AAC/F,0EAA0E,4CAA4C;AACtH,uEAAuE,yCAAyC;AAChH,KAAK;AACL;AACA;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAY;AAC/B;AACA,sBAAsB,2CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAK,CAAC,2CAAI;AACjC,uBAAuB,8CAAK,CAAC,2CAAI;AACjC;AACA;AACA,0BAA0B,sDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DA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CT;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY,4BAA4B,8CAAK;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS,GAAG,6BAA6B;AACtE;AACA,gBAAgB,yCAAG,0BAA0B,WAAW;AACxD;AACA;AACA,qCAAqC,uDAAU;AAC/C,8CAA8C,uDAAU;AACxD,6BAA6B,2CAAI,YAAY,iDAAU;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,yCAAG,0BAA0B,WAAW;AACxD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B,8CAAK,GAAG,sCAAsC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BAA+B;AACzC;AACA,2BAA2B,4CAA4C;AACvE,2BAA2B,2CAA2C;AACtE;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,qCAAqC;AAC/C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,8CAA8C,WAAW;AACzD,8CAA8C,WAAW;AACzD,8CAA8C,WAAW;AACzD,IAAI,yCAAG,oCAAoC,WAAW;AACtD;AACA;AACA,yBAAyB,8CAA8C;AACvE,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,8CAA8C;AACvE,wCAAwC,WAAW;AACnD,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,qDAAqD;AAC9E,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,8CAA8C;AACvE,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,8CAA8C;AACvE,4CAA4C,gCAAgC;AAC5E,sBAAsB,8CAA8C;AACpE;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mBAAmB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA,qCAAqC,8CAA8C;AACnF;AACA;AACA;AACA,cAAc,4DAA4D;AAC1E,cAAc,4DAA4D;AAC1E,cAAc,4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ACF;AACH;AACI;AACJ;AACD;AACI;AACL;AACF;AACE;AACC;AACA;AACF;AACK;AACH;AACE;AACC;AACE;AACN;AACD;AACA;AACG;AACH;AACG;AACF;AACO;AACT;;;;;;;;;;;;;;;;;;;ACnF9B;AACA;AACA;AACA;AACA;AAC8E;AACrC;AACU;AACd;AACrC;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC,2CAA2C,iBAAiB;AAC5D,2CAA2C,kBAAkB;AAC7D;AACA,KAAK;AACL;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,oDAAoD;AACpD,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC,0EAA0E,6CAAK;AAC/E,wEAAwE,6CAAK;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAU,GAAG,6DAAU;AACnE;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,wBAAwB,6CAAK;AAC7B;AACA,uCAAuC,6CAAK;AAC5C;AACA,uBAAuB,UAAU;AACjC,yBAAyB,2DAAY;AACrC;AACA;AACA,wBAAwB,qBAAqB;AAC7C,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA,IAAI,6CAAK;AACT,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,0EAA0E,6CAAK;AAC/E,wEAAwE,6CAAK;AAC7E;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACqB;;;;;;;;;;;;;;;;;ACrHjC;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACZ;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,kDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACe;;;;;;;;;;;;;;;;;;;;;AC5E3B;AACA;AACA;AACA;AACA;AAC8E;AACrC;AACN;AACgB;AACd;AACa;AAClD;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,2CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR,IAAI,2CAAI;AACR;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,6CAAK;AAC3F,oFAAoF,6CAAK;AACzF;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,2DAAY;AACjC;AACA;AACA,oBAAoB,iBAAiB;AACrC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,6CAAK;AAC1G,iGAAiG,6CAAK;AACtG,kGAAkG,6CAAK;AACvG,sGAAsG,6CAAK;AAC3G;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,6CAAK;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6CAAK;AACrB,8BAA8B,6CAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,6CAAK;AAC3F,oFAAoF,6CAAK;AACzF;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,2DAAY;AACjC;AACA;AACA,oBAAoB,iBAAiB;AACrC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA;AACA,uBAAuB,0DAAW;AAClC,uBAAuB,0DAAW;AAClC;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,6CAAK;AAC3F,oFAAoF,6CAAK;AACzF;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,2BAA2B;AAClD,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,WAAW;AAClC,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,gCAAgC;AACvD,sBAAsB,8BAA8B;AACpD;AACA;AACA;AACA;AACA;AACA,+DAAY;AACiB;;;;;;;;;;;;;;;;;AC/T7B;AACA;AACA;AACA;AAC2C;AACA;AAC3C,2BAA2B,mDAAQ;AACnC;AACA;AACA,yBAAyB,mDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;;AChFxB;AACA;AACA;AACA;AACsD;AACG;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,uDAAe;AAClC;AACA;AACA;AACA,mBAAmB,uDAAe;AAClC,0BAA0B,gDAAQ;AAClC,0BAA0B,gDAAQ;AAClC;AACA;AACA,oCAAoC,gDAAQ;AAC5C;AACA;AACA,+DAAY;AACoB;;;;;;;;;;;;;;;;;;AC3BhC;AACA;AACA;AACA;AACsD;AACnB;AACA;AACnC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI,wCAAwC;AACvD,WAAW,IAAI,qBAAqB;AACpC,WAAW,IAAI,0DAA0D;AACzE,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,uCAAuC;AACtD,WAAW,IAAI,wCAAwC;AACvD,WAAW,IAAI,wCAAwC;AACvD,WAAW,IAAI,4EAA4E;AAC3F,WAAW,IAAI,0DAA0D;AACzE,WAAW,IAAI,iEAAiE;AAChF,WAAW,IAAI,gEAAgE;AAC/E,4BAA4B,sBAAsB;AAClD,4BAA4B,uCAAuC;AACnE,4BAA4B,6EAA6E;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2CAAI;AAC7C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,WAAW,0BAA0B,cAAc,IAAI,qBAAqB;AAC5E,WAAW,uCAAuC,cAAc,IAAI,qBAAqB;AACzF,WAAW,uDAAuD,cAAc,IAAI,qBAAqB;AACzG,WAAW,2CAA2C,cAAc,IAAI,qBAAqB;AAC7F,WAAW,0CAA0C,cAAc,IAAI,qBAAqB;AAC5F,WAAW,6CAA6C,cAAc,IAAI,qBAAqB;AAC/F,WAAW,8DAA8D,cAAc,IAAI,qBAAqB;AAChH;AACA,cAAc,8DAA8D,cAAc;AAC1F,cAAc,uCAAuC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+DAAY;AACqB;;;;;;;;;;;;;;;;;;ACvJjC;AACA;AACA;AACA;AACsD;AACP;AACV;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,wBAAwB,uDAAU;AAClC,iEAAiE,6CAAK;AACtE;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA,kEAAkE,6CAAK;AACvE;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA,sEAAsE,6CAAK;AAC3E;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACU;;;;;;;;;;;;;;;;;;;;;;;AC7KtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACnB;AACU;AACF;AACN;AACQ;AACI;AACZ;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,0BAA0B,qDAAS;AACnC,sBAAsB,6CAAK,CAAC,2CAAI;AAChC,0BAA0B,mDAAQ,GAAG,wBAAwB;AAC7D,0BAA0B,mDAAQ,GAAG,0BAA0B;AAC/D,0BAA0B,mDAAQ,GAAG,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B,QAAQ,yDAAW;AACnB;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C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DAAgD;AACtE,sBAAsB,gDAAgD;AACtE;AACA,iDAAiD,4CAA4C;AAC7F,sDAAsD,4CAA4C;AAClG,8CAA8C,8CAA8C;AAC5F,yDAAyD,8CAA8C;AACvG,sDAAsD,8CAA8C;AACpG,4CAA4C,4CAA4C;AACxF,iDAAiD,4CAA4C;AAC7F,mDAAmD,8CAA8C;AACjG,mDAAmD,gDAAgD;AACnG,oDAAoD,8CAA8C;AAClG,uDAAuD,4CAA4C;AACnG;AACA,IAAI,qDAAS;AACb;AACA;AACA,mBAAmB,iDAAO;AAC1B,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,+BAA+B;AACrE;AACA,iCAAiC,uDAAU;AAC3C;AACA;AACA,gBAAgB,yCAAG,uBAAuB,WAAW;AACrD;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2CAAI;AACZ,0BAA0B,6CAAK;AAC/B;AACA;AACA,SAAS,UAAU,iDAAS;AAC5B;AACA,8BAA8B,qDAAS;AACvC,0CAA0C,6CAAK;AAC/C;AACA;AACA;AACA;AACA,cAAca;;;;;;;;;;;;;;;;;ACjVzB;AACA;AACA;AACA;AACsD;AACf;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAuD;AACpF,yCAAyC,uCAAuC;AAChF,yCAAyC,qCAAqC;AAC9E,8BAA8B,+FAA+F;AAC7H,yCAAyC,+DAA+D;AACxG,4BAA4B,eAAe;AAC3C,mCAAmC,eAAe;AAClD,+BAA+B,cAAc;AAC7C,qCAAqC,cAAc;AACnD,sCAAsC,cAAc;AACpD,4BAA4B,YAAY;AACxC;AACA;AACA,wBAAwB,sDAAsD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,wBAAwB,MAAM,KAAK,OAAO,KAAK,aAAa,KAAK,cAAc,KAAK,oBAAoB;AACxG;AACA,iCAAiC,oBAAoB;AACrD;AACA,iCAAiC;AACjC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gEAAgE;AAChE;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;AC7IvB;AACA;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAY;AAC9B;AACA,iCAAiC,YAAY;AAC7C,kFAAkF,YAAY;AAC9F;AACA,iCAAiC,oBAAoB;AACrD,qEAAqE,YAAY;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,KAAK;AACL;AACA;AACA,CAAC;AA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B,+CAAO;AACrG,4BAA4B,gDAAgD,kBAAkB,+CAAO;AACrG;AACA,CAAC;AACD,+DAAY;AACe;;;;;;;;;;;;;;;;;ACjM3B;AACA;AACA;AACA;AACsD;AACiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,+CAAO,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,+CAAO,yBAAyB;AAC3E,IAAI,gDAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iDAAS;AACrD;AACA,gDAAgD,iDAAS;AACzD;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,+CAAO,yBAAyB;AAC3E,IAAI,gDAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACa;;;;;;;;;;;;;;;;;ACrEzB;AACA;AACA;AACA;AACA;AACsD;AACgF;AACtI;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAS;AACb,YAAY,iDAAS,GAAG,8BAA8B;AACtD,YAAY,iDAAS,GAAG,8BAA8B;AACtD,YAAY,iDAAS,GAAG,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA,+BAA+B,sBAAsB,EAAE,oBAAoB;AAC3E;AACA,4BAA4B,gDAAQ;AACpC;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,0FAA0F,eAAe,gBAAgB;AACzH,uCAAuC,cAAc,qBAAqB,EAAE,qBAAqB,IAAI,SAAS;AAC9G;AACA,yCAAyC,sBAAsB,cAAc,YAAY,IAAI,YAAY;AACzG;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAiE;AACrF;AACA,wBAAwB,+CAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB;AACA;AACA,sBAAsB,oDAAY,uCAAuC,kBAAkB;AAC3F;AACA,sBAAsB,qDAAa;AACnC;AACA;AACA,sBAAsB,kDAAU;AAChC;AACA,yBAAyB,gDAAQ;AACjC;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA,+DAAY;AACa;;;;;;;;;;;;;;;;;;;;;;;;AC5JzB;AACA;AACA;AACA;AACsD;AACnB;AACF;AACE;AACU;AACR;AACQ;AACN;AACF;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,kDA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C1TtB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACU;AACR;AACa;AACL;AAC7C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,kDAAkD;AACxD,MAAM,kDAAkD;AACxD,MAAM,kDAAkD;AACxD,MAAM,kDAAkD;AACxD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA,2BAA2B,qDAAS,GAAG,kDAAkD;AACzF;AACA,IAAI,qDAAS;AACb;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E;AACA;AACA,IAAI,qDAAS;AACb;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,qDAAS;AACb;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,kDAAkD;AAC1E;AACA,sCAAsC,uDAAU,wBAAwB,+DAAY;AACpF;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,2CAAI;AAC1B;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC,uDAAU,uBAAuB,+DAAY;AAC9E;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,uDAAU,wBAAwB,+DAAY;AACpF;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,uDAAU,wBAAwB,+DAAY;AACpF;AACA,sBAAsB,2CAAI;AAC1B;AACA,IAAI,qDAAS;AACb;AACA;AACA;AACA;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1avB;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AACZ;AACA;AACU;AACM;AACR;AACN;AACsB;AACd;AACO;AACN;AACM;AACC;AACrD;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA,kFAAkF,cAAc;AAChG;AACA;AACA,0EAA0E,WAAW;AACrF,gFAAgF,aAAa;AAC7F,gFAAgF,aAAa;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,6CAAK;AAC3B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,8DAAa;AACnC,sBAAsB,8DAAa;AACnC,sBAAsB,8DAAa;AACnC,qBAAqB,2DAAY;AACjC,qBAAqB,2DAAY;AACjC,qBAAqB,2DAAY;AACjC,qBAAqB,sDAAO,CAAC,0DAAW;AACxC,qBAAqB,sDAAO,CAAC,0DAAW;AACxC,qBAAqB,sDAAO,CAAC,0DAAW;AACxC,wBAAwB;AACxB,wBAAwB;AACxB,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAK,gBAAgB,gBAAgB;AACzD;AACA;AACA,gBAAgB,6CAAK,iBAAiB,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,0DAAW;AACvC,4BAA4B,0DAAW;AACvC;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACmB;;;;;;;;;;;;;;;;;ACtZ/B;AACA;AACA;AACA;AACA;AACsD;AACH;AACnD;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,GAAG,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAY;AACpC;AACA;AACA;AACA;AACA,6BAA6B,8DAA8D;AAC3F,kDAAkD,WAAW;AAC7D,kDAAkD,WAAW;AAC7D,gCAAgC,gDAAgD;AAChF,gCAAgC,gDAAgD;AAChF,gCAAgC,gDAAgD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+DAAY;AACiB;;;;;;;;;;;;;;;;;;ACtG7B;AACA;AACA;AACA;AACsD;AACrB;AACa;AAC9C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,sBAAsB,8CAA8C;AACpE,sBAAsB,8CAA8C;AACpE,sBAAsB,4DAA4D;AAClF,sBAAsB,4DAA4D;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,2CAAI,yBAAyB,gDAAS,SAAS;AAC3E;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,sBAAsB,yEAAyE;AAC/F,sBAAsB,8CAA8C,6BAA6B,WAAW;AAC5G,sBAAsB,4DAA4D;AAClF;AACA,yBAAyB,4DAA4D;AACrF,wCAAwC,WAAW;AACnD,sBAAsB,8CAA8C,6BAA6B,WAAW;AAC5G,sBAAsB,yEAAyE;AAC/F,sBAAsB,4DAA4D;AAClF;AACA,yBAAyB,4DAA4D;AACrF,wCAAwC,WAAW;AACnD;AACA,IAAI,yCAAG,8BAA8B,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACc;;;;;;;;;;;;;;;;;;;AC7H1B;AACA;AACA;AACA;AACsD;AACjB;AACa;AACW;AAC7D;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA,wBAAwB,0DAAW;AACnC;AACA;AACA;AACA,wBAAwB,0DAAW;AACnC;AACA;AACA,gBAAgB,qEAAqB;AACrC;AACA;AACA;AACA;AACA,wBAAwB,0DAAW;AACnC;AACA;AACA;AACA,wBAAwB,0DAAW;AACnC;AACA;AACA;AACA,+DAAY;AACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvD9B;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AAC2B;AACvB;AAChB;AACF;AACE;AACU;AACF;AACY;AACZ;AACc;AACpB;AACQ;AACV;AACgB;AACX;AACS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC,oDAAoD,gDAAgD;AACpG,qEAAqE,gDAAgD;AACrH,kDAAkD,+CAA+C;AACjG,mDAAmD,gDAAgD;AACnG,kDAAkD,+CAA+C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAY;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,kCAAkC,sDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kEAAe;AACrD;AACA,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAS,GAAG,uDAAuD;AAC5F;AACA;AACA,KAAK;AACL,4BAA4B,sDAAS,GAAG,kDAAkD;AAC1F,4BAA4B,sDAAS,GAAG,6CAA6C;AACrF,4BAA4B,sDAAS,GAAG,gDAAgD;AACxF;AACA;AACA,sBAAsB,2CAAI;AAC1B;AACA;AACA,yBAAyB,iBAAiB;AAC1C,yBAAyB,eAAe;AACxC,2BAA2B,eAAe;AAC1C,+BAA+B,wBAAwB;AACvD,uCAAuC,wBAAwB;AAC/D,sCAAsC,wBAAwB;AAC9D,+BAA+B,mCAAmC;AAClE,sCAAsC,mCAAmC;AACzE,sCAAsC,mCAAmC;AACzE,2CAA2C,mCAAmC;AAC9E,kDAAkD,mCAAmC;AACrF,kDAAkD,mCAAmC;AACrF,o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,aAAa;AAC1C;AACA;AACA;AACA;AACA,+DAAY;AACc;;;;;;;;;;;;;;;;;ACp8B1B;AACA;AACA;AACA;AACsD;AACnB;AACnC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAY;AACpC;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iEAAiE,cAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iEAAiE,cAAc;AAC/E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,qEAAqE,cAAc;AACnF;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW,2CAAI,OAAO;AACzC,KAAK;AACL,CAAC;AACD,mEAAmE,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW,2CAAI,KAAK;AACvC,KAAK;AACL,CAAC;AACD,+DAAY;AACa;;;;;;;;;;;;;;;;;;;;;ACnHzB;AACA;AACA;AACA;AACsD;AACb;AACE;AACN;AACa;AACV;AACxC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA,6EAA6E,mBAAmB;AAChG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,6BAA6B,YAAY,gBAAgB,0DAAW;AACpE,4FAA4F,cAAc;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kB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,4CAAI;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+DAAY;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtXxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AACI;AAChB;AACU;AACM;AACA;AACR;AACkB;AACrB;AACC;AACE;AACU;AACrD;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA,yEAAyE,kCAAkC;AAC3G;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,0BAA0B;AACtD;AACA,uBAAuB,2DAAY;AACnC;AACA;AACA;AACA,uCAAuC,qEAAqB,QAAQ,8DAAa;AACjF;AACA;AACA;AACA,yBAAyB,8DAA8D;AACvF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA,yBAAyB,8DAA8D;AACvF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,gDAAgD;AACtE,sBAAsB,gDAAgD;AACtE;AACA,yBAAyB,6BAA6B;AACtD;AACA,sBAAsB,gBAAgB,kBAAkB,uDAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAY;AACvC,2BAA2B,mDAAQ;AACnC,2BAA2B,uDAAU;AACrC,2BAA2B,2DAAY,eAAe,WAAW,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA,wCAAwC,kDAAO;AAC/C;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,6BAA6B,2CAAI,IAAI,MAAM,2CAAI,mBAAmB;AAClE,8BAA8B,gDAAM,MAAM,kBAAkB;AAC5D;AACA,IAAI,qDAAS;AACb;AACA;AACA,+DAAY;AACU;;;;;;;;;;;;;;;;;;;;;;;;;ACtHtB;AACA;AACA;AACA;AACsD;AACrB;AACE;AACU;AACR;AACE;AACE;AACE;AACM;AACD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,2CAAI;AAC1B,mBAAmB,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC9E;AACA,eAAe,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC1E;AACA;AACA;AACA,qBAAqB,iDAAO;AAC5B;AACA,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAO;AAC5B;AACA,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,mBAAmB;AACrC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,mBAAmB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,iDAAO;AACnC,gCAAgC,yDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA,KAAK;AACL,sBAAsB,6CAAK,CAAC,2CAAI,kBAAkB,iDAAS;AAC3D;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA,KAAK;AACL,sBAAsB,6CAAK,CAAC,2CAAI,kBAAkB,iDAAS;AAC3D;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA,KAAK;AACL,gBAAgB,+CAAM;AACtB,sBAAsB,6CAAK,CAAC,2CAAI,kBAAkB,iDAAS;AAC3D;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ,gBAAgB,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,6CAAK,CAAC,2CAAI,kBAAkB,iDAAS;AAC3D;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA,4CAA4C,iDAAO;AACnD,IAAI,yCAAG;AACP,sBAAsB,6CAAK,CAAC,2CAAI,kBAAkB,iDAAS;AAC3D;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,+DAAY;AACY;;;;;;;;;;;;;;;;;;;;;;ACldxB;AACA;AACA;AACA;AACsD;AACnB;AACU;AACJ;AACE;AACA;AACN;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,6CAAK,CAAC,2CAAI;AAChC;AACA,QAAQ,qDAAS;AACjB;AACA,oBAAoB,mDAAQ;AAC5B;AACA;AACA;AACA;AACA,KAAK,EAAE,mDAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B,aAAa;AACb;AACA;AACA,oCAAoC,iDAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA,sBAAsB,6CAAK,CAAC,2CAAI;AAChC,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAQ;AAC/B;AACA;AACA;AACA,uBAAuB,mDAAQ;AAC/B;AACA,+DAAY;AACa;;;;;;;;;;;;;;;;;AChJzB;AACA;AACA;AACA;AACsD;AACX;AAC3C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACa;;;;;;;;;;;;;;;;;;;;;;;AC1BzB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACU;AACJ;AACE;AACJ;AACF;AACrC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oCAAoC,iDAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAY;AACzC,sBAAsB,mDAAQ;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK,CAAC,2CAAI;AAChC;AACA,QAAQ,qDAAS;AACjB;AACA,oBAAoB,+CAAM;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,iBAAiB,kBAAkB;AAC7E,4BAA4B,cAAc,iBAAiB,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA,sBAAsB,6CAAK,CAAC,2CAAI;AAChC,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,kBAAkB,kBAAkB,kBAAkB,uDAAU;AAC1G,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA,sBAAsB,6CAAK,CAAC,2CAAI;AAChC,QAAQ,qDAAS;AACjB;AACA,IAAI,+CAAM;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,+CAAM;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;AC9LvB;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,wDAAwD,YAAY;AACpE,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,wDAAwD,YAAY;AACpE,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAA8D;AACtF,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACgB;;;;;;;;;;;;;;;;;;;;;ACxG5B;AACA;AACA;AACA;AACsD;AACT;AACV;AACA;AACE;AACM;AAC3C;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,yBAAyB,+DAA+D;AACx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zF,0DAA0D,+BAA+B;AACzF,CAAC;AACD;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iGAAiG,YAAY;AAC7G;AACA;AACA,aAAa;AACb,0BAA0B,2DAA2D;AACrF;AACA;AACA,6BAA6B,2CAAI,wCAAwC,2CAAI;AAC7E,wEAAwE,YAAY;AACpF;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA,kFAAkF,YAAY,KAAK,aAAa;AAChH,oFAAoF,cAAc,KAAK,aAAa;AACpH,kFAAkF,cAAc,KAAK,aAAa;AAClH;AACA,6BAA6B,2DAA2D;AACxF,6BAA6B,iDAAiD;AAC9E,iBAAiB,aAAa;AAC9B;AACA,wEAAwE,YAAY;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA,oFAAoF,aAAa;AACjG,sFAAsF,aAAa;AACnG,oFAAoF,aAAa;AACjG,sCAAsC,2DAA2D,MAAM,aAAa;AACpH;AACA,wEAAwE,YAAY;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACgB;;;;;;;;;;;;;;;;;;;ACtJ5B;AACA;AACA;AACA;AACsD;AACnB;AACc;AACV;AACvC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA,sBAAsB,2CAAI;AAC1B;AACA,YAAY,gDAAY;AACxB,YAAY,gDAAY;AACxB,YAAY,gDAAY;AACxB;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACgB;;;;;;;;;;;;;;;;;;;ACvC5B;AACA;AACA;AACA;AACsD;AACjB;AACkB;AACF;AACrD;AACA;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,6DAAa;AACrC;AACA;AACA;AACA,gCAAgC,6DAAa;AAC7C,KAAK;AACL;AACA,0CAA0C,6DAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kBAAkB;AACtE,oFAAoF,SAAS;AAC7F,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,IAAI,6CAAK;AACT,QAAQ,+DAAc;AACtB,QAAQ,+DAAc;AACtB,QAAQ,+DAAc;AACtB;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,YAAY;AACxC;AACA,sBAAsB,8CAA8C;AACpE,wBAAwB,aAAa;AACrC,sBAAsB,4CAA4C;AAClE,sBAAsB,6CAA6C;AACnE,wBAAwB,WAAW;AACnC,sBAAsB,0DAA0D;AAChF,wBAAwB,aAAa;AACrC,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACkB;;;;;;;;;;;;;;;;;;ACnJ9B;AACA;AACA;AACA;AACsD;AACR;AACL;AACzC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA,KAAK;AACL;AACA;AACA,cAAc,+DAAY;AAC1B;AACA;AACA,6BAA6B,YAAY,gBAAgB,sDAAO;AAChE,qDAAqD,YAAY;AACjE,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,sDAAO;AAC9B,qDAAqD,cAAc;AACnE,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC;AACA;AACA;AACA;AACA;AACA,+DAAY;AACY;;;;;;;;;;;;;;;;;ACvCxB;AACA;AACA;AACA;AACsD;AACf;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;;;;;ACtEvB;AACA;AACA;AACA;AACsD;AACrB;AACY;AACV;AACI;AACvC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAI;AACvC,qCAAqC,2CAAI;AACzC;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,0BAA0B;AACtD;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,0BAA0B;AACzC;AACA;AACA,iBAAiB,Q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A;AACA;AACA,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC,aAAa,6BAA6B;AAC1C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,cAAc;AAC1C;AACA,UAAU,iCAAiC;AAC3C,UAAU,kCAAkC;AAC5C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,cAAc;AAC1C;AACA,UAAU,iCAAiC;AAC3C,UAAU,kCAAkC;AAC5C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,cAAc;AAC1C;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,+DAAY;AAC1B,4BAA4B,cAAc;AAC1C;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,iBAAiB,QAAQ,6BAA6B;AACtD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;;;;;;ACrdvB;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACD;AACR;AACQ;AACZ;AACuE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,qDAAS,GAAG,8BAA8B;AAC5D,cAAc,2DAAW;AACzB,cAAc,0DAAU;AACxB,iBAAiB,yDAAS;AAC1B,kBAAkB,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC7E,cAAc,yDAAS;AACvB,iBAAiB,2DAAW;AAC5B,cAAc,sDAAM;AACpB,cAAc,+DAAe;AAC7B,cAAc,sDAAM;AACpB;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC,cAAc,+DAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAe;AAC7B,iBAAiB,sDAAM;AACvB,cAAc,0DAAU;AACxB,cAAc,2DAAW;AACzB,cAAc,0DAAU;AACxB,iBAAiB,sDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAAa;AAC9C;AACA;AACA;AACA,6BAA6B,qDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAAa;AAC9C;AACA;AACA,6BAA6B,qDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAY;AACc;;;;;;;;;;;;;;;;;ACvG1B;AACA;AACA;AACA;AACsD;AACf;AACvC;AACA;AACA;AACA,oBAAoB,+DAAY;AAChC,sCAAsC,4EAA4E;AAClH,uCAAuC,6EAA6E;AACpH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC,+EAA+E;AACnH,qCAAqC,gFAAgF;AACrH,oCAAoC,cAAc;AAClD,qCAAqC,eAAe;AACpD,oCAAoC,cAAc;AAClD,qCAAqC,eAAe;AACpD,KAAK;AACL;AACA;AACA,IAAI,+CAAM;AACV,eAAe,+DAAY;AAC3B;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAM;AACV,eAAe,+DAAY;AAC3B;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA,yBAAyB,wCAAwC;AACjE,yBAAyB,0CAA0C;AACnE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAM;AACV,eAAe,+DAAY;AAC3B;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA,wCAAwC,gCAAgC,MAAM,aAAa;AAC3F,qDAAqD,aAAa;AAClE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+DAAY;AACW;;;;;;;;;;;;;;;;;;;;AC7EvB;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AAC6D;AAClB;AAC3C,eAAe,uDAAY;AAC3B;AACA;AACA;AACA,wBAAwB,4CAAI;AAC5B,IAAI,4CAAI;AACR;AACA;AACA,IAAI,4CAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY,kBAAkB;AAC5C;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,IAAI,UAAU;AACnE;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,mBAAmB,+CAAO,GAAG,YAAY,qCAAqC;AAC9E;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB,gCAAgC;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB,gCAAgC;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sBAAsB,gCAAgC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sBAAsB,gCAAgC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB,gCAAgC;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D,gCAAgC,2BAA2B,GAAG,WAAW,GAAG,SAAS,EAAE,SAAS;AAChG,0DAA0D;AAC1D;AACA,yEAAyE,oBAAoB;AAC7F;AACA;AACA;AACA;AACA,2BAA2B,wEAAwE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,kBAAkB;AACnF;AACA,gEAAgE,UAAU,IAAI,cAAc;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO,EAAE,yBAAyB,GAAG,mBAAmB,GAAG,cAAc;AAC5G;AACA,kCAAkC;AAClC,0CAA0C,gDAAQ;AAClD,+CAA+C,gDAAQ,iBAAiB,gDAAQ;AAChF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/./src/version.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/glyphs.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/index.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/web.ts","webpack://Vex/./tests/accidental_tests.ts","webpack://Vex/./tests/annotation_tests.ts","webpack://Vex/./tests/articulation_tests.ts","webpack://Vex/./tests/auto_beam_formatting_tests.ts","webpack://Vex/./tests/bach_tests.ts","webpack://Vex/./tests/barline_tests.ts","webpack://Vex/./tests/beam_tests.ts","webpack://Vex/./tests/bend_tests.ts","webpack://Vex/./tests/boundingbox_tests.ts","webpack://Vex/./tests/chordsymbol_tests.ts","webpack://Vex/./tests/clef_tests.ts","webpack://Vex/./tests/crossbeam_tests.ts","webpack://Vex/./tests/curve_tests.ts","webpack://Vex/./tests/dot_tests.ts","webpack://Vex/./tests/easyscore_tests.ts","webpack://Vex/./tests/factory_tests.ts","webpack://Vex/./tests/font_tests.ts","webpack://Vex/./tests/formatter_tests.ts","webpack://Vex/./tests/fraction_tests.ts","webpack://Vex/./tests/ghostnote_tests.ts","webpack://Vex/./tests/glyphnote_tests.ts","webpack://Vex/./tests/gracenote_tests.ts","webpack://Vex/./tests/gracetabnote_tests.ts","webpack://Vex/./tests/index.ts","webpack://Vex/./tests/key_clef_tests.ts","webpack://Vex/./tests/keymanager_tests.ts","webpack://Vex/./tests/keysignature_tests.ts","webpack://Vex/./tests/mocks.ts","webpack://Vex/./tests/modifier_tests.ts","webpack://Vex/./tests/multimeasurerest_tests.ts","webpack://Vex/./tests/music_tests.ts","webpack://Vex/./tests/notehead_tests.ts","webpack://Vex/./tests/notesubgroup_tests.ts","webpack://Vex/./tests/offscreencanvas_tests.ts","webpack://Vex/./tests/ornament_tests.ts","webpack://Vex/./tests/parser_tests.ts","webpack://Vex/./tests/pedalmarking_tests.ts","webpack://Vex/./tests/percussion_tests.ts","webpack://Vex/./tests/registry_tests.ts","webpack://Vex/./tests/renderer_tests.ts","webpack://Vex/./tests/rests_tests.ts","webpack://Vex/./tests/rhythm_tests.ts","webpack://Vex/./tests/stave_tests.ts","webpack://Vex/./tests/staveconnector_tests.ts","webpack://Vex/./tests/stavehairpin_tests.ts","webpack://Vex/./tests/staveline_tests.ts","webpack://Vex/./tests/stavemodifier_tests.ts","webpack://Vex/./tests/stavenote_tests.ts","webpack://Vex/./tests/stavetie_tests.ts","webpack://Vex/./tests/stringnumber_tests.ts","webpack://Vex/./tests/strokes_tests.ts","webpack://Vex/./tests/style_tests.ts","webpack://Vex/./tests/tabnote_tests.ts","webpack://Vex/./tests/tabslide_tests.ts","webpack://Vex/./tests/tabstave_tests.ts","webpack://Vex/./tests/tabtie_tests.ts","webpack://Vex/./tests/textbracket_tests.ts","webpack://Vex/./tests/textnote_tests.ts","webpack://Vex/./tests/threevoice_tests.ts","webpack://Vex/./tests/tickcontext_tests.ts","webpack://Vex/./tests/timesignature_tests.ts","webpack://Vex/./tests/tremolo_tests.ts","webpack://Vex/./tests/tuning_tests.ts","webpack://Vex/./tests/tuplet_tests.ts","webpack://Vex/./tests/typeguard_tests.ts","webpack://Vex/./tests/unison_tests.ts","webpack://Vex/./tests/vexflow_test_helpers.ts","webpack://Vex/./tests/vf_prefix_tests.ts","webpack://Vex/./tests/vibrato_tests.ts","webpack://Vex/./tests/vibratobracket_tests.ts","webpack://Vex/./tests/voice_tests.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/./entry/vexflow-debug-with-tests.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","export const VERSION = '5.0.0-alpha.2';\nexport const ID = '947ca40727ebb52d8dd0a3a707447ce328455f5d';\nexport const DATE = '2023-09-14T23:44:02.552Z';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Accidental_checkCollision;\nimport { Fraction } from './fraction';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const noteheadAccidentalPadding = Tables.lookupMetric('Accidental.noteheadAccidentalPadding');\n        const leftShift = state.leftShift + noteheadAccidentalPadding;\n        const accidentalSpacing = Tables.lookupMetric('Accidental.accidentalSpacing');\n        const additionalPadding = Tables.lookupMetric('Accidental.leftPadding'); // padding to the left of all accidentals\n        const accidentalLinePositionsAndSpaceNeeds = [];\n        let prevNote = undefined;\n        let extraXSpaceNeededForLeftDisplacedNotehead = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const accidental = accidentals[i];\n            const note = accidental.getNote();\n            const stave = note.getStave();\n            const index = accidental.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    // If the current extra left-space needed isn't as big as this note's,\n                    // then we need to use this note's.\n                    extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    y,\n                    line: accLine,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                    spacingBetweenStaveLines: lineSpace,\n                });\n            }\n            else {\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    line: props.line,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                });\n            }\n        }\n        // Sort accidentals by line number.\n        accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);\n        const staveLineAccidentalLayoutMetrics = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let maxExtraXSpaceNeeded = 0;\n        // Create an array of unique line numbers (staveLineAccidentalLayoutMetrics)\n        // from accidentalLinePositionsAndSpaceNeeds\n        for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {\n            const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];\n            const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;\n            const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];\n            let currentLineMetric;\n            // if this is the first line, or a new line, add a staveLineAccidentalLayoutMetric\n            if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {\n                currentLineMetric = {\n                    line: accidentalLinePositionAndSpaceNeeds.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                };\n                staveLineAccidentalLayoutMetrics.push(currentLineMetric);\n            }\n            else {\n                currentLineMetric = priorLineMetric;\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            if (accidentalType !== 'b' && accidentalType !== 'bb') {\n                currentLineMetric.flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (accidentalType !== '##') {\n                currentLineMetric.dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            currentLineMetric.numAcc++;\n            // Track the total xOffset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;\n            // if this extraXSpaceNeeded is the largest so far, use it as the starting point for\n            // all accidental columns.\n            maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = __classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])\n                ? 'a'\n                : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'secondOnBottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spacedOutTetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spacedOutPentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'verySpacedOutPentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spacedOutHexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'verySpacedOutHexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {\n                        if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to xOffsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger xOffset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = leftShift + maxExtraXSpaceNeeded;\n        columnXOffsets[0] = leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;\n                accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.leftShift = totalShift + additionalPadding;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        this.text = '';\n        if (!this.cautionary) {\n            this.text += Tables.accidentalCodes(this.type);\n            this.textFont.size = Tables.lookupMetric('Accidental.fontSize');\n        }\n        else {\n            this.text += Tables.accidentalCodes('{');\n            this.text += Tables.accidentalCodes(this.type);\n            this.text += Tables.accidentalCodes('}');\n            this.textFont.size = Tables.lookupMetric('Accidental.cautionary.fontSize');\n        }\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(this.note)) {\n            this.textFont.size = Tables.lookupMetric('Accidental.grace.fontSize');\n        }\n        this.measureText();\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        this.reset();\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        const accX = start.x;\n        const accY = start.y;\n        L('Rendering: ', type, accX, accY);\n        this.renderText(ctx, accX - this.width, accY);\n    }\n}\n_a = Accidental, _Accidental_checkCollision = function _Accidental_checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n        // then line 2 is on top\n        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n        if (line1.dblSharpLine)\n            clearance -= 0.5;\n    }\n    else {\n        // line 1 is on top\n        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n        if (line2.dblSharpLine)\n            clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line1, Line2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n};\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        return Tables.lookupMetric('NoteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + Font.convertSizeToPixelValue(annotation.textFont.size)) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphWidth();\n            // Get the text width from the font metrics.\n            const textWidth = annotation.getWidth();\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.renderOptions.drawStem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.topTextLine + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.topTextLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.topTextLine);\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.textLine + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.textLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.textLine);\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.textLine);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n        this.measureText();\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // Apply style might not save context, if this.style is undefined, so we\n        // still need to save context state just before this, since we will be\n        // changing ctx parameters below.\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        const textWidth = this.getWidth();\n        const textHeight = Font.convertSizeToPixelValue(this.textFont.size);\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - textWidth;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - textWidth / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - textWidth / 2;\n        }\n        let stemExt = {};\n        let spacing = 0;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (hasStem) {\n            stemExt = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;\n            if (hasStem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.textLine) - 1;\n            const yb = stave.getYForBottomText(this.textLine);\n            y = yt + (yb - yt) / 2 + textHeight / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (hasStem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        this.renderText(ctx, x, y);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns.\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nexport function getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nexport function getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nexport function getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.topTextLine, ABOVE);\n                const curTop = noteLine + state.topTextLine + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.betweenLines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.textLine, BELOW);\n                const curBottom = noteLine + state.textLine + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.betweenLines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));\n        state.leftShift += overlap / 2;\n        state.rightShift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes default positions (see https://w3c.github.io/smufl/latest/tables/articulation.html):\n     * - Even codes will be positioned ABOVE\n     * - Odd codes will be positioned BELOW\n     */\n    constructor(type) {\n        var _a;\n        super();\n        this.heightShift = 0;\n        this.height = 0;\n        this.type = type;\n        this.position = ABOVE;\n        if (!Tables.articulationCodes(this.type)) {\n            if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)\n                this.position = ABOVE;\n            else\n                this.position = BELOW;\n        }\n        this.articulation = { betweenLines: false };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, betweenLines: false };\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||\n            this.articulation.code ||\n            Glyphs.null;\n        this.text = code;\n        this.measureText();\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.betweenLines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, textLine } = this;\n        const canSitBetweenLines = this.articulation.betweenLines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        let y = {\n            [ABOVE]: () => {\n                this.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                this.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                this.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        this.renderText(ctx, x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignoreTicks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Beam_stemDirection, _Beam_ticks, _Beam_yShift, _Beam_breakOnIndexes, _Beam_beamCount, _Beam_unbeamable, _Beam_forcedPartialDirections;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(timeSig) {\n        if (!timeSig || timeSig === 'c') {\n            timeSig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[timeSig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(timeSig.split('/')[0], 10);\n            const beatValue = parseInt(timeSig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stemDirection a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stemDirection, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\n     *   stemDirection: -1,\n     *   beamRests: true,\n     *   beamMiddleOnly: true,\n     *   showStemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stemDirection set to apply the same direction to all notes\n     * @param config.beamRests set to `true` to include rests in the beams\n     * @param config.beamMiddleOnly set to `true` to only beam rests in the middle of the beat\n     * @param config.showStemlets set to `true` to draw stemlets for rests\n     * @param config.maintainStemDirections set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(notes) {\n            return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beamRests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintainStemDirections) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stemDirection) {\n                        stemDirection = config.stemDirection;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.showStemlets) {\n                beam.renderOptions.showStemlets = true;\n            }\n            if (config.secondaryBreaks) {\n                beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);\n            }\n            if (config.flatBeams === true) {\n                beam.renderOptions.flatBeams = true;\n                beam.renderOptions.flatBeamOffset = config.flatBeamOffset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, autoStem = false) {\n        super();\n        this.slope = 0;\n        _Beam_stemDirection.set(this, void 0);\n        _Beam_ticks.set(this, void 0);\n        _Beam_yShift.set(this, 0);\n        _Beam_breakOnIndexes.set(this, void 0);\n        _Beam_beamCount.set(this, void 0);\n        _Beam_unbeamable.set(this, void 0);\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        _Beam_forcedPartialDirections.set(this, {});\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        __classPrivateFieldSet(this, _Beam_ticks, notes[0].getIntrinsicTicks(), \"f\");\n        if (__classPrivateFieldGet(this, _Beam_ticks, \"f\") >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        __classPrivateFieldSet(this, _Beam_stemDirection, notes[0].getStemDirection(), \"f\");\n        let stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Figure out optimal stem direction based on given notes\n        if (autoStem && isStaveNote(notes[0])) {\n            stemDirection = calculateStemDirection(notes);\n        }\n        else if (autoStem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (autoStem) {\n                note.setStemDirection(stemDirection);\n                __classPrivateFieldSet(this, _Beam_stemDirection, stemDirection, \"f\");\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        __classPrivateFieldSet(this, _Beam_beamCount, this.getBeamCount(), \"f\");\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, [], \"f\");\n        this.renderOptions = {\n            beamWidth: 5,\n            maxSlope: 0.25,\n            minSlope: -0.25,\n            slopeIterations: 20,\n            slopeCost: 100,\n            showStemlets: false,\n            stemletExtension: 7,\n            partialBeamLength: 10,\n            flatBeams: false,\n            minFlatBeamOffset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indexes` to break the secondary beam at. */\n    breakSecondaryAt(indexes) {\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, indexes, \"f\");\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        return this;\n    }\n    /**\n     * @param firstX specified in pixels.\n     * @param firstY specified in pixels.\n     *\n     * @return the y coordinate for linear function.\n     */\n    getSlopeY(x, firstX, firstY, slope) {\n        return firstY + (x - firstX) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (maxSlope - minSlope) / slopeIterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = minSlope; slope <= maxSlope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.renderOptions.slopeCost = 0\n            const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        __classPrivateFieldSet(this, _Beam_yShift, yShift, \"f\");\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        // works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        // based on the highest or lowest note (again, based on the stem\n        // direction). This also takes into account the added height due to\n        // the width of the beams.\n        const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;\n        const newOffset = extremeY + extremeTest * -stemDirection;\n        if (stemDirection === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stemDirection === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flatBeamOffset) {\n            // Set the offset for the group based on the calculations above.\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.UP && offset < flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        // For flat beams, the slope and yShift are 0.\n        this.slope = 0;\n        __classPrivateFieldSet(this, _Beam_yShift, 0, \"f\");\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {\n            beamY = this.renderOptions.flatBeamOffset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;\n        const yShift = __classPrivateFieldGet(this, _Beam_yShift, \"f\");\n        const beamCount = __classPrivateFieldGet(this, _Beam_beamCount, \"f\");\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== __classPrivateFieldGet(this, _Beam_stemDirection, \"f\")) {\n                    const beamCount = note.getGlyphProps().beamCount;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beamCount > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beamCount;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.renderOptions.beamWidth * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && showStemlets) {\n                    const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;\n        const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);\n        const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);\n        const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);\n        if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_BOTH;\n        }\n        else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_LEFT;\n        }\n        else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tickOfDuration = Tables.durationToTicks(duration);\n        let beamStarted = false;\n        const beamLines = [];\n        let currentBeam = undefined;\n        const partialBeamLength = this.renderOptions.partialBeamLength;\n        let previousShouldBreak = false;\n        let tickTally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tickTally += ticks;\n            let shouldBreak = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indexes were set up through breakSecondaryAt()\n                shouldBreak = __classPrivateFieldGet(this, _Beam_breakOnIndexes, \"f\").indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {\n                    tickTally = 0;\n                    shouldBreak = true;\n                }\n            }\n            const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;\n            const stemX = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prevNote = this.notes[i - 1];\n            const nextNote = this.notes[i + 1];\n            const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;\n            const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;\n            const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            // const beamAlone = noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            if (noteGetsBeam) {\n                // This note gets a beam at the current level\n                if (beamStarted) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    currentBeam = beamLines[beamLines.length - 1];\n                    currentBeam.end = stemX;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (shouldBreak) {\n                        beamStarted = false;\n                        if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    currentBeam = { start: stemX, end: undefined };\n                    beamStarted = true;\n                    if (beamAlone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prevTick = prevNote.getIntrinsicTicks();\n                        const nextTick = nextNote.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                        else {\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                    }\n                    else if (!nextNoteGetsBeam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previousShouldBreak || i === 0) && nextNote) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                    else if (shouldBreak) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        currentBeam.end = currentBeam.start - partialBeamLength;\n                        beamStarted = false;\n                    }\n                    beamLines.push(currentBeam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beamStarted = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previousShouldBreak = shouldBreak;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const lastBeam = beamLines[beamLines.length - 1];\n        if (lastBeam && lastBeam.end === undefined) {\n            lastBeam.end = lastBeam.start - partialBeamLength;\n        }\n        return beamLines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                stem.setNoteHeadXBounds(stemX, stemX);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const validBeamDurations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.renderOptions.beamWidth * __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Draw the beams.\n        for (let i = 0; i < validBeamDurations.length; ++i) {\n            const duration = validBeamDurations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beamLine = beamLines[j];\n                const startBeamX = beamLine.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beamLine.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (__classPrivateFieldGet(this, _Beam_unbeamable, \"f\"))\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n_Beam_stemDirection = new WeakMap(), _Beam_ticks = new WeakMap(), _Beam_yShift = new WeakMap(), _Beam_breakOnIndexes = new WeakMap(), _Beam_beamCount = new WeakMap(), _Beam_unbeamable = new WeakMap(), _Beam_forcedPartialDirections = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let lastWidth = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.topTextLine < stringPos) {\n                    state.topTextLine = stringPos;\n                }\n            }\n            bend.setXShift(lastWidth);\n            lastWidth = bend.getWidth();\n            bend.setTextLine(state.topTextLine);\n        }\n        state.rightShift += lastWidth;\n        state.topTextLine += 1;\n        return true;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     */\n    constructor(phrase) {\n        super();\n        this.xShift = 0;\n        this.tap = '';\n        this.renderOptions = {\n            lineWidth: 1.5,\n            lineStyle: '#777777',\n            bendWidth: 8,\n            releaseWidth: 8,\n        };\n        this.phrase = phrase;\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.xShift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getTextHeight() {\n        const element = new Element(Category.Bend);\n        element.setText(this.phrase[0].text);\n        element.measureText();\n        return element.getHeight();\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const measureText = (text) => {\n            const element = new Element(Category.Bend);\n            element.setText(text);\n            element.measureText();\n            return element.getWidth();\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;\n                bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;\n                bend.drawWidth = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.xShift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const xShift = this.xShift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.textLine is relative to top string in the group.\n        const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;\n        const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cpX = x + width;\n            const cpY = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cpX, cpY, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.renderOptions.lineWidth);\n            ctx.setStrokeStyle(this.renderOptions.lineStyle);\n            ctx.setFillStyle(this.renderOptions.lineStyle);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const renderX = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, renderX, annotationY);\n            ctx.restore();\n        };\n        let lastBend = undefined;\n        let lastBendDrawWidth = 0;\n        let lastDrawnWidth = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.drawWidth)\n                bend.drawWidth = 0;\n            if (i === 0)\n                bend.drawWidth += xShift;\n            lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);\n            if (bend.type === Bend.UP) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderArrowHead(start.x, bendHeight, +1);\n                }\n                renderBend(start.x, start.y, lastDrawnWidth, bendHeight);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (lastBend && lastBend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (!lastBend) {\n                    lastDrawnWidth = bend.drawWidth;\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n            }\n            renderText(start.x + lastDrawnWidth, bend.text);\n            lastBend = bend;\n            lastBendDrawWidth = bend.drawWidth;\n            lastBend.x = start.x;\n            start.x += lastDrawnWidth;\n        }\n        if (!lastBend || lastBend.x === undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (lastBend.type === Bend.UP) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, +1);\n        }\n        else if (lastBend.type === Bend.DOWN) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const newX = this.x < that.x ? this.x : that.x;\n        const newY = this.y < that.y ? this.y : that.y;\n        const newW = Math.max(this.x + this.w, that.x + that.w) - newX;\n        const newH = Math.max(this.y + this.h, that.y + that.h) - newY;\n        this.x = newX;\n        this.y = newY;\n        this.w = newW;\n        this.h = newH;\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        this.curTransfrom = context.getTransform();\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id, attrs) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    openRotation(angleDegrees, x, y) {\n        this.curTransfrom = this.context2D.getTransform();\n        this.context2D.translate(x, y);\n        this.context2D.rotate((angleDegrees * Math.PI) / 180);\n        this.context2D.translate(-x, -y);\n    }\n    closeRotation() {\n        this.context2D.setTransform(this.curTransfrom);\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport class ChordSymbolBlock extends Element {\n    constructor(text, symbolModifier, xShift, yShift, vAlign) {\n        super();\n        this.text = text;\n        this.symbolModifier = symbolModifier;\n        this.xShift = xShift;\n        this.yShift = yShift;\n        this.vAlign = vAlign;\n    }\n    isSuperscript() {\n        return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    isSubscript() {\n        return this.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return Tables.lookupMetric('ChordSymbol.superSubRatio');\n    }\n    static get spacingBetweenBlocks() {\n        return Tables.lookupMetric('ChordSymbol.spacing');\n    }\n    static get superscriptOffset() {\n        return Tables.lookupMetric('ChordSymbol.superscriptOffset');\n    }\n    static get subscriptOffset() {\n        return Tables.lookupMetric('ChordSymbol.subscriptOffset');\n    }\n    static get minPadding() {\n        return Tables.lookupMetric('NoteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const note = symbol.checkAttachedNote();\n            let lineSpaces = 1;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = block.isSuperscript();\n                const sub = block.isSubscript();\n                block.setXShift(width);\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If a subscript immediately follows a superscript block, try to\n                // overlay them.\n                if (sub && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (prev.isSuperscript()) {\n                        // slide the symbol over so it lines up with superscript\n                        block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);\n                        block.vAlign = true;\n                        width +=\n                            -prev.getWidth() -\n                                ChordSymbol.minPadding +\n                                (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);\n                    }\n                }\n                width += block.getWidth() + ChordSymbol.minPadding;\n            }\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.topTextLine);\n                state.topTextLine += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.textLine + 1);\n                state.textLine += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                if (isStemmableNote(note)) {\n                    const glyphWidth = note.getGlyphWidth();\n                    if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                        maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                        leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;\n                    }\n                    else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                        maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                        rightWidth = Math.max(rightWidth, width);\n                    }\n                    else {\n                        leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;\n                        rightWidth = Math.max(rightWidth, width / 2);\n                        maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                        maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                    }\n                }\n                symbol.width = width;\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.reportWidth = true;\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.textFont.size);\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.textFont.size);\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    getSymbolBlock(params = {}) {\n        var _a, _b;\n        const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);\n        if (symbolBlock.isSubscript()) {\n            symbolBlock.setYShift(this.subscriptOffset);\n        }\n        if (symbolBlock.isSuperscript()) {\n            symbolBlock.setYShift(this.superscriptOffset);\n        }\n        if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {\n            const { family, size, weight, style } = this.textFont;\n            const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n            symbolBlock.setFont(family, smallerFontSize, weight, style);\n        }\n        else {\n            symbolBlock.setFont(this.fontInfo);\n        }\n        symbolBlock.measureText();\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    addText(text, parameters = {}) {\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);\n    }\n    /** Add a glyph block. */\n    addGlyph(glyph, params = {}) {\n        return this.addText(ChordSymbol.glyphs[glyph], params);\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const glyph = ChordSymbol.glyphs[char];\n            if (glyph) {\n                str += glyph;\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    addLine(params = {}) {\n        // Two csymMinor glyphs next to each other.\n        return this.addText('\\ue874\\ue874' /*{csymMinor}{csymMinor}*/, params);\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.textFont);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;\n                y = Math.max(y, stemBase + spacing * (this.textLine + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.textLine), topY - 10);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            L('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());\n            symbol.renderText(ctx, x, y);\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: '\\ue870' /*csymDiminished*/,\n    dim: '\\ue870' /*csymDiminished*/,\n    halfDiminished: '\\ue871' /*csymHalfDiminished*/,\n    '+': '\\ue872' /*csymAugmented*/,\n    augmented: '\\ue872' /*csymAugmented*/,\n    majorSeventh: '\\ue873' /*csymMajorSeventh*/,\n    minor: '\\ue874' /*csymMinor*/,\n    '-': '\\ue874' /*csymMinor*/,\n    '(': '\\u0028' /*csymParensLeftTall*/,\n    leftParen: '\\u0028' /*csymParensLeftTall*/,\n    ')': '\\u0029' /*csymParensRightTall*/,\n    rightParen: '\\u0029' /*csymParensRightTall*/,\n    leftBracket: '\\ue877' /*csymBracketLeftTall*/,\n    rightBracket: '\\ue878' /*csymBracketRightTall*/,\n    leftParenTall: '\\u0028' /*csymParensLeftVeryTall*/,\n    rightParenTall: '\\u0029' /*csymParensRightVeryTall*/,\n    '/': '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    over: '\\ue87c' /*csymDiagonalArrangementSlash*/,\n    '#': '\\ued62' /*csymAccidentalSharp*/,\n    b: '\\ued60' /*csymAccidentalFlat*/,\n};\nChordSymbol.symbolModifiers = SymbolModifiers;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Co-author: Benjamin W. Bohl\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;\n        return {\n            treble: {\n                code: gClef,\n                line: 3,\n            },\n            bass: {\n                code: fClef,\n                line: 1,\n            },\n            alto: {\n                code: cClef,\n                line: 2,\n            },\n            tenor: {\n                code: cClef,\n                line: 1,\n            },\n            percussion: {\n                code: unpitchedPercussionClef1,\n                line: 2,\n            },\n            soprano: {\n                code: cClef,\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: cClef,\n                line: 3,\n            },\n            'baritone-c': {\n                code: cClef,\n                line: 0,\n            },\n            'baritone-f': {\n                code: fClef,\n                line: 2,\n            },\n            subbass: {\n                code: fClef,\n                line: 0,\n            },\n            french: {\n                code: gClef,\n                line: 4,\n            },\n            tab: {\n                code: sixStringTabClef,\n                line: 2.5,\n            },\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.code = Clef.types['treble'].code;\n        this.line = Clef.types['treble'].line;\n        this.size = 'default';\n        this.type = 'treble';\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size = 'default', annotation) {\n        this.type = type;\n        this.code = Clef.types[type].code;\n        this.line = Clef.types[type].line;\n        this.size = size !== null && size !== void 0 ? size : 'default';\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation === '8va') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8va;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8va;\n            }\n        }\n        if (annotation === '8vb') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8vb;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8vb;\n            }\n        }\n        this.text = this.code;\n        this.textFont.size = Math.floor(Clef.getPoint(this.size));\n        this.measureText();\n        return this;\n    }\n    /** Get point for clefs. */\n    static getPoint(size) {\n        // for sizes other than 'default', clef is 2/3 of the default value\n        return size === 'default' ? Tables.lookupMetric('fontSize') : (Tables.lookupMetric('fontSize') * 2) / 3;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        this.renderText(ctx, 0, stave.getYForLine(this.line));\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size = 'default', annotation) {\n        super({ duration: 'b' });\n        this.setType(type, size, annotation);\n        this.ignoreTicks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.clef = new Clef(type, size, annotation);\n        this.setWidth(this.clef.getWidth());\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.clef.renderText(ctx, this.getAbsoluteX() - this.x, stave.getYForLine(this.clef.line));\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\n// Helper to draw the hairpin.\nfunction renderHairpin(ctx, params) {\n    const beginX = params.beginX;\n    const endX = params.endX;\n    const y = params.y;\n    const halfHeight = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(beginX, y - halfHeight);\n        ctx.lineTo(endX, y);\n        ctx.lineTo(beginX, y + halfHeight);\n    }\n    else {\n        ctx.moveTo(endX, y - halfHeight);\n        ctx.lineTo(beginX, y);\n        ctx.lineTo(endX, y + halfHeight);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extendLeft: 0,\n            extendRight: 0,\n            // Vertical shift\n            yShift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tickContext = this.getTickContext();\n        const nextContext = TickContext.getNextContext(tickContext);\n        const beginX = this.getAbsoluteX();\n        const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);\n        renderHairpin(ctx, {\n            beginX: beginX - this.options.extendLeft,\n            endX: endX + this.options.extendRight,\n            y: y + this.options.yShift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    xShift: pixels to shift\n    //    yShift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const xShift = this.renderOptions.xShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        const firstX = params.firstX + xShift;\n        const firstY = params.firstY + yShift;\n        const lastX = params.lastX - xShift;\n        const lastY = params.lastY + yShift;\n        const thickness = this.renderOptions.thickness;\n        const cps = this.renderOptions.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const controlPointSpacing = (lastX - firstX) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(firstX, firstY);\n        ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);\n        ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.from;\n        const lastNote = this.to;\n        let firstX;\n        let lastX;\n        let firstY;\n        let lastY;\n        let stemDirection = 0;\n        let metric = 'baseY';\n        let endMetric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.renderOptions.position);\n        const positionEnd = getPosition(this.renderOptions.positionEnd);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            endMetric = 'topY';\n        }\n        if (positionEnd === CurvePosition.NEAR_HEAD) {\n            endMetric = 'baseY';\n        }\n        else if (positionEnd === CurvePosition.NEAR_TOP) {\n            endMetric = 'topY';\n        }\n        if (firstNote) {\n            firstX = firstNote.getTieRightX();\n            stemDirection = firstNote.getStemDirection();\n            firstY = firstNote.getStemExtents()[metric];\n        }\n        else {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstY = lastNote.getStemExtents()[metric];\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX();\n            stemDirection = lastNote.getStemDirection();\n            lastY = lastNote.getStemExtents()[endMetric];\n        }\n        else {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastY = firstNote.getStemExtents()[endMetric];\n        }\n        this.renderCurve({\n            firstX,\n            lastX,\n            firstY,\n            lastY,\n            direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements dot modifiers for notes.\nimport { Modifier } from './modifier';\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {\n                const dot = new Dot();\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const rightShift = state.rightShift;\n        const dotSpacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dotList = [];\n        const maxShiftMap = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = rightShift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const noteId = note.getAttribute('id');\n            dotList.push({ line: props.line, note, noteId, dot });\n            maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);\n        }\n        // Sort dots by line number.\n        dotList.sort((a, b) => b.line - a.line);\n        let dotShift = rightShift;\n        let xWidth = 0;\n        let lastLine = null;\n        let lastNote = null;\n        let prevDottedSpace = null;\n        let halfShiftY = 0;\n        for (let i = 0; i < dotList.length; ++i) {\n            const { dot, note, noteId, line } = dotList[i];\n            // Reset the position of the dot every line.\n            if (line !== lastLine || note !== lastNote) {\n                dotShift = maxShiftMap[noteId];\n            }\n            if (!note.isRest() && line !== lastLine) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    halfShiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    halfShiftY = 0.5;\n                    if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                    else if (line + halfShiftY === prevDottedSpace) {\n                        // previous space is dotted, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                }\n            }\n            // Convert halfShiftY to a multiplier for dots.draw().\n            if (note.isRest()) {\n                dot.dotShiftY += -halfShiftY;\n            }\n            else {\n                dot.dotShiftY = -halfShiftY;\n            }\n            prevDottedSpace = line + halfShiftY;\n            dot.setXShift(dotShift);\n            dotShift += dot.getWidth() + dotSpacing; // spacing\n            xWidth = dotShift > xWidth ? dotShift : xWidth;\n            lastLine = line;\n            lastNote = note;\n        }\n        // Update state.\n        state.rightShift += xWidth;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dotShiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dotShiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.xShift + this.width - this.radius;\n        const y = start.y + this.yShift + this.dotShiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const autoStem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });\n        if (!autoStem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Element_context, _Element_attrs, _Element_txtCanvas;\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Registry } from './registry';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, prefix, RuntimeError } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n *\n * The Element handles style and font properties for the Element and any child\n * elements, along with working with the Registry to create unique ids.\n *\n * The `text` is a series of unicode characters (including SMuFL codes).\n * The `textFont` property contains information required to style the text (i.e., font family, size, weight, and style).\n * This font family is a comma separated list of fonts.\n * The method `measureText` calculates the `textMetrics`, `boundingBox`, `height` and `width` of the `text`.\n * The method `renderText(...)` will render the text using the provided context and coordinates,\n * taking `xShift` and `yShift` into account.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    constructor(category) {\n        var _b;\n        // Element objects keep a list of children that they are responsible for.\n        // Children inherit the style from their parents (see: setGroupStyle(s)).\n        this.children = [];\n        _Element_context.set(this, void 0);\n        _Element_attrs.set(this, void 0);\n        this.text = '';\n        this.textMetrics = {\n            fontBoundingBoxAscent: 0,\n            fontBoundingBoxDescent: 0,\n            actualBoundingBoxAscent: 0,\n            actualBoundingBoxDescent: 0,\n            actualBoundingBoxLeft: 0,\n            actualBoundingBoxRight: 0,\n            width: 0,\n        };\n        this.height = 0;\n        this.width = 0;\n        this.xShift = 0;\n        this.yShift = 0;\n        this.x = 0;\n        this.y = 0;\n        __classPrivateFieldSet(this, _Element_attrs, {\n            id: Element.newID(),\n            type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,\n            class: '',\n        }, \"f\");\n        this.rendered = false;\n        this.textFont = Tables.lookupMetricFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type);\n        // If a default registry exist, then register with it right away.\n        (_b = Registry.getDefaultRegistry()) === null || _b === void 0 ? void 0 : _b.register(this);\n    }\n    /**\n     * Adds a child Element to the Element, which lets it inherit the\n     * same style as the parent when setGroupStyle() is called.\n     *\n     * Examples of children are noteheads and stems.  Modifiers such\n     * as Accidentals are generally not set as children.\n     *\n     * Note that StaveNote calls setGroupStyle() when setStyle() is called.\n     */\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\").type;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element's style (see `getStyle()` and `setStyle()`)\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Draw an element. */\n    draw() {\n        throw new RuntimeError('Element', 'Draw not defined');\n    }\n    /** Check if it has a class label (An element can have multiple class labels). */\n    hasClass(className) {\n        var _b;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            return false;\n        return ((_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ').indexOf(className)) !== -1;\n    }\n    /** Add a class label (An element can have multiple class labels). */\n    addClass(className) {\n        var _b;\n        if (this.hasClass(className))\n            return this;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${className}`;\n        else\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${__classPrivateFieldGet(this, _Element_attrs, \"f\").class} ${className}`;\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels). */\n    removeClass(className) {\n        var _b, _c;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = arr.join(' ');\n        }\n        (_c = this.registry) === null || _c === void 0 ? void 0 : _c.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\");\n    }\n    /** Return an attribute, such as 'id', 'type' or 'class'. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(__classPrivateFieldGet(this, _Element_attrs, \"f\").id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute such as 'id', 'class', or 'type'. */\n    setAttribute(name, value) {\n        var _b;\n        const oldID = __classPrivateFieldGet(this, _Element_attrs, \"f\").id;\n        const oldValue = __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n        __classPrivateFieldGet(this, _Element_attrs, \"f\")[name] = value;\n        // Register with old id to support id changes.\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    /** Return the context, such as an SVGContext or CanvasContext object. */\n    getContext() {\n        return __classPrivateFieldGet(this, _Element_context, \"f\");\n    }\n    /** Set the context to an SVGContext or CanvasContext object */\n    setContext(context) {\n        __classPrivateFieldSet(this, _Element_context, context, \"f\");\n        return this;\n    }\n    /** Validate and return the rendering context. */\n    checkContext() {\n        return defined(__classPrivateFieldGet(this, _Element_context, \"f\"), 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial') that will be applied\n     * to text (not glyphs).\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string for the text font. */\n    get font() {\n        return Font.toCSSString(this.textFont);\n    }\n    /**\n     * Set the element's text font family, size, weight, style\n     * (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * This attribute does not determine the font used for musical Glyphs like treble clefs.\n     *\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        const defaultTextFont = Tables.lookupMetricFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type);\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            this.textFont = Font.fromCSSString(font);\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            this.textFont = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\n        }\n        this.measureText();\n        return this;\n    }\n    /**\n     * Get the css string describing this Element's text font. e.g.,\n     * 'bold 10pt Arial'.\n     */\n    getFont() {\n        return Font.toCSSString(this.textFont);\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.textFont is set.\n        return this.textFont;\n    }\n    /** Set the current FontInfo object. */\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /** @returns a CSS font-size string (e.g., '18pt', '12px', '1em'). */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /** @returns the font size in `pt`. */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /** @returns the font size in `px`. */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /** @returns a CSS font-style string (e.g., 'italic'). */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    /** Set the font style. */\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    /** Set the font weight. */\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n    /** Get element width. */\n    getWidth() {\n        return this.width;\n    }\n    /** Set element width. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the X coordinate. */\n    getX() {\n        return this.x;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Shift element down `yShift` pixels. Negative values shift up. */\n    setYShift(yShift) {\n        this.yShift = yShift;\n        return this;\n    }\n    /** Get shift element `yShift`. */\n    getYShift() {\n        return this.yShift;\n    }\n    /** Set shift element right `xShift` pixels. Negative values shift left. */\n    setXShift(xShift) {\n        this.xShift = xShift;\n        return this;\n    }\n    /** Get shift element `xShift`. */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Set element text. */\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    /** Get element text. */\n    getText() {\n        return this.text;\n    }\n    /** Render the element text. */\n    renderText(ctx, xPos, yPos) {\n        ctx.save();\n        ctx.setFont(this.textFont);\n        ctx.fillText(this.text, xPos + this.x + this.xShift, yPos + this.y + this.yShift);\n        this.children.forEach((child) => {\n            ctx.setFont(child.textFont);\n            ctx.fillText(child.text, xPos + child.x + child.xShift, yPos + child.y + child.yShift);\n        });\n        ctx.restore();\n    }\n    /** Measure the text using the textFont. */\n    measureText() {\n        let txtCanvas = __classPrivateFieldGet(Element, _a, \"f\", _Element_txtCanvas);\n        if (!txtCanvas) {\n            // Create the canvas element that will be used to measure text in the event\n            // of a cache miss.\n            txtCanvas = document.createElement('canvas');\n            __classPrivateFieldSet(Element, _a, txtCanvas, \"f\", _Element_txtCanvas);\n        }\n        const context = txtCanvas.getContext('2d');\n        if (!context)\n            throw new RuntimeError('Font', 'No txt context');\n        context.font = Font.toCSSString(Font.validate(this.textFont));\n        this.textMetrics = context.measureText(this.text);\n        const ascent = this.textMetrics.actualBoundingBoxAscent;\n        this.boundingBox = new BoundingBox(0, -ascent, this.textMetrics.width, this.textMetrics.actualBoundingBoxDescent + ascent);\n        this.height = this.boundingBox.getH();\n        this.width = this.textMetrics.width;\n        return this.textMetrics;\n    }\n    /** Get the text metrics. */\n    getTextMetrics() {\n        return this.textMetrics;\n    }\n    /** Get the text height. */\n    getHeight() {\n        return this.height;\n    }\n    setOriginX(x) {\n        const bbox = defined(this.boundingBox);\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.xShift = -xShift;\n    }\n    setOriginY(y) {\n        const bbox = defined(this.boundingBox);\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.yShift = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n}\n_a = Element, _Element_context = new WeakMap(), _Element_attrs = new WeakMap();\nElement.ID = 1000;\n/** Canvas used to measure text. */\n_Element_txtCanvas = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId === null) {\n            return;\n        }\n        if (elementId === '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {\n            ornament.setPosition(params.position);\n        }\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.topStave, params.bottomStave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.code)\n            vibratoBracket.setVibratoCode(params.options.code);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n","import { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { CommonMetrics, Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class Flow {\n    static get BUILD() {\n        return {\n            /** version number. */\n            VERSION: VERSION,\n            /** git commit ID that this library was built from. */\n            ID: ID,\n            /** The date when this library was compiled. */\n            DATE: DATE,\n        };\n    }\n    /**\n     * Examples:\n     * ```\n     * Vex.Flow.setMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\n     * ```\n     *\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\n     * 'Bravura', 'Gonville', 'Custom'.\n     *\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\n     * which includes a single music font. Calling this method is unnecessary.\n     *\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\n     * In this case, the default music font stack is empty.\n     * Example:\n     * ```\n     * await Vex.Flow.fetchMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Petaluma');\n     * ... (do VexFlow stuff) ...\n     * ```\n     * See `demos/fonts/` for more examples.\n     *\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\n     */\n    static setMusicFont(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        CommonMetrics.fontFamily = fontNames.join(',');\n    }\n    static getMusicFont() {\n        return Tables.lookupMetric('fontFamily').split(',');\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.GlyphNote = GlyphNote;\nFlow.Glyphs = Glyphs;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nFlow.SymbolModifiers = SymbolModifiers;\nFlow.CurvePosition = CurvePosition;\nFlow.FontWeight = FontWeight;\nFlow.FontStyle = FontStyle;\nFlow.ModifierPosition = ModifierPosition;\nFlow.RendererBackends = RendererBackends;\nFlow.RendererLineEndType = RendererLineEndType;\nFlow.BarlineType = BarlineType;\nFlow.StaveModifierPosition = StaveModifierPosition;\nFlow.VoltaType = VoltaType;\nFlow.TextBracketPosition = TextBracketPosition;\nFlow.TextJustification = TextJustification;\nFlow.VoiceMode = VoiceMode;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Font.SIZE + 'pt ';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * @param fontName\n     * @param woffURL The absolute or relative URL to the woff file.\n     * @param includeWoff2 If true, we assume that a woff2 file is in\n     * the same folder as the woff file, and will append a `2` to the url.\n     */\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\n    // eslint-disable-next-line\n    // @ts-ignore\n    static loadWebFont(fontName, woffURL) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const fontFace = new FontFace(fontName, `url(${woffURL})`);\n            yield fontFace.load();\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    /**\n     * Load the web fonts that are used by your app.\n     * If fontNames is undefined, all fonts in Font.WEB_FONT_FILES will be loaded.\n     *\n     * For example, `flow.html` calls:\n     *   `await Vex.Flow.Font.loadWebFonts();`\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     *\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\n     * for your app.\n     */\n    static loadWebFonts(fontNames) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allFiles = Font.WEB_FONT_FILES;\n            if (!fontNames) {\n                fontNames = Object.keys(allFiles);\n            }\n            const host = Font.WEB_FONT_HOST;\n            for (const fontName of fontNames) {\n                const fontPath = allFiles[fontName];\n                if (fontPath) {\n                    Font.loadWebFont(fontName, host + fontPath);\n                }\n            }\n        });\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n/** Default sans-serif font family. */\nFont.SANS_SERIF = 'Arial, sans-serif';\n/** Default serif font family. */\nFont.SERIF = 'Times New Roman, serif';\n/** Default font size in `pt`. */\nFont.SIZE = 10;\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Discussion on GDPR concerns:\n * https://www.jsdelivr.com/blog/how-the-german-courts-ruling-on-google-fonts-affects-jsdelivr-and-why-it-is-safe-to-use/\n *\n * You can also self host, and specify your own server URL here.\n */\nFont.WEB_FONT_HOST = 'https://cdn.jsdelivr.net/npm/vexflow-fonts@1.0.6/';\n/**\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\n * set of fonts to load. See: `Font.loadWebFonts()`.\n */\nFont.WEB_FONT_FILES = {\n    Academico: 'academico/Academico_0.902.woff2',\n    Bravura: 'bravura/Bravura_1.392.woff2',\n    BravuraText: 'bravura/BravuraText_1.393.woff2',\n    GonvilleSmufl: 'gonvillesmufl/GonvilleSmufl_1.100.woff2',\n    Gootville: 'gootville/Gootville_1.3.woff2',\n    GootvilleText: 'gootville/GootvilleText_1.2.woff2',\n    Leland: 'leland/Leland_0.75.woff2',\n    LelandText: 'leland/LelandText_0.75.woff2',\n    Petaluma: 'petaluma/Petaluma_1.065.woff2',\n    'Petaluma Script': 'petaluma/PetalumaScript_1.10_FS.woff2',\n    MuseJazz: 'musejazz/MuseJazz_1.0.woff2',\n    MuseJazzText: 'musejazz/MuseJazzText_1.0.woff2',\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff2',\n    FinaleAsh: 'finale/FinaleAsh_1.7.woff2',\n    FinaleAshText: 'finale/FinaleAshText_1.3.woff2',\n    FinaleJazz: 'finale/FinaleJazz_1.9.woff2',\n    FinaleJazzText: 'finale/FinaleJazzText_1.3.woff2',\n    FinaleBroadway: 'finale/FinaleBroadway_1.4.woff2',\n    FinaleBroadwayText: 'finale/FinaleBroadwayText_1.1.woff2',\n    FinaleMaestro: 'finale/FinaleMaestro_2.7.woff2',\n    FinaleMaestroText: 'finale/FinaleMaestroText-Regular_1.6.woff2',\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Beam } from './beam';\nimport { Font } from './font';\nimport { Fraction } from './fraction';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util';\nimport { Voice } from './voice';\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length === 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        var _a, _b;\n        options = Object.assign({ stavePadding: Tables.lookupMetric('Stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autoBeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autoBeam: true})`\n     *    * Setting `alignRests` a struct is needed `(context, stave, notes, {alignRests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autoBeam: true, alignRests: true})`\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            autoBeam: false,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.autoBeam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { alignRests: options.alignRests })\n            .formatToStave([voice], stave, { alignRests: options.alignRests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autoBeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {\n        let opts = {\n            autoBeam,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.autoBeam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { alignRests: opts.alignRests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const line = currTickable.getLineForRest();\n                if (line !== 3) {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Tables.lookupMetric('Stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length === 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const configMinPadding = Tables.lookupMetric('Stave.endPaddingMin');\n        const configMaxPadding = Tables.lookupMetric('Stave.endPaddingMax');\n        const leftPadding = Tables.lookupMetric('Stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.alignRests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ alignRests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.alignRests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// @author Joshua Koo / @zz85\n// @author @incompleteopus\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Fraction_fractionA, _Fraction_fractionB;\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(compare).simplify();\n        const b = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionB).copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = __classPrivateFieldGet(Fraction, _a, \"f\", _Fraction_fractionA).copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n_a = Fraction;\n// Cached objects for comparisons.\n_Fraction_fractionA = { value: new Fraction() };\n_Fraction_fractionB = { value: new Fraction() };\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { leftShift, rightShift } = state;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textHeight = Tables.lookupMetric('FretHandFinger.fontSize');\n            if (num.position === ModifierPosition.ABOVE) {\n                state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (leftShift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            numsList.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            let numShift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = numsList[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = leftShift + shiftL;\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + numShiftL);\n                numShift = leftShift + numWidth; // spacing\n                xWidthL = numShift > xWidthL ? numShift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numShift = shiftRight + numWidth; // spacing\n                xWidthR = numShift > xWidthR ? numShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.setFretHandFinger(finger);\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n    }\n    setFretHandFinger(finger) {\n        this.text = finger;\n        this.measureText();\n        return this;\n    }\n    getFretHandFinger() {\n        return this.text;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dotX = start.x + this.xOffset;\n        let dotY = start.y + this.yOffset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dotX -= 4;\n                dotY -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dotX -= 2;\n                dotY += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        this.renderText(ctx, dotX, dotY);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Any glyph that is set to appear on a Stave and take up musical time and graphical space.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignoreTicks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.text = glyph;\n        this.measureText();\n        return this;\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        this.renderText(ctx, x, stave.getYForLine(this.options.line));\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// This file was generated by `glyph_codes.js'\n// The enum includes all SMuFL glyphs, and a few others that VexFlow uses.\n// See the list of SMuFL glyphs:\n//   https://w3c.github.io/smufl/latest/tables/\n//   https://raw.githubusercontent.com/w3c/smufl/gh-pages/metadata/glyphnames.json\n// We renamed the two SMuFL names that start with a digit:\n//   4stringTabClef => fourStringTabClef\n//   6stringTabClef => sixStringTabClef\n//\nexport var Glyphs;\n(function (Glyphs) {\n    ////// SPECIAL GLYPHS ///////////////////////////////////////\n    // Null character\n    Glyphs[\"null\"] = \"\\0\";\n    ////// SMuFL GLYPHS /////////////////////////////////////////\n    // U+E06E  4-string tab clef\n    Glyphs[\"fourStringTabClef\"] = \"\\uE06E\";\n    // U+E06D  6-string tab clef\n    Glyphs[\"sixStringTabClef\"] = \"\\uE06D\";\n    // U+E30D  11 large diesis down, 3° down [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisDown\"] = \"\\uE30D\";\n    // U+E30C  11 large diesis up, (11L), (sharp less 11M), 3° up [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisUp\"] = \"\\uE30C\";\n    // U+E30B  11 medium diesis down, 1°[17 31] 2°46 down, 1/4-tone down\n    Glyphs[\"accSagittal11MediumDiesisDown\"] = \"\\uE30B\";\n    // U+E30A  11 medium diesis up, (11M), 1°[17 31] 2°46 up, 1/4-tone up\n    Glyphs[\"accSagittal11MediumDiesisUp\"] = \"\\uE30A\";\n    // U+E3AB  11:19 large diesis down\n    Glyphs[\"accSagittal11v19LargeDiesisDown\"] = \"\\uE3AB\";\n    // U+E3AA  11:19 large diesis up, (11:19L, apotome less 11:19M)\n    Glyphs[\"accSagittal11v19LargeDiesisUp\"] = \"\\uE3AA\";\n    // U+E3A3  11:19 medium diesis down\n    Glyphs[\"accSagittal11v19MediumDiesisDown\"] = \"\\uE3A3\";\n    // U+E3A2  11:19 medium diesis up, (11:19M, 11M plus 19s)\n    Glyphs[\"accSagittal11v19MediumDiesisUp\"] = \"\\uE3A2\";\n    // U+E397  11:49 comma down\n    Glyphs[\"accSagittal11v49CommaDown\"] = \"\\uE397\";\n    // U+E396  11:49 comma up, (11:49C, 11M less 49C)\n    Glyphs[\"accSagittal11v49CommaUp\"] = \"\\uE396\";\n    // U+E395  143 comma down\n    Glyphs[\"accSagittal143CommaDown\"] = \"\\uE395\";\n    // U+E394  143 comma up, (143C, 13L less 11M)\n    Glyphs[\"accSagittal143CommaUp\"] = \"\\uE394\";\n    // U+E343  17 comma down\n    Glyphs[\"accSagittal17CommaDown\"] = \"\\uE343\";\n    // U+E342  17 comma up, (17C)\n    Glyphs[\"accSagittal17CommaUp\"] = \"\\uE342\";\n    // U+E393  17 kleisma down\n    Glyphs[\"accSagittal17KleismaDown\"] = \"\\uE393\";\n    // U+E392  17 kleisma up, (17k)\n    Glyphs[\"accSagittal17KleismaUp\"] = \"\\uE392\";\n    // U+E399  19 comma down\n    Glyphs[\"accSagittal19CommaDown\"] = \"\\uE399\";\n    // U+E398  19 comma up, (19C)\n    Glyphs[\"accSagittal19CommaUp\"] = \"\\uE398\";\n    // U+E391  19 schisma down\n    Glyphs[\"accSagittal19SchismaDown\"] = \"\\uE391\";\n    // U+E390  19 schisma up, (19s)\n    Glyphs[\"accSagittal19SchismaUp\"] = \"\\uE390\";\n    // U+E3F5  1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal1MinaDown\"] = \"\\uE3F5\";\n    // U+E3F4  1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal1MinaUp\"] = \"\\uE3F4\";\n    // U+E3F9  1 tina down, 7²⋅11⋅19/5-schismina down, 0.17 cents down\n    Glyphs[\"accSagittal1TinaDown\"] = \"\\uE3F9\";\n    // U+E3F8  1 tina up, 7²⋅11⋅19/5-schismina up, 0.17 cents up\n    Glyphs[\"accSagittal1TinaUp\"] = \"\\uE3F8\";\n    // U+E371  23 comma down, 2° down [96 EDO], 1/8-tone down\n    Glyphs[\"accSagittal23CommaDown\"] = \"\\uE371\";\n    // U+E370  23 comma up, (23C), 2° up [96 EDO], 1/8-tone up\n    Glyphs[\"accSagittal23CommaUp\"] = \"\\uE370\";\n    // U+E39F  23 small diesis down\n    Glyphs[\"accSagittal23SmallDiesisDown\"] = \"\\uE39F\";\n    // U+E39E  23 small diesis up, (23S)\n    Glyphs[\"accSagittal23SmallDiesisUp\"] = \"\\uE39E\";\n    // U+E307  25 small diesis down, 2° down [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisDown\"] = \"\\uE307\";\n    // U+E306  25 small diesis up, (25S, ~5:13S, ~37S, 5C plus 5C), 2° up [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisUp\"] = \"\\uE306\";\n    // U+E3F7  2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal2MinasDown\"] = \"\\uE3F7\";\n    // U+E3F6  2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal2MinasUp\"] = \"\\uE3F6\";\n    // U+E3FB  2 tinas down, 1/(7³⋅17)-schismina down, 0.30 cents down\n    Glyphs[\"accSagittal2TinasDown\"] = \"\\uE3FB\";\n    // U+E3FA  2 tinas up, 1/(7³⋅17)-schismina up, 0.30 cents up\n    Glyphs[\"accSagittal2TinasUp\"] = \"\\uE3FA\";\n    // U+E30F  35 large diesis down, 2° down [50 EDO], 5/18-tone down\n    Glyphs[\"accSagittal35LargeDiesisDown\"] = \"\\uE30F\";\n    // U+E30E  35 large diesis up, (35L, ~13L, ~125L, sharp less 35M), 2°50 up\n    Glyphs[\"accSagittal35LargeDiesisUp\"] = \"\\uE30E\";\n    // U+E309  35 medium diesis down, 1°[50] 2°[27] down, 2/9-tone down\n    Glyphs[\"accSagittal35MediumDiesisDown\"] = \"\\uE309\";\n    // U+E308  35 medium diesis up, (35M, ~13M, ~125M, 5C plus 7C), 2/9-tone up\n    Glyphs[\"accSagittal35MediumDiesisUp\"] = \"\\uE308\";\n    // U+E3FD  3 tinas down, 1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal3TinasDown\"] = \"\\uE3FD\";\n    // U+E3FC  3 tinas up, 1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal3TinasUp\"] = \"\\uE3FC\";\n    // U+E3A9  49 large diesis down\n    Glyphs[\"accSagittal49LargeDiesisDown\"] = \"\\uE3A9\";\n    // U+E3A8  49 large diesis up, (49L, ~31L, apotome less 49M)\n    Glyphs[\"accSagittal49LargeDiesisUp\"] = \"\\uE3A8\";\n    // U+E3A5  49 medium diesis down\n    Glyphs[\"accSagittal49MediumDiesisDown\"] = \"\\uE3A5\";\n    // U+E3A4  49 medium diesis up, (49M, ~31M, 7C plus 7C)\n    Glyphs[\"accSagittal49MediumDiesisUp\"] = \"\\uE3A4\";\n    // U+E39D  49 small diesis down\n    Glyphs[\"accSagittal49SmallDiesisDown\"] = \"\\uE39D\";\n    // U+E39C  49 small diesis up, (49S, ~31S)\n    Glyphs[\"accSagittal49SmallDiesisUp\"] = \"\\uE39C\";\n    // U+E3FF  4 tinas down, 5²⋅11²/7-schismina down, 0.57 cents down\n    Glyphs[\"accSagittal4TinasDown\"] = \"\\uE3FF\";\n    // U+E3FE  4 tinas up, 5²⋅11²/7-schismina up, 0.57 cents up\n    Glyphs[\"accSagittal4TinasUp\"] = \"\\uE3FE\";\n    // U+E345  55 comma down, 3° down [96 EDO], 3/16-tone down\n    Glyphs[\"accSagittal55CommaDown\"] = \"\\uE345\";\n    // U+E344  55 comma up, (55C, 11M less 5C), 3°up [96 EDO], 3/16-tone up\n    Glyphs[\"accSagittal55CommaUp\"] = \"\\uE344\";\n    // U+E303  5 comma down, 1° down [22 27 29 34 41 46 53 96 EDOs], 1/12-tone down\n    Glyphs[\"accSagittal5CommaDown\"] = \"\\uE303\";\n    // U+E302  5 comma up, (5C), 1° up [22 27 29 34 41 46 53 96 EDOs], 1/12-tone up\n    Glyphs[\"accSagittal5CommaUp\"] = \"\\uE302\";\n    // U+E401  5 tinas down, 7⁴/25-schismina down, 0.72 cents down\n    Glyphs[\"accSagittal5TinasDown\"] = \"\\uE401\";\n    // U+E400  5 tinas up, 7⁴/25-schismina up, 0.72 cents up\n    Glyphs[\"accSagittal5TinasUp\"] = \"\\uE400\";\n    // U+E349  5:11 small diesis down\n    Glyphs[\"accSagittal5v11SmallDiesisDown\"] = \"\\uE349\";\n    // U+E348  5:11 small diesis up, (5:11S, ~7:13S, ~11:17S, 5:7k plus 7:11C)\n    Glyphs[\"accSagittal5v11SmallDiesisUp\"] = \"\\uE348\";\n    // U+E3AD  5:13 large diesis down\n    Glyphs[\"accSagittal5v13LargeDiesisDown\"] = \"\\uE3AD\";\n    // U+E3AC  5:13 large diesis up, (5:13L, ~37L, apotome less 5:13M)\n    Glyphs[\"accSagittal5v13LargeDiesisUp\"] = \"\\uE3AC\";\n    // U+E3A1  5:13 medium diesis down\n    Glyphs[\"accSagittal5v13MediumDiesisDown\"] = \"\\uE3A1\";\n    // U+E3A0  5:13 medium diesis up, (5:13M, ~37M, 5C plus 13C)\n    Glyphs[\"accSagittal5v13MediumDiesisUp\"] = \"\\uE3A0\";\n    // U+E373  5:19 comma down, 1/20-tone down\n    Glyphs[\"accSagittal5v19CommaDown\"] = \"\\uE373\";\n    // U+E372  5:19 comma up, (5:19C, 5C plus 19s), 1/20-tone up\n    Glyphs[\"accSagittal5v19CommaUp\"] = \"\\uE372\";\n    // U+E375  5:23 small diesis down, 2° down [60 EDO], 1/5-tone down\n    Glyphs[\"accSagittal5v23SmallDiesisDown\"] = \"\\uE375\";\n    // U+E374  5:23 small diesis up, (5:23S, 5C plus 23C), 2° up [60 EDO], 1/5-tone up\n    Glyphs[\"accSagittal5v23SmallDiesisUp\"] = \"\\uE374\";\n    // U+E3A7  5:49 medium diesis down\n    Glyphs[\"accSagittal5v49MediumDiesisDown\"] = \"\\uE3A7\";\n    // U+E3A6  5:49 medium diesis up, (5:49M, half apotome)\n    Glyphs[\"accSagittal5v49MediumDiesisUp\"] = \"\\uE3A6\";\n    // U+E301  5:7 kleisma down\n    Glyphs[\"accSagittal5v7KleismaDown\"] = \"\\uE301\";\n    // U+E300  5:7 kleisma up, (5:7k, ~11:13k, 7C less 5C)\n    Glyphs[\"accSagittal5v7KleismaUp\"] = \"\\uE300\";\n    // U+E403  6 tinas down, 2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal6TinasDown\"] = \"\\uE403\";\n    // U+E402  6 tinas up, 2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal6TinasUp\"] = \"\\uE402\";\n    // U+E305  7 comma down, 1° down [43 EDO], 2° down [72 EDO], 1/6-tone down\n    Glyphs[\"accSagittal7CommaDown\"] = \"\\uE305\";\n    // U+E304  7 comma up, (7C), 1° up [43 EDO], 2° up [72 EDO], 1/6-tone up\n    Glyphs[\"accSagittal7CommaUp\"] = \"\\uE304\";\n    // U+E405  7 tinas down, 7/(5²⋅17)-schismina down, 1.02 cents down\n    Glyphs[\"accSagittal7TinasDown\"] = \"\\uE405\";\n    // U+E404  7 tinas up, 7/(5²⋅17)-schismina up, 1.02 cents up\n    Glyphs[\"accSagittal7TinasUp\"] = \"\\uE404\";\n    // U+E347  7:11 comma down, 1° down [60 EDO], 1/10-tone down\n    Glyphs[\"accSagittal7v11CommaDown\"] = \"\\uE347\";\n    // U+E346  7:11 comma up, (7:11C, ~13:17S, ~29S, 11L less 7C), 1° up [60 EDO]\n    Glyphs[\"accSagittal7v11CommaUp\"] = \"\\uE346\";\n    // U+E341  7:11 kleisma down\n    Glyphs[\"accSagittal7v11KleismaDown\"] = \"\\uE341\";\n    // U+E340  7:11 kleisma up, (7:11k, ~29k)\n    Glyphs[\"accSagittal7v11KleismaUp\"] = \"\\uE340\";\n    // U+E39B  7:19 comma down\n    Glyphs[\"accSagittal7v19CommaDown\"] = \"\\uE39B\";\n    // U+E39A  7:19 comma up, (7:19C, 7C less 19s)\n    Glyphs[\"accSagittal7v19CommaUp\"] = \"\\uE39A\";\n    // U+E407  8 tinas down, 11⋅17/(5²⋅7)-schismina down, 1.14 cents down\n    Glyphs[\"accSagittal8TinasDown\"] = \"\\uE407\";\n    // U+E406  8 tinas up, 11⋅17/(5²⋅7)-schismina up, 1.14 cents up\n    Glyphs[\"accSagittal8TinasUp\"] = \"\\uE406\";\n    // U+E409  9 tinas down, 1/(7²⋅11)-schismina down, 1.26 cents down\n    Glyphs[\"accSagittal9TinasDown\"] = \"\\uE409\";\n    // U+E408  9 tinas up, 1/(7²⋅11)-schismina up, 1.26 cents up\n    Glyphs[\"accSagittal9TinasUp\"] = \"\\uE408\";\n    // U+E3F2  Acute, 5 schisma up (5s), 2 cents up\n    Glyphs[\"accSagittalAcute\"] = \"\\uE3F2\";\n    // U+E335  Double flat, (2 apotomes down)[almost all EDOs], whole-tone down\n    Glyphs[\"accSagittalDoubleFlat\"] = \"\\uE335\";\n    // U+E3E9  Double flat 11:49C-up\n    Glyphs[\"accSagittalDoubleFlat11v49CUp\"] = \"\\uE3E9\";\n    // U+E3EB  Double flat 143C-up\n    Glyphs[\"accSagittalDoubleFlat143CUp\"] = \"\\uE3EB\";\n    // U+E365  Double flat 17C-up\n    Glyphs[\"accSagittalDoubleFlat17CUp\"] = \"\\uE365\";\n    // U+E3ED  Double flat 17k-up\n    Glyphs[\"accSagittalDoubleFlat17kUp\"] = \"\\uE3ED\";\n    // U+E3E7  Double flat 19C-up\n    Glyphs[\"accSagittalDoubleFlat19CUp\"] = \"\\uE3E7\";\n    // U+E3EF  Double flat 19s-up\n    Glyphs[\"accSagittalDoubleFlat19sUp\"] = \"\\uE3EF\";\n    // U+E387  Double flat 23C-up, 14° down [96 EDO], 7/8-tone down\n    Glyphs[\"accSagittalDoubleFlat23CUp\"] = \"\\uE387\";\n    // U+E3E1  Double flat 23S-up\n    Glyphs[\"accSagittalDoubleFlat23SUp\"] = \"\\uE3E1\";\n    // U+E32D  Double flat 25S-up, 8°down [53 EDO]\n    Glyphs[\"accSagittalDoubleFlat25SUp\"] = \"\\uE32D\";\n    // U+E3E3  Double flat 49S-up\n    Glyphs[\"accSagittalDoubleFlat49SUp\"] = \"\\uE3E3\";\n    // U+E363  Double flat 55C-up, 13° down [96 EDO], 13/16-tone down\n    Glyphs[\"accSagittalDoubleFlat55CUp\"] = \"\\uE363\";\n    // U+E331  Double flat 5C-up, 5°[22 29] 7°[34 41] 9°53 down, 11/12 tone down\n    Glyphs[\"accSagittalDoubleFlat5CUp\"] = \"\\uE331\";\n    // U+E35F  Double flat 5:11S-up\n    Glyphs[\"accSagittalDoubleFlat5v11SUp\"] = \"\\uE35F\";\n    // U+E385  Double flat 5:19C-up, 19/20-tone down\n    Glyphs[\"accSagittalDoubleFlat5v19CUp\"] = \"\\uE385\";\n    // U+E383  Double flat 5:23S-up, 8° down [60 EDO], 4/5-tone down\n    Glyphs[\"accSagittalDoubleFlat5v23SUp\"] = \"\\uE383\";\n    // U+E333  Double flat 5:7k-up\n    Glyphs[\"accSagittalDoubleFlat5v7kUp\"] = \"\\uE333\";\n    // U+E32F  Double flat 7C-up, 5° down [43 EDO], 10° down [72 EDO], 5/6-tone down\n    Glyphs[\"accSagittalDoubleFlat7CUp\"] = \"\\uE32F\";\n    // U+E361  Double flat 7:11C-up, 9° down [60 EDO], 9/10-tone down\n    Glyphs[\"accSagittalDoubleFlat7v11CUp\"] = \"\\uE361\";\n    // U+E367  Double flat 7:11k-up\n    Glyphs[\"accSagittalDoubleFlat7v11kUp\"] = \"\\uE367\";\n    // U+E3E5  Double flat 7:19C-up\n    Glyphs[\"accSagittalDoubleFlat7v19CUp\"] = \"\\uE3E5\";\n    // U+E334  Double sharp, (2 apotomes up)[almost all EDOs], whole-tone up\n    Glyphs[\"accSagittalDoubleSharp\"] = \"\\uE334\";\n    // U+E3E8  Double sharp 11:49C-down\n    Glyphs[\"accSagittalDoubleSharp11v49CDown\"] = \"\\uE3E8\";\n    // U+E3EA  Double sharp 143C-down\n    Glyphs[\"accSagittalDoubleSharp143CDown\"] = \"\\uE3EA\";\n    // U+E364  Double sharp 17C-down\n    Glyphs[\"accSagittalDoubleSharp17CDown\"] = \"\\uE364\";\n    // U+E3EC  Double sharp 17k-down\n    Glyphs[\"accSagittalDoubleSharp17kDown\"] = \"\\uE3EC\";\n    // U+E3E6  Double sharp 19C-down\n    Glyphs[\"accSagittalDoubleSharp19CDown\"] = \"\\uE3E6\";\n    // U+E3EE  Double sharp 19s-down\n    Glyphs[\"accSagittalDoubleSharp19sDown\"] = \"\\uE3EE\";\n    // U+E386  Double sharp 23C-down, 14°up [96 EDO], 7/8-tone up\n    Glyphs[\"accSagittalDoubleSharp23CDown\"] = \"\\uE386\";\n    // U+E3E0  Double sharp 23S-down\n    Glyphs[\"accSagittalDoubleSharp23SDown\"] = \"\\uE3E0\";\n    // U+E32C  Double sharp 25S-down, 8°up [53 EDO]\n    Glyphs[\"accSagittalDoubleSharp25SDown\"] = \"\\uE32C\";\n    // U+E3E2  Double sharp 49S-down\n    Glyphs[\"accSagittalDoubleSharp49SDown\"] = \"\\uE3E2\";\n    // U+E362  Double sharp 55C-down, 13° up [96 EDO], 13/16-tone up\n    Glyphs[\"accSagittalDoubleSharp55CDown\"] = \"\\uE362\";\n    // U+E330  Double sharp 5C-down, 5°[22 29] 7°[34 41] 9°53 up, 11/12 tone up\n    Glyphs[\"accSagittalDoubleSharp5CDown\"] = \"\\uE330\";\n    // U+E35E  Double sharp 5:11S-down\n    Glyphs[\"accSagittalDoubleSharp5v11SDown\"] = \"\\uE35E\";\n    // U+E384  Double sharp 5:19C-down, 19/20-tone up\n    Glyphs[\"accSagittalDoubleSharp5v19CDown\"] = \"\\uE384\";\n    // U+E382  Double sharp 5:23S-down, 8° up [60 EDO], 4/5-tone up\n    Glyphs[\"accSagittalDoubleSharp5v23SDown\"] = \"\\uE382\";\n    // U+E332  Double sharp 5:7k-down\n    Glyphs[\"accSagittalDoubleSharp5v7kDown\"] = \"\\uE332\";\n    // U+E32E  Double sharp 7C-down, 5°[43] 10°[72] up, 5/6-tone up\n    Glyphs[\"accSagittalDoubleSharp7CDown\"] = \"\\uE32E\";\n    // U+E360  Double sharp 7:11C-down, 9° up [60 EDO], 9/10-tone up\n    Glyphs[\"accSagittalDoubleSharp7v11CDown\"] = \"\\uE360\";\n    // U+E366  Double sharp 7:11k-down\n    Glyphs[\"accSagittalDoubleSharp7v11kDown\"] = \"\\uE366\";\n    // U+E3E4  Double sharp 7:19C-down\n    Glyphs[\"accSagittalDoubleSharp7v19CDown\"] = \"\\uE3E4\";\n    // U+E319  Flat, (apotome down)[almost all EDOs], 1/2-tone down\n    Glyphs[\"accSagittalFlat\"] = \"\\uE319\";\n    // U+E329  Flat 11L-down, 8° up [46 EDO]\n    Glyphs[\"accSagittalFlat11LDown\"] = \"\\uE329\";\n    // U+E327  Flat 11M-down, 3° down [17 31 EDOs], 7° down [46 EDO], 3/4-tone down\n    Glyphs[\"accSagittalFlat11MDown\"] = \"\\uE327\";\n    // U+E3DB  Flat 11:19L-down\n    Glyphs[\"accSagittalFlat11v19LDown\"] = \"\\uE3DB\";\n    // U+E3D3  Flat 11:19M-down\n    Glyphs[\"accSagittalFlat11v19MDown\"] = \"\\uE3D3\";\n    // U+E3C7  Flat 11:49C-down\n    Glyphs[\"accSagittalFlat11v49CDown\"] = \"\\uE3C7\";\n    // U+E3B9  Flat 11:49C-up\n    Glyphs[\"accSagittalFlat11v49CUp\"] = \"\\uE3B9\";\n    // U+E3C5  Flat 143C-down\n    Glyphs[\"accSagittalFlat143CDown\"] = \"\\uE3C5\";\n    // U+E3BB  Flat 143C-up\n    Glyphs[\"accSagittalFlat143CUp\"] = \"\\uE3BB\";\n    // U+E357  Flat 17C-down\n    Glyphs[\"accSagittalFlat17CDown\"] = \"\\uE357\";\n    // U+E351  Flat 17C-up\n    Glyphs[\"accSagittalFlat17CUp\"] = \"\\uE351\";\n    // U+E3C3  Flat 17k-down\n    Glyphs[\"accSagittalFlat17kDown\"] = \"\\uE3C3\";\n    // U+E3BD  Flat 17k-up\n    Glyphs[\"accSagittalFlat17kUp\"] = \"\\uE3BD\";\n    // U+E3C9  Flat 19C-down\n    Glyphs[\"accSagittalFlat19CDown\"] = \"\\uE3C9\";\n    // U+E3B7  Flat 19C-up\n    Glyphs[\"accSagittalFlat19CUp\"] = \"\\uE3B7\";\n    // U+E3C1  Flat 19s-down\n    Glyphs[\"accSagittalFlat19sDown\"] = \"\\uE3C1\";\n    // U+E3BF  Flat 19s-up\n    Glyphs[\"accSagittalFlat19sUp\"] = \"\\uE3BF\";\n    // U+E37D  Flat 23C-down, 10° down [96 EDO], 5/8-tone down\n    Glyphs[\"accSagittalFlat23CDown\"] = \"\\uE37D\";\n    // U+E37B  Flat 23C-up, 6° down [96 EDO], 3/8-tone down\n    Glyphs[\"accSagittalFlat23CUp\"] = \"\\uE37B\";\n    // U+E3CF  Flat 23S-down\n    Glyphs[\"accSagittalFlat23SDown\"] = \"\\uE3CF\";\n    // U+E3B1  Flat 23S-up\n    Glyphs[\"accSagittalFlat23SUp\"] = \"\\uE3B1\";\n    // U+E323  Flat 25S-down, 7° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SDown\"] = \"\\uE323\";\n    // U+E311  Flat 25S-up, 3° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SUp\"] = \"\\uE311\";\n    // U+E32B  Flat 35L-down, 5° down [50 EDO]\n    Glyphs[\"accSagittalFlat35LDown\"] = \"\\uE32B\";\n    // U+E325  Flat 35M-down, 4° down [50 EDO], 6° down [27 EDO], 13/18-tone down\n    Glyphs[\"accSagittalFlat35MDown\"] = \"\\uE325\";\n    // U+E3D9  Flat 49L-down\n    Glyphs[\"accSagittalFlat49LDown\"] = \"\\uE3D9\";\n    // U+E3D5  Flat 49M-down\n    Glyphs[\"accSagittalFlat49MDown\"] = \"\\uE3D5\";\n    // U+E3CD  Flat 49S-down\n    Glyphs[\"accSagittalFlat49SDown\"] = \"\\uE3CD\";\n    // U+E3B3  Flat 49S-up\n    Glyphs[\"accSagittalFlat49SUp\"] = \"\\uE3B3\";\n    // U+E359  Flat 55C-down, 11° down [96 EDO], 11/16-tone down\n    Glyphs[\"accSagittalFlat55CDown\"] = \"\\uE359\";\n    // U+E34F  Flat 55C-up, 5° down [96 EDO], 5/16-tone down\n    Glyphs[\"accSagittalFlat55CUp\"] = \"\\uE34F\";\n    // U+E31F  Flat 5C-down, 4°[22 29] 5°[27 34 41] 6°[39 46 53] down, 7/12-tone down\n    Glyphs[\"accSagittalFlat5CDown\"] = \"\\uE31F\";\n    // U+E315  Flat 5C-up, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°72 7°[96] down, 5/12-tone down\n    Glyphs[\"accSagittalFlat5CUp\"] = \"\\uE315\";\n    // U+E35D  Flat 5:11S-down\n    Glyphs[\"accSagittalFlat5v11SDown\"] = \"\\uE35D\";\n    // U+E34B  Flat 5:11S-up\n    Glyphs[\"accSagittalFlat5v11SUp\"] = \"\\uE34B\";\n    // U+E3DD  Flat 5:13L-down\n    Glyphs[\"accSagittalFlat5v13LDown\"] = \"\\uE3DD\";\n    // U+E3D1  Flat 5:13M-down\n    Glyphs[\"accSagittalFlat5v13MDown\"] = \"\\uE3D1\";\n    // U+E37F  Flat 5:19C-down, 11/20-tone down\n    Glyphs[\"accSagittalFlat5v19CDown\"] = \"\\uE37F\";\n    // U+E379  Flat 5:19C-up, 9/20-tone down\n    Glyphs[\"accSagittalFlat5v19CUp\"] = \"\\uE379\";\n    // U+E381  Flat 5:23S-down, 7° down [60 EDO], 7/10-tone down\n    Glyphs[\"accSagittalFlat5v23SDown\"] = \"\\uE381\";\n    // U+E377  Flat 5:23S-up, 3° down [60 EDO], 3/10-tone down\n    Glyphs[\"accSagittalFlat5v23SUp\"] = \"\\uE377\";\n    // U+E3D7  Flat 5:49M-down\n    Glyphs[\"accSagittalFlat5v49MDown\"] = \"\\uE3D7\";\n    // U+E31D  Flat 5:7k-down\n    Glyphs[\"accSagittalFlat5v7kDown\"] = \"\\uE31D\";\n    // U+E317  Flat 5:7k-up\n    Glyphs[\"accSagittalFlat5v7kUp\"] = \"\\uE317\";\n    // U+E321  Flat 7C-down, 4° down [43 EDO], 8° down [72 EDO], 2/3-tone down\n    Glyphs[\"accSagittalFlat7CDown\"] = \"\\uE321\";\n    // U+E313  Flat 7C-up, 2° down [43 EDO], 4° down [72 EDO], 1/3-tone down\n    Glyphs[\"accSagittalFlat7CUp\"] = \"\\uE313\";\n    // U+E35B  Flat 7:11C-down, 6° down [60 EDO], 3/5- tone down\n    Glyphs[\"accSagittalFlat7v11CDown\"] = \"\\uE35B\";\n    // U+E34D  Flat 7:11C-up, 4° down [60 EDO], 2/5-tone down\n    Glyphs[\"accSagittalFlat7v11CUp\"] = \"\\uE34D\";\n    // U+E355  Flat 7:11k-down\n    Glyphs[\"accSagittalFlat7v11kDown\"] = \"\\uE355\";\n    // U+E353  Flat 7:11k-up\n    Glyphs[\"accSagittalFlat7v11kUp\"] = \"\\uE353\";\n    // U+E3CB  Flat 7:19C-down\n    Glyphs[\"accSagittalFlat7v19CDown\"] = \"\\uE3CB\";\n    // U+E3B5  Flat 7:19C-up\n    Glyphs[\"accSagittalFlat7v19CUp\"] = \"\\uE3B5\";\n    // U+E40B  Fractional tina down, 77/(5⋅37)-schismina down, 0.08 cents down\n    Glyphs[\"accSagittalFractionalTinaDown\"] = \"\\uE40B\";\n    // U+E40A  Fractional tina up, 77/(5⋅37)-schismina up, 0.08 cents up\n    Glyphs[\"accSagittalFractionalTinaUp\"] = \"\\uE40A\";\n    // U+E3F3  Grave, 5 schisma down, 2 cents down\n    Glyphs[\"accSagittalGrave\"] = \"\\uE3F3\";\n    // U+E3F1  Shaft down, (natural for use with only diacritics down)\n    Glyphs[\"accSagittalShaftDown\"] = \"\\uE3F1\";\n    // U+E3F0  Shaft up, (natural for use with only diacritics up)\n    Glyphs[\"accSagittalShaftUp\"] = \"\\uE3F0\";\n    // U+E318  Sharp, (apotome up)[almost all EDOs], 1/2-tone up\n    Glyphs[\"accSagittalSharp\"] = \"\\uE318\";\n    // U+E328  Sharp 11L-up, 8° up [46 EDO]\n    Glyphs[\"accSagittalSharp11LUp\"] = \"\\uE328\";\n    // U+E326  Sharp 11M-up, 3° up [17 31 EDOs], 7° up [46 EDO], 3/4-tone up\n    Glyphs[\"accSagittalSharp11MUp\"] = \"\\uE326\";\n    // U+E3DA  Sharp 11:19L-up\n    Glyphs[\"accSagittalSharp11v19LUp\"] = \"\\uE3DA\";\n    // U+E3D2  Sharp 11:19M-up\n    Glyphs[\"accSagittalSharp11v19MUp\"] = \"\\uE3D2\";\n    // U+E3B8  Sharp 11:49C-down\n    Glyphs[\"accSagittalSharp11v49CDown\"] = \"\\uE3B8\";\n    // U+E3C6  Sharp 11:49C-up\n    Glyphs[\"accSagittalSharp11v49CUp\"] = \"\\uE3C6\";\n    // U+E3BA  Sharp 143C-down\n    Glyphs[\"accSagittalSharp143CDown\"] = \"\\uE3BA\";\n    // U+E3C4  Sharp 143C-up\n    Glyphs[\"accSagittalSharp143CUp\"] = \"\\uE3C4\";\n    // U+E350  Sharp 17C-down\n    Glyphs[\"accSagittalSharp17CDown\"] = \"\\uE350\";\n    // U+E356  Sharp 17C-up\n    Glyphs[\"accSagittalSharp17CUp\"] = \"\\uE356\";\n    // U+E3BC  Sharp 17k-down\n    Glyphs[\"accSagittalSharp17kDown\"] = \"\\uE3BC\";\n    // U+E3C2  Sharp 17k-up\n    Glyphs[\"accSagittalSharp17kUp\"] = \"\\uE3C2\";\n    // U+E3B6  Sharp 19C-down\n    Glyphs[\"accSagittalSharp19CDown\"] = \"\\uE3B6\";\n    // U+E3C8  Sharp 19C-up\n    Glyphs[\"accSagittalSharp19CUp\"] = \"\\uE3C8\";\n    // U+E3BE  Sharp 19s-down\n    Glyphs[\"accSagittalSharp19sDown\"] = \"\\uE3BE\";\n    // U+E3C0  Sharp 19s-up\n    Glyphs[\"accSagittalSharp19sUp\"] = \"\\uE3C0\";\n    // U+E37A  Sharp 23C-down, 6° up [96 EDO], 3/8-tone up\n    Glyphs[\"accSagittalSharp23CDown\"] = \"\\uE37A\";\n    // U+E37C  Sharp 23C-up, 10° up [96 EDO], 5/8-tone up\n    Glyphs[\"accSagittalSharp23CUp\"] = \"\\uE37C\";\n    // U+E3B0  Sharp 23S-down\n    Glyphs[\"accSagittalSharp23SDown\"] = \"\\uE3B0\";\n    // U+E3CE  Sharp 23S-up\n    Glyphs[\"accSagittalSharp23SUp\"] = \"\\uE3CE\";\n    // U+E310  Sharp 25S-down, 3° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SDown\"] = \"\\uE310\";\n    // U+E322  Sharp 25S-up, 7° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SUp\"] = \"\\uE322\";\n    // U+E32A  Sharp 35L-up, 5° up [50 EDO]\n    Glyphs[\"accSagittalSharp35LUp\"] = \"\\uE32A\";\n    // U+E324  Sharp 35M-up, 4° up [50 EDO], 6° up [27 EDO], 13/18-tone up\n    Glyphs[\"accSagittalSharp35MUp\"] = \"\\uE324\";\n    // U+E3D8  Sharp 49L-up\n    Glyphs[\"accSagittalSharp49LUp\"] = \"\\uE3D8\";\n    // U+E3D4  Sharp 49M-up\n    Glyphs[\"accSagittalSharp49MUp\"] = \"\\uE3D4\";\n    // U+E3B2  Sharp 49S-down\n    Glyphs[\"accSagittalSharp49SDown\"] = \"\\uE3B2\";\n    // U+E3CC  Sharp 49S-up\n    Glyphs[\"accSagittalSharp49SUp\"] = \"\\uE3CC\";\n    // U+E34E  Sharp 55C-down, 5° up [96 EDO], 5/16-tone up\n    Glyphs[\"accSagittalSharp55CDown\"] = \"\\uE34E\";\n    // U+E358  Sharp 55C-up, 11° up [96 EDO], 11/16-tone up\n    Glyphs[\"accSagittalSharp55CUp\"] = \"\\uE358\";\n    // U+E314  Sharp 5C-down, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°[72] 7°[96] up, 5/12-tone up\n    Glyphs[\"accSagittalSharp5CDown\"] = \"\\uE314\";\n    // U+E31E  Sharp 5C-up, 4°[22 29] 5°[27 34 41] 6°[39 46 53] up, 7/12-tone up\n    Glyphs[\"accSagittalSharp5CUp\"] = \"\\uE31E\";\n    // U+E34A  Sharp 5:11S-down\n    Glyphs[\"accSagittalSharp5v11SDown\"] = \"\\uE34A\";\n    // U+E35C  Sharp 5:11S-up\n    Glyphs[\"accSagittalSharp5v11SUp\"] = \"\\uE35C\";\n    // U+E3DC  Sharp 5:13L-up\n    Glyphs[\"accSagittalSharp5v13LUp\"] = \"\\uE3DC\";\n    // U+E3D0  Sharp 5:13M-up\n    Glyphs[\"accSagittalSharp5v13MUp\"] = \"\\uE3D0\";\n    // U+E378  Sharp 5:19C-down, 9/20-tone up\n    Glyphs[\"accSagittalSharp5v19CDown\"] = \"\\uE378\";\n    // U+E37E  Sharp 5:19C-up, 11/20-tone up\n    Glyphs[\"accSagittalSharp5v19CUp\"] = \"\\uE37E\";\n    // U+E376  Sharp 5:23S-down, 3° up [60 EDO], 3/10-tone up\n    Glyphs[\"accSagittalSharp5v23SDown\"] = \"\\uE376\";\n    // U+E380  Sharp 5:23S-up, 7° up [60 EDO], 7/10-tone up\n    Glyphs[\"accSagittalSharp5v23SUp\"] = \"\\uE380\";\n    // U+E3D6  Sharp 5:49M-up, (one and a half apotomes)\n    Glyphs[\"accSagittalSharp5v49MUp\"] = \"\\uE3D6\";\n    // U+E316  Sharp 5:7k-down\n    Glyphs[\"accSagittalSharp5v7kDown\"] = \"\\uE316\";\n    // U+E31C  Sharp 5:7k-up\n    Glyphs[\"accSagittalSharp5v7kUp\"] = \"\\uE31C\";\n    // U+E312  Sharp 7C-down, 2° up [43 EDO], 4° up [72 EDO], 1/3-tone up\n    Glyphs[\"accSagittalSharp7CDown\"] = \"\\uE312\";\n    // U+E320  Sharp 7C-up, 4° up [43 EDO], 8° up [72 EDO], 2/3-tone up\n    Glyphs[\"accSagittalSharp7CUp\"] = \"\\uE320\";\n    // U+E34C  Sharp 7:11C-down, 4° up [60 EDO], 2/5-tone up\n    Glyphs[\"accSagittalSharp7v11CDown\"] = \"\\uE34C\";\n    // U+E35A  Sharp 7:11C-up, 6° up [60 EDO], 3/5- tone up\n    Glyphs[\"accSagittalSharp7v11CUp\"] = \"\\uE35A\";\n    // U+E352  Sharp 7:11k-down\n    Glyphs[\"accSagittalSharp7v11kDown\"] = \"\\uE352\";\n    // U+E354  Sharp 7:11k-up\n    Glyphs[\"accSagittalSharp7v11kUp\"] = \"\\uE354\";\n    // U+E3B4  Sharp 7:19C-down\n    Glyphs[\"accSagittalSharp7v19CDown\"] = \"\\uE3B4\";\n    // U+E3CA  Sharp 7:19C-up\n    Glyphs[\"accSagittalSharp7v19CUp\"] = \"\\uE3CA\";\n    // U+E31A  Unused\n    Glyphs[\"accSagittalUnused1\"] = \"\\uE31A\";\n    // U+E31B  Unused\n    Glyphs[\"accSagittalUnused2\"] = \"\\uE31B\";\n    // U+E3DE  Unused\n    Glyphs[\"accSagittalUnused3\"] = \"\\uE3DE\";\n    // U+E3DF  Unused\n    Glyphs[\"accSagittalUnused4\"] = \"\\uE3DF\";\n    // U+E8CA  Combining accordion coupler dot\n    Glyphs[\"accdnCombDot\"] = \"\\uE8CA\";\n    // U+E8C8  Combining left hand, 2 ranks, empty\n    Glyphs[\"accdnCombLH2RanksEmpty\"] = \"\\uE8C8\";\n    // U+E8C9  Combining left hand, 3 ranks, empty (square)\n    Glyphs[\"accdnCombLH3RanksEmptySquare\"] = \"\\uE8C9\";\n    // U+E8C6  Combining right hand, 3 ranks, empty\n    Glyphs[\"accdnCombRH3RanksEmpty\"] = \"\\uE8C6\";\n    // U+E8C7  Combining right hand, 4 ranks, empty\n    Glyphs[\"accdnCombRH4RanksEmpty\"] = \"\\uE8C7\";\n    // U+E079  Diatonic accordion clef\n    Glyphs[\"accdnDiatonicClef\"] = \"\\uE079\";\n    // U+E8BC  Left hand, 2 ranks, 16' stop (round)\n    Glyphs[\"accdnLH2Ranks16Round\"] = \"\\uE8BC\";\n    // U+E8BD  Left hand, 2 ranks, 8' stop + 16' stop (round)\n    Glyphs[\"accdnLH2Ranks8Plus16Round\"] = \"\\uE8BD\";\n    // U+E8BB  Left hand, 2 ranks, 8' stop (round)\n    Glyphs[\"accdnLH2Ranks8Round\"] = \"\\uE8BB\";\n    // U+E8C0  Left hand, 2 ranks, full master (round)\n    Glyphs[\"accdnLH2RanksFullMasterRound\"] = \"\\uE8C0\";\n    // U+E8BF  Left hand, 2 ranks, master + 16' stop (round)\n    Glyphs[\"accdnLH2RanksMasterPlus16Round\"] = \"\\uE8BF\";\n    // U+E8BE  Left hand, 2 ranks, master (round)\n    Glyphs[\"accdnLH2RanksMasterRound\"] = \"\\uE8BE\";\n    // U+E8C4  Left hand, 3 ranks, 2' stop + 8' stop (square)\n    Glyphs[\"accdnLH3Ranks2Plus8Square\"] = \"\\uE8C4\";\n    // U+E8C2  Left hand, 3 ranks, 2' stop (square)\n    Glyphs[\"accdnLH3Ranks2Square\"] = \"\\uE8C2\";\n    // U+E8C1  Left hand, 3 ranks, 8' stop (square)\n    Glyphs[\"accdnLH3Ranks8Square\"] = \"\\uE8C1\";\n    // U+E8C3  Left hand, 3 ranks, double 8' stop (square)\n    Glyphs[\"accdnLH3RanksDouble8Square\"] = \"\\uE8C3\";\n    // U+E8C5  Left hand, 3 ranks, 2' stop + double 8' stop (tutti) (square)\n    Glyphs[\"accdnLH3RanksTuttiSquare\"] = \"\\uE8C5\";\n    // U+E8CC  Pull\n    Glyphs[\"accdnPull\"] = \"\\uE8CC\";\n    // U+E8CB  Push\n    Glyphs[\"accdnPush\"] = \"\\uE8CB\";\n    // U+E8AC  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop + 16' stop (accordion)\n    Glyphs[\"accdnRH3RanksAccordion\"] = \"\\uE8AC\";\n    // U+E8A8  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop (authentic musette)\n    Glyphs[\"accdnRH3RanksAuthenticMusette\"] = \"\\uE8A8\";\n    // U+E8AB  Right hand, 3 ranks, 8' stop + 16' stop (bandoneón)\n    Glyphs[\"accdnRH3RanksBandoneon\"] = \"\\uE8AB\";\n    // U+E8A4  Right hand, 3 ranks, 16' stop (bassoon)\n    Glyphs[\"accdnRH3RanksBassoon\"] = \"\\uE8A4\";\n    // U+E8A1  Right hand, 3 ranks, 8' stop (clarinet)\n    Glyphs[\"accdnRH3RanksClarinet\"] = \"\\uE8A1\";\n    // U+E8B1  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloLower8ve\"] = \"\\uE8B1\";\n    // U+E8B2  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloUpper8ve\"] = \"\\uE8B2\";\n    // U+E8B3  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksFullFactory\"] = \"\\uE8B3\";\n    // U+E8AA  Right hand, 3 ranks, 4' stop + 8' stop + 16' stop (harmonium)\n    Glyphs[\"accdnRH3RanksHarmonium\"] = \"\\uE8AA\";\n    // U+E8A7  Right hand, 3 ranks, 4' stop + 8' stop + upper tremolo 8' stop (imitation musette)\n    Glyphs[\"accdnRH3RanksImitationMusette\"] = \"\\uE8A7\";\n    // U+E8A3  Right hand, 3 ranks, lower tremolo 8' stop\n    Glyphs[\"accdnRH3RanksLowerTremolo8\"] = \"\\uE8A3\";\n    // U+E8AD  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop + 16' stop (master)\n    Glyphs[\"accdnRH3RanksMaster\"] = \"\\uE8AD\";\n    // U+E8A5  Right hand, 3 ranks, 4' stop + 8' stop (oboe)\n    Glyphs[\"accdnRH3RanksOboe\"] = \"\\uE8A5\";\n    // U+E8A9  Right hand, 3 ranks, 4' stop + 16' stop (organ)\n    Glyphs[\"accdnRH3RanksOrgan\"] = \"\\uE8A9\";\n    // U+E8A0  Right hand, 3 ranks, 4' stop (piccolo)\n    Glyphs[\"accdnRH3RanksPiccolo\"] = \"\\uE8A0\";\n    // U+E8AF  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksTremoloLower8ve\"] = \"\\uE8AF\";\n    // U+E8B0  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTremoloUpper8ve\"] = \"\\uE8B0\";\n    // U+E8AE  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTwoChoirs\"] = \"\\uE8AE\";\n    // U+E8A2  Right hand, 3 ranks, upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksUpperTremolo8\"] = \"\\uE8A2\";\n    // U+E8A6  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop (violin)\n    Glyphs[\"accdnRH3RanksViolin\"] = \"\\uE8A6\";\n    // U+E8B5  Right hand, 4 ranks, alto\n    Glyphs[\"accdnRH4RanksAlto\"] = \"\\uE8B5\";\n    // U+E8BA  Right hand, 4 ranks, bass/alto\n    Glyphs[\"accdnRH4RanksBassAlto\"] = \"\\uE8BA\";\n    // U+E8B7  Right hand, 4 ranks, master\n    Glyphs[\"accdnRH4RanksMaster\"] = \"\\uE8B7\";\n    // U+E8B8  Right hand, 4 ranks, soft bass\n    Glyphs[\"accdnRH4RanksSoftBass\"] = \"\\uE8B8\";\n    // U+E8B9  Right hand, 4 ranks, soft tenor\n    Glyphs[\"accdnRH4RanksSoftTenor\"] = \"\\uE8B9\";\n    // U+E8B4  Right hand, 4 ranks, soprano\n    Glyphs[\"accdnRH4RanksSoprano\"] = \"\\uE8B4\";\n    // U+E8B6  Right hand, 4 ranks, tenor\n    Glyphs[\"accdnRH4RanksTenor\"] = \"\\uE8B6\";\n    // U+E8CD  Ricochet (2 tones)\n    Glyphs[\"accdnRicochet2\"] = \"\\uE8CD\";\n    // U+E8CE  Ricochet (3 tones)\n    Glyphs[\"accdnRicochet3\"] = \"\\uE8CE\";\n    // U+E8CF  Ricochet (4 tones)\n    Glyphs[\"accdnRicochet4\"] = \"\\uE8CF\";\n    // U+E8D0  Ricochet (5 tones)\n    Glyphs[\"accdnRicochet5\"] = \"\\uE8D0\";\n    // U+E8D1  Ricochet (6 tones)\n    Glyphs[\"accdnRicochet6\"] = \"\\uE8D1\";\n    // U+E8D2  Combining ricochet for stem (2 tones)\n    Glyphs[\"accdnRicochetStem2\"] = \"\\uE8D2\";\n    // U+E8D3  Combining ricochet for stem (3 tones)\n    Glyphs[\"accdnRicochetStem3\"] = \"\\uE8D3\";\n    // U+E8D4  Combining ricochet for stem (4 tones)\n    Glyphs[\"accdnRicochetStem4\"] = \"\\uE8D4\";\n    // U+E8D5  Combining ricochet for stem (5 tones)\n    Glyphs[\"accdnRicochetStem5\"] = \"\\uE8D5\";\n    // U+E8D6  Combining ricochet for stem (6 tones)\n    Glyphs[\"accdnRicochetStem6\"] = \"\\uE8D6\";\n    // U+E454  1-comma flat\n    Glyphs[\"accidental1CommaFlat\"] = \"\\uE454\";\n    // U+E450  1-comma sharp\n    Glyphs[\"accidental1CommaSharp\"] = \"\\uE450\";\n    // U+E455  2-comma flat\n    Glyphs[\"accidental2CommaFlat\"] = \"\\uE455\";\n    // U+E451  2-comma sharp\n    Glyphs[\"accidental2CommaSharp\"] = \"\\uE451\";\n    // U+E456  3-comma flat\n    Glyphs[\"accidental3CommaFlat\"] = \"\\uE456\";\n    // U+E452  3-comma sharp\n    Glyphs[\"accidental3CommaSharp\"] = \"\\uE452\";\n    // U+E457  4-comma flat\n    Glyphs[\"accidental4CommaFlat\"] = \"\\uE457\";\n    // U+E453  5-comma sharp\n    Glyphs[\"accidental5CommaSharp\"] = \"\\uE453\";\n    // U+E27B  Arrow down (lower by one quarter-tone)\n    Glyphs[\"accidentalArrowDown\"] = \"\\uE27B\";\n    // U+E27A  Arrow up (raise by one quarter-tone)\n    Glyphs[\"accidentalArrowUp\"] = \"\\uE27A\";\n    // U+E442  Bakiye (flat)\n    Glyphs[\"accidentalBakiyeFlat\"] = \"\\uE442\";\n    // U+E445  Bakiye (sharp)\n    Glyphs[\"accidentalBakiyeSharp\"] = \"\\uE445\";\n    // U+E26C  Accidental bracket, left\n    Glyphs[\"accidentalBracketLeft\"] = \"\\uE26C\";\n    // U+E26D  Accidental bracket, right\n    Glyphs[\"accidentalBracketRight\"] = \"\\uE26D\";\n    // U+E440  Büyük mücenneb (flat)\n    Glyphs[\"accidentalBuyukMucennebFlat\"] = \"\\uE440\";\n    // U+E447  Büyük mücenneb (sharp)\n    Glyphs[\"accidentalBuyukMucennebSharp\"] = \"\\uE447\";\n    // U+E2EF  Combining close curly brace\n    Glyphs[\"accidentalCombiningCloseCurlyBrace\"] = \"\\uE2EF\";\n    // U+E2E6  Combining lower by one 17-limit schisma\n    Glyphs[\"accidentalCombiningLower17Schisma\"] = \"\\uE2E6\";\n    // U+E2E8  Combining lower by one 19-limit schisma\n    Glyphs[\"accidentalCombiningLower19Schisma\"] = \"\\uE2E8\";\n    // U+E2EA  Combining lower by one 23-limit comma\n    Glyphs[\"accidentalCombiningLower23Limit29LimitComma\"] = \"\\uE2EA\";\n    // U+EE50  Combining lower by one 29-limit comma\n    Glyphs[\"accidentalCombiningLower29LimitComma\"] = \"\\uEE50\";\n    // U+E2EC  Combining lower by one 31-limit schisma\n    Glyphs[\"accidentalCombiningLower31Schisma\"] = \"\\uE2EC\";\n    // U+EE52  Combining lower by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningLower37Quartertone\"] = \"\\uEE52\";\n    // U+EE54  Combining lower by one 41-limit comma\n    Glyphs[\"accidentalCombiningLower41Comma\"] = \"\\uEE54\";\n    // U+EE56  Combining lower by one 43-limit comma\n    Glyphs[\"accidentalCombiningLower43Comma\"] = \"\\uEE56\";\n    // U+EE58  Combining lower by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningLower47Quartertone\"] = \"\\uEE58\";\n    // U+E2F7  Combining lower by one 53-limit comma\n    Glyphs[\"accidentalCombiningLower53LimitComma\"] = \"\\uE2F7\";\n    // U+E2EE  Combining open curly brace\n    Glyphs[\"accidentalCombiningOpenCurlyBrace\"] = \"\\uE2EE\";\n    // U+E2E7  Combining raise by one 17-limit schisma\n    Glyphs[\"accidentalCombiningRaise17Schisma\"] = \"\\uE2E7\";\n    // U+E2E9  Combining raise by one 19-limit schisma\n    Glyphs[\"accidentalCombiningRaise19Schisma\"] = \"\\uE2E9\";\n    // U+E2EB  Combining raise by one 23-limit comma\n    Glyphs[\"accidentalCombiningRaise23Limit29LimitComma\"] = \"\\uE2EB\";\n    // U+EE51  Combining raise by one 29-limit comma\n    Glyphs[\"accidentalCombiningRaise29LimitComma\"] = \"\\uEE51\";\n    // U+E2ED  Combining raise by one 31-limit schisma\n    Glyphs[\"accidentalCombiningRaise31Schisma\"] = \"\\uE2ED\";\n    // U+EE53  Combining raise by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningRaise37Quartertone\"] = \"\\uEE53\";\n    // U+EE55  Combining raise by one 41-limit comma\n    Glyphs[\"accidentalCombiningRaise41Comma\"] = \"\\uEE55\";\n    // U+EE57  Combining raise by one 43-limit comma\n    Glyphs[\"accidentalCombiningRaise43Comma\"] = \"\\uEE57\";\n    // U+EE59  Combining raise by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningRaise47Quartertone\"] = \"\\uEE59\";\n    // U+E2F8  Combining raise by one 53-limit comma\n    Glyphs[\"accidentalCombiningRaise53LimitComma\"] = \"\\uE2F8\";\n    // U+E47A  Syntonic/Didymus comma (80:81) down (Bosanquet)\n    Glyphs[\"accidentalCommaSlashDown\"] = \"\\uE47A\";\n    // U+E479  Syntonic/Didymus comma (80:81) up (Bosanquet)\n    Glyphs[\"accidentalCommaSlashUp\"] = \"\\uE479\";\n    // U+E264  Double flat\n    Glyphs[\"accidentalDoubleFlat\"] = \"\\uE264\";\n    // U+1D12B  Double flat\n    Glyphs[\"accidentalDoubleFlatAlternate\"] = \"\\uD834\\uDD2B\";\n    // U+ED30  Arabic double flat\n    Glyphs[\"accidentalDoubleFlatArabic\"] = \"\\uED30\";\n    // U+E2F0  Double flat equal tempered semitone\n    Glyphs[\"accidentalDoubleFlatEqualTempered\"] = \"\\uE2F0\";\n    // U+E2C0  Double flat lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowDown\"] = \"\\uE2C0\";\n    // U+E2C5  Double flat raised by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowUp\"] = \"\\uE2C5\";\n    // U+E483  Reversed double flat\n    Glyphs[\"accidentalDoubleFlatReversed\"] = \"\\uE483\";\n    // U+E2D4  Double flat lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsDown\"] = \"\\uE2D4\";\n    // U+E2D9  Double flat raised by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsUp\"] = \"\\uE2D9\";\n    // U+E485  Turned double flat\n    Glyphs[\"accidentalDoubleFlatTurned\"] = \"\\uE485\";\n    // U+E2CA  Double flat lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsDown\"] = \"\\uE2CA\";\n    // U+E2CF  Double flat raised by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsUp\"] = \"\\uE2CF\";\n    // U+E263  Double sharp\n    Glyphs[\"accidentalDoubleSharp\"] = \"\\uE263\";\n    // U+1D12A  Double sharp\n    Glyphs[\"accidentalDoubleSharpAlternate\"] = \"\\uD834\\uDD2A\";\n    // U+ED38  Arabic double sharp\n    Glyphs[\"accidentalDoubleSharpArabic\"] = \"\\uED38\";\n    // U+E2F4  Double sharp equal tempered semitone\n    Glyphs[\"accidentalDoubleSharpEqualTempered\"] = \"\\uE2F4\";\n    // U+E2C4  Double sharp lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowDown\"] = \"\\uE2C4\";\n    // U+E2C9  Double sharp raised by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowUp\"] = \"\\uE2C9\";\n    // U+E2D8  Double sharp lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsDown\"] = \"\\uE2D8\";\n    // U+E2DD  Double sharp raised by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsUp\"] = \"\\uE2DD\";\n    // U+E2CE  Double sharp lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsDown\"] = \"\\uE2CE\";\n    // U+E2D3  Double sharp raised by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsUp\"] = \"\\uE2D3\";\n    // U+E2FA  Enharmonically reinterpret accidental almost equal to\n    Glyphs[\"accidentalEnharmonicAlmostEqualTo\"] = \"\\uE2FA\";\n    // U+E2FB  Enharmonically reinterpret accidental equals\n    Glyphs[\"accidentalEnharmonicEquals\"] = \"\\uE2FB\";\n    // U+E2F9  Enharmonically reinterpret accidental tilde\n    Glyphs[\"accidentalEnharmonicTilde\"] = \"\\uE2F9\";\n    // U+E296  Filled reversed flat and flat\n    Glyphs[\"accidentalFilledReversedFlatAndFlat\"] = \"\\uE296\";\n    // U+E298  Filled reversed flat and flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowDown\"] = \"\\uE298\";\n    // U+E297  Filled reversed flat and flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowUp\"] = \"\\uE297\";\n    // U+E293  Filled reversed flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatArrowDown\"] = \"\\uE293\";\n    // U+E292  Filled reversed flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatArrowUp\"] = \"\\uE292\";\n    // U+E279  Five-quarter-tones flat\n    Glyphs[\"accidentalFiveQuarterTonesFlatArrowDown\"] = \"\\uE279\";\n    // U+E276  Five-quarter-tones sharp\n    Glyphs[\"accidentalFiveQuarterTonesSharpArrowUp\"] = \"\\uE276\";\n    // U+E260  Flat\n    Glyphs[\"accidentalFlat\"] = \"\\uE260\";\n    // U+266D  Flat\n    Glyphs[\"accidentalFlatAlternate\"] = \"\\u266D\";\n    // U+ED32  Arabic half-tone flat\n    Glyphs[\"accidentalFlatArabic\"] = \"\\uED32\";\n    // U+E2F1  Flat equal tempered semitone\n    Glyphs[\"accidentalFlatEqualTempered\"] = \"\\uE2F1\";\n    // U+ED53  Lowered flat (Stockhausen)\n    Glyphs[\"accidentalFlatLoweredStockhausen\"] = \"\\uED53\";\n    // U+E2C1  Flat lowered by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowDown\"] = \"\\uE2C1\";\n    // U+E2C6  Flat raised by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowUp\"] = \"\\uE2C6\";\n    // U+ED52  Raised flat (Stockhausen)\n    Glyphs[\"accidentalFlatRaisedStockhausen\"] = \"\\uED52\";\n    // U+ED5C  Repeated flat, note on line (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedLineStockhausen\"] = \"\\uED5C\";\n    // U+ED5B  Repeated flat, note in space (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedSpaceStockhausen\"] = \"\\uED5B\";\n    // U+E2D5  Flat lowered by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsDown\"] = \"\\uE2D5\";\n    // U+E2DA  Flat raised by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsUp\"] = \"\\uE2DA\";\n    // U+E484  Turned flat\n    Glyphs[\"accidentalFlatTurned\"] = \"\\uE484\";\n    // U+E2CB  Flat lowered by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsDown\"] = \"\\uE2CB\";\n    // U+E2D0  Flat raised by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsUp\"] = \"\\uE2D0\";\n    // U+EE65  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaFlatQuarterToneHigher\"] = \"\\uEE65\";\n    // U+EE69  Three quarter-tones lower (Alois Hába)\n    Glyphs[\"accidentalHabaFlatThreeQuarterTonesLower\"] = \"\\uEE69\";\n    // U+EE64  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneHigher\"] = \"\\uEE64\";\n    // U+EE67  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneLower\"] = \"\\uEE67\";\n    // U+EE68  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaSharpQuarterToneLower\"] = \"\\uEE68\";\n    // U+EE66  Three quarter-tones higher (Alois Hába)\n    Glyphs[\"accidentalHabaSharpThreeQuarterTonesHigher\"] = \"\\uEE66\";\n    // U+E29A  Half sharp with arrow down\n    Glyphs[\"accidentalHalfSharpArrowDown\"] = \"\\uE29A\";\n    // U+E299  Half sharp with arrow up\n    Glyphs[\"accidentalHalfSharpArrowUp\"] = \"\\uE299\";\n    // U+E2B6  Thirteen (raise by 65:64)\n    Glyphs[\"accidentalJohnston13\"] = \"\\uE2B6\";\n    // U+E2B7  Inverted 13 (lower by 65:64)\n    Glyphs[\"accidentalJohnston31\"] = \"\\uE2B7\";\n    // U+E2B5  Down arrow (lower by 33:32)\n    Glyphs[\"accidentalJohnstonDown\"] = \"\\uE2B5\";\n    // U+E2B2  Inverted seven (raise by 36:35)\n    Glyphs[\"accidentalJohnstonEl\"] = \"\\uE2B2\";\n    // U+E2B1  Minus (lower by 81:80)\n    Glyphs[\"accidentalJohnstonMinus\"] = \"\\uE2B1\";\n    // U+E2B0  Plus (raise by 81:80)\n    Glyphs[\"accidentalJohnstonPlus\"] = \"\\uE2B0\";\n    // U+E2B3  Seven (lower by 36:35)\n    Glyphs[\"accidentalJohnstonSeven\"] = \"\\uE2B3\";\n    // U+E2B4  Up arrow (raise by 33:32)\n    Glyphs[\"accidentalJohnstonUp\"] = \"\\uE2B4\";\n    // U+E443  Koma (flat)\n    Glyphs[\"accidentalKomaFlat\"] = \"\\uE443\";\n    // U+E444  Koma (sharp)\n    Glyphs[\"accidentalKomaSharp\"] = \"\\uE444\";\n    // U+E460  Koron (quarter tone flat)\n    Glyphs[\"accidentalKoron\"] = \"\\uE460\";\n    // U+E441  Küçük mücenneb (flat)\n    Glyphs[\"accidentalKucukMucennebFlat\"] = \"\\uE441\";\n    // U+E446  Küçük mücenneb (sharp)\n    Glyphs[\"accidentalKucukMucennebSharp\"] = \"\\uE446\";\n    // U+E47D  Large double sharp\n    Glyphs[\"accidentalLargeDoubleSharp\"] = \"\\uE47D\";\n    // U+E2DE  Lower by one septimal comma\n    Glyphs[\"accidentalLowerOneSeptimalComma\"] = \"\\uE2DE\";\n    // U+E2E4  Lower by one tridecimal quartertone\n    Glyphs[\"accidentalLowerOneTridecimalQuartertone\"] = \"\\uE2E4\";\n    // U+E2E2  Lower by one undecimal quartertone\n    Glyphs[\"accidentalLowerOneUndecimalQuartertone\"] = \"\\uE2E2\";\n    // U+E2E0  Lower by two septimal commas\n    Glyphs[\"accidentalLowerTwoSeptimalCommas\"] = \"\\uE2E0\";\n    // U+ED51  Lowered (Stockhausen)\n    Glyphs[\"accidentalLoweredStockhausen\"] = \"\\uED51\";\n    // U+E284  Narrow reversed flat(quarter-tone flat)\n    Glyphs[\"accidentalNarrowReversedFlat\"] = \"\\uE284\";\n    // U+E285  Narrow reversed flat and flat(three-quarter-tones flat)\n    Glyphs[\"accidentalNarrowReversedFlatAndFlat\"] = \"\\uE285\";\n    // U+E261  Natural\n    Glyphs[\"accidentalNatural\"] = \"\\uE261\";\n    // U+266E  Natural\n    Glyphs[\"accidentalNaturalAlternate\"] = \"\\u266E\";\n    // U+ED34  Arabic natural\n    Glyphs[\"accidentalNaturalArabic\"] = \"\\uED34\";\n    // U+E2F2  Natural equal tempered semitone\n    Glyphs[\"accidentalNaturalEqualTempered\"] = \"\\uE2F2\";\n    // U+E267  Natural flat\n    Glyphs[\"accidentalNaturalFlat\"] = \"\\uE267\";\n    // U+ED55  Lowered natural (Stockhausen)\n    Glyphs[\"accidentalNaturalLoweredStockhausen\"] = \"\\uED55\";\n    // U+E2C2  Natural lowered by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowDown\"] = \"\\uE2C2\";\n    // U+E2C7  Natural raised by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowUp\"] = \"\\uE2C7\";\n    // U+ED54  Raised natural (Stockhausen)\n    Glyphs[\"accidentalNaturalRaisedStockhausen\"] = \"\\uED54\";\n    // U+E482  Reversed natural\n    Glyphs[\"accidentalNaturalReversed\"] = \"\\uE482\";\n    // U+E268  Natural sharp\n    Glyphs[\"accidentalNaturalSharp\"] = \"\\uE268\";\n    // U+E2D6  Natural lowered by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsDown\"] = \"\\uE2D6\";\n    // U+E2DB  Natural raised by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsUp\"] = \"\\uE2DB\";\n    // U+E2CC  Natural lowered by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsDown\"] = \"\\uE2CC\";\n    // U+E2D1  Natural raised by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsUp\"] = \"\\uE2D1\";\n    // U+E29C  One and a half sharps with arrow down\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowDown\"] = \"\\uE29C\";\n    // U+E29B  One and a half sharps with arrow up\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowUp\"] = \"\\uE29B\";\n    // U+E48F  One-quarter-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneFlatFerneyhough\"] = \"\\uE48F\";\n    // U+ED59  One-quarter-tone flat (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneFlatStockhausen\"] = \"\\uED59\";\n    // U+E48E  One-quarter-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneSharpFerneyhough\"] = \"\\uE48E\";\n    // U+ED58  One-quarter-tone sharp (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneSharpStockhausen\"] = \"\\uED58\";\n    // U+E48B  One-third-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneFlatFerneyhough\"] = \"\\uE48B\";\n    // U+E48A  One-third-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneSharpFerneyhough\"] = \"\\uE48A\";\n    // U+E26A  Accidental parenthesis, left\n    Glyphs[\"accidentalParensLeft\"] = \"\\uE26A\";\n    // U+E26B  Accidental parenthesis, right\n    Glyphs[\"accidentalParensRight\"] = \"\\uE26B\";\n    // U+E2F5  Lower by one equal tempered quarter-tone\n    Glyphs[\"accidentalQuarterFlatEqualTempered\"] = \"\\uE2F5\";\n    // U+E2F6  Raise by one equal tempered quarter tone\n    Glyphs[\"accidentalQuarterSharpEqualTempered\"] = \"\\uE2F6\";\n    // U+E47F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4\"] = \"\\uE47F\";\n    // U+1D133  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4Alternate\"] = \"\\uD834\\uDD33\";\n    // U+ED33  Arabic quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArabic\"] = \"\\uED33\";\n    // U+E270  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUp\"] = \"\\uE270\";\n    // U+1D12C  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUpAlternate\"] = \"\\uD834\\uDD2C\";\n    // U+E480  Filled reversed flat (quarter-tone flat)\n    Glyphs[\"accidentalQuarterToneFlatFilledReversed\"] = \"\\uE480\";\n    // U+E273  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDown\"] = \"\\uE273\";\n    // U+1D12F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDownAlternate\"] = \"\\uD834\\uDD2F\";\n    // U+E478  Quarter tone flat (Penderecki)\n    Glyphs[\"accidentalQuarterToneFlatPenderecki\"] = \"\\uE478\";\n    // U+E280  Reversed flat (quarter-tone flat) (Stein)\n    Glyphs[\"accidentalQuarterToneFlatStein\"] = \"\\uE280\";\n    // U+E488  Quarter-tone flat (van Blankenburg)\n    Glyphs[\"accidentalQuarterToneFlatVanBlankenburg\"] = \"\\uE488\";\n    // U+E47E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4\"] = \"\\uE47E\";\n    // U+1D132  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4Alternate\"] = \"\\uD834\\uDD32\";\n    // U+ED35  Arabic quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArabic\"] = \"\\uED35\";\n    // U+E275  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDown\"] = \"\\uE275\";\n    // U+1D131  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDownAlternate\"] = \"\\uD834\\uDD31\";\n    // U+E472  Quarter tone sharp (Bussotti)\n    Glyphs[\"accidentalQuarterToneSharpBusotti\"] = \"\\uE472\";\n    // U+E272  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUp\"] = \"\\uE272\";\n    // U+1D12E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUpAlternate\"] = \"\\uD834\\uDD2E\";\n    // U+E282  Half sharp (quarter-tone sharp) (Stein)\n    Glyphs[\"accidentalQuarterToneSharpStein\"] = \"\\uE282\";\n    // U+E475  Quarter tone sharp with wiggly tail\n    Glyphs[\"accidentalQuarterToneSharpWiggle\"] = \"\\uE475\";\n    // U+E2DF  Raise by one septimal comma\n    Glyphs[\"accidentalRaiseOneSeptimalComma\"] = \"\\uE2DF\";\n    // U+E2E5  Raise by one tridecimal quartertone\n    Glyphs[\"accidentalRaiseOneTridecimalQuartertone\"] = \"\\uE2E5\";\n    // U+E2E3  Raise by one undecimal quartertone\n    Glyphs[\"accidentalRaiseOneUndecimalQuartertone\"] = \"\\uE2E3\";\n    // U+E2E1  Raise by two septimal commas\n    Glyphs[\"accidentalRaiseTwoSeptimalCommas\"] = \"\\uE2E1\";\n    // U+ED50  Raised (Stockhausen)\n    Glyphs[\"accidentalRaisedStockhausen\"] = \"\\uED50\";\n    // U+E295  Reversed flat and flat with arrow down\n    Glyphs[\"accidentalReversedFlatAndFlatArrowDown\"] = \"\\uE295\";\n    // U+E294  Reversed flat and flat with arrow up\n    Glyphs[\"accidentalReversedFlatAndFlatArrowUp\"] = \"\\uE294\";\n    // U+E291  Reversed flat with arrow down\n    Glyphs[\"accidentalReversedFlatArrowDown\"] = \"\\uE291\";\n    // U+E290  Reversed flat with arrow up\n    Glyphs[\"accidentalReversedFlatArrowUp\"] = \"\\uE290\";\n    // U+E262  Sharp\n    Glyphs[\"accidentalSharp\"] = \"\\uE262\";\n    // U+266F  Sharp\n    Glyphs[\"accidentalSharpAlternate\"] = \"\\u266F\";\n    // U+ED36  Arabic half-tone sharp\n    Glyphs[\"accidentalSharpArabic\"] = \"\\uED36\";\n    // U+E2F3  Sharp equal tempered semitone\n    Glyphs[\"accidentalSharpEqualTempered\"] = \"\\uE2F3\";\n    // U+ED57  Lowered sharp (Stockhausen)\n    Glyphs[\"accidentalSharpLoweredStockhausen\"] = \"\\uED57\";\n    // U+E2C3  Sharp lowered by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowDown\"] = \"\\uE2C3\";\n    // U+E2C8  Sharp raised by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowUp\"] = \"\\uE2C8\";\n    // U+E473  One or three quarter tones sharp\n    Glyphs[\"accidentalSharpOneHorizontalStroke\"] = \"\\uE473\";\n    // U+ED56  Raised sharp (Stockhausen)\n    Glyphs[\"accidentalSharpRaisedStockhausen\"] = \"\\uED56\";\n    // U+ED5E  Repeated sharp, note on line (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedLineStockhausen\"] = \"\\uED5E\";\n    // U+ED5D  Repeated sharp, note in space (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedSpaceStockhausen\"] = \"\\uED5D\";\n    // U+E481  Reversed sharp\n    Glyphs[\"accidentalSharpReversed\"] = \"\\uE481\";\n    // U+E269  Sharp sharp\n    Glyphs[\"accidentalSharpSharp\"] = \"\\uE269\";\n    // U+E2D7  Sharp lowered by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsDown\"] = \"\\uE2D7\";\n    // U+E2DC  Sharp raised by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsUp\"] = \"\\uE2DC\";\n    // U+E2CD  Sharp lowered by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsDown\"] = \"\\uE2CD\";\n    // U+E2D2  Sharp raised by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsUp\"] = \"\\uE2D2\";\n    // U+E2A0  1/12 tone low\n    Glyphs[\"accidentalSims12Down\"] = \"\\uE2A0\";\n    // U+E2A3  1/12 tone high\n    Glyphs[\"accidentalSims12Up\"] = \"\\uE2A3\";\n    // U+E2A2  1/4 tone low\n    Glyphs[\"accidentalSims4Down\"] = \"\\uE2A2\";\n    // U+E2A5  1/4 tone high\n    Glyphs[\"accidentalSims4Up\"] = \"\\uE2A5\";\n    // U+E2A1  1/6 tone low\n    Glyphs[\"accidentalSims6Down\"] = \"\\uE2A1\";\n    // U+E2A4  1/6 tone high\n    Glyphs[\"accidentalSims6Up\"] = \"\\uE2A4\";\n    // U+E461  Sori (quarter tone sharp)\n    Glyphs[\"accidentalSori\"] = \"\\uE461\";\n    // U+E477  Byzantine-style Bakiye flat (Tavener)\n    Glyphs[\"accidentalTavenerFlat\"] = \"\\uE477\";\n    // U+E476  Byzantine-style Büyük mücenneb sharp (Tavener)\n    Glyphs[\"accidentalTavenerSharp\"] = \"\\uE476\";\n    // U+ED31  Arabic three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArabic\"] = \"\\uED31\";\n    // U+E271  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDown\"] = \"\\uE271\";\n    // U+1D12D  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDownAlternate\"] = \"\\uD834\\uDD2D\";\n    // U+E278  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowUp\"] = \"\\uE278\";\n    // U+E489  Three-quarter-tones flat (Couper)\n    Glyphs[\"accidentalThreeQuarterTonesFlatCouper\"] = \"\\uE489\";\n    // U+E486  Three-quarter-tones flat (Grisey)\n    Glyphs[\"accidentalThreeQuarterTonesFlatGrisey\"] = \"\\uE486\";\n    // U+E487  Three-quarter-tones flat (Tartini)\n    Glyphs[\"accidentalThreeQuarterTonesFlatTartini\"] = \"\\uE487\";\n    // U+E281  Reversed flat and flat (three-quarter-tones flat) (Zimmermann)\n    Glyphs[\"accidentalThreeQuarterTonesFlatZimmermann\"] = \"\\uE281\";\n    // U+ED37  Arabic three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArabic\"] = \"\\uED37\";\n    // U+E277  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowDown\"] = \"\\uE277\";\n    // U+E274  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUp\"] = \"\\uE274\";\n    // U+1D130  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUpAlternate\"] = \"\\uD834\\uDD30\";\n    // U+E474  Three quarter tones sharp (Bussotti)\n    Glyphs[\"accidentalThreeQuarterTonesSharpBusotti\"] = \"\\uE474\";\n    // U+E283  One and a half sharps (three-quarter-tones sharp) (Stein)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStein\"] = \"\\uE283\";\n    // U+ED5A  Three-quarter-tones sharp (Stockhausen)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStockhausen\"] = \"\\uED5A\";\n    // U+E266  Triple flat\n    Glyphs[\"accidentalTripleFlat\"] = \"\\uE266\";\n    // U+E265  Triple sharp\n    Glyphs[\"accidentalTripleSharp\"] = \"\\uE265\";\n    // U+E48D  Two-third-tones flat (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesFlatFerneyhough\"] = \"\\uE48D\";\n    // U+E48C  Two-third-tones sharp (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesSharpFerneyhough\"] = \"\\uE48C\";\n    // U+EE61  Accidental down\n    Glyphs[\"accidentalUpsAndDownsDown\"] = \"\\uEE61\";\n    // U+EE63  Accidental less\n    Glyphs[\"accidentalUpsAndDownsLess\"] = \"\\uEE63\";\n    // U+EE62  Accidental more\n    Glyphs[\"accidentalUpsAndDownsMore\"] = \"\\uEE62\";\n    // U+EE60  Accidental up\n    Glyphs[\"accidentalUpsAndDownsUp\"] = \"\\uEE60\";\n    // U+E47C  Wilson minus (5 comma down)\n    Glyphs[\"accidentalWilsonMinus\"] = \"\\uE47C\";\n    // U+E47B  Wilson plus (5 comma up)\n    Glyphs[\"accidentalWilsonPlus\"] = \"\\uE47B\";\n    // U+E434  5/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsFlat\"] = \"\\uE434\";\n    // U+E429  5/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsSharp\"] = \"\\uE429\";\n    // U+E435  11/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsFlat\"] = \"\\uE435\";\n    // U+E42A  11/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsSharp\"] = \"\\uE42A\";\n    // U+E42B  1/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsFlat\"] = \"\\uE42B\";\n    // U+E420  1/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsSharp\"] = \"\\uE420\";\n    // U+E42C  1/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsFlat\"] = \"\\uE42C\";\n    // U+E421  1/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsSharp\"] = \"\\uE421\";\n    // U+E42D  1/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsFlat\"] = \"\\uE42D\";\n    // U+E422  1/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsSharp\"] = \"\\uE422\";\n    // U+E42E  1/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsFlat\"] = \"\\uE42E\";\n    // U+E423  1/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsSharp\"] = \"\\uE423\";\n    // U+E42F  5/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsFlat\"] = \"\\uE42F\";\n    // U+E424  5/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsSharp\"] = \"\\uE424\";\n    // U+E430  1/2 tone flat\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsFlat\"] = \"\\uE430\";\n    // U+E425  1/2 tone sharp\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsSharp\"] = \"\\uE425\";\n    // U+E431  7/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsFlat\"] = \"\\uE431\";\n    // U+E426  7/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsSharp\"] = \"\\uE426\";\n    // U+E432  2/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsFlat\"] = \"\\uE432\";\n    // U+E427  2/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsSharp\"] = \"\\uE427\";\n    // U+E433  3/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsFlat\"] = \"\\uE433\";\n    // U+E428  3/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsSharp\"] = \"\\uE428\";\n    // U+E470  One-third-tone sharp (Xenakis)\n    Glyphs[\"accidentalXenakisOneThirdToneSharp\"] = \"\\uE470\";\n    // U+E471  Two-third-tones sharp (Xenakis)\n    Glyphs[\"accidentalXenakisTwoThirdTonesSharp\"] = \"\\uE471\";\n    // U+E86A  Choralmelodie (Berg)\n    Glyphs[\"analyticsChoralmelodie\"] = \"\\uE86A\";\n    // U+E863  End of stimme\n    Glyphs[\"analyticsEndStimme\"] = \"\\uE863\";\n    // U+1D1A8  End of stimme\n    Glyphs[\"analyticsEndStimmeAlternate\"] = \"\\uD834\\uDDA8\";\n    // U+E86B  Hauptrhythmus (Berg)\n    Glyphs[\"analyticsHauptrhythmus\"] = \"\\uE86B\";\n    // U+E860  Hauptstimme\n    Glyphs[\"analyticsHauptstimme\"] = \"\\uE860\";\n    // U+1D1A6  Hauptstimme\n    Glyphs[\"analyticsHauptstimmeAlternate\"] = \"\\uD834\\uDDA6\";\n    // U+E869  Inversion 1\n    Glyphs[\"analyticsInversion1\"] = \"\\uE869\";\n    // U+E861  Nebenstimme\n    Glyphs[\"analyticsNebenstimme\"] = \"\\uE861\";\n    // U+1D1A7  Nebenstimme\n    Glyphs[\"analyticsNebenstimmeAlternate\"] = \"\\uD834\\uDDA7\";\n    // U+E862  Start of stimme\n    Glyphs[\"analyticsStartStimme\"] = \"\\uE862\";\n    // U+E864  Theme\n    Glyphs[\"analyticsTheme\"] = \"\\uE864\";\n    // U+E868  Theme 1\n    Glyphs[\"analyticsTheme1\"] = \"\\uE868\";\n    // U+E867  Inversion of theme\n    Glyphs[\"analyticsThemeInversion\"] = \"\\uE867\";\n    // U+E865  Retrograde of theme\n    Glyphs[\"analyticsThemeRetrograde\"] = \"\\uE865\";\n    // U+E866  Retrograde inversion of theme\n    Glyphs[\"analyticsThemeRetrogradeInversion\"] = \"\\uE866\";\n    // U+E63C  Arpeggiato\n    Glyphs[\"arpeggiato\"] = \"\\uE63C\";\n    // U+E635  Arpeggiato down\n    Glyphs[\"arpeggiatoDown\"] = \"\\uE635\";\n    // U+1D184  Arpeggiato down\n    Glyphs[\"arpeggiatoDownAlternate\"] = \"\\uD834\\uDD84\";\n    // U+E634  Arpeggiato up\n    Glyphs[\"arpeggiatoUp\"] = \"\\uE634\";\n    // U+1D183  Arpeggiato up\n    Glyphs[\"arpeggiatoUpAlternate\"] = \"\\uD834\\uDD83\";\n    // U+EB64  Black arrow down (S)\n    Glyphs[\"arrowBlackDown\"] = \"\\uEB64\";\n    // U+EB65  Black arrow down-left (SW)\n    Glyphs[\"arrowBlackDownLeft\"] = \"\\uEB65\";\n    // U+EB63  Black arrow down-right (SE)\n    Glyphs[\"arrowBlackDownRight\"] = \"\\uEB63\";\n    // U+EB66  Black arrow left (W)\n    Glyphs[\"arrowBlackLeft\"] = \"\\uEB66\";\n    // U+EB62  Black arrow right (E)\n    Glyphs[\"arrowBlackRight\"] = \"\\uEB62\";\n    // U+EB60  Black arrow up (N)\n    Glyphs[\"arrowBlackUp\"] = \"\\uEB60\";\n    // U+EB67  Black arrow up-left (NW)\n    Glyphs[\"arrowBlackUpLeft\"] = \"\\uEB67\";\n    // U+EB61  Black arrow up-right (NE)\n    Glyphs[\"arrowBlackUpRight\"] = \"\\uEB61\";\n    // U+EB74  Open arrow down (S)\n    Glyphs[\"arrowOpenDown\"] = \"\\uEB74\";\n    // U+EB75  Open arrow down-left (SW)\n    Glyphs[\"arrowOpenDownLeft\"] = \"\\uEB75\";\n    // U+EB73  Open arrow down-right (SE)\n    Glyphs[\"arrowOpenDownRight\"] = \"\\uEB73\";\n    // U+EB76  Open arrow left (W)\n    Glyphs[\"arrowOpenLeft\"] = \"\\uEB76\";\n    // U+EB72  Open arrow right (E)\n    Glyphs[\"arrowOpenRight\"] = \"\\uEB72\";\n    // U+EB70  Open arrow up (N)\n    Glyphs[\"arrowOpenUp\"] = \"\\uEB70\";\n    // U+EB77  Open arrow up-left (NW)\n    Glyphs[\"arrowOpenUpLeft\"] = \"\\uEB77\";\n    // U+EB71  Open arrow up-right (NE)\n    Glyphs[\"arrowOpenUpRight\"] = \"\\uEB71\";\n    // U+EB6C  White arrow down (S)\n    Glyphs[\"arrowWhiteDown\"] = \"\\uEB6C\";\n    // U+EB6D  White arrow down-left (SW)\n    Glyphs[\"arrowWhiteDownLeft\"] = \"\\uEB6D\";\n    // U+EB6B  White arrow down-right (SE)\n    Glyphs[\"arrowWhiteDownRight\"] = \"\\uEB6B\";\n    // U+EB6E  White arrow left (W)\n    Glyphs[\"arrowWhiteLeft\"] = \"\\uEB6E\";\n    // U+EB6A  White arrow right (E)\n    Glyphs[\"arrowWhiteRight\"] = \"\\uEB6A\";\n    // U+EB68  White arrow up (N)\n    Glyphs[\"arrowWhiteUp\"] = \"\\uEB68\";\n    // U+EB6F  White arrow up-left (NW)\n    Glyphs[\"arrowWhiteUpLeft\"] = \"\\uEB6F\";\n    // U+EB69  White arrow up-right (NE)\n    Glyphs[\"arrowWhiteUpRight\"] = \"\\uEB69\";\n    // U+EB7C  Black arrowhead down (S)\n    Glyphs[\"arrowheadBlackDown\"] = \"\\uEB7C\";\n    // U+EB7D  Black arrowhead down-left (SW)\n    Glyphs[\"arrowheadBlackDownLeft\"] = \"\\uEB7D\";\n    // U+EB7B  Black arrowhead down-right (SE)\n    Glyphs[\"arrowheadBlackDownRight\"] = \"\\uEB7B\";\n    // U+EB7E  Black arrowhead left (W)\n    Glyphs[\"arrowheadBlackLeft\"] = \"\\uEB7E\";\n    // U+EB7A  Black arrowhead right (E)\n    Glyphs[\"arrowheadBlackRight\"] = \"\\uEB7A\";\n    // U+EB78  Black arrowhead up (N)\n    Glyphs[\"arrowheadBlackUp\"] = \"\\uEB78\";\n    // U+EB7F  Black arrowhead up-left (NW)\n    Glyphs[\"arrowheadBlackUpLeft\"] = \"\\uEB7F\";\n    // U+EB79  Black arrowhead up-right (NE)\n    Glyphs[\"arrowheadBlackUpRight\"] = \"\\uEB79\";\n    // U+EB8C  Open arrowhead down (S)\n    Glyphs[\"arrowheadOpenDown\"] = \"\\uEB8C\";\n    // U+EB8D  Open arrowhead down-left (SW)\n    Glyphs[\"arrowheadOpenDownLeft\"] = \"\\uEB8D\";\n    // U+EB8B  Open arrowhead down-right (SE)\n    Glyphs[\"arrowheadOpenDownRight\"] = \"\\uEB8B\";\n    // U+EB8E  Open arrowhead left (W)\n    Glyphs[\"arrowheadOpenLeft\"] = \"\\uEB8E\";\n    // U+EB8A  Open arrowhead right (E)\n    Glyphs[\"arrowheadOpenRight\"] = \"\\uEB8A\";\n    // U+EB88  Open arrowhead up (N)\n    Glyphs[\"arrowheadOpenUp\"] = \"\\uEB88\";\n    // U+EB8F  Open arrowhead up-left (NW)\n    Glyphs[\"arrowheadOpenUpLeft\"] = \"\\uEB8F\";\n    // U+EB89  Open arrowhead up-right (NE)\n    Glyphs[\"arrowheadOpenUpRight\"] = \"\\uEB89\";\n    // U+EB84  White arrowhead down (S)\n    Glyphs[\"arrowheadWhiteDown\"] = \"\\uEB84\";\n    // U+EB85  White arrowhead down-left (SW)\n    Glyphs[\"arrowheadWhiteDownLeft\"] = \"\\uEB85\";\n    // U+EB83  White arrowhead down-right (SE)\n    Glyphs[\"arrowheadWhiteDownRight\"] = \"\\uEB83\";\n    // U+EB86  White arrowhead left (W)\n    Glyphs[\"arrowheadWhiteLeft\"] = \"\\uEB86\";\n    // U+EB82  White arrowhead right (E)\n    Glyphs[\"arrowheadWhiteRight\"] = \"\\uEB82\";\n    // U+EB80  White arrowhead up (N)\n    Glyphs[\"arrowheadWhiteUp\"] = \"\\uEB80\";\n    // U+EB87  White arrowhead up-left (NW)\n    Glyphs[\"arrowheadWhiteUpLeft\"] = \"\\uEB87\";\n    // U+EB81  White arrowhead up-right (NE)\n    Glyphs[\"arrowheadWhiteUpRight\"] = \"\\uEB81\";\n    // U+E4A0  Accent above\n    Glyphs[\"articAccentAbove\"] = \"\\uE4A0\";\n    // U+1D17B  Accent above\n    Glyphs[\"articAccentAboveAlternate\"] = \"\\uD834\\uDD7B\";\n    // U+E4A1  Accent below\n    Glyphs[\"articAccentBelow\"] = \"\\uE4A1\";\n    // U+E4B0  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAbove\"] = \"\\uE4B0\";\n    // U+1D181  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAboveAlternate\"] = \"\\uD834\\uDD81\";\n    // U+E4B1  Accent-staccato below\n    Glyphs[\"articAccentStaccatoBelow\"] = \"\\uE4B1\";\n    // U+E4BA  Laissez vibrer (l.v.) above\n    Glyphs[\"articLaissezVibrerAbove\"] = \"\\uE4BA\";\n    // U+E4BB  Laissez vibrer (l.v.) below\n    Glyphs[\"articLaissezVibrerBelow\"] = \"\\uE4BB\";\n    // U+E4AC  Marcato above\n    Glyphs[\"articMarcatoAbove\"] = \"\\uE4AC\";\n    // U+1D17F  Marcato above\n    Glyphs[\"articMarcatoAboveAlternate\"] = \"\\uD834\\uDD7F\";\n    // U+E4AD  Marcato below\n    Glyphs[\"articMarcatoBelow\"] = \"\\uE4AD\";\n    // U+E4AE  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAbove\"] = \"\\uE4AE\";\n    // U+1D180  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAboveAlternate\"] = \"\\uD834\\uDD80\";\n    // U+E4AF  Marcato-staccato below\n    Glyphs[\"articMarcatoStaccatoBelow\"] = \"\\uE4AF\";\n    // U+E4BC  Marcato-tenuto above\n    Glyphs[\"articMarcatoTenutoAbove\"] = \"\\uE4BC\";\n    // U+E4BD  Marcato-tenuto below\n    Glyphs[\"articMarcatoTenutoBelow\"] = \"\\uE4BD\";\n    // U+ED40  Soft accent above\n    Glyphs[\"articSoftAccentAbove\"] = \"\\uED40\";\n    // U+ED41  Soft accent below\n    Glyphs[\"articSoftAccentBelow\"] = \"\\uED41\";\n    // U+ED42  Soft accent-staccato above\n    Glyphs[\"articSoftAccentStaccatoAbove\"] = \"\\uED42\";\n    // U+ED43  Soft accent-staccato below\n    Glyphs[\"articSoftAccentStaccatoBelow\"] = \"\\uED43\";\n    // U+ED44  Soft accent-tenuto above\n    Glyphs[\"articSoftAccentTenutoAbove\"] = \"\\uED44\";\n    // U+ED45  Soft accent-tenuto below\n    Glyphs[\"articSoftAccentTenutoBelow\"] = \"\\uED45\";\n    // U+ED46  Soft accent-tenuto-staccato above\n    Glyphs[\"articSoftAccentTenutoStaccatoAbove\"] = \"\\uED46\";\n    // U+ED47  Soft accent-tenuto-staccato below\n    Glyphs[\"articSoftAccentTenutoStaccatoBelow\"] = \"\\uED47\";\n    // U+E4A6  Staccatissimo above\n    Glyphs[\"articStaccatissimoAbove\"] = \"\\uE4A6\";\n    // U+1D17E  Staccatissimo above\n    Glyphs[\"articStaccatissimoAboveAlternate\"] = \"\\uD834\\uDD7E\";\n    // U+E4A7  Staccatissimo below\n    Glyphs[\"articStaccatissimoBelow\"] = \"\\uE4A7\";\n    // U+E4AA  Staccatissimo stroke above\n    Glyphs[\"articStaccatissimoStrokeAbove\"] = \"\\uE4AA\";\n    // U+E4AB  Staccatissimo stroke below\n    Glyphs[\"articStaccatissimoStrokeBelow\"] = \"\\uE4AB\";\n    // U+E4A8  Staccatissimo wedge above\n    Glyphs[\"articStaccatissimoWedgeAbove\"] = \"\\uE4A8\";\n    // U+E4A9  Staccatissimo wedge below\n    Glyphs[\"articStaccatissimoWedgeBelow\"] = \"\\uE4A9\";\n    // U+E4A2  Staccato above\n    Glyphs[\"articStaccatoAbove\"] = \"\\uE4A2\";\n    // U+1D17C  Staccato above\n    Glyphs[\"articStaccatoAboveAlternate\"] = \"\\uD834\\uDD7C\";\n    // U+E4A3  Staccato below\n    Glyphs[\"articStaccatoBelow\"] = \"\\uE4A3\";\n    // U+E4B6  Stress above\n    Glyphs[\"articStressAbove\"] = \"\\uE4B6\";\n    // U+E4B7  Stress below\n    Glyphs[\"articStressBelow\"] = \"\\uE4B7\";\n    // U+E4A4  Tenuto above\n    Glyphs[\"articTenutoAbove\"] = \"\\uE4A4\";\n    // U+1D17D  Tenuto above\n    Glyphs[\"articTenutoAboveAlternate\"] = \"\\uD834\\uDD7D\";\n    // U+E4B4  Tenuto-accent above\n    Glyphs[\"articTenutoAccentAbove\"] = \"\\uE4B4\";\n    // U+E4B5  Tenuto-accent below\n    Glyphs[\"articTenutoAccentBelow\"] = \"\\uE4B5\";\n    // U+E4A5  Tenuto below\n    Glyphs[\"articTenutoBelow\"] = \"\\uE4A5\";\n    // U+E4B2  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAbove\"] = \"\\uE4B2\";\n    // U+1D182  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAboveAlternate\"] = \"\\uD834\\uDD82\";\n    // U+E4B3  Louré (tenuto-staccato) below\n    Glyphs[\"articTenutoStaccatoBelow\"] = \"\\uE4B3\";\n    // U+E4B8  Unstress above\n    Glyphs[\"articUnstressAbove\"] = \"\\uE4B8\";\n    // U+E4B9  Unstress below\n    Glyphs[\"articUnstressBelow\"] = \"\\uE4B9\";\n    // U+E1E7  Augmentation dot\n    Glyphs[\"augmentationDot\"] = \"\\uE1E7\";\n    // U+1D16D  Augmentation dot\n    Glyphs[\"augmentationDotAlternate\"] = \"\\uD834\\uDD6D\";\n    // U+E036  Dashed barline\n    Glyphs[\"barlineDashed\"] = \"\\uE036\";\n    // U+1D104  Dashed barline\n    Glyphs[\"barlineDashedAlternate\"] = \"\\uD834\\uDD04\";\n    // U+E037  Dotted barline\n    Glyphs[\"barlineDotted\"] = \"\\uE037\";\n    // U+E031  Double barline\n    Glyphs[\"barlineDouble\"] = \"\\uE031\";\n    // U+1D101  Double barline\n    Glyphs[\"barlineDoubleAlternate\"] = \"\\uD834\\uDD01\";\n    // U+E032  Final barline\n    Glyphs[\"barlineFinal\"] = \"\\uE032\";\n    // U+1D102  Final barline\n    Glyphs[\"barlineFinalAlternate\"] = \"\\uD834\\uDD02\";\n    // U+E034  Heavy barline\n    Glyphs[\"barlineHeavy\"] = \"\\uE034\";\n    // U+E035  Heavy double barline\n    Glyphs[\"barlineHeavyHeavy\"] = \"\\uE035\";\n    // U+E033  Reverse final barline\n    Glyphs[\"barlineReverseFinal\"] = \"\\uE033\";\n    // U+1D103  Reverse final barline\n    Glyphs[\"barlineReverseFinalAlternate\"] = \"\\uD834\\uDD03\";\n    // U+E038  Short barline\n    Glyphs[\"barlineShort\"] = \"\\uE038\";\n    // U+1D105  Short barline\n    Glyphs[\"barlineShortAlternate\"] = \"\\uD834\\uDD05\";\n    // U+E030  Single barline\n    Glyphs[\"barlineSingle\"] = \"\\uE030\";\n    // U+1D100  Single barline\n    Glyphs[\"barlineSingleAlternate\"] = \"\\uD834\\uDD00\";\n    // U+E039  Tick barline\n    Glyphs[\"barlineTick\"] = \"\\uE039\";\n    // U+EAF4  Accel./rit. beam 1 (widest)\n    Glyphs[\"beamAccelRit1\"] = \"\\uEAF4\";\n    // U+EAFD  Accel./rit. beam 10\n    Glyphs[\"beamAccelRit10\"] = \"\\uEAFD\";\n    // U+EAFE  Accel./rit. beam 11\n    Glyphs[\"beamAccelRit11\"] = \"\\uEAFE\";\n    // U+EAFF  Accel./rit. beam 12\n    Glyphs[\"beamAccelRit12\"] = \"\\uEAFF\";\n    // U+EB00  Accel./rit. beam 13\n    Glyphs[\"beamAccelRit13\"] = \"\\uEB00\";\n    // U+EB01  Accel./rit. beam 14\n    Glyphs[\"beamAccelRit14\"] = \"\\uEB01\";\n    // U+EB02  Accel./rit. beam 15 (narrowest)\n    Glyphs[\"beamAccelRit15\"] = \"\\uEB02\";\n    // U+EAF5  Accel./rit. beam 2\n    Glyphs[\"beamAccelRit2\"] = \"\\uEAF5\";\n    // U+EAF6  Accel./rit. beam 3\n    Glyphs[\"beamAccelRit3\"] = \"\\uEAF6\";\n    // U+EAF7  Accel./rit. beam 4\n    Glyphs[\"beamAccelRit4\"] = \"\\uEAF7\";\n    // U+EAF8  Accel./rit. beam 5\n    Glyphs[\"beamAccelRit5\"] = \"\\uEAF8\";\n    // U+EAF9  Accel./rit. beam 6\n    Glyphs[\"beamAccelRit6\"] = \"\\uEAF9\";\n    // U+EAFA  Accel./rit. beam 7\n    Glyphs[\"beamAccelRit7\"] = \"\\uEAFA\";\n    // U+EAFB  Accel./rit. beam 8\n    Glyphs[\"beamAccelRit8\"] = \"\\uEAFB\";\n    // U+EAFC  Accel./rit. beam 9\n    Glyphs[\"beamAccelRit9\"] = \"\\uEAFC\";\n    // U+EB03  Accel./rit. beam terminating line\n    Glyphs[\"beamAccelRitFinal\"] = \"\\uEB03\";\n    // U+E000  Brace\n    Glyphs[\"brace\"] = \"\\uE000\";\n    // U+1D114  Brace\n    Glyphs[\"braceAlternate\"] = \"\\uD834\\uDD14\";\n    // U+E002  Bracket\n    Glyphs[\"bracket\"] = \"\\uE002\";\n    // U+1D115  Bracket\n    Glyphs[\"bracketAlternate\"] = \"\\uD834\\uDD15\";\n    // U+E004  Bracket bottom\n    Glyphs[\"bracketBottom\"] = \"\\uE004\";\n    // U+E003  Bracket top\n    Glyphs[\"bracketTop\"] = \"\\uE003\";\n    // U+E5E3  Bend\n    Glyphs[\"brassBend\"] = \"\\uE5E3\";\n    // U+1D189  Bend\n    Glyphs[\"brassBendAlternate\"] = \"\\uD834\\uDD89\";\n    // U+E5D6  Doit, long\n    Glyphs[\"brassDoitLong\"] = \"\\uE5D6\";\n    // U+E5D5  Doit, medium\n    Glyphs[\"brassDoitMedium\"] = \"\\uE5D5\";\n    // U+E5D4  Doit, short\n    Glyphs[\"brassDoitShort\"] = \"\\uE5D4\";\n    // U+1D185  Doit, short\n    Glyphs[\"brassDoitShortAlternate\"] = \"\\uD834\\uDD85\";\n    // U+E5D9  Lip fall, long\n    Glyphs[\"brassFallLipLong\"] = \"\\uE5D9\";\n    // U+E5D8  Lip fall, medium\n    Glyphs[\"brassFallLipMedium\"] = \"\\uE5D8\";\n    // U+E5D7  Lip fall, short\n    Glyphs[\"brassFallLipShort\"] = \"\\uE5D7\";\n    // U+1D186  Lip fall, short\n    Glyphs[\"brassFallLipShortAlternate\"] = \"\\uD834\\uDD86\";\n    // U+E5DF  Rough fall, long\n    Glyphs[\"brassFallRoughLong\"] = \"\\uE5DF\";\n    // U+E5DE  Rough fall, medium\n    Glyphs[\"brassFallRoughMedium\"] = \"\\uE5DE\";\n    // U+E5DD  Rough fall, short\n    Glyphs[\"brassFallRoughShort\"] = \"\\uE5DD\";\n    // U+E5DC  Smooth fall, long\n    Glyphs[\"brassFallSmoothLong\"] = \"\\uE5DC\";\n    // U+E5DB  Smooth fall, medium\n    Glyphs[\"brassFallSmoothMedium\"] = \"\\uE5DB\";\n    // U+E5DA  Smooth fall, short\n    Glyphs[\"brassFallSmoothShort\"] = \"\\uE5DA\";\n    // U+E5E1  Flip\n    Glyphs[\"brassFlip\"] = \"\\uE5E1\";\n    // U+1D187  Flip\n    Glyphs[\"brassFlipAlternate\"] = \"\\uD834\\uDD87\";\n    // U+E5E8  Harmon mute, stem in\n    Glyphs[\"brassHarmonMuteClosed\"] = \"\\uE5E8\";\n    // U+E5E9  Harmon mute, stem extended, left\n    Glyphs[\"brassHarmonMuteStemHalfLeft\"] = \"\\uE5E9\";\n    // U+E5EA  Harmon mute, stem extended, right\n    Glyphs[\"brassHarmonMuteStemHalfRight\"] = \"\\uE5EA\";\n    // U+E5EB  Harmon mute, stem out\n    Glyphs[\"brassHarmonMuteStemOpen\"] = \"\\uE5EB\";\n    // U+E5E4  Jazz turn\n    Glyphs[\"brassJazzTurn\"] = \"\\uE5E4\";\n    // U+E5D3  Lift, long\n    Glyphs[\"brassLiftLong\"] = \"\\uE5D3\";\n    // U+E5D2  Lift, medium\n    Glyphs[\"brassLiftMedium\"] = \"\\uE5D2\";\n    // U+E5D1  Lift, short\n    Glyphs[\"brassLiftShort\"] = \"\\uE5D1\";\n    // U+E5EE  Smooth lift, long\n    Glyphs[\"brassLiftSmoothLong\"] = \"\\uE5EE\";\n    // U+E5ED  Smooth lift, medium\n    Glyphs[\"brassLiftSmoothMedium\"] = \"\\uE5ED\";\n    // U+E5EC  Smooth lift, short\n    Glyphs[\"brassLiftSmoothShort\"] = \"\\uE5EC\";\n    // U+E5E5  Muted (closed)\n    Glyphs[\"brassMuteClosed\"] = \"\\uE5E5\";\n    // U+E5E6  Half-muted (half-closed)\n    Glyphs[\"brassMuteHalfClosed\"] = \"\\uE5E6\";\n    // U+E5E7  Open\n    Glyphs[\"brassMuteOpen\"] = \"\\uE5E7\";\n    // U+E5E0  Plop\n    Glyphs[\"brassPlop\"] = \"\\uE5E0\";\n    // U+E5D0  Scoop\n    Glyphs[\"brassScoop\"] = \"\\uE5D0\";\n    // U+E5E2  Smear\n    Glyphs[\"brassSmear\"] = \"\\uE5E2\";\n    // U+1D188  Smear\n    Glyphs[\"brassSmearAlternate\"] = \"\\uD834\\uDD88\";\n    // U+E5EF  Valve trill\n    Glyphs[\"brassValveTrill\"] = \"\\uE5EF\";\n    // U+E4CE  Breath mark (comma)\n    Glyphs[\"breathMarkComma\"] = \"\\uE4CE\";\n    // U+1D112  Breath mark (comma)\n    Glyphs[\"breathMarkCommaAlternate\"] = \"\\uD834\\uDD12\";\n    // U+E4D5  Breath mark (Salzedo)\n    Glyphs[\"breathMarkSalzedo\"] = \"\\uE4D5\";\n    // U+E4CF  Breath mark (tick-like)\n    Glyphs[\"breathMarkTick\"] = \"\\uE4CF\";\n    // U+E4D0  Breath mark (upbow-like)\n    Glyphs[\"breathMarkUpbow\"] = \"\\uE4D0\";\n    // U+E078  Bridge clef\n    Glyphs[\"bridgeClef\"] = \"\\uE078\";\n    // U+E22A  Buzz roll\n    Glyphs[\"buzzRoll\"] = \"\\uE22A\";\n    // U+E05C  C clef\n    Glyphs[\"cClef\"] = \"\\uE05C\";\n    // U+1D121  C clef\n    Glyphs[\"cClefAlternate\"] = \"\\uD834\\uDD21\";\n    // U+E05D  C clef ottava bassa\n    Glyphs[\"cClef8vb\"] = \"\\uE05D\";\n    // U+E05F  C clef, arrow down\n    Glyphs[\"cClefArrowDown\"] = \"\\uE05F\";\n    // U+E05E  C clef, arrow up\n    Glyphs[\"cClefArrowUp\"] = \"\\uE05E\";\n    // U+E07B  C clef change\n    Glyphs[\"cClefChange\"] = \"\\uE07B\";\n    // U+E061  Combining C clef\n    Glyphs[\"cClefCombining\"] = \"\\uE061\";\n    // U+E075  Reversed C clef\n    Glyphs[\"cClefReversed\"] = \"\\uE075\";\n    // U+E060  C clef (19th century)\n    Glyphs[\"cClefSquare\"] = \"\\uE060\";\n    // U+E4D1  Caesura\n    Glyphs[\"caesura\"] = \"\\uE4D1\";\n    // U+1D113  Caesura\n    Glyphs[\"caesuraAlternate\"] = \"\\uD834\\uDD13\";\n    // U+E4D4  Curved caesura\n    Glyphs[\"caesuraCurved\"] = \"\\uE4D4\";\n    // U+E4D3  Short caesura\n    Glyphs[\"caesuraShort\"] = \"\\uE4D3\";\n    // U+E4D7  Single stroke caesura\n    Glyphs[\"caesuraSingleStroke\"] = \"\\uE4D7\";\n    // U+E4D2  Thick caesura\n    Glyphs[\"caesuraThick\"] = \"\\uE4D2\";\n    // U+E9D6  Accentus above\n    Glyphs[\"chantAccentusAbove\"] = \"\\uE9D6\";\n    // U+E9D7  Accentus below\n    Glyphs[\"chantAccentusBelow\"] = \"\\uE9D7\";\n    // U+E994  Punctum auctum, ascending\n    Glyphs[\"chantAuctumAsc\"] = \"\\uE994\";\n    // U+E995  Punctum auctum, descending\n    Glyphs[\"chantAuctumDesc\"] = \"\\uE995\";\n    // U+E9D9  Augmentum (mora)\n    Glyphs[\"chantAugmentum\"] = \"\\uE9D9\";\n    // U+E8F8  Caesura\n    Glyphs[\"chantCaesura\"] = \"\\uE8F8\";\n    // U+E906  Plainchant C clef\n    Glyphs[\"chantCclef\"] = \"\\uE906\";\n    // U+1D1D0  Plainchant C clef\n    Glyphs[\"chantCclefAlternate\"] = \"\\uD834\\uDDD0\";\n    // U+E9D2  Circulus above\n    Glyphs[\"chantCirculusAbove\"] = \"\\uE9D2\";\n    // U+E9D3  Circulus below\n    Glyphs[\"chantCirculusBelow\"] = \"\\uE9D3\";\n    // U+E9BD  Connecting line, ascending 2nd\n    Glyphs[\"chantConnectingLineAsc2nd\"] = \"\\uE9BD\";\n    // U+E9BE  Connecting line, ascending 3rd\n    Glyphs[\"chantConnectingLineAsc3rd\"] = \"\\uE9BE\";\n    // U+E9BF  Connecting line, ascending 4th\n    Glyphs[\"chantConnectingLineAsc4th\"] = \"\\uE9BF\";\n    // U+E9C0  Connecting line, ascending 5th\n    Glyphs[\"chantConnectingLineAsc5th\"] = \"\\uE9C0\";\n    // U+E9C1  Connecting line, ascending 6th\n    Glyphs[\"chantConnectingLineAsc6th\"] = \"\\uE9C1\";\n    // U+EA08  Plainchant custos, stem down, high position\n    Glyphs[\"chantCustosStemDownPosHigh\"] = \"\\uEA08\";\n    // U+EA09  Plainchant custos, stem down, highest position\n    Glyphs[\"chantCustosStemDownPosHighest\"] = \"\\uEA09\";\n    // U+EA07  Plainchant custos, stem down, middle position\n    Glyphs[\"chantCustosStemDownPosMiddle\"] = \"\\uEA07\";\n    // U+EA05  Plainchant custos, stem up, low position\n    Glyphs[\"chantCustosStemUpPosLow\"] = \"\\uEA05\";\n    // U+EA04  Plainchant custos, stem up, lowest position\n    Glyphs[\"chantCustosStemUpPosLowest\"] = \"\\uEA04\";\n    // U+EA06  Plainchant custos, stem up, middle position\n    Glyphs[\"chantCustosStemUpPosMiddle\"] = \"\\uEA06\";\n    // U+E9B3  Punctum deminutum, lower\n    Glyphs[\"chantDeminutumLower\"] = \"\\uE9B3\";\n    // U+E9B2  Punctum deminutum, upper\n    Glyphs[\"chantDeminutumUpper\"] = \"\\uE9B2\";\n    // U+E8F6  Divisio finalis\n    Glyphs[\"chantDivisioFinalis\"] = \"\\uE8F6\";\n    // U+E8F4  Divisio maior\n    Glyphs[\"chantDivisioMaior\"] = \"\\uE8F4\";\n    // U+E8F5  Divisio maxima\n    Glyphs[\"chantDivisioMaxima\"] = \"\\uE8F5\";\n    // U+E8F3  Divisio minima\n    Glyphs[\"chantDivisioMinima\"] = \"\\uE8F3\";\n    // U+E9B4  Entry line, ascending 2nd\n    Glyphs[\"chantEntryLineAsc2nd\"] = \"\\uE9B4\";\n    // U+E9B5  Entry line, ascending 3rd\n    Glyphs[\"chantEntryLineAsc3rd\"] = \"\\uE9B5\";\n    // U+E9B6  Entry line, ascending 4th\n    Glyphs[\"chantEntryLineAsc4th\"] = \"\\uE9B6\";\n    // U+E9B7  Entry line, ascending 5th\n    Glyphs[\"chantEntryLineAsc5th\"] = \"\\uE9B7\";\n    // U+E9B8  Entry line, ascending 6th\n    Glyphs[\"chantEntryLineAsc6th\"] = \"\\uE9B8\";\n    // U+E9D8  Episema\n    Glyphs[\"chantEpisema\"] = \"\\uE9D8\";\n    // U+E902  Plainchant F clef\n    Glyphs[\"chantFclef\"] = \"\\uE902\";\n    // U+1D1D1  Plainchant F clef\n    Glyphs[\"chantFclefAlternate\"] = \"\\uD834\\uDDD1\";\n    // U+E9D0  Ictus above\n    Glyphs[\"chantIctusAbove\"] = \"\\uE9D0\";\n    // U+E9D1  Ictus below\n    Glyphs[\"chantIctusBelow\"] = \"\\uE9D1\";\n    // U+E9B9  Ligated stroke, descending 2nd\n    Glyphs[\"chantLigaturaDesc2nd\"] = \"\\uE9B9\";\n    // U+E9BA  Ligated stroke, descending 3rd\n    Glyphs[\"chantLigaturaDesc3rd\"] = \"\\uE9BA\";\n    // U+E9BB  Ligated stroke, descending 4th\n    Glyphs[\"chantLigaturaDesc4th\"] = \"\\uE9BB\";\n    // U+E9BC  Ligated stroke, descending 5th\n    Glyphs[\"chantLigaturaDesc5th\"] = \"\\uE9BC\";\n    // U+E99C  Oriscus ascending\n    Glyphs[\"chantOriscusAscending\"] = \"\\uE99C\";\n    // U+E99D  Oriscus descending\n    Glyphs[\"chantOriscusDescending\"] = \"\\uE99D\";\n    // U+E99E  Oriscus liquescens\n    Glyphs[\"chantOriscusLiquescens\"] = \"\\uE99E\";\n    // U+E9B0  Podatus, lower\n    Glyphs[\"chantPodatusLower\"] = \"\\uE9B0\";\n    // U+E9B1  Podatus, upper\n    Glyphs[\"chantPodatusUpper\"] = \"\\uE9B1\";\n    // U+1D1D4  Podatus, upper\n    Glyphs[\"chantPodatusUpperAlternate\"] = \"\\uD834\\uDDD4\";\n    // U+E990  Punctum\n    Glyphs[\"chantPunctum\"] = \"\\uE990\";\n    // U+E998  Punctum cavum\n    Glyphs[\"chantPunctumCavum\"] = \"\\uE998\";\n    // U+E9A1  Punctum deminutum\n    Glyphs[\"chantPunctumDeminutum\"] = \"\\uE9A1\";\n    // U+E991  Punctum inclinatum\n    Glyphs[\"chantPunctumInclinatum\"] = \"\\uE991\";\n    // U+E992  Punctum inclinatum auctum\n    Glyphs[\"chantPunctumInclinatumAuctum\"] = \"\\uE992\";\n    // U+E993  Punctum inclinatum deminutum\n    Glyphs[\"chantPunctumInclinatumDeminutum\"] = \"\\uE993\";\n    // U+E999  Punctum linea\n    Glyphs[\"chantPunctumLinea\"] = \"\\uE999\";\n    // U+E99A  Punctum linea cavum\n    Glyphs[\"chantPunctumLineaCavum\"] = \"\\uE99A\";\n    // U+E996  Punctum virga\n    Glyphs[\"chantPunctumVirga\"] = \"\\uE996\";\n    // U+1D1D3  Punctum virga\n    Glyphs[\"chantPunctumVirgaAlternate\"] = \"\\uD834\\uDDD3\";\n    // U+E997  Punctum virga, reversed\n    Glyphs[\"chantPunctumVirgaReversed\"] = \"\\uE997\";\n    // U+E99B  Quilisma\n    Glyphs[\"chantQuilisma\"] = \"\\uE99B\";\n    // U+E9D4  Semicirculus above\n    Glyphs[\"chantSemicirculusAbove\"] = \"\\uE9D4\";\n    // U+E9D5  Semicirculus below\n    Glyphs[\"chantSemicirculusBelow\"] = \"\\uE9D5\";\n    // U+E8F0  Plainchant staff\n    Glyphs[\"chantStaff\"] = \"\\uE8F0\";\n    // U+E8F2  Plainchant staff (narrow)\n    Glyphs[\"chantStaffNarrow\"] = \"\\uE8F2\";\n    // U+E8F1  Plainchant staff (wide)\n    Glyphs[\"chantStaffWide\"] = \"\\uE8F1\";\n    // U+E99F  Strophicus\n    Glyphs[\"chantStrophicus\"] = \"\\uE99F\";\n    // U+E9A0  Strophicus auctus\n    Glyphs[\"chantStrophicusAuctus\"] = \"\\uE9A0\";\n    // U+E9C2  Strophicus liquescens, 2nd\n    Glyphs[\"chantStrophicusLiquescens2nd\"] = \"\\uE9C2\";\n    // U+E9C3  Strophicus liquescens, 3rd\n    Glyphs[\"chantStrophicusLiquescens3rd\"] = \"\\uE9C3\";\n    // U+E9C4  Strophicus liquescens, 4th\n    Glyphs[\"chantStrophicusLiquescens4th\"] = \"\\uE9C4\";\n    // U+E9C5  Strophicus liquescens, 5th\n    Glyphs[\"chantStrophicusLiquescens5th\"] = \"\\uE9C5\";\n    // U+E8F7  Virgula\n    Glyphs[\"chantVirgula\"] = \"\\uE8F7\";\n    // U+E07E  15 for clefs\n    Glyphs[\"clef15\"] = \"\\uE07E\";\n    // U+E07D  8 for clefs\n    Glyphs[\"clef8\"] = \"\\uE07D\";\n    // U+E07F  Combining clef change\n    Glyphs[\"clefChangeCombining\"] = \"\\uE07F\";\n    // U+E048  Coda\n    Glyphs[\"coda\"] = \"\\uE048\";\n    // U+1D10C  Coda\n    Glyphs[\"codaAlternate\"] = \"\\uD834\\uDD0C\";\n    // U+E049  Square coda\n    Glyphs[\"codaSquare\"] = \"\\uE049\";\n    // U+E897  Beat 2, compound time\n    Glyphs[\"conductorBeat2Compound\"] = \"\\uE897\";\n    // U+E894  Beat 2, simple time\n    Glyphs[\"conductorBeat2Simple\"] = \"\\uE894\";\n    // U+E898  Beat 3, compound time\n    Glyphs[\"conductorBeat3Compound\"] = \"\\uE898\";\n    // U+E895  Beat 3, simple time\n    Glyphs[\"conductorBeat3Simple\"] = \"\\uE895\";\n    // U+E899  Beat 4, compound time\n    Glyphs[\"conductorBeat4Compound\"] = \"\\uE899\";\n    // U+E896  Beat 4, simple time\n    Glyphs[\"conductorBeat4Simple\"] = \"\\uE896\";\n    // U+E891  Left-hand beat or cue\n    Glyphs[\"conductorLeftBeat\"] = \"\\uE891\";\n    // U+E892  Right-hand beat or cue\n    Glyphs[\"conductorRightBeat\"] = \"\\uE892\";\n    // U+E890  Strong beat or cue\n    Glyphs[\"conductorStrongBeat\"] = \"\\uE890\";\n    // U+E89A  Unconducted/free passages\n    Glyphs[\"conductorUnconducted\"] = \"\\uE89A\";\n    // U+E893  Weak beat or cue\n    Glyphs[\"conductorWeakBeat\"] = \"\\uE893\";\n    // U+E8E0  Begin beam\n    Glyphs[\"controlBeginBeam\"] = \"\\uE8E0\";\n    // U+1D173  Begin beam\n    Glyphs[\"controlBeginBeamAlternate\"] = \"\\uD834\\uDD73\";\n    // U+E8E6  Begin phrase\n    Glyphs[\"controlBeginPhrase\"] = \"\\uE8E6\";\n    // U+1D179  Begin phrase\n    Glyphs[\"controlBeginPhraseAlternate\"] = \"\\uD834\\uDD79\";\n    // U+E8E4  Begin slur\n    Glyphs[\"controlBeginSlur\"] = \"\\uE8E4\";\n    // U+1D177  Begin slur\n    Glyphs[\"controlBeginSlurAlternate\"] = \"\\uD834\\uDD77\";\n    // U+E8E2  Begin tie\n    Glyphs[\"controlBeginTie\"] = \"\\uE8E2\";\n    // U+1D175  Begin tie\n    Glyphs[\"controlBeginTieAlternate\"] = \"\\uD834\\uDD75\";\n    // U+E8E1  End beam\n    Glyphs[\"controlEndBeam\"] = \"\\uE8E1\";\n    // U+1D174  End beam\n    Glyphs[\"controlEndBeamAlternate\"] = \"\\uD834\\uDD74\";\n    // U+E8E7  End phrase\n    Glyphs[\"controlEndPhrase\"] = \"\\uE8E7\";\n    // U+1D17A  End phrase\n    Glyphs[\"controlEndPhraseAlternate\"] = \"\\uD834\\uDD7A\";\n    // U+E8E5  End slur\n    Glyphs[\"controlEndSlur\"] = \"\\uE8E5\";\n    // U+1D178  End slur\n    Glyphs[\"controlEndSlurAlternate\"] = \"\\uD834\\uDD78\";\n    // U+E8E3  End tie\n    Glyphs[\"controlEndTie\"] = \"\\uE8E3\";\n    // U+1D176  End tie\n    Glyphs[\"controlEndTieAlternate\"] = \"\\uD834\\uDD76\";\n    // U+ED64  Double flat\n    Glyphs[\"csymAccidentalDoubleFlat\"] = \"\\uED64\";\n    // U+ED63  Double sharp\n    Glyphs[\"csymAccidentalDoubleSharp\"] = \"\\uED63\";\n    // U+ED60  Flat\n    Glyphs[\"csymAccidentalFlat\"] = \"\\uED60\";\n    // U+ED61  Natural\n    Glyphs[\"csymAccidentalNatural\"] = \"\\uED61\";\n    // U+ED62  Sharp\n    Glyphs[\"csymAccidentalSharp\"] = \"\\uED62\";\n    // U+ED66  Triple flat\n    Glyphs[\"csymAccidentalTripleFlat\"] = \"\\uED66\";\n    // U+ED65  Triple sharp\n    Glyphs[\"csymAccidentalTripleSharp\"] = \"\\uED65\";\n    // U+E87B  Slash for altered bass note\n    Glyphs[\"csymAlteredBassSlash\"] = \"\\uE87B\";\n    // U+E872  Augmented\n    Glyphs[\"csymAugmented\"] = \"\\uE872\";\n    // U+E877  Double-height left bracket\n    Glyphs[\"csymBracketLeftTall\"] = \"\\uE877\";\n    // U+E878  Double-height right bracket\n    Glyphs[\"csymBracketRightTall\"] = \"\\uE878\";\n    // U+E87C  Slash for chord symbols arranged diagonally\n    Glyphs[\"csymDiagonalArrangementSlash\"] = \"\\uE87C\";\n    // U+E870  Diminished\n    Glyphs[\"csymDiminished\"] = \"\\uE870\";\n    // U+1D1A9  Diminished\n    Glyphs[\"csymDiminishedAlternate\"] = \"\\uD834\\uDDA9\";\n    // U+E871  Half-diminished\n    Glyphs[\"csymHalfDiminished\"] = \"\\uE871\";\n    // U+E873  Major seventh\n    Glyphs[\"csymMajorSeventh\"] = \"\\uE873\";\n    // U+E874  Minor\n    Glyphs[\"csymMinor\"] = \"\\uE874\";\n    // U+E875  Double-height left parenthesis\n    Glyphs[\"csymParensLeftTall\"] = \"\\uE875\";\n    // U+E879  Triple-height left parenthesis\n    Glyphs[\"csymParensLeftVeryTall\"] = \"\\uE879\";\n    // U+E876  Double-height right parenthesis\n    Glyphs[\"csymParensRightTall\"] = \"\\uE876\";\n    // U+E87A  Triple-height right parenthesis\n    Glyphs[\"csymParensRightVeryTall\"] = \"\\uE87A\";\n    // U+E4D6  Curlew (Britten)\n    Glyphs[\"curlewSign\"] = \"\\uE4D6\";\n    // U+E046  Da capo\n    Glyphs[\"daCapo\"] = \"\\uE046\";\n    // U+1D10A  Da capo\n    Glyphs[\"daCapoAlternate\"] = \"\\uD834\\uDD0A\";\n    // U+E045  Dal segno\n    Glyphs[\"dalSegno\"] = \"\\uE045\";\n    // U+1D109  Dal segno\n    Glyphs[\"dalSegnoAlternate\"] = \"\\uD834\\uDD09\";\n    // U+EA3C  Daseian excellentes 1\n    Glyphs[\"daseianExcellentes1\"] = \"\\uEA3C\";\n    // U+EA3D  Daseian excellentes 2\n    Glyphs[\"daseianExcellentes2\"] = \"\\uEA3D\";\n    // U+EA3E  Daseian excellentes 3\n    Glyphs[\"daseianExcellentes3\"] = \"\\uEA3E\";\n    // U+EA3F  Daseian excellentes 4\n    Glyphs[\"daseianExcellentes4\"] = \"\\uEA3F\";\n    // U+EA34  Daseian finales 1\n    Glyphs[\"daseianFinales1\"] = \"\\uEA34\";\n    // U+EA35  Daseian finales 2\n    Glyphs[\"daseianFinales2\"] = \"\\uEA35\";\n    // U+EA36  Daseian finales 3\n    Glyphs[\"daseianFinales3\"] = \"\\uEA36\";\n    // U+EA37  Daseian finales 4\n    Glyphs[\"daseianFinales4\"] = \"\\uEA37\";\n    // U+EA30  Daseian graves 1\n    Glyphs[\"daseianGraves1\"] = \"\\uEA30\";\n    // U+EA31  Daseian graves 2\n    Glyphs[\"daseianGraves2\"] = \"\\uEA31\";\n    // U+EA32  Daseian graves 3\n    Glyphs[\"daseianGraves3\"] = \"\\uEA32\";\n    // U+EA33  Daseian graves 4\n    Glyphs[\"daseianGraves4\"] = \"\\uEA33\";\n    // U+EA40  Daseian residua 1\n    Glyphs[\"daseianResidua1\"] = \"\\uEA40\";\n    // U+EA41  Daseian residua 2\n    Glyphs[\"daseianResidua2\"] = \"\\uEA41\";\n    // U+EA38  Daseian superiores 1\n    Glyphs[\"daseianSuperiores1\"] = \"\\uEA38\";\n    // U+EA39  Daseian superiores 2\n    Glyphs[\"daseianSuperiores2\"] = \"\\uEA39\";\n    // U+EA3A  Daseian superiores 3\n    Glyphs[\"daseianSuperiores3\"] = \"\\uEA3A\";\n    // U+EA3B  Daseian superiores 4\n    Glyphs[\"daseianSuperiores4\"] = \"\\uEA3B\";\n    // U+E234  Double lateral roll (Stevens)\n    Glyphs[\"doubleLateralRollStevens\"] = \"\\uE234\";\n    // U+E5F0  Double-tongue above\n    Glyphs[\"doubleTongueAbove\"] = \"\\uE5F0\";\n    // U+1D18A  Double-tongue above\n    Glyphs[\"doubleTongueAboveAlternate\"] = \"\\uD834\\uDD8A\";\n    // U+E5F1  Double-tongue below\n    Glyphs[\"doubleTongueBelow\"] = \"\\uE5F1\";\n    // U+E546  Colon separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorColon\"] = \"\\uE546\";\n    // U+E547  Hyphen separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorHyphen\"] = \"\\uE547\";\n    // U+E549  Slash separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSlash\"] = \"\\uE549\";\n    // U+E548  Space separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSpace\"] = \"\\uE548\";\n    // U+E53E  Crescendo\n    Glyphs[\"dynamicCrescendoHairpin\"] = \"\\uE53E\";\n    // U+1D192  Crescendo\n    Glyphs[\"dynamicCrescendoHairpinAlternate\"] = \"\\uD834\\uDD92\";\n    // U+E53F  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpin\"] = \"\\uE53F\";\n    // U+1D193  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpinAlternate\"] = \"\\uD834\\uDD93\";\n    // U+E52F  ff\n    Glyphs[\"dynamicFF\"] = \"\\uE52F\";\n    // U+E530  fff\n    Glyphs[\"dynamicFFF\"] = \"\\uE530\";\n    // U+E531  ffff\n    Glyphs[\"dynamicFFFF\"] = \"\\uE531\";\n    // U+E532  fffff\n    Glyphs[\"dynamicFFFFF\"] = \"\\uE532\";\n    // U+E533  ffffff\n    Glyphs[\"dynamicFFFFFF\"] = \"\\uE533\";\n    // U+E522  Forte\n    Glyphs[\"dynamicForte\"] = \"\\uE522\";\n    // U+1D191  Forte\n    Glyphs[\"dynamicForteAlternate\"] = \"\\uD834\\uDD91\";\n    // U+E534  Forte-piano\n    Glyphs[\"dynamicFortePiano\"] = \"\\uE534\";\n    // U+E535  Forzando\n    Glyphs[\"dynamicForzando\"] = \"\\uE535\";\n    // U+E544  Left bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketLeft\"] = \"\\uE544\";\n    // U+E545  Right bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketRight\"] = \"\\uE545\";\n    // U+E542  Left parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisLeft\"] = \"\\uE542\";\n    // U+E543  Right parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisRight\"] = \"\\uE543\";\n    // U+E52D  mf\n    Glyphs[\"dynamicMF\"] = \"\\uE52D\";\n    // U+E52C  mp\n    Glyphs[\"dynamicMP\"] = \"\\uE52C\";\n    // U+E540  Messa di voce\n    Glyphs[\"dynamicMessaDiVoce\"] = \"\\uE540\";\n    // U+E521  Mezzo\n    Glyphs[\"dynamicMezzo\"] = \"\\uE521\";\n    // U+1D190  Mezzo\n    Glyphs[\"dynamicMezzoAlternate\"] = \"\\uD834\\uDD90\";\n    // U+E526  Niente\n    Glyphs[\"dynamicNiente\"] = \"\\uE526\";\n    // U+E541  Niente (for hairpins)\n    Glyphs[\"dynamicNienteForHairpin\"] = \"\\uE541\";\n    // U+E52E  pf\n    Glyphs[\"dynamicPF\"] = \"\\uE52E\";\n    // U+E52B  pp\n    Glyphs[\"dynamicPP\"] = \"\\uE52B\";\n    // U+E52A  ppp\n    Glyphs[\"dynamicPPP\"] = \"\\uE52A\";\n    // U+E529  pppp\n    Glyphs[\"dynamicPPPP\"] = \"\\uE529\";\n    // U+E528  ppppp\n    Glyphs[\"dynamicPPPPP\"] = \"\\uE528\";\n    // U+E527  pppppp\n    Glyphs[\"dynamicPPPPPP\"] = \"\\uE527\";\n    // U+E520  Piano\n    Glyphs[\"dynamicPiano\"] = \"\\uE520\";\n    // U+1D18F  Piano\n    Glyphs[\"dynamicPianoAlternate\"] = \"\\uD834\\uDD8F\";\n    // U+E523  Rinforzando\n    Glyphs[\"dynamicRinforzando\"] = \"\\uE523\";\n    // U+1D18C  Rinforzando\n    Glyphs[\"dynamicRinforzandoAlternate\"] = \"\\uD834\\uDD8C\";\n    // U+E53C  Rinforzando 1\n    Glyphs[\"dynamicRinforzando1\"] = \"\\uE53C\";\n    // U+E53D  Rinforzando 2\n    Glyphs[\"dynamicRinforzando2\"] = \"\\uE53D\";\n    // U+E524  Sforzando\n    Glyphs[\"dynamicSforzando\"] = \"\\uE524\";\n    // U+1D18D  Sforzando\n    Glyphs[\"dynamicSforzandoAlternate\"] = \"\\uD834\\uDD8D\";\n    // U+E536  Sforzando 1\n    Glyphs[\"dynamicSforzando1\"] = \"\\uE536\";\n    // U+E538  Sforzando-pianissimo\n    Glyphs[\"dynamicSforzandoPianissimo\"] = \"\\uE538\";\n    // U+E537  Sforzando-piano\n    Glyphs[\"dynamicSforzandoPiano\"] = \"\\uE537\";\n    // U+E539  Sforzato\n    Glyphs[\"dynamicSforzato\"] = \"\\uE539\";\n    // U+E53B  Sforzatissimo\n    Glyphs[\"dynamicSforzatoFF\"] = \"\\uE53B\";\n    // U+E53A  Sforzato-piano\n    Glyphs[\"dynamicSforzatoPiano\"] = \"\\uE53A\";\n    // U+E525  Z\n    Glyphs[\"dynamicZ\"] = \"\\uE525\";\n    // U+1D18E  Z\n    Glyphs[\"dynamicZAlternate\"] = \"\\uD834\\uDD8E\";\n    // U+EB46  Eight channels (7.1 surround)\n    Glyphs[\"elecAudioChannelsEight\"] = \"\\uEB46\";\n    // U+EB43  Five channels\n    Glyphs[\"elecAudioChannelsFive\"] = \"\\uEB43\";\n    // U+EB42  Four channels\n    Glyphs[\"elecAudioChannelsFour\"] = \"\\uEB42\";\n    // U+EB3E  One channel (mono)\n    Glyphs[\"elecAudioChannelsOne\"] = \"\\uEB3E\";\n    // U+EB45  Seven channels\n    Glyphs[\"elecAudioChannelsSeven\"] = \"\\uEB45\";\n    // U+EB44  Six channels (5.1 surround)\n    Glyphs[\"elecAudioChannelsSix\"] = \"\\uEB44\";\n    // U+EB40  Three channels (frontal)\n    Glyphs[\"elecAudioChannelsThreeFrontal\"] = \"\\uEB40\";\n    // U+EB41  Three channels (surround)\n    Glyphs[\"elecAudioChannelsThreeSurround\"] = \"\\uEB41\";\n    // U+EB3F  Two channels (stereo)\n    Glyphs[\"elecAudioChannelsTwo\"] = \"\\uEB3F\";\n    // U+EB49  Audio in\n    Glyphs[\"elecAudioIn\"] = \"\\uEB49\";\n    // U+EB3C  Mono audio setup\n    Glyphs[\"elecAudioMono\"] = \"\\uEB3C\";\n    // U+EB4A  Audio out\n    Glyphs[\"elecAudioOut\"] = \"\\uEB4A\";\n    // U+EB3D  Stereo audio setup\n    Glyphs[\"elecAudioStereo\"] = \"\\uEB3D\";\n    // U+EB1B  Camera\n    Glyphs[\"elecCamera\"] = \"\\uEB1B\";\n    // U+EB4D  Data in\n    Glyphs[\"elecDataIn\"] = \"\\uEB4D\";\n    // U+EB4E  Data out\n    Glyphs[\"elecDataOut\"] = \"\\uEB4E\";\n    // U+EB13  Disc\n    Glyphs[\"elecDisc\"] = \"\\uEB13\";\n    // U+EB4F  Download\n    Glyphs[\"elecDownload\"] = \"\\uEB4F\";\n    // U+EB2B  Eject\n    Glyphs[\"elecEject\"] = \"\\uEB2B\";\n    // U+EB1F  Fast-forward\n    Glyphs[\"elecFastForward\"] = \"\\uEB1F\";\n    // U+EB11  Headphones\n    Glyphs[\"elecHeadphones\"] = \"\\uEB11\";\n    // U+EB12  Headset\n    Glyphs[\"elecHeadset\"] = \"\\uEB12\";\n    // U+EB47  Line in\n    Glyphs[\"elecLineIn\"] = \"\\uEB47\";\n    // U+EB48  Line out\n    Glyphs[\"elecLineOut\"] = \"\\uEB48\";\n    // U+EB23  Loop\n    Glyphs[\"elecLoop\"] = \"\\uEB23\";\n    // U+EB1A  Loudspeaker\n    Glyphs[\"elecLoudspeaker\"] = \"\\uEB1A\";\n    // U+EB36  MIDI controller 0%\n    Glyphs[\"elecMIDIController0\"] = \"\\uEB36\";\n    // U+EB3B  MIDI controller 100%\n    Glyphs[\"elecMIDIController100\"] = \"\\uEB3B\";\n    // U+EB37  MIDI controller 20%\n    Glyphs[\"elecMIDIController20\"] = \"\\uEB37\";\n    // U+EB38  MIDI controller 40%\n    Glyphs[\"elecMIDIController40\"] = \"\\uEB38\";\n    // U+EB39  MIDI controller 60%\n    Glyphs[\"elecMIDIController60\"] = \"\\uEB39\";\n    // U+EB3A  MIDI controller 80%\n    Glyphs[\"elecMIDIController80\"] = \"\\uEB3A\";\n    // U+EB34  MIDI in\n    Glyphs[\"elecMIDIIn\"] = \"\\uEB34\";\n    // U+EB35  MIDI out\n    Glyphs[\"elecMIDIOut\"] = \"\\uEB35\";\n    // U+EB10  Microphone\n    Glyphs[\"elecMicrophone\"] = \"\\uEB10\";\n    // U+EB28  Mute microphone\n    Glyphs[\"elecMicrophoneMute\"] = \"\\uEB28\";\n    // U+EB29  Unmute microphone\n    Glyphs[\"elecMicrophoneUnmute\"] = \"\\uEB29\";\n    // U+EB15  Mixing console\n    Glyphs[\"elecMixingConsole\"] = \"\\uEB15\";\n    // U+EB18  Monitor\n    Glyphs[\"elecMonitor\"] = \"\\uEB18\";\n    // U+EB26  Mute\n    Glyphs[\"elecMute\"] = \"\\uEB26\";\n    // U+EB1E  Pause\n    Glyphs[\"elecPause\"] = \"\\uEB1E\";\n    // U+EB1C  Play\n    Glyphs[\"elecPlay\"] = \"\\uEB1C\";\n    // U+EB2A  Power on/off\n    Glyphs[\"elecPowerOnOff\"] = \"\\uEB2A\";\n    // U+EB19  Projector\n    Glyphs[\"elecProjector\"] = \"\\uEB19\";\n    // U+EB24  Replay\n    Glyphs[\"elecReplay\"] = \"\\uEB24\";\n    // U+EB20  Rewind\n    Glyphs[\"elecRewind\"] = \"\\uEB20\";\n    // U+EB25  Shuffle\n    Glyphs[\"elecShuffle\"] = \"\\uEB25\";\n    // U+EB22  Skip backwards\n    Glyphs[\"elecSkipBackwards\"] = \"\\uEB22\";\n    // U+EB21  Skip forwards\n    Glyphs[\"elecSkipForwards\"] = \"\\uEB21\";\n    // U+EB1D  Stop\n    Glyphs[\"elecStop\"] = \"\\uEB1D\";\n    // U+EB14  Tape\n    Glyphs[\"elecTape\"] = \"\\uEB14\";\n    // U+EB16  USB connection\n    Glyphs[\"elecUSB\"] = \"\\uEB16\";\n    // U+EB27  Unmute\n    Glyphs[\"elecUnmute\"] = \"\\uEB27\";\n    // U+EB50  Upload\n    Glyphs[\"elecUpload\"] = \"\\uEB50\";\n    // U+EB17  Video camera\n    Glyphs[\"elecVideoCamera\"] = \"\\uEB17\";\n    // U+EB4B  Video in\n    Glyphs[\"elecVideoIn\"] = \"\\uEB4B\";\n    // U+EB4C  Video out\n    Glyphs[\"elecVideoOut\"] = \"\\uEB4C\";\n    // U+EB2C  Combining volume fader\n    Glyphs[\"elecVolumeFader\"] = \"\\uEB2C\";\n    // U+EB2D  Combining volume fader thumb\n    Glyphs[\"elecVolumeFaderThumb\"] = \"\\uEB2D\";\n    // U+EB2E  Volume level 0%\n    Glyphs[\"elecVolumeLevel0\"] = \"\\uEB2E\";\n    // U+EB33  Volume level 100%\n    Glyphs[\"elecVolumeLevel100\"] = \"\\uEB33\";\n    // U+EB2F  Volume level 20%\n    Glyphs[\"elecVolumeLevel20\"] = \"\\uEB2F\";\n    // U+EB30  Volume level 40%\n    Glyphs[\"elecVolumeLevel40\"] = \"\\uEB30\";\n    // U+EB31  Volume level 60%\n    Glyphs[\"elecVolumeLevel60\"] = \"\\uEB31\";\n    // U+EB32  Volume level 80%\n    Glyphs[\"elecVolumeLevel80\"] = \"\\uEB32\";\n    // U+E062  F clef\n    Glyphs[\"fClef\"] = \"\\uE062\";\n    // U+1D122  F clef\n    Glyphs[\"fClefAlternate\"] = \"\\uD834\\uDD22\";\n    // U+E066  F clef quindicesima alta\n    Glyphs[\"fClef15ma\"] = \"\\uE066\";\n    // U+E063  F clef quindicesima bassa\n    Glyphs[\"fClef15mb\"] = \"\\uE063\";\n    // U+E065  F clef ottava alta\n    Glyphs[\"fClef8va\"] = \"\\uE065\";\n    // U+1D123  F clef ottava alta\n    Glyphs[\"fClef8vaAlternate\"] = \"\\uD834\\uDD23\";\n    // U+E064  F clef ottava bassa\n    Glyphs[\"fClef8vb\"] = \"\\uE064\";\n    // U+1D124  F clef ottava bassa\n    Glyphs[\"fClef8vbAlternate\"] = \"\\uD834\\uDD24\";\n    // U+E068  F clef, arrow down\n    Glyphs[\"fClefArrowDown\"] = \"\\uE068\";\n    // U+E067  F clef, arrow up\n    Glyphs[\"fClefArrowUp\"] = \"\\uE067\";\n    // U+E07C  F clef change\n    Glyphs[\"fClefChange\"] = \"\\uE07C\";\n    // U+E076  Reversed F clef\n    Glyphs[\"fClefReversed\"] = \"\\uE076\";\n    // U+E077  Turned F clef\n    Glyphs[\"fClefTurned\"] = \"\\uE077\";\n    // U+E4C0  Fermata above\n    Glyphs[\"fermataAbove\"] = \"\\uE4C0\";\n    // U+1D110  Fermata above\n    Glyphs[\"fermataAboveAlternate\"] = \"\\uD834\\uDD10\";\n    // U+E4C1  Fermata below\n    Glyphs[\"fermataBelow\"] = \"\\uE4C1\";\n    // U+1D111  Fermata below\n    Glyphs[\"fermataBelowAlternate\"] = \"\\uD834\\uDD11\";\n    // U+E4C6  Long fermata above\n    Glyphs[\"fermataLongAbove\"] = \"\\uE4C6\";\n    // U+E4C7  Long fermata below\n    Glyphs[\"fermataLongBelow\"] = \"\\uE4C7\";\n    // U+E4CA  Long fermata (Henze) above\n    Glyphs[\"fermataLongHenzeAbove\"] = \"\\uE4CA\";\n    // U+E4CB  Long fermata (Henze) below\n    Glyphs[\"fermataLongHenzeBelow\"] = \"\\uE4CB\";\n    // U+E4C4  Short fermata above\n    Glyphs[\"fermataShortAbove\"] = \"\\uE4C4\";\n    // U+E4C5  Short fermata below\n    Glyphs[\"fermataShortBelow\"] = \"\\uE4C5\";\n    // U+E4CC  Short fermata (Henze) above\n    Glyphs[\"fermataShortHenzeAbove\"] = \"\\uE4CC\";\n    // U+E4CD  Short fermata (Henze) below\n    Glyphs[\"fermataShortHenzeBelow\"] = \"\\uE4CD\";\n    // U+E4C8  Very long fermata above\n    Glyphs[\"fermataVeryLongAbove\"] = \"\\uE4C8\";\n    // U+E4C9  Very long fermata below\n    Glyphs[\"fermataVeryLongBelow\"] = \"\\uE4C9\";\n    // U+E4C2  Very short fermata above\n    Glyphs[\"fermataVeryShortAbove\"] = \"\\uE4C2\";\n    // U+E4C3  Very short fermata below\n    Glyphs[\"fermataVeryShortBelow\"] = \"\\uE4C3\";\n    // U+EA50  Figured bass 0\n    Glyphs[\"figbass0\"] = \"\\uEA50\";\n    // U+EA51  Figured bass 1\n    Glyphs[\"figbass1\"] = \"\\uEA51\";\n    // U+EA52  Figured bass 2\n    Glyphs[\"figbass2\"] = \"\\uEA52\";\n    // U+EA53  Figured bass 2 raised by half-step\n    Glyphs[\"figbass2Raised\"] = \"\\uEA53\";\n    // U+EA54  Figured bass 3\n    Glyphs[\"figbass3\"] = \"\\uEA54\";\n    // U+EA55  Figured bass 4\n    Glyphs[\"figbass4\"] = \"\\uEA55\";\n    // U+EA56  Figured bass 4 raised by half-step\n    Glyphs[\"figbass4Raised\"] = \"\\uEA56\";\n    // U+EA57  Figured bass 5\n    Glyphs[\"figbass5\"] = \"\\uEA57\";\n    // U+EA58  Figured bass 5 raised by half-step\n    Glyphs[\"figbass5Raised1\"] = \"\\uEA58\";\n    // U+EA59  Figured bass 5 raised by half-step 2\n    Glyphs[\"figbass5Raised2\"] = \"\\uEA59\";\n    // U+EA5A  Figured bass diminished 5\n    Glyphs[\"figbass5Raised3\"] = \"\\uEA5A\";\n    // U+EA5B  Figured bass 6\n    Glyphs[\"figbass6\"] = \"\\uEA5B\";\n    // U+EA5C  Figured bass 6 raised by half-step\n    Glyphs[\"figbass6Raised\"] = \"\\uEA5C\";\n    // U+EA6F  Figured bass 6 raised by half-step 2\n    Glyphs[\"figbass6Raised2\"] = \"\\uEA6F\";\n    // U+EA5D  Figured bass 7\n    Glyphs[\"figbass7\"] = \"\\uEA5D\";\n    // U+ECC0  Figured bass 7 diminished\n    Glyphs[\"figbass7Diminished\"] = \"\\uECC0\";\n    // U+EA5E  Figured bass 7 raised by half-step\n    Glyphs[\"figbass7Raised1\"] = \"\\uEA5E\";\n    // U+EA5F  Figured bass 7 lowered by a half-step\n    Glyphs[\"figbass7Raised2\"] = \"\\uEA5F\";\n    // U+EA60  Figured bass 8\n    Glyphs[\"figbass8\"] = \"\\uEA60\";\n    // U+EA61  Figured bass 9\n    Glyphs[\"figbass9\"] = \"\\uEA61\";\n    // U+EA62  Figured bass 9 raised by half-step\n    Glyphs[\"figbass9Raised\"] = \"\\uEA62\";\n    // U+EA68  Figured bass [\n    Glyphs[\"figbassBracketLeft\"] = \"\\uEA68\";\n    // U+EA69  Figured bass ]\n    Glyphs[\"figbassBracketRight\"] = \"\\uEA69\";\n    // U+EA6E  Combining lower\n    Glyphs[\"figbassCombiningLowering\"] = \"\\uEA6E\";\n    // U+EA6D  Combining raise\n    Glyphs[\"figbassCombiningRaising\"] = \"\\uEA6D\";\n    // U+EA63  Figured bass double flat\n    Glyphs[\"figbassDoubleFlat\"] = \"\\uEA63\";\n    // U+EA67  Figured bass double sharp\n    Glyphs[\"figbassDoubleSharp\"] = \"\\uEA67\";\n    // U+EA64  Figured bass flat\n    Glyphs[\"figbassFlat\"] = \"\\uEA64\";\n    // U+EA65  Figured bass natural\n    Glyphs[\"figbassNatural\"] = \"\\uEA65\";\n    // U+EA6A  Figured bass (\n    Glyphs[\"figbassParensLeft\"] = \"\\uEA6A\";\n    // U+EA6B  Figured bass )\n    Glyphs[\"figbassParensRight\"] = \"\\uEA6B\";\n    // U+EA6C  Figured bass +\n    Glyphs[\"figbassPlus\"] = \"\\uEA6C\";\n    // U+EA66  Figured bass sharp\n    Glyphs[\"figbassSharp\"] = \"\\uEA66\";\n    // U+ECC1  Figured bass triple flat\n    Glyphs[\"figbassTripleFlat\"] = \"\\uECC1\";\n    // U+ECC2  Figured bass triple sharp\n    Glyphs[\"figbassTripleSharp\"] = \"\\uECC2\";\n    // U+ED10  Fingering 0 (open string)\n    Glyphs[\"fingering0\"] = \"\\uED10\";\n    // U+ED80  Fingering 0 italic (open string)\n    Glyphs[\"fingering0Italic\"] = \"\\uED80\";\n    // U+ED11  Fingering 1 (thumb)\n    Glyphs[\"fingering1\"] = \"\\uED11\";\n    // U+ED81  Fingering 1 italic (thumb)\n    Glyphs[\"fingering1Italic\"] = \"\\uED81\";\n    // U+ED12  Fingering 2 (index finger)\n    Glyphs[\"fingering2\"] = \"\\uED12\";\n    // U+ED82  Fingering 2 italic (index finger)\n    Glyphs[\"fingering2Italic\"] = \"\\uED82\";\n    // U+ED13  Fingering 3 (middle finger)\n    Glyphs[\"fingering3\"] = \"\\uED13\";\n    // U+ED83  Fingering 3 italic (middle finger)\n    Glyphs[\"fingering3Italic\"] = \"\\uED83\";\n    // U+ED14  Fingering 4 (ring finger)\n    Glyphs[\"fingering4\"] = \"\\uED14\";\n    // U+ED84  Fingering 4 italic (ring finger)\n    Glyphs[\"fingering4Italic\"] = \"\\uED84\";\n    // U+ED15  Fingering 5 (little finger)\n    Glyphs[\"fingering5\"] = \"\\uED15\";\n    // U+ED85  Fingering 5 italic (little finger)\n    Glyphs[\"fingering5Italic\"] = \"\\uED85\";\n    // U+ED24  Fingering 6\n    Glyphs[\"fingering6\"] = \"\\uED24\";\n    // U+ED86  Fingering 6 italic\n    Glyphs[\"fingering6Italic\"] = \"\\uED86\";\n    // U+ED25  Fingering 7\n    Glyphs[\"fingering7\"] = \"\\uED25\";\n    // U+ED87  Fingering 7 italic\n    Glyphs[\"fingering7Italic\"] = \"\\uED87\";\n    // U+ED26  Fingering 8\n    Glyphs[\"fingering8\"] = \"\\uED26\";\n    // U+ED88  Fingering 8 italic\n    Glyphs[\"fingering8Italic\"] = \"\\uED88\";\n    // U+ED27  Fingering 9\n    Glyphs[\"fingering9\"] = \"\\uED27\";\n    // U+ED89  Fingering 9 italic\n    Glyphs[\"fingering9Italic\"] = \"\\uED89\";\n    // U+ED1B  Fingering a (anular; right-hand ring finger for guitar)\n    Glyphs[\"fingeringALower\"] = \"\\uED1B\";\n    // U+ED1C  Fingering c (right-hand little finger for guitar)\n    Glyphs[\"fingeringCLower\"] = \"\\uED1C\";\n    // U+ED1E  Fingering e (right-hand little finger for guitar)\n    Glyphs[\"fingeringELower\"] = \"\\uED1E\";\n    // U+ED19  Fingering i (indicio; right-hand index finger for guitar)\n    Glyphs[\"fingeringILower\"] = \"\\uED19\";\n    // U+ED2A  Fingering left bracket\n    Glyphs[\"fingeringLeftBracket\"] = \"\\uED2A\";\n    // U+ED8C  Fingering left bracket italic\n    Glyphs[\"fingeringLeftBracketItalic\"] = \"\\uED8C\";\n    // U+ED28  Fingering left parenthesis\n    Glyphs[\"fingeringLeftParenthesis\"] = \"\\uED28\";\n    // U+ED8A  Fingering left parenthesis italic\n    Glyphs[\"fingeringLeftParenthesisItalic\"] = \"\\uED8A\";\n    // U+ED1A  Fingering m (medio; right-hand middle finger for guitar)\n    Glyphs[\"fingeringMLower\"] = \"\\uED1A\";\n    // U+ED23  Multiple notes played by thumb or single finger\n    Glyphs[\"fingeringMultipleNotes\"] = \"\\uED23\";\n    // U+ED1F  Fingering o (right-hand little finger for guitar)\n    Glyphs[\"fingeringOLower\"] = \"\\uED1F\";\n    // U+ED17  Fingering p (pulgar; right-hand thumb for guitar)\n    Glyphs[\"fingeringPLower\"] = \"\\uED17\";\n    // U+ED8E  Fingering q (right-hand little finger for guitar)\n    Glyphs[\"fingeringQLower\"] = \"\\uED8E\";\n    // U+ED2B  Fingering right bracket\n    Glyphs[\"fingeringRightBracket\"] = \"\\uED2B\";\n    // U+ED8D  Fingering right bracket italic\n    Glyphs[\"fingeringRightBracketItalic\"] = \"\\uED8D\";\n    // U+ED29  Fingering right parenthesis\n    Glyphs[\"fingeringRightParenthesis\"] = \"\\uED29\";\n    // U+ED8B  Fingering right parenthesis italic\n    Glyphs[\"fingeringRightParenthesisItalic\"] = \"\\uED8B\";\n    // U+ED8F  Fingering s (right-hand little finger for guitar)\n    Glyphs[\"fingeringSLower\"] = \"\\uED8F\";\n    // U+ED2C  Fingering middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDot\"] = \"\\uED2C\";\n    // U+ED2D  Fingering white middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDotWhite\"] = \"\\uED2D\";\n    // U+ED2E  Fingering forward slash separator\n    Glyphs[\"fingeringSeparatorSlash\"] = \"\\uED2E\";\n    // U+ED20  Finger substitution above\n    Glyphs[\"fingeringSubstitutionAbove\"] = \"\\uED20\";\n    // U+ED21  Finger substitution below\n    Glyphs[\"fingeringSubstitutionBelow\"] = \"\\uED21\";\n    // U+ED22  Finger substitution dash\n    Glyphs[\"fingeringSubstitutionDash\"] = \"\\uED22\";\n    // U+ED18  Fingering t (right-hand thumb for guitar)\n    Glyphs[\"fingeringTLower\"] = \"\\uED18\";\n    // U+ED16  Fingering T (left-hand thumb for guitar)\n    Glyphs[\"fingeringTUpper\"] = \"\\uED16\";\n    // U+ED1D  Fingering x (right-hand little finger for guitar)\n    Glyphs[\"fingeringXLower\"] = \"\\uED1D\";\n    // U+E24F  Combining flag 8 (1024th) below\n    Glyphs[\"flag1024thDown\"] = \"\\uE24F\";\n    // U+E24E  Combining flag 8 (1024th) above\n    Glyphs[\"flag1024thUp\"] = \"\\uE24E\";\n    // U+E249  Combining flag 5 (128th) below\n    Glyphs[\"flag128thDown\"] = \"\\uE249\";\n    // U+E248  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUp\"] = \"\\uE248\";\n    // U+1D172  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUpAlternate\"] = \"\\uD834\\uDD72\";\n    // U+E243  Combining flag 2 (16th) below\n    Glyphs[\"flag16thDown\"] = \"\\uE243\";\n    // U+E242  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUp\"] = \"\\uE242\";\n    // U+1D16F  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUpAlternate\"] = \"\\uD834\\uDD6F\";\n    // U+E24B  Combining flag 6 (256th) below\n    Glyphs[\"flag256thDown\"] = \"\\uE24B\";\n    // U+E24A  Combining flag 6 (256th) above\n    Glyphs[\"flag256thUp\"] = \"\\uE24A\";\n    // U+E245  Combining flag 3 (32nd) below\n    Glyphs[\"flag32ndDown\"] = \"\\uE245\";\n    // U+E244  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUp\"] = \"\\uE244\";\n    // U+1D170  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUpAlternate\"] = \"\\uD834\\uDD70\";\n    // U+E24D  Combining flag 7 (512th) below\n    Glyphs[\"flag512thDown\"] = \"\\uE24D\";\n    // U+E24C  Combining flag 7 (512th) above\n    Glyphs[\"flag512thUp\"] = \"\\uE24C\";\n    // U+E247  Combining flag 4 (64th) below\n    Glyphs[\"flag64thDown\"] = \"\\uE247\";\n    // U+E246  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUp\"] = \"\\uE246\";\n    // U+1D171  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUpAlternate\"] = \"\\uD834\\uDD71\";\n    // U+E241  Combining flag 1 (8th) below\n    Glyphs[\"flag8thDown\"] = \"\\uE241\";\n    // U+E240  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUp\"] = \"\\uE240\";\n    // U+1D16E  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUpAlternate\"] = \"\\uD834\\uDD6E\";\n    // U+E251  Internal combining flag below\n    Glyphs[\"flagInternalDown\"] = \"\\uE251\";\n    // U+E250  Internal combining flag above\n    Glyphs[\"flagInternalUp\"] = \"\\uE250\";\n    // U+E850  3-string fretboard\n    Glyphs[\"fretboard3String\"] = \"\\uE850\";\n    // U+E851  3-string fretboard at nut\n    Glyphs[\"fretboard3StringNut\"] = \"\\uE851\";\n    // U+E852  4-string fretboard\n    Glyphs[\"fretboard4String\"] = \"\\uE852\";\n    // U+1D11D  4-string fretboard\n    Glyphs[\"fretboard4StringAlternate\"] = \"\\uD834\\uDD1D\";\n    // U+E853  4-string fretboard at nut\n    Glyphs[\"fretboard4StringNut\"] = \"\\uE853\";\n    // U+E854  5-string fretboard\n    Glyphs[\"fretboard5String\"] = \"\\uE854\";\n    // U+E855  5-string fretboard at nut\n    Glyphs[\"fretboard5StringNut\"] = \"\\uE855\";\n    // U+E856  6-string fretboard\n    Glyphs[\"fretboard6String\"] = \"\\uE856\";\n    // U+1D11C  6-string fretboard\n    Glyphs[\"fretboard6StringAlternate\"] = \"\\uD834\\uDD1C\";\n    // U+E857  6-string fretboard at nut\n    Glyphs[\"fretboard6StringNut\"] = \"\\uE857\";\n    // U+E858  Fingered fret (filled circle)\n    Glyphs[\"fretboardFilledCircle\"] = \"\\uE858\";\n    // U+E85A  Open string (O)\n    Glyphs[\"fretboardO\"] = \"\\uE85A\";\n    // U+E859  String not played (X)\n    Glyphs[\"fretboardX\"] = \"\\uE859\";\n    // U+EA93  Function theory angle bracket left\n    Glyphs[\"functionAngleLeft\"] = \"\\uEA93\";\n    // U+EA94  Function theory angle bracket right\n    Glyphs[\"functionAngleRight\"] = \"\\uEA94\";\n    // U+EA8F  Function theory bracket left\n    Glyphs[\"functionBracketLeft\"] = \"\\uEA8F\";\n    // U+EA90  Function theory bracket right\n    Glyphs[\"functionBracketRight\"] = \"\\uEA90\";\n    // U+EA81  Function theory dominant of dominant\n    Glyphs[\"functionDD\"] = \"\\uEA81\";\n    // U+EA80  Function theory minor dominant\n    Glyphs[\"functionDLower\"] = \"\\uEA80\";\n    // U+EA7F  Function theory major dominant\n    Glyphs[\"functionDUpper\"] = \"\\uEA7F\";\n    // U+EA78  Function theory 8\n    Glyphs[\"functionEight\"] = \"\\uEA78\";\n    // U+EA99  Function theory F\n    Glyphs[\"functionFUpper\"] = \"\\uEA99\";\n    // U+EA75  Function theory 5\n    Glyphs[\"functionFive\"] = \"\\uEA75\";\n    // U+EA74  Function theory 4\n    Glyphs[\"functionFour\"] = \"\\uEA74\";\n    // U+EA84  Function theory g\n    Glyphs[\"functionGLower\"] = \"\\uEA84\";\n    // U+EA83  Function theory G\n    Glyphs[\"functionGUpper\"] = \"\\uEA83\";\n    // U+EA7C  Function theory greater than\n    Glyphs[\"functionGreaterThan\"] = \"\\uEA7C\";\n    // U+EA9B  Function theory i\n    Glyphs[\"functionILower\"] = \"\\uEA9B\";\n    // U+EA9A  Function theory I\n    Glyphs[\"functionIUpper\"] = \"\\uEA9A\";\n    // U+EA9D  Function theory k\n    Glyphs[\"functionKLower\"] = \"\\uEA9D\";\n    // U+EA9C  Function theory K\n    Glyphs[\"functionKUpper\"] = \"\\uEA9C\";\n    // U+EA9F  Function theory l\n    Glyphs[\"functionLLower\"] = \"\\uEA9F\";\n    // U+EA9E  Function theory L\n    Glyphs[\"functionLUpper\"] = \"\\uEA9E\";\n    // U+EA7A  Function theory less than\n    Glyphs[\"functionLessThan\"] = \"\\uEA7A\";\n    // U+ED01  Function theory m\n    Glyphs[\"functionMLower\"] = \"\\uED01\";\n    // U+ED00  Function theory M\n    Glyphs[\"functionMUpper\"] = \"\\uED00\";\n    // U+EA7B  Function theory minus\n    Glyphs[\"functionMinus\"] = \"\\uEA7B\";\n    // U+EA86  Function theory n\n    Glyphs[\"functionNLower\"] = \"\\uEA86\";\n    // U+EA85  Function theory N\n    Glyphs[\"functionNUpper\"] = \"\\uEA85\";\n    // U+ED02  Function theory superscript N\n    Glyphs[\"functionNUpperSuperscript\"] = \"\\uED02\";\n    // U+EA79  Function theory 9\n    Glyphs[\"functionNine\"] = \"\\uEA79\";\n    // U+EA71  Function theory 1\n    Glyphs[\"functionOne\"] = \"\\uEA71\";\n    // U+EA88  Function theory p\n    Glyphs[\"functionPLower\"] = \"\\uEA88\";\n    // U+EA87  Function theory P\n    Glyphs[\"functionPUpper\"] = \"\\uEA87\";\n    // U+EA91  Function theory parenthesis left\n    Glyphs[\"functionParensLeft\"] = \"\\uEA91\";\n    // U+EA92  Function theory parenthesis right\n    Glyphs[\"functionParensRight\"] = \"\\uEA92\";\n    // U+EA98  Function theory prefix plus\n    Glyphs[\"functionPlus\"] = \"\\uEA98\";\n    // U+ED03  Function theory r\n    Glyphs[\"functionRLower\"] = \"\\uED03\";\n    // U+EA95  Function theory repetition 1\n    Glyphs[\"functionRepetition1\"] = \"\\uEA95\";\n    // U+EA96  Function theory repetition 2\n    Glyphs[\"functionRepetition2\"] = \"\\uEA96\";\n    // U+EA97  Function theory prefix ring\n    Glyphs[\"functionRing\"] = \"\\uEA97\";\n    // U+EA8A  Function theory minor subdominant\n    Glyphs[\"functionSLower\"] = \"\\uEA8A\";\n    // U+EA7E  Function theory minor subdominant of subdominant\n    Glyphs[\"functionSSLower\"] = \"\\uEA7E\";\n    // U+EA7D  Function theory major subdominant of subdominant\n    Glyphs[\"functionSSUpper\"] = \"\\uEA7D\";\n    // U+EA89  Function theory major subdominant\n    Glyphs[\"functionSUpper\"] = \"\\uEA89\";\n    // U+EA77  Function theory 7\n    Glyphs[\"functionSeven\"] = \"\\uEA77\";\n    // U+EA76  Function theory 6\n    Glyphs[\"functionSix\"] = \"\\uEA76\";\n    // U+EA82  Function theory double dominant seventh\n    Glyphs[\"functionSlashedDD\"] = \"\\uEA82\";\n    // U+EA8C  Function theory minor tonic\n    Glyphs[\"functionTLower\"] = \"\\uEA8C\";\n    // U+EA8B  Function theory tonic\n    Glyphs[\"functionTUpper\"] = \"\\uEA8B\";\n    // U+EA73  Function theory 3\n    Glyphs[\"functionThree\"] = \"\\uEA73\";\n    // U+EA72  Function theory 2\n    Glyphs[\"functionTwo\"] = \"\\uEA72\";\n    // U+EA8E  Function theory v\n    Glyphs[\"functionVLower\"] = \"\\uEA8E\";\n    // U+EA8D  Function theory V\n    Glyphs[\"functionVUpper\"] = \"\\uEA8D\";\n    // U+EA70  Function theory 0\n    Glyphs[\"functionZero\"] = \"\\uEA70\";\n    // U+E050  G clef\n    Glyphs[\"gClef\"] = \"\\uE050\";\n    // U+1D11E  G clef\n    Glyphs[\"gClefAlternate\"] = \"\\uD834\\uDD1E\";\n    // U+E054  G clef quindicesima alta\n    Glyphs[\"gClef15ma\"] = \"\\uE054\";\n    // U+E051  G clef quindicesima bassa\n    Glyphs[\"gClef15mb\"] = \"\\uE051\";\n    // U+E053  G clef ottava alta\n    Glyphs[\"gClef8va\"] = \"\\uE053\";\n    // U+1D11F  G clef ottava alta\n    Glyphs[\"gClef8vaAlternate\"] = \"\\uD834\\uDD1F\";\n    // U+E052  G clef ottava bassa\n    Glyphs[\"gClef8vb\"] = \"\\uE052\";\n    // U+1D120  G clef ottava bassa\n    Glyphs[\"gClef8vbAlternate\"] = \"\\uD834\\uDD20\";\n    // U+E056  G clef ottava bassa with C clef\n    Glyphs[\"gClef8vbCClef\"] = \"\\uE056\";\n    // U+E055  G clef ottava bassa (old style)\n    Glyphs[\"gClef8vbOld\"] = \"\\uE055\";\n    // U+E057  G clef, optionally ottava bassa\n    Glyphs[\"gClef8vbParens\"] = \"\\uE057\";\n    // U+E05B  G clef, arrow down\n    Glyphs[\"gClefArrowDown\"] = \"\\uE05B\";\n    // U+E05A  G clef, arrow up\n    Glyphs[\"gClefArrowUp\"] = \"\\uE05A\";\n    // U+E07A  G clef change\n    Glyphs[\"gClefChange\"] = \"\\uE07A\";\n    // U+E059  Combining G clef, number above\n    Glyphs[\"gClefLigatedNumberAbove\"] = \"\\uE059\";\n    // U+E058  Combining G clef, number below\n    Glyphs[\"gClefLigatedNumberBelow\"] = \"\\uE058\";\n    // U+E073  Reversed G clef\n    Glyphs[\"gClefReversed\"] = \"\\uE073\";\n    // U+E074  Turned G clef\n    Glyphs[\"gClefTurned\"] = \"\\uE074\";\n    // U+E586  Glissando down\n    Glyphs[\"glissandoDown\"] = \"\\uE586\";\n    // U+1D1B2  Glissando down\n    Glyphs[\"glissandoDownAlternate\"] = \"\\uD834\\uDDB2\";\n    // U+E585  Glissando up\n    Glyphs[\"glissandoUp\"] = \"\\uE585\";\n    // U+1D1B1  Glissando up\n    Glyphs[\"glissandoUpAlternate\"] = \"\\uD834\\uDDB1\";\n    // U+E561  Slashed grace note stem down\n    Glyphs[\"graceNoteAcciaccaturaStemDown\"] = \"\\uE561\";\n    // U+E560  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUp\"] = \"\\uE560\";\n    // U+1D194  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUpAlternate\"] = \"\\uD834\\uDD94\";\n    // U+E563  Grace note stem down\n    Glyphs[\"graceNoteAppoggiaturaStemDown\"] = \"\\uE563\";\n    // U+E562  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUp\"] = \"\\uE562\";\n    // U+1D195  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUpAlternate\"] = \"\\uD834\\uDD95\";\n    // U+E565  Slash for stem down grace note\n    Glyphs[\"graceNoteSlashStemDown\"] = \"\\uE565\";\n    // U+E564  Slash for stem up grace note\n    Glyphs[\"graceNoteSlashStemUp\"] = \"\\uE564\";\n    // U+E848  Full barré\n    Glyphs[\"guitarBarreFull\"] = \"\\uE848\";\n    // U+E849  Half barré\n    Glyphs[\"guitarBarreHalf\"] = \"\\uE849\";\n    // U+E83F  Closed wah/volume pedal\n    Glyphs[\"guitarClosePedal\"] = \"\\uE83F\";\n    // U+E843  Fade in\n    Glyphs[\"guitarFadeIn\"] = \"\\uE843\";\n    // U+E844  Fade out\n    Glyphs[\"guitarFadeOut\"] = \"\\uE844\";\n    // U+E842  Golpe (tapping the pick guard)\n    Glyphs[\"guitarGolpe\"] = \"\\uE842\";\n    // U+E83E  Half-open wah/volume pedal\n    Glyphs[\"guitarHalfOpenPedal\"] = \"\\uE83E\";\n    // U+E840  Left-hand tapping\n    Glyphs[\"guitarLeftHandTapping\"] = \"\\uE840\";\n    // U+E83D  Open wah/volume pedal\n    Glyphs[\"guitarOpenPedal\"] = \"\\uE83D\";\n    // U+E841  Right-hand tapping\n    Glyphs[\"guitarRightHandTapping\"] = \"\\uE841\";\n    // U+E832  Guitar shake\n    Glyphs[\"guitarShake\"] = \"\\uE832\";\n    // U+E833  String number 0\n    Glyphs[\"guitarString0\"] = \"\\uE833\";\n    // U+E834  String number 1\n    Glyphs[\"guitarString1\"] = \"\\uE834\";\n    // U+E84A  String number 10\n    Glyphs[\"guitarString10\"] = \"\\uE84A\";\n    // U+E84B  String number 11\n    Glyphs[\"guitarString11\"] = \"\\uE84B\";\n    // U+E84C  String number 12\n    Glyphs[\"guitarString12\"] = \"\\uE84C\";\n    // U+E84D  String number 13\n    Glyphs[\"guitarString13\"] = \"\\uE84D\";\n    // U+E835  String number 2\n    Glyphs[\"guitarString2\"] = \"\\uE835\";\n    // U+E836  String number 3\n    Glyphs[\"guitarString3\"] = \"\\uE836\";\n    // U+E837  String number 4\n    Glyphs[\"guitarString4\"] = \"\\uE837\";\n    // U+E838  String number 5\n    Glyphs[\"guitarString5\"] = \"\\uE838\";\n    // U+E839  String number 6\n    Glyphs[\"guitarString6\"] = \"\\uE839\";\n    // U+E83A  String number 7\n    Glyphs[\"guitarString7\"] = \"\\uE83A\";\n    // U+E83B  String number 8\n    Glyphs[\"guitarString8\"] = \"\\uE83B\";\n    // U+E83C  String number 9\n    Glyphs[\"guitarString9\"] = \"\\uE83C\";\n    // U+E847  Strum direction down\n    Glyphs[\"guitarStrumDown\"] = \"\\uE847\";\n    // U+E846  Strum direction up\n    Glyphs[\"guitarStrumUp\"] = \"\\uE846\";\n    // U+E831  Guitar vibrato bar dip\n    Glyphs[\"guitarVibratoBarDip\"] = \"\\uE831\";\n    // U+E830  Guitar vibrato bar scoop\n    Glyphs[\"guitarVibratoBarScoop\"] = \"\\uE830\";\n    // U+EAB2  Vibrato wiggle segment\n    Glyphs[\"guitarVibratoStroke\"] = \"\\uEAB2\";\n    // U+E845  Volume swell\n    Glyphs[\"guitarVolumeSwell\"] = \"\\uE845\";\n    // U+EAB3  Wide vibrato wiggle segment\n    Glyphs[\"guitarWideVibratoStroke\"] = \"\\uEAB3\";\n    // U+E81F  Belltree\n    Glyphs[\"handbellsBelltree\"] = \"\\uE81F\";\n    // U+E81E  Damp 3\n    Glyphs[\"handbellsDamp3\"] = \"\\uE81E\";\n    // U+E81B  Echo\n    Glyphs[\"handbellsEcho1\"] = \"\\uE81B\";\n    // U+E81C  Echo 2\n    Glyphs[\"handbellsEcho2\"] = \"\\uE81C\";\n    // U+E81D  Gyro\n    Glyphs[\"handbellsGyro\"] = \"\\uE81D\";\n    // U+E812  Hand martellato\n    Glyphs[\"handbellsHandMartellato\"] = \"\\uE812\";\n    // U+E815  Mallet, bell on table\n    Glyphs[\"handbellsMalletBellOnTable\"] = \"\\uE815\";\n    // U+E814  Mallet, bell suspended\n    Glyphs[\"handbellsMalletBellSuspended\"] = \"\\uE814\";\n    // U+E816  Mallet lift\n    Glyphs[\"handbellsMalletLft\"] = \"\\uE816\";\n    // U+E810  Martellato\n    Glyphs[\"handbellsMartellato\"] = \"\\uE810\";\n    // U+E811  Martellato lift\n    Glyphs[\"handbellsMartellatoLift\"] = \"\\uE811\";\n    // U+E813  Muted martellato\n    Glyphs[\"handbellsMutedMartellato\"] = \"\\uE813\";\n    // U+E817  Pluck lift\n    Glyphs[\"handbellsPluckLift\"] = \"\\uE817\";\n    // U+E81A  Swing\n    Glyphs[\"handbellsSwing\"] = \"\\uE81A\";\n    // U+E819  Swing down\n    Glyphs[\"handbellsSwingDown\"] = \"\\uE819\";\n    // U+E818  Swing up\n    Glyphs[\"handbellsSwingUp\"] = \"\\uE818\";\n    // U+E821  Table pair of handbells\n    Glyphs[\"handbellsTablePairBells\"] = \"\\uE821\";\n    // U+E820  Table single handbell\n    Glyphs[\"handbellsTableSingleBell\"] = \"\\uE820\";\n    // U+E68F  Metal rod pictogram\n    Glyphs[\"harpMetalRod\"] = \"\\uE68F\";\n    // U+E681  Harp pedal centered (natural)\n    Glyphs[\"harpPedalCentered\"] = \"\\uE681\";\n    // U+E683  Harp pedal divider\n    Glyphs[\"harpPedalDivider\"] = \"\\uE683\";\n    // U+E682  Harp pedal lowered (sharp)\n    Glyphs[\"harpPedalLowered\"] = \"\\uE682\";\n    // U+E680  Harp pedal raised (flat)\n    Glyphs[\"harpPedalRaised\"] = \"\\uE680\";\n    // U+E695  Ascending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianAscending\"] = \"\\uE695\";\n    // U+E696  Descending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianDescending\"] = \"\\uE696\";\n    // U+E69A  Damp above (Salzedo)\n    Glyphs[\"harpSalzedoDampAbove\"] = \"\\uE69A\";\n    // U+E699  Damp below (Salzedo)\n    Glyphs[\"harpSalzedoDampBelow\"] = \"\\uE699\";\n    // U+E698  Damp with both hands (Salzedo)\n    Glyphs[\"harpSalzedoDampBothHands\"] = \"\\uE698\";\n    // U+E697  Damp only low strings (Salzedo)\n    Glyphs[\"harpSalzedoDampLowStrings\"] = \"\\uE697\";\n    // U+E68D  Fluidic sounds, left hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsLeft\"] = \"\\uE68D\";\n    // U+E68E  Fluidic sounds, right hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsRight\"] = \"\\uE68E\";\n    // U+E69C  Isolated sounds (Salzedo)\n    Glyphs[\"harpSalzedoIsolatedSounds\"] = \"\\uE69C\";\n    // U+E688  Metallic sounds (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSounds\"] = \"\\uE688\";\n    // U+E69B  Metallic sounds, one string (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSoundsOneString\"] = \"\\uE69B\";\n    // U+E68C  Muffle totally (Salzedo)\n    Glyphs[\"harpSalzedoMuffleTotally\"] = \"\\uE68C\";\n    // U+E685  Oboic flux (Salzedo)\n    Glyphs[\"harpSalzedoOboicFlux\"] = \"\\uE685\";\n    // U+E68A  Play at upper end of strings (Salzedo)\n    Glyphs[\"harpSalzedoPlayUpperEnd\"] = \"\\uE68A\";\n    // U+E684  Slide with suppleness (Salzedo)\n    Glyphs[\"harpSalzedoSlideWithSuppleness\"] = \"\\uE684\";\n    // U+E69D  Snare drum effect (Salzedo)\n    Glyphs[\"harpSalzedoSnareDrum\"] = \"\\uE69D\";\n    // U+E689  Tam-tam sounds (Salzedo)\n    Glyphs[\"harpSalzedoTamTamSounds\"] = \"\\uE689\";\n    // U+E686  Thunder effect (Salzedo)\n    Glyphs[\"harpSalzedoThunderEffect\"] = \"\\uE686\";\n    // U+E68B  Timpanic sounds (Salzedo)\n    Glyphs[\"harpSalzedoTimpanicSounds\"] = \"\\uE68B\";\n    // U+E687  Whistling sounds (Salzedo)\n    Glyphs[\"harpSalzedoWhistlingSounds\"] = \"\\uE687\";\n    // U+E694  Combining string noise for stem\n    Glyphs[\"harpStringNoiseStem\"] = \"\\uE694\";\n    // U+E690  Tuning key pictogram\n    Glyphs[\"harpTuningKey\"] = \"\\uE690\";\n    // U+E693  Retune strings for glissando\n    Glyphs[\"harpTuningKeyGlissando\"] = \"\\uE693\";\n    // U+E691  Use handle of tuning key pictogram\n    Glyphs[\"harpTuningKeyHandle\"] = \"\\uE691\";\n    // U+E692  Use shank of tuning key pictogram\n    Glyphs[\"harpTuningKeyShank\"] = \"\\uE692\";\n    // U+ED70  Indian drum clef\n    Glyphs[\"indianDrumClef\"] = \"\\uED70\";\n    // U+EDE2  Back-chug\n    Glyphs[\"kahnBackChug\"] = \"\\uEDE2\";\n    // U+EDD8  Back-flap\n    Glyphs[\"kahnBackFlap\"] = \"\\uEDD8\";\n    // U+EDE1  Back-riff\n    Glyphs[\"kahnBackRiff\"] = \"\\uEDE1\";\n    // U+EDDA  Back-rip\n    Glyphs[\"kahnBackRip\"] = \"\\uEDDA\";\n    // U+EDC6  Ball-change\n    Glyphs[\"kahnBallChange\"] = \"\\uEDC6\";\n    // U+EDCD  Ball-dig\n    Glyphs[\"kahnBallDig\"] = \"\\uEDCD\";\n    // U+EDA7  Brush-backward\n    Glyphs[\"kahnBrushBackward\"] = \"\\uEDA7\";\n    // U+EDA6  Brush-forward\n    Glyphs[\"kahnBrushForward\"] = \"\\uEDA6\";\n    // U+EDDD  Chug\n    Glyphs[\"kahnChug\"] = \"\\uEDDD\";\n    // U+EDB8  Clap\n    Glyphs[\"kahnClap\"] = \"\\uEDB8\";\n    // U+EDBA  Double-snap\n    Glyphs[\"kahnDoubleSnap\"] = \"\\uEDBA\";\n    // U+EDEB  Double-wing\n    Glyphs[\"kahnDoubleWing\"] = \"\\uEDEB\";\n    // U+EDB2  Draw-step\n    Glyphs[\"kahnDrawStep\"] = \"\\uEDB2\";\n    // U+EDB3  Draw-tap\n    Glyphs[\"kahnDrawTap\"] = \"\\uEDB3\";\n    // U+EDCF  Flam\n    Glyphs[\"kahnFlam\"] = \"\\uEDCF\";\n    // U+EDD5  Flap\n    Glyphs[\"kahnFlap\"] = \"\\uEDD5\";\n    // U+EDD7  Flap-step\n    Glyphs[\"kahnFlapStep\"] = \"\\uEDD7\";\n    // U+EDA9  Flat\n    Glyphs[\"kahnFlat\"] = \"\\uEDA9\";\n    // U+EDB0  Flea-hop\n    Glyphs[\"kahnFleaHop\"] = \"\\uEDB0\";\n    // U+EDB1  Flea-tap\n    Glyphs[\"kahnFleaTap\"] = \"\\uEDB1\";\n    // U+EDA8  Grace-tap\n    Glyphs[\"kahnGraceTap\"] = \"\\uEDA8\";\n    // U+EDD1  Grace-tap-change\n    Glyphs[\"kahnGraceTapChange\"] = \"\\uEDD1\";\n    // U+EDD0  Grace-tap-hop\n    Glyphs[\"kahnGraceTapHop\"] = \"\\uEDD0\";\n    // U+EDD3  Grace-tap-stamp\n    Glyphs[\"kahnGraceTapStamp\"] = \"\\uEDD3\";\n    // U+EDAA  Heel\n    Glyphs[\"kahnHeel\"] = \"\\uEDAA\";\n    // U+EDC9  Heel-change\n    Glyphs[\"kahnHeelChange\"] = \"\\uEDC9\";\n    // U+EDBB  Heel-click\n    Glyphs[\"kahnHeelClick\"] = \"\\uEDBB\";\n    // U+EDB6  Heel-drop\n    Glyphs[\"kahnHeelDrop\"] = \"\\uEDB6\";\n    // U+EDC4  Heel-step\n    Glyphs[\"kahnHeelStep\"] = \"\\uEDC4\";\n    // U+EDCB  Heel-tap\n    Glyphs[\"kahnHeelTap\"] = \"\\uEDCB\";\n    // U+EDA2  Hop\n    Glyphs[\"kahnHop\"] = \"\\uEDA2\";\n    // U+EDA5  Jump-apart\n    Glyphs[\"kahnJumpApart\"] = \"\\uEDA5\";\n    // U+EDA4  Jump-together\n    Glyphs[\"kahnJumpTogether\"] = \"\\uEDA4\";\n    // U+EDAD  Knee-inward\n    Glyphs[\"kahnKneeInward\"] = \"\\uEDAD\";\n    // U+EDAC  Knee-outward\n    Glyphs[\"kahnKneeOutward\"] = \"\\uEDAC\";\n    // U+EDA3  Leap\n    Glyphs[\"kahnLeap\"] = \"\\uEDA3\";\n    // U+EDD2  Leap-flat-foot\n    Glyphs[\"kahnLeapFlatFoot\"] = \"\\uEDD2\";\n    // U+EDD4  Leap-heel-click\n    Glyphs[\"kahnLeapHeelClick\"] = \"\\uEDD4\";\n    // U+EDBF  Left-catch\n    Glyphs[\"kahnLeftCatch\"] = \"\\uEDBF\";\n    // U+EDBD  Left-cross\n    Glyphs[\"kahnLeftCross\"] = \"\\uEDBD\";\n    // U+EDEE  Left-foot\n    Glyphs[\"kahnLeftFoot\"] = \"\\uEDEE\";\n    // U+EDC1  Left-toe-strike\n    Glyphs[\"kahnLeftToeStrike\"] = \"\\uEDC1\";\n    // U+EDF0  Left-turn\n    Glyphs[\"kahnLeftTurn\"] = \"\\uEDF0\";\n    // U+EDEC  Over-the-top\n    Glyphs[\"kahnOverTheTop\"] = \"\\uEDEC\";\n    // U+EDED  Over-the-top-tap\n    Glyphs[\"kahnOverTheTopTap\"] = \"\\uEDED\";\n    // U+EDE3  Pull\n    Glyphs[\"kahnPull\"] = \"\\uEDE3\";\n    // U+EDDE  Push\n    Glyphs[\"kahnPush\"] = \"\\uEDDE\";\n    // U+EDE0  Riff\n    Glyphs[\"kahnRiff\"] = \"\\uEDE0\";\n    // U+EDE7  Riffle\n    Glyphs[\"kahnRiffle\"] = \"\\uEDE7\";\n    // U+EDC0  Right-catch\n    Glyphs[\"kahnRightCatch\"] = \"\\uEDC0\";\n    // U+EDBE  Right-cross\n    Glyphs[\"kahnRightCross\"] = \"\\uEDBE\";\n    // U+EDEF  Right-foot\n    Glyphs[\"kahnRightFoot\"] = \"\\uEDEF\";\n    // U+EDC2  Right-toe-strike\n    Glyphs[\"kahnRightToeStrike\"] = \"\\uEDC2\";\n    // U+EDF1  Right-turn\n    Glyphs[\"kahnRightTurn\"] = \"\\uEDF1\";\n    // U+EDD6  Rip\n    Glyphs[\"kahnRip\"] = \"\\uEDD6\";\n    // U+EDE8  Ripple\n    Glyphs[\"kahnRipple\"] = \"\\uEDE8\";\n    // U+EDAE  Scrape\n    Glyphs[\"kahnScrape\"] = \"\\uEDAE\";\n    // U+EDDC  Scuff\n    Glyphs[\"kahnScuff\"] = \"\\uEDDC\";\n    // U+EDE6  Scuffle\n    Glyphs[\"kahnScuffle\"] = \"\\uEDE6\";\n    // U+EDE5  Shuffle\n    Glyphs[\"kahnShuffle\"] = \"\\uEDE5\";\n    // U+EDCE  Slam\n    Glyphs[\"kahnSlam\"] = \"\\uEDCE\";\n    // U+EDD9  Slap\n    Glyphs[\"kahnSlap\"] = \"\\uEDD9\";\n    // U+EDB4  Slide-step\n    Glyphs[\"kahnSlideStep\"] = \"\\uEDB4\";\n    // U+EDB5  Slide-tap\n    Glyphs[\"kahnSlideTap\"] = \"\\uEDB5\";\n    // U+EDB9  Snap\n    Glyphs[\"kahnSnap\"] = \"\\uEDB9\";\n    // U+EDC3  Stamp\n    Glyphs[\"kahnStamp\"] = \"\\uEDC3\";\n    // U+EDC8  Stamp-stamp\n    Glyphs[\"kahnStampStamp\"] = \"\\uEDC8\";\n    // U+EDA0  Step\n    Glyphs[\"kahnStep\"] = \"\\uEDA0\";\n    // U+EDC7  Step-stamp\n    Glyphs[\"kahnStepStamp\"] = \"\\uEDC7\";\n    // U+EDCA  Stomp\n    Glyphs[\"kahnStomp\"] = \"\\uEDCA\";\n    // U+EDDB  Stomp-brush\n    Glyphs[\"kahnStompBrush\"] = \"\\uEDDB\";\n    // U+EDA1  Tap\n    Glyphs[\"kahnTap\"] = \"\\uEDA1\";\n    // U+EDAB  Toe\n    Glyphs[\"kahnToe\"] = \"\\uEDAB\";\n    // U+EDBC  Toe-click\n    Glyphs[\"kahnToeClick\"] = \"\\uEDBC\";\n    // U+EDB7  Toe-drop\n    Glyphs[\"kahnToeDrop\"] = \"\\uEDB7\";\n    // U+EDC5  Toe-step\n    Glyphs[\"kahnToeStep\"] = \"\\uEDC5\";\n    // U+EDCC  Toe-tap\n    Glyphs[\"kahnToeTap\"] = \"\\uEDCC\";\n    // U+EDAF  Trench\n    Glyphs[\"kahnTrench\"] = \"\\uEDAF\";\n    // U+EDE9  Wing\n    Glyphs[\"kahnWing\"] = \"\\uEDE9\";\n    // U+EDEA  Wing-change\n    Glyphs[\"kahnWingChange\"] = \"\\uEDEA\";\n    // U+EDE4  Zank\n    Glyphs[\"kahnZank\"] = \"\\uEDE4\";\n    // U+EDDF  Zink\n    Glyphs[\"kahnZink\"] = \"\\uEDDF\";\n    // U+E668  Clavichord bebung, 2 finger movements (above)\n    Glyphs[\"keyboardBebung2DotsAbove\"] = \"\\uE668\";\n    // U+E669  Clavichord bebung, 2 finger movements (below)\n    Glyphs[\"keyboardBebung2DotsBelow\"] = \"\\uE669\";\n    // U+E66A  Clavichord bebung, 3 finger movements (above)\n    Glyphs[\"keyboardBebung3DotsAbove\"] = \"\\uE66A\";\n    // U+E66B  Clavichord bebung, 3 finger movements (below)\n    Glyphs[\"keyboardBebung3DotsBelow\"] = \"\\uE66B\";\n    // U+E66C  Clavichord bebung, 4 finger movements (above)\n    Glyphs[\"keyboardBebung4DotsAbove\"] = \"\\uE66C\";\n    // U+E66D  Clavichord bebung, 4 finger movements (below)\n    Glyphs[\"keyboardBebung4DotsBelow\"] = \"\\uE66D\";\n    // U+E65E  Left pedal pictogram\n    Glyphs[\"keyboardLeftPedalPictogram\"] = \"\\uE65E\";\n    // U+E65F  Middle pedal pictogram\n    Glyphs[\"keyboardMiddlePedalPictogram\"] = \"\\uE65F\";\n    // U+E653  Pedal d\n    Glyphs[\"keyboardPedalD\"] = \"\\uE653\";\n    // U+E654  Pedal dot\n    Glyphs[\"keyboardPedalDot\"] = \"\\uE654\";\n    // U+E652  Pedal e\n    Glyphs[\"keyboardPedalE\"] = \"\\uE652\";\n    // U+E656  Half-pedal mark\n    Glyphs[\"keyboardPedalHalf\"] = \"\\uE656\";\n    // U+1D1B0  Half-pedal mark\n    Glyphs[\"keyboardPedalHalfAlternate\"] = \"\\uD834\\uDDB0\";\n    // U+E65B  Half pedal mark 1\n    Glyphs[\"keyboardPedalHalf2\"] = \"\\uE65B\";\n    // U+E65C  Half pedal mark 2\n    Glyphs[\"keyboardPedalHalf3\"] = \"\\uE65C\";\n    // U+E661  Pedal heel 1\n    Glyphs[\"keyboardPedalHeel1\"] = \"\\uE661\";\n    // U+E662  Pedal heel 2\n    Glyphs[\"keyboardPedalHeel2\"] = \"\\uE662\";\n    // U+E663  Pedal heel 3 (Davis)\n    Glyphs[\"keyboardPedalHeel3\"] = \"\\uE663\";\n    // U+E674  Pedal heel to toe\n    Glyphs[\"keyboardPedalHeelToToe\"] = \"\\uE674\";\n    // U+E666  Pedal heel or toe\n    Glyphs[\"keyboardPedalHeelToe\"] = \"\\uE666\";\n    // U+E673  Pedal hook end\n    Glyphs[\"keyboardPedalHookEnd\"] = \"\\uE673\";\n    // U+E672  Pedal hook start\n    Glyphs[\"keyboardPedalHookStart\"] = \"\\uE672\";\n    // U+E658  Pedal hyphen\n    Glyphs[\"keyboardPedalHyphen\"] = \"\\uE658\";\n    // U+E651  Pedal P\n    Glyphs[\"keyboardPedalP\"] = \"\\uE651\";\n    // U+E676  Left parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensLeft\"] = \"\\uE676\";\n    // U+E677  Right parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensRight\"] = \"\\uE677\";\n    // U+E650  Pedal mark\n    Glyphs[\"keyboardPedalPed\"] = \"\\uE650\";\n    // U+1D1AE  Pedal mark\n    Glyphs[\"keyboardPedalPedAlternate\"] = \"\\uD834\\uDDAE\";\n    // U+E65A  Pedal S\n    Glyphs[\"keyboardPedalS\"] = \"\\uE65A\";\n    // U+E659  Sostenuto pedal mark\n    Glyphs[\"keyboardPedalSost\"] = \"\\uE659\";\n    // U+E664  Pedal toe 1\n    Glyphs[\"keyboardPedalToe1\"] = \"\\uE664\";\n    // U+E665  Pedal toe 2\n    Glyphs[\"keyboardPedalToe2\"] = \"\\uE665\";\n    // U+E675  Pedal toe to heel\n    Glyphs[\"keyboardPedalToeToHeel\"] = \"\\uE675\";\n    // U+E655  Pedal up mark\n    Glyphs[\"keyboardPedalUp\"] = \"\\uE655\";\n    // U+1D1AF  Pedal up mark\n    Glyphs[\"keyboardPedalUpAlternate\"] = \"\\uD834\\uDDAF\";\n    // U+E657  Pedal up notch\n    Glyphs[\"keyboardPedalUpNotch\"] = \"\\uE657\";\n    // U+E65D  Pedal up special\n    Glyphs[\"keyboardPedalUpSpecial\"] = \"\\uE65D\";\n    // U+E670  Play with left hand\n    Glyphs[\"keyboardPlayWithLH\"] = \"\\uE670\";\n    // U+E671  Play with left hand (end)\n    Glyphs[\"keyboardPlayWithLHEnd\"] = \"\\uE671\";\n    // U+E66E  Play with right hand\n    Glyphs[\"keyboardPlayWithRH\"] = \"\\uE66E\";\n    // U+E66F  Play with right hand (end)\n    Glyphs[\"keyboardPlayWithRHEnd\"] = \"\\uE66F\";\n    // U+E667  Pluck strings inside piano (Maderna)\n    Glyphs[\"keyboardPluckInside\"] = \"\\uE667\";\n    // U+E660  Right pedal pictogram\n    Glyphs[\"keyboardRightPedalPictogram\"] = \"\\uE660\";\n    // U+EC3E  Kievan flat\n    Glyphs[\"kievanAccidentalFlat\"] = \"\\uEC3E\";\n    // U+1D1E8  Kievan flat\n    Glyphs[\"kievanAccidentalFlatAlternate\"] = \"\\uD834\\uDDE8\";\n    // U+EC3D  Kievan sharp\n    Glyphs[\"kievanAccidentalSharp\"] = \"\\uEC3D\";\n    // U+EC3C  Kievan augmentation dot\n    Glyphs[\"kievanAugmentationDot\"] = \"\\uEC3C\";\n    // U+EC30  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClef\"] = \"\\uEC30\";\n    // U+1D1DE  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClefAlternate\"] = \"\\uD834\\uDDDE\";\n    // U+EC31  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbol\"] = \"\\uEC31\";\n    // U+1D1DF  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbolAlternate\"] = \"\\uD834\\uDDDF\";\n    // U+EC3A  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDown\"] = \"\\uEC3A\";\n    // U+1D1E6  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDownAlternate\"] = \"\\uD834\\uDDE6\";\n    // U+EC39  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUp\"] = \"\\uEC39\";\n    // U+1D1E7  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUpAlternate\"] = \"\\uD834\\uDDE7\";\n    // U+EC3B  Kievan beam\n    Glyphs[\"kievanNoteBeam\"] = \"\\uEC3B\";\n    // U+EC35  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLine\"] = \"\\uEC35\";\n    // U+1D1E3  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLineAlternate\"] = \"\\uD834\\uDDE3\";\n    // U+EC36  Kievan half note (in staff space)\n    Glyphs[\"kievanNoteHalfStaffSpace\"] = \"\\uEC36\";\n    // U+EC38  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDown\"] = \"\\uEC38\";\n    // U+1D1E4  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDownAlternate\"] = \"\\uD834\\uDDE4\";\n    // U+EC37  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUp\"] = \"\\uEC37\";\n    // U+1D1E5  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUpAlternate\"] = \"\\uD834\\uDDE5\";\n    // U+EC32  Kievan reciting note\n    Glyphs[\"kievanNoteReciting\"] = \"\\uEC32\";\n    // U+1D1E1  Kievan reciting note\n    Glyphs[\"kievanNoteRecitingAlternate\"] = \"\\uD834\\uDDE1\";\n    // U+EC33  Kievan whole note\n    Glyphs[\"kievanNoteWhole\"] = \"\\uEC33\";\n    // U+1D1E2  Kievan whole note\n    Glyphs[\"kievanNoteWholeAlternate\"] = \"\\uD834\\uDDE2\";\n    // U+EC34  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinal\"] = \"\\uEC34\";\n    // U+1D1E0  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinalAlternate\"] = \"\\uD834\\uDDE0\";\n    // U+EC40  Do hand sign\n    Glyphs[\"kodalyHandDo\"] = \"\\uEC40\";\n    // U+EC43  Fa hand sign\n    Glyphs[\"kodalyHandFa\"] = \"\\uEC43\";\n    // U+EC45  La hand sign\n    Glyphs[\"kodalyHandLa\"] = \"\\uEC45\";\n    // U+EC42  Mi hand sign\n    Glyphs[\"kodalyHandMi\"] = \"\\uEC42\";\n    // U+EC41  Re hand sign\n    Glyphs[\"kodalyHandRe\"] = \"\\uEC41\";\n    // U+EC44  So hand sign\n    Glyphs[\"kodalyHandSo\"] = \"\\uEC44\";\n    // U+EC46  Ti hand sign\n    Glyphs[\"kodalyHandTi\"] = \"\\uEC46\";\n    // U+E04C  Left repeat sign within bar\n    Glyphs[\"leftRepeatSmall\"] = \"\\uE04C\";\n    // U+E022  Leger line\n    Glyphs[\"legerLine\"] = \"\\uE022\";\n    // U+E024  Leger line (narrow)\n    Glyphs[\"legerLineNarrow\"] = \"\\uE024\";\n    // U+E023  Leger line (wide)\n    Glyphs[\"legerLineWide\"] = \"\\uE023\";\n    // U+EBA4  Lute tablature end repeat barline\n    Glyphs[\"luteBarlineEndRepeat\"] = \"\\uEBA4\";\n    // U+EBA5  Lute tablature final barline\n    Glyphs[\"luteBarlineFinal\"] = \"\\uEBA5\";\n    // U+EBA3  Lute tablature start repeat barline\n    Glyphs[\"luteBarlineStartRepeat\"] = \"\\uEBA3\";\n    // U+EBAB  16th note (semiquaver) duration sign\n    Glyphs[\"luteDuration16th\"] = \"\\uEBAB\";\n    // U+EBAC  32nd note (demisemiquaver) duration sign\n    Glyphs[\"luteDuration32nd\"] = \"\\uEBAC\";\n    // U+EBAA  Eighth note (quaver) duration sign\n    Glyphs[\"luteDuration8th\"] = \"\\uEBAA\";\n    // U+EBA6  Double whole note (breve) duration sign\n    Glyphs[\"luteDurationDoubleWhole\"] = \"\\uEBA6\";\n    // U+EBA8  Half note (minim) duration sign\n    Glyphs[\"luteDurationHalf\"] = \"\\uEBA8\";\n    // U+EBA9  Quarter note (crotchet) duration sign\n    Glyphs[\"luteDurationQuarter\"] = \"\\uEBA9\";\n    // U+EBA7  Whole note (semibreve) duration sign\n    Glyphs[\"luteDurationWhole\"] = \"\\uEBA7\";\n    // U+EBAE  Right-hand fingering, first finger\n    Glyphs[\"luteFingeringRHFirst\"] = \"\\uEBAE\";\n    // U+EBAF  Right-hand fingering, second finger\n    Glyphs[\"luteFingeringRHSecond\"] = \"\\uEBAF\";\n    // U+EBB0  Right-hand fingering, third finger\n    Glyphs[\"luteFingeringRHThird\"] = \"\\uEBB0\";\n    // U+EBAD  Right-hand fingering, thumb\n    Glyphs[\"luteFingeringRHThumb\"] = \"\\uEBAD\";\n    // U+EBD0  10th course (diapason)\n    Glyphs[\"luteFrench10thCourse\"] = \"\\uEBD0\";\n    // U+EBCD  Seventh course (diapason)\n    Glyphs[\"luteFrench7thCourse\"] = \"\\uEBCD\";\n    // U+EBCE  Eighth course (diapason)\n    Glyphs[\"luteFrench8thCourse\"] = \"\\uEBCE\";\n    // U+EBCF  Ninth course (diapason)\n    Glyphs[\"luteFrench9thCourse\"] = \"\\uEBCF\";\n    // U+EBD5  Appoggiatura from above\n    Glyphs[\"luteFrenchAppoggiaturaAbove\"] = \"\\uEBD5\";\n    // U+EBD4  Appoggiatura from below\n    Glyphs[\"luteFrenchAppoggiaturaBelow\"] = \"\\uEBD4\";\n    // U+EBC0  Open string (a)\n    Glyphs[\"luteFrenchFretA\"] = \"\\uEBC0\";\n    // U+EBC1  First fret (b)\n    Glyphs[\"luteFrenchFretB\"] = \"\\uEBC1\";\n    // U+EBC2  Second fret (c)\n    Glyphs[\"luteFrenchFretC\"] = \"\\uEBC2\";\n    // U+EBC3  Third fret (d)\n    Glyphs[\"luteFrenchFretD\"] = \"\\uEBC3\";\n    // U+EBC4  Fourth fret (e)\n    Glyphs[\"luteFrenchFretE\"] = \"\\uEBC4\";\n    // U+EBC5  Fifth fret (f)\n    Glyphs[\"luteFrenchFretF\"] = \"\\uEBC5\";\n    // U+EBC6  Sixth fret (g)\n    Glyphs[\"luteFrenchFretG\"] = \"\\uEBC6\";\n    // U+EBC7  Seventh fret (h)\n    Glyphs[\"luteFrenchFretH\"] = \"\\uEBC7\";\n    // U+EBC8  Eighth fret (i)\n    Glyphs[\"luteFrenchFretI\"] = \"\\uEBC8\";\n    // U+EBC9  Ninth fret (k)\n    Glyphs[\"luteFrenchFretK\"] = \"\\uEBC9\";\n    // U+EBCA  10th fret (l)\n    Glyphs[\"luteFrenchFretL\"] = \"\\uEBCA\";\n    // U+EBCB  11th fret (m)\n    Glyphs[\"luteFrenchFretM\"] = \"\\uEBCB\";\n    // U+EBCC  12th fret (n)\n    Glyphs[\"luteFrenchFretN\"] = \"\\uEBCC\";\n    // U+EBD3  Inverted mordent\n    Glyphs[\"luteFrenchMordentInverted\"] = \"\\uEBD3\";\n    // U+EBD2  Mordent with lower auxiliary\n    Glyphs[\"luteFrenchMordentLower\"] = \"\\uEBD2\";\n    // U+EBD1  Mordent with upper auxiliary\n    Glyphs[\"luteFrenchMordentUpper\"] = \"\\uEBD1\";\n    // U+EC00  5th course, 1st fret (a)\n    Glyphs[\"luteGermanALower\"] = \"\\uEC00\";\n    // U+EC17  6th course, 1st fret (A)\n    Glyphs[\"luteGermanAUpper\"] = \"\\uEC17\";\n    // U+EC01  4th course, 1st fret (b)\n    Glyphs[\"luteGermanBLower\"] = \"\\uEC01\";\n    // U+EC18  6th course, 2nd fret (B)\n    Glyphs[\"luteGermanBUpper\"] = \"\\uEC18\";\n    // U+EC02  3rd course, 1st fret (c)\n    Glyphs[\"luteGermanCLower\"] = \"\\uEC02\";\n    // U+EC19  6th course, 3rd fret (C)\n    Glyphs[\"luteGermanCUpper\"] = \"\\uEC19\";\n    // U+EC03  2nd course, 1st fret (d)\n    Glyphs[\"luteGermanDLower\"] = \"\\uEC03\";\n    // U+EC1A  6th course, 4th fret (D)\n    Glyphs[\"luteGermanDUpper\"] = \"\\uEC1A\";\n    // U+EC04  1st course, 1st fret (e)\n    Glyphs[\"luteGermanELower\"] = \"\\uEC04\";\n    // U+EC1B  6th course, 5th fret (E)\n    Glyphs[\"luteGermanEUpper\"] = \"\\uEC1B\";\n    // U+EC05  5th course, 2nd fret (f)\n    Glyphs[\"luteGermanFLower\"] = \"\\uEC05\";\n    // U+EC1C  6th course, 6th fret (F)\n    Glyphs[\"luteGermanFUpper\"] = \"\\uEC1C\";\n    // U+EC06  4th course, 2nd fret (g)\n    Glyphs[\"luteGermanGLower\"] = \"\\uEC06\";\n    // U+EC1D  6th course, 7th fret (G)\n    Glyphs[\"luteGermanGUpper\"] = \"\\uEC1D\";\n    // U+EC07  3rd course, 2nd fret (h)\n    Glyphs[\"luteGermanHLower\"] = \"\\uEC07\";\n    // U+EC1E  6th course, 8th fret (H)\n    Glyphs[\"luteGermanHUpper\"] = \"\\uEC1E\";\n    // U+EC08  2nd course, 2nd fret (i)\n    Glyphs[\"luteGermanILower\"] = \"\\uEC08\";\n    // U+EC1F  6th course, 9th fret (I)\n    Glyphs[\"luteGermanIUpper\"] = \"\\uEC1F\";\n    // U+EC09  1st course, 2nd fret (k)\n    Glyphs[\"luteGermanKLower\"] = \"\\uEC09\";\n    // U+EC20  6th course, 10th fret (K)\n    Glyphs[\"luteGermanKUpper\"] = \"\\uEC20\";\n    // U+EC0A  5th course, 3rd fret (l)\n    Glyphs[\"luteGermanLLower\"] = \"\\uEC0A\";\n    // U+EC21  6th course, 11th fret (L)\n    Glyphs[\"luteGermanLUpper\"] = \"\\uEC21\";\n    // U+EC0B  4th course, 3rd fret (m)\n    Glyphs[\"luteGermanMLower\"] = \"\\uEC0B\";\n    // U+EC22  6th course, 12th fret (M)\n    Glyphs[\"luteGermanMUpper\"] = \"\\uEC22\";\n    // U+EC0C  3rd course, 3rd fret (n)\n    Glyphs[\"luteGermanNLower\"] = \"\\uEC0C\";\n    // U+EC23  6th course, 13th fret (N)\n    Glyphs[\"luteGermanNUpper\"] = \"\\uEC23\";\n    // U+EC0D  2nd course, 3rd fret (o)\n    Glyphs[\"luteGermanOLower\"] = \"\\uEC0D\";\n    // U+EC0E  1st course, 3rd fret (p)\n    Glyphs[\"luteGermanPLower\"] = \"\\uEC0E\";\n    // U+EC0F  5th course, 4th fret (q)\n    Glyphs[\"luteGermanQLower\"] = \"\\uEC0F\";\n    // U+EC10  4th course, 4th fret (r)\n    Glyphs[\"luteGermanRLower\"] = \"\\uEC10\";\n    // U+EC11  3rd course, 4th fret (s)\n    Glyphs[\"luteGermanSLower\"] = \"\\uEC11\";\n    // U+EC12  2nd course, 4th fret (t)\n    Glyphs[\"luteGermanTLower\"] = \"\\uEC12\";\n    // U+EC13  1st course, 4th fret (v)\n    Glyphs[\"luteGermanVLower\"] = \"\\uEC13\";\n    // U+EC14  5th course, 5th fret (x)\n    Glyphs[\"luteGermanXLower\"] = \"\\uEC14\";\n    // U+EC15  4th course, 5th fret (y)\n    Glyphs[\"luteGermanYLower\"] = \"\\uEC15\";\n    // U+EC16  3rd course, 5th fret (z)\n    Glyphs[\"luteGermanZLower\"] = \"\\uEC16\";\n    // U+EBF1  C sol fa ut clef\n    Glyphs[\"luteItalianClefCSolFaUt\"] = \"\\uEBF1\";\n    // U+EBF0  F fa ut clef\n    Glyphs[\"luteItalianClefFFaUt\"] = \"\\uEBF0\";\n    // U+EBE0  Open string (0)\n    Glyphs[\"luteItalianFret0\"] = \"\\uEBE0\";\n    // U+EBE1  First fret (1)\n    Glyphs[\"luteItalianFret1\"] = \"\\uEBE1\";\n    // U+EBE2  Second fret (2)\n    Glyphs[\"luteItalianFret2\"] = \"\\uEBE2\";\n    // U+EBE3  Third fret (3)\n    Glyphs[\"luteItalianFret3\"] = \"\\uEBE3\";\n    // U+EBE4  Fourth fret (4)\n    Glyphs[\"luteItalianFret4\"] = \"\\uEBE4\";\n    // U+EBE5  Fifth fret (5)\n    Glyphs[\"luteItalianFret5\"] = \"\\uEBE5\";\n    // U+EBE6  Sixth fret (6)\n    Glyphs[\"luteItalianFret6\"] = \"\\uEBE6\";\n    // U+EBE7  Seventh fret (7)\n    Glyphs[\"luteItalianFret7\"] = \"\\uEBE7\";\n    // U+EBE8  Eighth fret (8)\n    Glyphs[\"luteItalianFret8\"] = \"\\uEBE8\";\n    // U+EBE9  Ninth fret (9)\n    Glyphs[\"luteItalianFret9\"] = \"\\uEBE9\";\n    // U+EBF4  Hold finger in place\n    Glyphs[\"luteItalianHoldFinger\"] = \"\\uEBF4\";\n    // U+EBF3  Hold note\n    Glyphs[\"luteItalianHoldNote\"] = \"\\uEBF3\";\n    // U+EBF5  Release finger\n    Glyphs[\"luteItalianReleaseFinger\"] = \"\\uEBF5\";\n    // U+EBEA  Fast tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoFast\"] = \"\\uEBEA\";\n    // U+EBEC  Neither fast nor slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoNeitherFastNorSlow\"] = \"\\uEBEC\";\n    // U+EBED  Slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoSlow\"] = \"\\uEBED\";\n    // U+EBEB  Somewhat fast tempo indication (de Narvaez)\n    Glyphs[\"luteItalianTempoSomewhatFast\"] = \"\\uEBEB\";\n    // U+EBEE  Very slow indication (de Narvaez)\n    Glyphs[\"luteItalianTempoVerySlow\"] = \"\\uEBEE\";\n    // U+EBEF  Triple time indication\n    Glyphs[\"luteItalianTimeTriple\"] = \"\\uEBEF\";\n    // U+EBF2  Single-finger tremolo or mordent\n    Glyphs[\"luteItalianTremolo\"] = \"\\uEBF2\";\n    // U+EBF6  Vibrato (verre cassé)\n    Glyphs[\"luteItalianVibrato\"] = \"\\uEBF6\";\n    // U+EBA0  Lute tablature staff, 6 courses\n    Glyphs[\"luteStaff6Lines\"] = \"\\uEBA0\";\n    // U+EBA2  Lute tablature staff, 6 courses (narrow)\n    Glyphs[\"luteStaff6LinesNarrow\"] = \"\\uEBA2\";\n    // U+EBA1  Lute tablature staff, 6 courses (wide)\n    Glyphs[\"luteStaff6LinesWide\"] = \"\\uEBA1\";\n    // U+E551  Elision\n    Glyphs[\"lyricsElision\"] = \"\\uE551\";\n    // U+E550  Narrow elision\n    Glyphs[\"lyricsElisionNarrow\"] = \"\\uE550\";\n    // U+E552  Wide elision\n    Glyphs[\"lyricsElisionWide\"] = \"\\uE552\";\n    // U+E553  Baseline hyphen\n    Glyphs[\"lyricsHyphenBaseline\"] = \"\\uE553\";\n    // U+E554  Non-breaking baseline hyphen\n    Glyphs[\"lyricsHyphenBaselineNonBreaking\"] = \"\\uE554\";\n    // U+E555  Text repeats\n    Glyphs[\"lyricsTextRepeat\"] = \"\\uE555\";\n    // U+E9E1  Flat, hard b (mi)\n    Glyphs[\"medRenFlatHardB\"] = \"\\uE9E1\";\n    // U+E9E0  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftB\"] = \"\\uE9E0\";\n    // U+1D1D2  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftBAlternate\"] = \"\\uD834\\uDDD2\";\n    // U+E9E4  Flat with dot\n    Glyphs[\"medRenFlatWithDot\"] = \"\\uE9E4\";\n    // U+EA24  G clef (Corpus Monodicum)\n    Glyphs[\"medRenGClefCMN\"] = \"\\uEA24\";\n    // U+EA22  Liquescence\n    Glyphs[\"medRenLiquescenceCMN\"] = \"\\uEA22\";\n    // U+EA26  Liquescent ascending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentAscCMN\"] = \"\\uEA26\";\n    // U+EA27  Liquescent descending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentDescCMN\"] = \"\\uEA27\";\n    // U+E9E2  Natural\n    Glyphs[\"medRenNatural\"] = \"\\uE9E2\";\n    // U+E9E5  Natural with interrupted cross\n    Glyphs[\"medRenNaturalWithCross\"] = \"\\uE9E5\";\n    // U+EA2A  Oriscus (Corpus Monodicum)\n    Glyphs[\"medRenOriscusCMN\"] = \"\\uEA2A\";\n    // U+EA23  Plica\n    Glyphs[\"medRenPlicaCMN\"] = \"\\uEA23\";\n    // U+EA25  Punctum (Corpus Monodicum)\n    Glyphs[\"medRenPunctumCMN\"] = \"\\uEA25\";\n    // U+EA28  Quilisma (Corpus Monodicum)\n    Glyphs[\"medRenQuilismaCMN\"] = \"\\uEA28\";\n    // U+E9E3  Croix\n    Glyphs[\"medRenSharpCroix\"] = \"\\uE9E3\";\n    // U+1D1CF  Croix\n    Glyphs[\"medRenSharpCroixAlternate\"] = \"\\uD834\\uDDCF\";\n    // U+EA29  Strophicus (Corpus Monodicum)\n    Glyphs[\"medRenStrophicusCMN\"] = \"\\uEA29\";\n    // U+EA10  Alteration sign\n    Glyphs[\"mensuralAlterationSign\"] = \"\\uEA10\";\n    // U+E952  Black mensural brevis\n    Glyphs[\"mensuralBlackBrevis\"] = \"\\uE952\";\n    // U+E956  Black mensural void brevis\n    Glyphs[\"mensuralBlackBrevisVoid\"] = \"\\uE956\";\n    // U+E95A  Black mensural dragma\n    Glyphs[\"mensuralBlackDragma\"] = \"\\uE95A\";\n    // U+E951  Black mensural longa\n    Glyphs[\"mensuralBlackLonga\"] = \"\\uE951\";\n    // U+E950  Black mensural maxima\n    Glyphs[\"mensuralBlackMaxima\"] = \"\\uE950\";\n    // U+E954  Black mensural minima\n    Glyphs[\"mensuralBlackMinima\"] = \"\\uE954\";\n    // U+1D1BC  Black mensural minima\n    Glyphs[\"mensuralBlackMinimaAlternate\"] = \"\\uD834\\uDDBC\";\n    // U+E958  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoid\"] = \"\\uE958\";\n    // U+1D1BB  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoidAlternate\"] = \"\\uD834\\uDDBB\";\n    // U+E953  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevis\"] = \"\\uE953\";\n    // U+1D1BA  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevisAlternate\"] = \"\\uD834\\uDDBA\";\n    // U+E959  Black mensural semibrevis caudata\n    Glyphs[\"mensuralBlackSemibrevisCaudata\"] = \"\\uE959\";\n    // U+E95B  Black mensural oblique semibrevis\n    Glyphs[\"mensuralBlackSemibrevisOblique\"] = \"\\uE95B\";\n    // U+E957  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoid\"] = \"\\uE957\";\n    // U+1D1B9  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoidAlternate\"] = \"\\uD834\\uDDB9\";\n    // U+E955  Black mensural semiminima\n    Glyphs[\"mensuralBlackSemiminima\"] = \"\\uE955\";\n    // U+E905  Mensural C clef\n    Glyphs[\"mensuralCclef\"] = \"\\uE905\";\n    // U+E90A  Petrucci C clef, high position\n    Glyphs[\"mensuralCclefPetrucciPosHigh\"] = \"\\uE90A\";\n    // U+E90B  Petrucci C clef, highest position\n    Glyphs[\"mensuralCclefPetrucciPosHighest\"] = \"\\uE90B\";\n    // U+E908  Petrucci C clef, low position\n    Glyphs[\"mensuralCclefPetrucciPosLow\"] = \"\\uE908\";\n    // U+E907  Petrucci C clef, lowest position\n    Glyphs[\"mensuralCclefPetrucciPosLowest\"] = \"\\uE907\";\n    // U+E909  Petrucci C clef, middle position\n    Glyphs[\"mensuralCclefPetrucciPosMiddle\"] = \"\\uE909\";\n    // U+EA0F  Coloration end, round\n    Glyphs[\"mensuralColorationEndRound\"] = \"\\uEA0F\";\n    // U+EA0D  Coloration end, square\n    Glyphs[\"mensuralColorationEndSquare\"] = \"\\uEA0D\";\n    // U+EA0E  Coloration start, round\n    Glyphs[\"mensuralColorationStartRound\"] = \"\\uEA0E\";\n    // U+EA0C  Coloration start, square\n    Glyphs[\"mensuralColorationStartSquare\"] = \"\\uEA0C\";\n    // U+E940  Combining stem diagonal\n    Glyphs[\"mensuralCombStemDiagonal\"] = \"\\uE940\";\n    // U+E93F  Combining stem down\n    Glyphs[\"mensuralCombStemDown\"] = \"\\uE93F\";\n    // U+E948  Combining stem with extended flag down\n    Glyphs[\"mensuralCombStemDownFlagExtended\"] = \"\\uE948\";\n    // U+E946  Combining stem with flared flag down\n    Glyphs[\"mensuralCombStemDownFlagFlared\"] = \"\\uE946\";\n    // U+E94C  Combining stem with fusa flag down\n    Glyphs[\"mensuralCombStemDownFlagFusa\"] = \"\\uE94C\";\n    // U+E944  Combining stem with flag left down\n    Glyphs[\"mensuralCombStemDownFlagLeft\"] = \"\\uE944\";\n    // U+E942  Combining stem with flag right down\n    Glyphs[\"mensuralCombStemDownFlagRight\"] = \"\\uE942\";\n    // U+E94A  Combining stem with semiminima flag down\n    Glyphs[\"mensuralCombStemDownFlagSemiminima\"] = \"\\uE94A\";\n    // U+E93E  Combining stem up\n    Glyphs[\"mensuralCombStemUp\"] = \"\\uE93E\";\n    // U+E947  Combining stem with extended flag up\n    Glyphs[\"mensuralCombStemUpFlagExtended\"] = \"\\uE947\";\n    // U+E945  Combining stem with flared flag up\n    Glyphs[\"mensuralCombStemUpFlagFlared\"] = \"\\uE945\";\n    // U+E94B  Combining stem with fusa flag up\n    Glyphs[\"mensuralCombStemUpFlagFusa\"] = \"\\uE94B\";\n    // U+E943  Combining stem with flag left up\n    Glyphs[\"mensuralCombStemUpFlagLeft\"] = \"\\uE943\";\n    // U+E941  Combining stem with flag right up\n    Glyphs[\"mensuralCombStemUpFlagRight\"] = \"\\uE941\";\n    // U+E949  Combining stem with semiminima flag up\n    Glyphs[\"mensuralCombStemUpFlagSemiminima\"] = \"\\uE949\";\n    // U+EA0A  Checkmark custos\n    Glyphs[\"mensuralCustosCheckmark\"] = \"\\uEA0A\";\n    // U+EA03  Mensural custos down\n    Glyphs[\"mensuralCustosDown\"] = \"\\uEA03\";\n    // U+EA0B  Turn-like custos\n    Glyphs[\"mensuralCustosTurn\"] = \"\\uEA0B\";\n    // U+EA02  Mensural custos up\n    Glyphs[\"mensuralCustosUp\"] = \"\\uEA02\";\n    // U+E903  Mensural F clef\n    Glyphs[\"mensuralFclef\"] = \"\\uE903\";\n    // U+E904  Petrucci F clef\n    Glyphs[\"mensuralFclefPetrucci\"] = \"\\uE904\";\n    // U+E900  Mensural G clef\n    Glyphs[\"mensuralGclef\"] = \"\\uE900\";\n    // U+E901  Petrucci G clef\n    Glyphs[\"mensuralGclefPetrucci\"] = \"\\uE901\";\n    // U+E92D  Modus imperfectum, vertical\n    Glyphs[\"mensuralModusImperfectumVert\"] = \"\\uE92D\";\n    // U+E92C  Modus perfectum, vertical\n    Glyphs[\"mensuralModusPerfectumVert\"] = \"\\uE92C\";\n    // U+E934  Longa/brevis notehead, black\n    Glyphs[\"mensuralNoteheadLongaBlack\"] = \"\\uE934\";\n    // U+E936  Longa/brevis notehead, black and void\n    Glyphs[\"mensuralNoteheadLongaBlackVoid\"] = \"\\uE936\";\n    // U+E935  Longa/brevis notehead, void\n    Glyphs[\"mensuralNoteheadLongaVoid\"] = \"\\uE935\";\n    // U+E937  Longa/brevis notehead, white\n    Glyphs[\"mensuralNoteheadLongaWhite\"] = \"\\uE937\";\n    // U+E930  Maxima notehead, black\n    Glyphs[\"mensuralNoteheadMaximaBlack\"] = \"\\uE930\";\n    // U+E932  Maxima notehead, black and void\n    Glyphs[\"mensuralNoteheadMaximaBlackVoid\"] = \"\\uE932\";\n    // U+E931  Maxima notehead, void\n    Glyphs[\"mensuralNoteheadMaximaVoid\"] = \"\\uE931\";\n    // U+E933  Maxima notehead, white\n    Glyphs[\"mensuralNoteheadMaximaWhite\"] = \"\\uE933\";\n    // U+E93C  Minima notehead, white\n    Glyphs[\"mensuralNoteheadMinimaWhite\"] = \"\\uE93C\";\n    // U+E938  Semibrevis notehead, black\n    Glyphs[\"mensuralNoteheadSemibrevisBlack\"] = \"\\uE938\";\n    // U+E93A  Semibrevis notehead, black and void\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoid\"] = \"\\uE93A\";\n    // U+E93B  Semibrevis notehead, black and void (turned)\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoidTurned\"] = \"\\uE93B\";\n    // U+E939  Semibrevis notehead, void\n    Glyphs[\"mensuralNoteheadSemibrevisVoid\"] = \"\\uE939\";\n    // U+E93D  Semiminima/fusa notehead, white\n    Glyphs[\"mensuralNoteheadSemiminimaWhite\"] = \"\\uE93D\";\n    // U+E970  Oblique form, ascending 2nd, black\n    Glyphs[\"mensuralObliqueAsc2ndBlack\"] = \"\\uE970\";\n    // U+E972  Oblique form, ascending 2nd, black and void\n    Glyphs[\"mensuralObliqueAsc2ndBlackVoid\"] = \"\\uE972\";\n    // U+E971  Oblique form, ascending 2nd, void\n    Glyphs[\"mensuralObliqueAsc2ndVoid\"] = \"\\uE971\";\n    // U+E973  Oblique form, ascending 2nd, white\n    Glyphs[\"mensuralObliqueAsc2ndWhite\"] = \"\\uE973\";\n    // U+E974  Oblique form, ascending 3rd, black\n    Glyphs[\"mensuralObliqueAsc3rdBlack\"] = \"\\uE974\";\n    // U+E976  Oblique form, ascending 3rd, black and void\n    Glyphs[\"mensuralObliqueAsc3rdBlackVoid\"] = \"\\uE976\";\n    // U+E975  Oblique form, ascending 3rd, void\n    Glyphs[\"mensuralObliqueAsc3rdVoid\"] = \"\\uE975\";\n    // U+E977  Oblique form, ascending 3rd, white\n    Glyphs[\"mensuralObliqueAsc3rdWhite\"] = \"\\uE977\";\n    // U+E978  Oblique form, ascending 4th, black\n    Glyphs[\"mensuralObliqueAsc4thBlack\"] = \"\\uE978\";\n    // U+E97A  Oblique form, ascending 4th, black and void\n    Glyphs[\"mensuralObliqueAsc4thBlackVoid\"] = \"\\uE97A\";\n    // U+E979  Oblique form, ascending 4th, void\n    Glyphs[\"mensuralObliqueAsc4thVoid\"] = \"\\uE979\";\n    // U+E97B  Oblique form, ascending 4th, white\n    Glyphs[\"mensuralObliqueAsc4thWhite\"] = \"\\uE97B\";\n    // U+E97C  Oblique form, ascending 5th, black\n    Glyphs[\"mensuralObliqueAsc5thBlack\"] = \"\\uE97C\";\n    // U+E97E  Oblique form, ascending 5th, black and void\n    Glyphs[\"mensuralObliqueAsc5thBlackVoid\"] = \"\\uE97E\";\n    // U+E97D  Oblique form, ascending 5th, void\n    Glyphs[\"mensuralObliqueAsc5thVoid\"] = \"\\uE97D\";\n    // U+E97F  Oblique form, ascending 5th, white\n    Glyphs[\"mensuralObliqueAsc5thWhite\"] = \"\\uE97F\";\n    // U+E980  Oblique form, descending 2nd, black\n    Glyphs[\"mensuralObliqueDesc2ndBlack\"] = \"\\uE980\";\n    // U+E982  Oblique form, descending 2nd, black and void\n    Glyphs[\"mensuralObliqueDesc2ndBlackVoid\"] = \"\\uE982\";\n    // U+E981  Oblique form, descending 2nd, void\n    Glyphs[\"mensuralObliqueDesc2ndVoid\"] = \"\\uE981\";\n    // U+E983  Oblique form, descending 2nd, white\n    Glyphs[\"mensuralObliqueDesc2ndWhite\"] = \"\\uE983\";\n    // U+E984  Oblique form, descending 3rd, black\n    Glyphs[\"mensuralObliqueDesc3rdBlack\"] = \"\\uE984\";\n    // U+E986  Oblique form, descending 3rd, black and void\n    Glyphs[\"mensuralObliqueDesc3rdBlackVoid\"] = \"\\uE986\";\n    // U+E985  Oblique form, descending 3rd, void\n    Glyphs[\"mensuralObliqueDesc3rdVoid\"] = \"\\uE985\";\n    // U+E987  Oblique form, descending 3rd, white\n    Glyphs[\"mensuralObliqueDesc3rdWhite\"] = \"\\uE987\";\n    // U+E988  Oblique form, descending 4th, black\n    Glyphs[\"mensuralObliqueDesc4thBlack\"] = \"\\uE988\";\n    // U+E98A  Oblique form, descending 4th, black and void\n    Glyphs[\"mensuralObliqueDesc4thBlackVoid\"] = \"\\uE98A\";\n    // U+E989  Oblique form, descending 4th, void\n    Glyphs[\"mensuralObliqueDesc4thVoid\"] = \"\\uE989\";\n    // U+E98B  Oblique form, descending 4th, white\n    Glyphs[\"mensuralObliqueDesc4thWhite\"] = \"\\uE98B\";\n    // U+E98C  Oblique form, descending 5th, black\n    Glyphs[\"mensuralObliqueDesc5thBlack\"] = \"\\uE98C\";\n    // U+E98E  Oblique form, descending 5th, black and void\n    Glyphs[\"mensuralObliqueDesc5thBlackVoid\"] = \"\\uE98E\";\n    // U+E98D  Oblique form, descending 5th, void\n    Glyphs[\"mensuralObliqueDesc5thVoid\"] = \"\\uE98D\";\n    // U+E98F  Oblique form, descending 5th, white\n    Glyphs[\"mensuralObliqueDesc5thWhite\"] = \"\\uE98F\";\n    // U+E910  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1\"] = \"\\uE910\";\n    // U+1D1C7  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1Alternate\"] = \"\\uD834\\uDDC7\";\n    // U+E919  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10\"] = \"\\uE919\";\n    // U+1D1CE  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10Alternate\"] = \"\\uD834\\uDDCE\";\n    // U+E91A  Tempus imperfectum cum prolatione imperfecta diminution 5\n    Glyphs[\"mensuralProlation11\"] = \"\\uE91A\";\n    // U+E911  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2\"] = \"\\uE911\";\n    // U+1D1C8  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2Alternate\"] = \"\\uD834\\uDDC8\";\n    // U+E912  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3\"] = \"\\uE912\";\n    // U+1D1C9  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3Alternate\"] = \"\\uD834\\uDDC9\";\n    // U+E913  Tempus perfectum cum prolatione perfecta diminution 2 (9/16)\n    Glyphs[\"mensuralProlation4\"] = \"\\uE913\";\n    // U+E914  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5\"] = \"\\uE914\";\n    // U+1D1CA  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5Alternate\"] = \"\\uD834\\uDDCA\";\n    // U+E915  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6\"] = \"\\uE915\";\n    // U+1D1CB  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6Alternate\"] = \"\\uD834\\uDDCB\";\n    // U+E916  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7\"] = \"\\uE916\";\n    // U+1D1CC  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7Alternate\"] = \"\\uD834\\uDDCC\";\n    // U+E917  Tempus imperfectum cum prolatione imperfecta diminution 2 (6/16)\n    Glyphs[\"mensuralProlation8\"] = \"\\uE917\";\n    // U+E918  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9\"] = \"\\uE918\";\n    // U+1D1CD  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9Alternate\"] = \"\\uD834\\uDDCD\";\n    // U+E920  Combining dot\n    Glyphs[\"mensuralProlationCombiningDot\"] = \"\\uE920\";\n    // U+E924  Combining void dot\n    Glyphs[\"mensuralProlationCombiningDotVoid\"] = \"\\uE924\";\n    // U+E925  Combining vertical stroke\n    Glyphs[\"mensuralProlationCombiningStroke\"] = \"\\uE925\";\n    // U+E922  Combining three dots horizontal\n    Glyphs[\"mensuralProlationCombiningThreeDots\"] = \"\\uE922\";\n    // U+E923  Combining three dots triangular\n    Glyphs[\"mensuralProlationCombiningThreeDotsTri\"] = \"\\uE923\";\n    // U+E921  Combining two dots\n    Glyphs[\"mensuralProlationCombiningTwoDots\"] = \"\\uE921\";\n    // U+E926  Mensural proportion 1\n    Glyphs[\"mensuralProportion1\"] = \"\\uE926\";\n    // U+E927  Mensural proportion 2\n    Glyphs[\"mensuralProportion2\"] = \"\\uE927\";\n    // U+E928  Mensural proportion 3\n    Glyphs[\"mensuralProportion3\"] = \"\\uE928\";\n    // U+E929  Mensural proportion 4\n    Glyphs[\"mensuralProportion4\"] = \"\\uE929\";\n    // U+EE90  Mensural proportion 5\n    Glyphs[\"mensuralProportion5\"] = \"\\uEE90\";\n    // U+EE91  Mensural proportion 6\n    Glyphs[\"mensuralProportion6\"] = \"\\uEE91\";\n    // U+EE92  Mensural proportion 7\n    Glyphs[\"mensuralProportion7\"] = \"\\uEE92\";\n    // U+EE93  Mensural proportion 8\n    Glyphs[\"mensuralProportion8\"] = \"\\uEE93\";\n    // U+EE94  Mensural proportion 9\n    Glyphs[\"mensuralProportion9\"] = \"\\uEE94\";\n    // U+E92B  Mensural proportion major\n    Glyphs[\"mensuralProportionMajor\"] = \"\\uE92B\";\n    // U+E92A  Mensural proportion minor\n    Glyphs[\"mensuralProportionMinor\"] = \"\\uE92A\";\n    // U+E91C  Proportio dupla 1\n    Glyphs[\"mensuralProportionProportioDupla1\"] = \"\\uE91C\";\n    // U+E91D  Proportio dupla 2\n    Glyphs[\"mensuralProportionProportioDupla2\"] = \"\\uE91D\";\n    // U+E91F  Proportio quadrupla\n    Glyphs[\"mensuralProportionProportioQuadrupla\"] = \"\\uE91F\";\n    // U+E91E  Proportio tripla\n    Glyphs[\"mensuralProportionProportioTripla\"] = \"\\uE91E\";\n    // U+E91B  Tempus perfectum\n    Glyphs[\"mensuralProportionTempusPerfectum\"] = \"\\uE91B\";\n    // U+E9F3  Brevis rest\n    Glyphs[\"mensuralRestBrevis\"] = \"\\uE9F3\";\n    // U+1D1C3  Brevis rest\n    Glyphs[\"mensuralRestBrevisAlternate\"] = \"\\uD834\\uDDC3\";\n    // U+E9F7  Fusa rest\n    Glyphs[\"mensuralRestFusa\"] = \"\\uE9F7\";\n    // U+E9F2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfecta\"] = \"\\uE9F2\";\n    // U+1D1C2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfectaAlternate\"] = \"\\uD834\\uDDC2\";\n    // U+E9F1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfecta\"] = \"\\uE9F1\";\n    // U+1D1C1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfectaAlternate\"] = \"\\uD834\\uDDC1\";\n    // U+E9F0  Maxima rest\n    Glyphs[\"mensuralRestMaxima\"] = \"\\uE9F0\";\n    // U+E9F5  Minima rest\n    Glyphs[\"mensuralRestMinima\"] = \"\\uE9F5\";\n    // U+1D1C5  Minima rest\n    Glyphs[\"mensuralRestMinimaAlternate\"] = \"\\uD834\\uDDC5\";\n    // U+E9F4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevis\"] = \"\\uE9F4\";\n    // U+1D1C4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevisAlternate\"] = \"\\uD834\\uDDC4\";\n    // U+E9F8  Semifusa rest\n    Glyphs[\"mensuralRestSemifusa\"] = \"\\uE9F8\";\n    // U+E9F6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminima\"] = \"\\uE9F6\";\n    // U+1D1C6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminimaAlternate\"] = \"\\uD834\\uDDC6\";\n    // U+EA01  Signum congruentiae down\n    Glyphs[\"mensuralSignumDown\"] = \"\\uEA01\";\n    // U+EA00  Signum congruentiae up\n    Glyphs[\"mensuralSignumUp\"] = \"\\uEA00\";\n    // U+E92F  Tempus imperfectum, horizontal\n    Glyphs[\"mensuralTempusImperfectumHoriz\"] = \"\\uE92F\";\n    // U+E92E  Tempus perfectum, horizontal\n    Glyphs[\"mensuralTempusPerfectumHoriz\"] = \"\\uE92E\";\n    // U+E95E  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevis\"] = \"\\uE95E\";\n    // U+1D1B8  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevisAlternate\"] = \"\\uD834\\uDDB8\";\n    // U+E961  White mensural fusa\n    Glyphs[\"mensuralWhiteFusa\"] = \"\\uE961\";\n    // U+1D1BE  White mensural fusa\n    Glyphs[\"mensuralWhiteFusaAlternate\"] = \"\\uD834\\uDDBE\";\n    // U+E95D  White mensural longa\n    Glyphs[\"mensuralWhiteLonga\"] = \"\\uE95D\";\n    // U+1D1B7  White mensural longa\n    Glyphs[\"mensuralWhiteLongaAlternate\"] = \"\\uD834\\uDDB7\";\n    // U+E95C  White mensural maxima\n    Glyphs[\"mensuralWhiteMaxima\"] = \"\\uE95C\";\n    // U+1D1B6  White mensural maxima\n    Glyphs[\"mensuralWhiteMaximaAlternate\"] = \"\\uD834\\uDDB6\";\n    // U+E95F  White mensural minima\n    Glyphs[\"mensuralWhiteMinima\"] = \"\\uE95F\";\n    // U+E962  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevis\"] = \"\\uE962\";\n    // U+1D1B9  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevisAlternate\"] = \"\\uD834\\uDDB9\";\n    // U+E960  White mensural semiminima\n    Glyphs[\"mensuralWhiteSemiminima\"] = \"\\uE960\";\n    // U+ECB7  Augmentation dot\n    Glyphs[\"metAugmentationDot\"] = \"\\uECB7\";\n    // U+ECB6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote1024thDown\"] = \"\\uECB6\";\n    // U+ECB5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote1024thUp\"] = \"\\uECB5\";\n    // U+ECB0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"metNote128thDown\"] = \"\\uECB0\";\n    // U+ECAF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"metNote128thUp\"] = \"\\uECAF\";\n    // U+ECAA  16th note (semiquaver) stem down\n    Glyphs[\"metNote16thDown\"] = \"\\uECAA\";\n    // U+ECA9  16th note (semiquaver) stem up\n    Glyphs[\"metNote16thUp\"] = \"\\uECA9\";\n    // U+ECB2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote256thDown\"] = \"\\uECB2\";\n    // U+ECB1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote256thUp\"] = \"\\uECB1\";\n    // U+ECAC  32nd note (demisemiquaver) stem down\n    Glyphs[\"metNote32ndDown\"] = \"\\uECAC\";\n    // U+ECAB  32nd note (demisemiquaver) stem up\n    Glyphs[\"metNote32ndUp\"] = \"\\uECAB\";\n    // U+ECB4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote512thDown\"] = \"\\uECB4\";\n    // U+ECB3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote512thUp\"] = \"\\uECB3\";\n    // U+ECAE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"metNote64thDown\"] = \"\\uECAE\";\n    // U+ECAD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"metNote64thUp\"] = \"\\uECAD\";\n    // U+ECA8  Eighth note (quaver) stem down\n    Glyphs[\"metNote8thDown\"] = \"\\uECA8\";\n    // U+ECA7  Eighth note (quaver) stem up\n    Glyphs[\"metNote8thUp\"] = \"\\uECA7\";\n    // U+ECA0  Double whole note (breve)\n    Glyphs[\"metNoteDoubleWhole\"] = \"\\uECA0\";\n    // U+ECA1  Double whole note (square)\n    Glyphs[\"metNoteDoubleWholeSquare\"] = \"\\uECA1\";\n    // U+ECA4  Half note (minim) stem down\n    Glyphs[\"metNoteHalfDown\"] = \"\\uECA4\";\n    // U+ECA3  Half note (minim) stem up\n    Glyphs[\"metNoteHalfUp\"] = \"\\uECA3\";\n    // U+ECA6  Quarter note (crotchet) stem down\n    Glyphs[\"metNoteQuarterDown\"] = \"\\uECA6\";\n    // U+ECA5  Quarter note (crotchet) stem up\n    Glyphs[\"metNoteQuarterUp\"] = \"\\uECA5\";\n    // U+ECA2  Whole note (semibreve)\n    Glyphs[\"metNoteWhole\"] = \"\\uECA2\";\n    // U+EC63  Left-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowLeft\"] = \"\\uEC63\";\n    // U+EC64  Right-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowRight\"] = \"\\uEC64\";\n    // U+EC61  Do not copy\n    Glyphs[\"miscDoNotCopy\"] = \"\\uEC61\";\n    // U+EC60  Do not photocopy\n    Glyphs[\"miscDoNotPhotocopy\"] = \"\\uEC60\";\n    // U+EC62  Eyeglasses\n    Glyphs[\"miscEyeglasses\"] = \"\\uEC62\";\n    // U+E1E6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note1024thDown\"] = \"\\uE1E6\";\n    // U+E1E5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note1024thUp\"] = \"\\uE1E5\";\n    // U+E1E0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"note128thDown\"] = \"\\uE1E0\";\n    // U+E1DF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUp\"] = \"\\uE1DF\";\n    // U+1D164  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUpAlternate\"] = \"\\uD834\\uDD64\";\n    // U+E1DA  16th note (semiquaver) stem down\n    Glyphs[\"note16thDown\"] = \"\\uE1DA\";\n    // U+E1D9  16th note (semiquaver) stem up\n    Glyphs[\"note16thUp\"] = \"\\uE1D9\";\n    // U+1D161  16th note (semiquaver) stem up\n    Glyphs[\"note16thUpAlternate\"] = \"\\uD834\\uDD61\";\n    // U+E1E2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"note256thDown\"] = \"\\uE1E2\";\n    // U+E1E1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"note256thUp\"] = \"\\uE1E1\";\n    // U+E1DC  32nd note (demisemiquaver) stem down\n    Glyphs[\"note32ndDown\"] = \"\\uE1DC\";\n    // U+E1DB  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUp\"] = \"\\uE1DB\";\n    // U+1D162  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUpAlternate\"] = \"\\uD834\\uDD62\";\n    // U+E1E4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note512thDown\"] = \"\\uE1E4\";\n    // U+E1E3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note512thUp\"] = \"\\uE1E3\";\n    // U+E1DE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"note64thDown\"] = \"\\uE1DE\";\n    // U+E1DD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUp\"] = \"\\uE1DD\";\n    // U+1D163  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUpAlternate\"] = \"\\uD834\\uDD63\";\n    // U+E1D8  Eighth note (quaver) stem down\n    Glyphs[\"note8thDown\"] = \"\\uE1D8\";\n    // U+E1D7  Eighth note (quaver) stem up\n    Glyphs[\"note8thUp\"] = \"\\uE1D7\";\n    // U+1D160  Eighth note (quaver) stem up\n    Glyphs[\"note8thUpAlternate\"] = \"\\uD834\\uDD60\";\n    // U+E197  A (black note)\n    Glyphs[\"noteABlack\"] = \"\\uE197\";\n    // U+E196  A flat (black note)\n    Glyphs[\"noteAFlatBlack\"] = \"\\uE196\";\n    // U+E17F  A flat (half note)\n    Glyphs[\"noteAFlatHalf\"] = \"\\uE17F\";\n    // U+E168  A flat (whole note)\n    Glyphs[\"noteAFlatWhole\"] = \"\\uE168\";\n    // U+E180  A (half note)\n    Glyphs[\"noteAHalf\"] = \"\\uE180\";\n    // U+E198  A sharp (black note)\n    Glyphs[\"noteASharpBlack\"] = \"\\uE198\";\n    // U+E181  A sharp (half note)\n    Glyphs[\"noteASharpHalf\"] = \"\\uE181\";\n    // U+E16A  A sharp (whole note)\n    Glyphs[\"noteASharpWhole\"] = \"\\uE16A\";\n    // U+E169  A (whole note)\n    Glyphs[\"noteAWhole\"] = \"\\uE169\";\n    // U+E19A  B (black note)\n    Glyphs[\"noteBBlack\"] = \"\\uE19A\";\n    // U+E199  B flat (black note)\n    Glyphs[\"noteBFlatBlack\"] = \"\\uE199\";\n    // U+E182  B flat (half note)\n    Glyphs[\"noteBFlatHalf\"] = \"\\uE182\";\n    // U+E16B  B flat (whole note)\n    Glyphs[\"noteBFlatWhole\"] = \"\\uE16B\";\n    // U+E183  B (half note)\n    Glyphs[\"noteBHalf\"] = \"\\uE183\";\n    // U+E19B  B sharp (black note)\n    Glyphs[\"noteBSharpBlack\"] = \"\\uE19B\";\n    // U+E184  B sharp (half note)\n    Glyphs[\"noteBSharpHalf\"] = \"\\uE184\";\n    // U+E16D  B sharp (whole note)\n    Glyphs[\"noteBSharpWhole\"] = \"\\uE16D\";\n    // U+E16C  B (whole note)\n    Glyphs[\"noteBWhole\"] = \"\\uE16C\";\n    // U+E19D  C (black note)\n    Glyphs[\"noteCBlack\"] = \"\\uE19D\";\n    // U+E19C  C flat (black note)\n    Glyphs[\"noteCFlatBlack\"] = \"\\uE19C\";\n    // U+E185  C flat (half note)\n    Glyphs[\"noteCFlatHalf\"] = \"\\uE185\";\n    // U+E16E  C flat (whole note)\n    Glyphs[\"noteCFlatWhole\"] = \"\\uE16E\";\n    // U+E186  C (half note)\n    Glyphs[\"noteCHalf\"] = \"\\uE186\";\n    // U+E19E  C sharp (black note)\n    Glyphs[\"noteCSharpBlack\"] = \"\\uE19E\";\n    // U+E187  C sharp (half note)\n    Glyphs[\"noteCSharpHalf\"] = \"\\uE187\";\n    // U+E170  C sharp (whole note)\n    Glyphs[\"noteCSharpWhole\"] = \"\\uE170\";\n    // U+E16F  C (whole note)\n    Glyphs[\"noteCWhole\"] = \"\\uE16F\";\n    // U+E1A0  D (black note)\n    Glyphs[\"noteDBlack\"] = \"\\uE1A0\";\n    // U+E19F  D flat (black note)\n    Glyphs[\"noteDFlatBlack\"] = \"\\uE19F\";\n    // U+E188  D flat (half note)\n    Glyphs[\"noteDFlatHalf\"] = \"\\uE188\";\n    // U+E171  D flat (whole note)\n    Glyphs[\"noteDFlatWhole\"] = \"\\uE171\";\n    // U+E189  D (half note)\n    Glyphs[\"noteDHalf\"] = \"\\uE189\";\n    // U+E1A1  D sharp (black note)\n    Glyphs[\"noteDSharpBlack\"] = \"\\uE1A1\";\n    // U+E18A  D sharp (half note)\n    Glyphs[\"noteDSharpHalf\"] = \"\\uE18A\";\n    // U+E173  D sharp (whole note)\n    Glyphs[\"noteDSharpWhole\"] = \"\\uE173\";\n    // U+E172  D (whole note)\n    Glyphs[\"noteDWhole\"] = \"\\uE172\";\n    // U+EEF2  Di (black note)\n    Glyphs[\"noteDiBlack\"] = \"\\uEEF2\";\n    // U+EEE9  Di (half note)\n    Glyphs[\"noteDiHalf\"] = \"\\uEEE9\";\n    // U+EEE0  Di (whole note)\n    Glyphs[\"noteDiWhole\"] = \"\\uEEE0\";\n    // U+E160  Do (black note)\n    Glyphs[\"noteDoBlack\"] = \"\\uE160\";\n    // U+E158  Do (half note)\n    Glyphs[\"noteDoHalf\"] = \"\\uE158\";\n    // U+E150  Do (whole note)\n    Glyphs[\"noteDoWhole\"] = \"\\uE150\";\n    // U+E1D0  Double whole note (breve)\n    Glyphs[\"noteDoubleWhole\"] = \"\\uE1D0\";\n    // U+1D15C  Double whole note (breve)\n    Glyphs[\"noteDoubleWholeAlternate\"] = \"\\uD834\\uDD5C\";\n    // U+E1D1  Double whole note (square)\n    Glyphs[\"noteDoubleWholeSquare\"] = \"\\uE1D1\";\n    // U+E1A3  E (black note)\n    Glyphs[\"noteEBlack\"] = \"\\uE1A3\";\n    // U+E1A2  E flat (black note)\n    Glyphs[\"noteEFlatBlack\"] = \"\\uE1A2\";\n    // U+E18B  E flat (half note)\n    Glyphs[\"noteEFlatHalf\"] = \"\\uE18B\";\n    // U+E174  E flat (whole note)\n    Glyphs[\"noteEFlatWhole\"] = \"\\uE174\";\n    // U+E18C  E (half note)\n    Glyphs[\"noteEHalf\"] = \"\\uE18C\";\n    // U+E1A4  E sharp (black note)\n    Glyphs[\"noteESharpBlack\"] = \"\\uE1A4\";\n    // U+E18D  E sharp (half note)\n    Glyphs[\"noteESharpHalf\"] = \"\\uE18D\";\n    // U+E176  E sharp (whole note)\n    Glyphs[\"noteESharpWhole\"] = \"\\uE176\";\n    // U+E175  E (whole note)\n    Glyphs[\"noteEWhole\"] = \"\\uE175\";\n    // U+E1AF  Empty black note\n    Glyphs[\"noteEmptyBlack\"] = \"\\uE1AF\";\n    // U+E1AE  Empty half note\n    Glyphs[\"noteEmptyHalf\"] = \"\\uE1AE\";\n    // U+E1AD  Empty whole note\n    Glyphs[\"noteEmptyWhole\"] = \"\\uE1AD\";\n    // U+E1A6  F (black note)\n    Glyphs[\"noteFBlack\"] = \"\\uE1A6\";\n    // U+E1A5  F flat (black note)\n    Glyphs[\"noteFFlatBlack\"] = \"\\uE1A5\";\n    // U+E18E  F flat (half note)\n    Glyphs[\"noteFFlatHalf\"] = \"\\uE18E\";\n    // U+E177  F flat (whole note)\n    Glyphs[\"noteFFlatWhole\"] = \"\\uE177\";\n    // U+E18F  F (half note)\n    Glyphs[\"noteFHalf\"] = \"\\uE18F\";\n    // U+E1A7  F sharp (black note)\n    Glyphs[\"noteFSharpBlack\"] = \"\\uE1A7\";\n    // U+E190  F sharp (half note)\n    Glyphs[\"noteFSharpHalf\"] = \"\\uE190\";\n    // U+E179  F sharp (whole note)\n    Glyphs[\"noteFSharpWhole\"] = \"\\uE179\";\n    // U+E178  F (whole note)\n    Glyphs[\"noteFWhole\"] = \"\\uE178\";\n    // U+E163  Fa (black note)\n    Glyphs[\"noteFaBlack\"] = \"\\uE163\";\n    // U+E15B  Fa (half note)\n    Glyphs[\"noteFaHalf\"] = \"\\uE15B\";\n    // U+E153  Fa (whole note)\n    Glyphs[\"noteFaWhole\"] = \"\\uE153\";\n    // U+EEF6  Fi (black note)\n    Glyphs[\"noteFiBlack\"] = \"\\uEEF6\";\n    // U+EEED  Fi (half note)\n    Glyphs[\"noteFiHalf\"] = \"\\uEEED\";\n    // U+EEE4  Fi (whole note)\n    Glyphs[\"noteFiWhole\"] = \"\\uEEE4\";\n    // U+E1A9  G (black note)\n    Glyphs[\"noteGBlack\"] = \"\\uE1A9\";\n    // U+E1A8  G flat (black note)\n    Glyphs[\"noteGFlatBlack\"] = \"\\uE1A8\";\n    // U+E191  G flat (half note)\n    Glyphs[\"noteGFlatHalf\"] = \"\\uE191\";\n    // U+E17A  G flat (whole note)\n    Glyphs[\"noteGFlatWhole\"] = \"\\uE17A\";\n    // U+E192  G (half note)\n    Glyphs[\"noteGHalf\"] = \"\\uE192\";\n    // U+E1AA  G sharp (black note)\n    Glyphs[\"noteGSharpBlack\"] = \"\\uE1AA\";\n    // U+E193  G sharp (half note)\n    Glyphs[\"noteGSharpHalf\"] = \"\\uE193\";\n    // U+E17C  G sharp (whole note)\n    Glyphs[\"noteGSharpWhole\"] = \"\\uE17C\";\n    // U+E17B  G (whole note)\n    Glyphs[\"noteGWhole\"] = \"\\uE17B\";\n    // U+E1AB  H (black note)\n    Glyphs[\"noteHBlack\"] = \"\\uE1AB\";\n    // U+E194  H (half note)\n    Glyphs[\"noteHHalf\"] = \"\\uE194\";\n    // U+E1AC  H sharp (black note)\n    Glyphs[\"noteHSharpBlack\"] = \"\\uE1AC\";\n    // U+E195  H sharp (half note)\n    Glyphs[\"noteHSharpHalf\"] = \"\\uE195\";\n    // U+E17E  H sharp (whole note)\n    Glyphs[\"noteHSharpWhole\"] = \"\\uE17E\";\n    // U+E17D  H (whole note)\n    Glyphs[\"noteHWhole\"] = \"\\uE17D\";\n    // U+E1D4  Half note (minim) stem down\n    Glyphs[\"noteHalfDown\"] = \"\\uE1D4\";\n    // U+E1D3  Half note (minim) stem up\n    Glyphs[\"noteHalfUp\"] = \"\\uE1D3\";\n    // U+1D15E  Half note (minim) stem up\n    Glyphs[\"noteHalfUpAlternate\"] = \"\\uD834\\uDD5E\";\n    // U+E165  La (black note)\n    Glyphs[\"noteLaBlack\"] = \"\\uE165\";\n    // U+E15D  La (half note)\n    Glyphs[\"noteLaHalf\"] = \"\\uE15D\";\n    // U+E155  La (whole note)\n    Glyphs[\"noteLaWhole\"] = \"\\uE155\";\n    // U+EEF9  Le (black note)\n    Glyphs[\"noteLeBlack\"] = \"\\uEEF9\";\n    // U+EEF0  Le (half note)\n    Glyphs[\"noteLeHalf\"] = \"\\uEEF0\";\n    // U+EEE7  Le (whole note)\n    Glyphs[\"noteLeWhole\"] = \"\\uEEE7\";\n    // U+EEF8  Li (black note)\n    Glyphs[\"noteLiBlack\"] = \"\\uEEF8\";\n    // U+EEEF  Li (half note)\n    Glyphs[\"noteLiHalf\"] = \"\\uEEEF\";\n    // U+EEE6  Li (whole note)\n    Glyphs[\"noteLiWhole\"] = \"\\uEEE6\";\n    // U+EEF5  Me (black note)\n    Glyphs[\"noteMeBlack\"] = \"\\uEEF5\";\n    // U+EEEC  Me (half note)\n    Glyphs[\"noteMeHalf\"] = \"\\uEEEC\";\n    // U+EEE3  Me (whole note)\n    Glyphs[\"noteMeWhole\"] = \"\\uEEE3\";\n    // U+E162  Mi (black note)\n    Glyphs[\"noteMiBlack\"] = \"\\uE162\";\n    // U+E15A  Mi (half note)\n    Glyphs[\"noteMiHalf\"] = \"\\uE15A\";\n    // U+E152  Mi (whole note)\n    Glyphs[\"noteMiWhole\"] = \"\\uE152\";\n    // U+E1D6  Quarter note (crotchet) stem down\n    Glyphs[\"noteQuarterDown\"] = \"\\uE1D6\";\n    // U+E1D5  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUp\"] = \"\\uE1D5\";\n    // U+1D15F  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUpAlternate\"] = \"\\uD834\\uDD5F\";\n    // U+EEF4  Ra (black note)\n    Glyphs[\"noteRaBlack\"] = \"\\uEEF4\";\n    // U+EEEB  Ra (half note)\n    Glyphs[\"noteRaHalf\"] = \"\\uEEEB\";\n    // U+EEE2  Ra (whole note)\n    Glyphs[\"noteRaWhole\"] = \"\\uEEE2\";\n    // U+E161  Re (black note)\n    Glyphs[\"noteReBlack\"] = \"\\uE161\";\n    // U+E159  Re (half note)\n    Glyphs[\"noteReHalf\"] = \"\\uE159\";\n    // U+E151  Re (whole note)\n    Glyphs[\"noteReWhole\"] = \"\\uE151\";\n    // U+EEF3  Ri (black note)\n    Glyphs[\"noteRiBlack\"] = \"\\uEEF3\";\n    // U+EEEA  Ri (half note)\n    Glyphs[\"noteRiHalf\"] = \"\\uEEEA\";\n    // U+EEE1  Ri (whole note)\n    Glyphs[\"noteRiWhole\"] = \"\\uEEE1\";\n    // U+EEF7  Se (black note)\n    Glyphs[\"noteSeBlack\"] = \"\\uEEF7\";\n    // U+EEEE  Se (half note)\n    Glyphs[\"noteSeHalf\"] = \"\\uEEEE\";\n    // U+EEE5  Se (whole note)\n    Glyphs[\"noteSeWhole\"] = \"\\uEEE5\";\n    // U+E1C9  Arrowhead left black (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftBlack\"] = \"\\uE1C9\";\n    // U+ECDC  Arrowhead left double whole (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftDoubleWhole\"] = \"\\uECDC\";\n    // U+E1C8  Arrowhead left white (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftWhite\"] = \"\\uE1C8\";\n    // U+E1B9  Diamond black (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondBlack\"] = \"\\uE1B9\";\n    // U+ECD4  Diamond double whole (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondDoubleWhole\"] = \"\\uECD4\";\n    // U+E1B8  Diamond white (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondWhite\"] = \"\\uE1B8\";\n    // U+E1C5  Isosceles triangle black (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleBlack\"] = \"\\uE1C5\";\n    // U+ECDA  Isosceles triangle double whole (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleDoubleWhole\"] = \"\\uECDA\";\n    // U+E1C4  Isosceles triangle white (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleWhite\"] = \"\\uE1C4\";\n    // U+E1C1  Inverted keystone black (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneBlack\"] = \"\\uE1C1\";\n    // U+ECD8  Inverted keystone double whole (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneDoubleWhole\"] = \"\\uECD8\";\n    // U+E1C0  Inverted keystone white (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneWhite\"] = \"\\uE1C0\";\n    // U+E1BD  Moon black (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonBlack\"] = \"\\uE1BD\";\n    // U+ECD6  Moon double whole (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonDoubleWhole\"] = \"\\uECD6\";\n    // U+E1C7  Moon left black (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftBlack\"] = \"\\uE1C7\";\n    // U+ECDB  Moon left double whole (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftDoubleWhole\"] = \"\\uECDB\";\n    // U+E1C6  Moon left white (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftWhite\"] = \"\\uE1C6\";\n    // U+E1BC  Moon white (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonWhite\"] = \"\\uE1BC\";\n    // U+E1C3  Quarter moon black (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonBlack\"] = \"\\uE1C3\";\n    // U+ECD9  Quarter moon double whole (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonDoubleWhole\"] = \"\\uECD9\";\n    // U+E1C2  Quarter moon white (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonWhite\"] = \"\\uE1C2\";\n    // U+E1B1  Round black (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundBlack\"] = \"\\uE1B1\";\n    // U+ECD0  Round double whole (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundDoubleWhole\"] = \"\\uECD0\";\n    // U+E1B0  Round white (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundWhite\"] = \"\\uE1B0\";\n    // U+E1B3  Square black (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareBlack\"] = \"\\uE1B3\";\n    // U+ECD1  Square double whole (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareDoubleWhole\"] = \"\\uECD1\";\n    // U+E1B2  Square white (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareWhite\"] = \"\\uE1B2\";\n    // U+E1B7  Triangle left black (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftBlack\"] = \"\\uE1B7\";\n    // U+ECD3  Triangle left double whole (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftDoubleWhole\"] = \"\\uECD3\";\n    // U+E1B6  Triangle left white (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftWhite\"] = \"\\uE1B6\";\n    // U+E1B5  Triangle right black (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightBlack\"] = \"\\uE1B5\";\n    // U+ECD2  Triangle right double whole (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightDoubleWhole\"] = \"\\uECD2\";\n    // U+E1B4  Triangle right white (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightWhite\"] = \"\\uE1B4\";\n    // U+E1BF  Triangle-round black (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundBlack\"] = \"\\uE1BF\";\n    // U+ECD7  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundDoubleWhole\"] = \"\\uECD7\";\n    // U+E1CB  Triangle-round left black (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftBlack\"] = \"\\uE1CB\";\n    // U+ECDD  Triangle-round left double whole (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftDoubleWhole\"] = \"\\uECDD\";\n    // U+E1CA  Triangle-round left white (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftWhite\"] = \"\\uE1CA\";\n    // U+E1BE  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundWhite\"] = \"\\uE1BE\";\n    // U+E1BB  Triangle up black (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpBlack\"] = \"\\uE1BB\";\n    // U+ECD5  Triangle up double whole (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpDoubleWhole\"] = \"\\uECD5\";\n    // U+E1BA  Triangle up white (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpWhite\"] = \"\\uE1BA\";\n    // U+E167  Si (black note)\n    Glyphs[\"noteSiBlack\"] = \"\\uE167\";\n    // U+E15F  Si (half note)\n    Glyphs[\"noteSiHalf\"] = \"\\uE15F\";\n    // U+E157  Si (whole note)\n    Glyphs[\"noteSiWhole\"] = \"\\uE157\";\n    // U+E164  So (black note)\n    Glyphs[\"noteSoBlack\"] = \"\\uE164\";\n    // U+E15C  So (half note)\n    Glyphs[\"noteSoHalf\"] = \"\\uE15C\";\n    // U+E154  So (whole note)\n    Glyphs[\"noteSoWhole\"] = \"\\uE154\";\n    // U+EEFA  Te (black note)\n    Glyphs[\"noteTeBlack\"] = \"\\uEEFA\";\n    // U+EEF1  Te (half note)\n    Glyphs[\"noteTeHalf\"] = \"\\uEEF1\";\n    // U+EEE8  Te (whole note)\n    Glyphs[\"noteTeWhole\"] = \"\\uEEE8\";\n    // U+E166  Ti (black note)\n    Glyphs[\"noteTiBlack\"] = \"\\uE166\";\n    // U+E15E  Ti (half note)\n    Glyphs[\"noteTiHalf\"] = \"\\uE15E\";\n    // U+E156  Ti (whole note)\n    Glyphs[\"noteTiWhole\"] = \"\\uE156\";\n    // U+E1D2  Whole note (semibreve)\n    Glyphs[\"noteWhole\"] = \"\\uE1D2\";\n    // U+1D15D  Whole note (semibreve)\n    Glyphs[\"noteWholeAlternate\"] = \"\\uD834\\uDD5D\";\n    // U+E0A4  Black notehead\n    Glyphs[\"noteheadBlack\"] = \"\\uE0A4\";\n    // U+1D158  Black notehead\n    Glyphs[\"noteheadBlackAlternate\"] = \"\\uD834\\uDD58\";\n    // U+E0F7  Circle slash notehead\n    Glyphs[\"noteheadCircleSlash\"] = \"\\uE0F7\";\n    // U+E0B3  Circle X notehead\n    Glyphs[\"noteheadCircleX\"] = \"\\uE0B3\";\n    // U+1D145  Circle X notehead\n    Glyphs[\"noteheadCircleXAlternate\"] = \"\\uD834\\uDD45\";\n    // U+E0B0  Circle X double whole\n    Glyphs[\"noteheadCircleXDoubleWhole\"] = \"\\uE0B0\";\n    // U+E0B2  Circle X half\n    Glyphs[\"noteheadCircleXHalf\"] = \"\\uE0B2\";\n    // U+E0B1  Circle X whole\n    Glyphs[\"noteheadCircleXWhole\"] = \"\\uE0B1\";\n    // U+E0E4  Circled black notehead\n    Glyphs[\"noteheadCircledBlack\"] = \"\\uE0E4\";\n    // U+E0E8  Black notehead in large circle\n    Glyphs[\"noteheadCircledBlackLarge\"] = \"\\uE0E8\";\n    // U+E0E7  Circled double whole notehead\n    Glyphs[\"noteheadCircledDoubleWhole\"] = \"\\uE0E7\";\n    // U+E0EB  Double whole notehead in large circle\n    Glyphs[\"noteheadCircledDoubleWholeLarge\"] = \"\\uE0EB\";\n    // U+E0E5  Circled half notehead\n    Glyphs[\"noteheadCircledHalf\"] = \"\\uE0E5\";\n    // U+E0E9  Half notehead in large circle\n    Glyphs[\"noteheadCircledHalfLarge\"] = \"\\uE0E9\";\n    // U+E0E6  Circled whole notehead\n    Glyphs[\"noteheadCircledWhole\"] = \"\\uE0E6\";\n    // U+E0EA  Whole notehead in large circle\n    Glyphs[\"noteheadCircledWholeLarge\"] = \"\\uE0EA\";\n    // U+E0EC  Cross notehead in large circle\n    Glyphs[\"noteheadCircledXLarge\"] = \"\\uE0EC\";\n    // U+E124  Double whole note cluster, 2nd\n    Glyphs[\"noteheadClusterDoubleWhole2nd\"] = \"\\uE124\";\n    // U+E128  Double whole note cluster, 3rd\n    Glyphs[\"noteheadClusterDoubleWhole3rd\"] = \"\\uE128\";\n    // U+E12E  Combining double whole note cluster, bottom\n    Glyphs[\"noteheadClusterDoubleWholeBottom\"] = \"\\uE12E\";\n    // U+E12D  Combining double whole note cluster, middle\n    Glyphs[\"noteheadClusterDoubleWholeMiddle\"] = \"\\uE12D\";\n    // U+E12C  Combining double whole note cluster, top\n    Glyphs[\"noteheadClusterDoubleWholeTop\"] = \"\\uE12C\";\n    // U+E126  Half note cluster, 2nd\n    Glyphs[\"noteheadClusterHalf2nd\"] = \"\\uE126\";\n    // U+E12A  Half note cluster, 3rd\n    Glyphs[\"noteheadClusterHalf3rd\"] = \"\\uE12A\";\n    // U+E134  Combining half note cluster, bottom\n    Glyphs[\"noteheadClusterHalfBottom\"] = \"\\uE134\";\n    // U+E133  Combining half note cluster, middle\n    Glyphs[\"noteheadClusterHalfMiddle\"] = \"\\uE133\";\n    // U+E132  Combining half note cluster, top\n    Glyphs[\"noteheadClusterHalfTop\"] = \"\\uE132\";\n    // U+E127  Quarter note cluster, 2nd\n    Glyphs[\"noteheadClusterQuarter2nd\"] = \"\\uE127\";\n    // U+E12B  Quarter note cluster, 3rd\n    Glyphs[\"noteheadClusterQuarter3rd\"] = \"\\uE12B\";\n    // U+E137  Combining quarter note cluster, bottom\n    Glyphs[\"noteheadClusterQuarterBottom\"] = \"\\uE137\";\n    // U+E136  Combining quarter note cluster, middle\n    Glyphs[\"noteheadClusterQuarterMiddle\"] = \"\\uE136\";\n    // U+E135  Combining quarter note cluster, top\n    Glyphs[\"noteheadClusterQuarterTop\"] = \"\\uE135\";\n    // U+E123  Cluster notehead black (round)\n    Glyphs[\"noteheadClusterRoundBlack\"] = \"\\uE123\";\n    // U+E122  Cluster notehead white (round)\n    Glyphs[\"noteheadClusterRoundWhite\"] = \"\\uE122\";\n    // U+E121  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlack\"] = \"\\uE121\";\n    // U+1D15B  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlackAlternate\"] = \"\\uD834\\uDD5B\";\n    // U+E120  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhite\"] = \"\\uE120\";\n    // U+1D15A  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhiteAlternate\"] = \"\\uD834\\uDD5A\";\n    // U+E125  Whole note cluster, 2nd\n    Glyphs[\"noteheadClusterWhole2nd\"] = \"\\uE125\";\n    // U+E129  Whole note cluster, 3rd\n    Glyphs[\"noteheadClusterWhole3rd\"] = \"\\uE129\";\n    // U+E131  Combining whole note cluster, bottom\n    Glyphs[\"noteheadClusterWholeBottom\"] = \"\\uE131\";\n    // U+E130  Combining whole note cluster, middle\n    Glyphs[\"noteheadClusterWholeMiddle\"] = \"\\uE130\";\n    // U+E12F  Combining whole note cluster, top\n    Glyphs[\"noteheadClusterWholeTop\"] = \"\\uE12F\";\n    // U+EEAE  4/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesHalf\"] = \"\\uEEAE\";\n    // U+EEAD  8/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesWhole\"] = \"\\uEEAD\";\n    // U+EEAF  2/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhSeriesBlack\"] = \"\\uEEAF\";\n    // U+EEB5  2/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesBlack\"] = \"\\uEEB5\";\n    // U+EEB4  4/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesHalf\"] = \"\\uEEB4\";\n    // U+EEB3  8/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesWhole\"] = \"\\uEEB3\";\n    // U+EEA6  1/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesBlack\"] = \"\\uEEA6\";\n    // U+EEA5  2/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesHalf\"] = \"\\uEEA5\";\n    // U+EEA4  4/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesWhole\"] = \"\\uEEA4\";\n    // U+EEAC  2/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesBlack\"] = \"\\uEEAC\";\n    // U+EEAB  4/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesHalf\"] = \"\\uEEAB\";\n    // U+EEAA  8/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesWhole\"] = \"\\uEEAA\";\n    // U+EEA9  1/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesBlack\"] = \"\\uEEA9\";\n    // U+EEA8  2/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesHalf\"] = \"\\uEEA8\";\n    // U+EEA7  4/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesWhole\"] = \"\\uEEA7\";\n    // U+EEA3  1/6 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesBlack\"] = \"\\uEEA3\";\n    // U+EEA2  1/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesHalf\"] = \"\\uEEA2\";\n    // U+EEA1  2/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesWhole\"] = \"\\uEEA1\";\n    // U+EEB2  2/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesBlack\"] = \"\\uEEB2\";\n    // U+EEB1  4/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesHalf\"] = \"\\uEEB1\";\n    // U+EEB0  8/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesWhole\"] = \"\\uEEB0\";\n    // U+E0DB  Diamond black notehead\n    Glyphs[\"noteheadDiamondBlack\"] = \"\\uE0DB\";\n    // U+E0E2  Diamond black notehead (old)\n    Glyphs[\"noteheadDiamondBlackOld\"] = \"\\uE0E2\";\n    // U+E0DC  Diamond black notehead (wide)\n    Glyphs[\"noteheadDiamondBlackWide\"] = \"\\uE0DC\";\n    // U+E139  Black diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterBlack2nd\"] = \"\\uE139\";\n    // U+E13B  Black diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterBlack3rd\"] = \"\\uE13B\";\n    // U+E141  Combining black diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterBlackBottom\"] = \"\\uE141\";\n    // U+E140  Combining black diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterBlackMiddle\"] = \"\\uE140\";\n    // U+E13F  Combining black diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterBlackTop\"] = \"\\uE13F\";\n    // U+E138  White diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterWhite2nd\"] = \"\\uE138\";\n    // U+E13A  White diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterWhite3rd\"] = \"\\uE13A\";\n    // U+E13E  Combining white diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterWhiteBottom\"] = \"\\uE13E\";\n    // U+E13D  Combining white diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterWhiteMiddle\"] = \"\\uE13D\";\n    // U+E13C  Combining white diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterWhiteTop\"] = \"\\uE13C\";\n    // U+E0D7  Diamond double whole notehead\n    Glyphs[\"noteheadDiamondDoubleWhole\"] = \"\\uE0D7\";\n    // U+E0DF  Diamond double whole notehead (old)\n    Glyphs[\"noteheadDiamondDoubleWholeOld\"] = \"\\uE0DF\";\n    // U+E0D9  Diamond half notehead\n    Glyphs[\"noteheadDiamondHalf\"] = \"\\uE0D9\";\n    // U+E0E3  Half-filled diamond notehead\n    Glyphs[\"noteheadDiamondHalfFilled\"] = \"\\uE0E3\";\n    // U+E0E1  Diamond half notehead (old)\n    Glyphs[\"noteheadDiamondHalfOld\"] = \"\\uE0E1\";\n    // U+E0DA  Diamond half notehead (wide)\n    Glyphs[\"noteheadDiamondHalfWide\"] = \"\\uE0DA\";\n    // U+E0FC  Open diamond notehead\n    Glyphs[\"noteheadDiamondOpen\"] = \"\\uE0FC\";\n    // U+E0DD  Diamond white notehead\n    Glyphs[\"noteheadDiamondWhite\"] = \"\\uE0DD\";\n    // U+E0DE  Diamond white notehead (wide)\n    Glyphs[\"noteheadDiamondWhiteWide\"] = \"\\uE0DE\";\n    // U+E0D8  Diamond whole notehead\n    Glyphs[\"noteheadDiamondWhole\"] = \"\\uE0D8\";\n    // U+E0E0  Diamond whole notehead (old)\n    Glyphs[\"noteheadDiamondWholeOld\"] = \"\\uE0E0\";\n    // U+E0A0  Double whole (breve) notehead\n    Glyphs[\"noteheadDoubleWhole\"] = \"\\uE0A0\";\n    // U+E0A1  Double whole (breve) notehead (square)\n    Glyphs[\"noteheadDoubleWholeSquare\"] = \"\\uE0A1\";\n    // U+E0B4  Double whole notehead with X\n    Glyphs[\"noteheadDoubleWholeWithX\"] = \"\\uE0B4\";\n    // U+E0A3  Half (minim) notehead\n    Glyphs[\"noteheadHalf\"] = \"\\uE0A3\";\n    // U+1D157  Half (minim) notehead\n    Glyphs[\"noteheadHalfAlternate\"] = \"\\uD834\\uDD57\";\n    // U+E0FB  Filled half (minim) notehead\n    Glyphs[\"noteheadHalfFilled\"] = \"\\uE0FB\";\n    // U+E0B6  Half notehead with X\n    Glyphs[\"noteheadHalfWithX\"] = \"\\uE0B6\";\n    // U+E0F8  Heavy X notehead\n    Glyphs[\"noteheadHeavyX\"] = \"\\uE0F8\";\n    // U+E0F9  Heavy X with hat notehead\n    Glyphs[\"noteheadHeavyXHat\"] = \"\\uE0F9\";\n    // U+E0F4  Large arrow down (lowest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowDownBlack\"] = \"\\uE0F4\";\n    // U+E0F1  Large arrow down (lowest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowDownDoubleWhole\"] = \"\\uE0F1\";\n    // U+E0F3  Large arrow down (lowest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowDownHalf\"] = \"\\uE0F3\";\n    // U+E0F2  Large arrow down (lowest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowDownWhole\"] = \"\\uE0F2\";\n    // U+E0F0  Large arrow up (highest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowUpBlack\"] = \"\\uE0F0\";\n    // U+E0ED  Large arrow up (highest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowUpDoubleWhole\"] = \"\\uE0ED\";\n    // U+E0EF  Large arrow up (highest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowUpHalf\"] = \"\\uE0EF\";\n    // U+E0EE  Large arrow up (highest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowUpWhole\"] = \"\\uE0EE\";\n    // U+E0CB  Moon notehead black\n    Glyphs[\"noteheadMoonBlack\"] = \"\\uE0CB\";\n    // U+1D153  Moon notehead black\n    Glyphs[\"noteheadMoonBlackAlternate\"] = \"\\uD834\\uDD53\";\n    // U+E0CA  Moon notehead white\n    Glyphs[\"noteheadMoonWhite\"] = \"\\uE0CA\";\n    // U+1D152  Moon notehead white\n    Glyphs[\"noteheadMoonWhiteAlternate\"] = \"\\uD834\\uDD52\";\n    // U+EEA0  Sine notehead (Nancarrow)\n    Glyphs[\"noteheadNancarrowSine\"] = \"\\uEEA0\";\n    // U+E0A5  Null notehead\n    Glyphs[\"noteheadNull\"] = \"\\uE0A5\";\n    // U+1D159  Null notehead\n    Glyphs[\"noteheadNullAlternate\"] = \"\\uD834\\uDD59\";\n    // U+E0CE  Parenthesis notehead\n    Glyphs[\"noteheadParenthesis\"] = \"\\uE0CE\";\n    // U+1D156  Parenthesis notehead\n    Glyphs[\"noteheadParenthesisAlternate\"] = \"\\uD834\\uDD56\";\n    // U+E0F5  Opening parenthesis\n    Glyphs[\"noteheadParenthesisLeft\"] = \"\\uE0F5\";\n    // U+E0F6  Closing parenthesis\n    Glyphs[\"noteheadParenthesisRight\"] = \"\\uE0F6\";\n    // U+E0AF  Plus notehead black\n    Glyphs[\"noteheadPlusBlack\"] = \"\\uE0AF\";\n    // U+1D144  Plus notehead black\n    Glyphs[\"noteheadPlusBlackAlternate\"] = \"\\uD834\\uDD44\";\n    // U+E0AC  Plus notehead double whole\n    Glyphs[\"noteheadPlusDoubleWhole\"] = \"\\uE0AC\";\n    // U+E0AE  Plus notehead half\n    Glyphs[\"noteheadPlusHalf\"] = \"\\uE0AE\";\n    // U+E0AD  Plus notehead whole\n    Glyphs[\"noteheadPlusWhole\"] = \"\\uE0AD\";\n    // U+E144  Combining black rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterBlackBottom\"] = \"\\uE144\";\n    // U+E143  Combining black rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterBlackMiddle\"] = \"\\uE143\";\n    // U+E142  Combining black rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterBlackTop\"] = \"\\uE142\";\n    // U+E147  Combining white rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterWhiteBottom\"] = \"\\uE147\";\n    // U+E146  Combining white rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterWhiteMiddle\"] = \"\\uE146\";\n    // U+E145  Combining white rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterWhiteTop\"] = \"\\uE145\";\n    // U+E113  Round black notehead\n    Glyphs[\"noteheadRoundBlack\"] = \"\\uE113\";\n    // U+E11C  Round black notehead, double slashed\n    Glyphs[\"noteheadRoundBlackDoubleSlashed\"] = \"\\uE11C\";\n    // U+E110  Large round black notehead\n    Glyphs[\"noteheadRoundBlackLarge\"] = \"\\uE110\";\n    // U+E118  Round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashed\"] = \"\\uE118\";\n    // U+E116  Large round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashedLarge\"] = \"\\uE116\";\n    // U+E114  Round white notehead\n    Glyphs[\"noteheadRoundWhite\"] = \"\\uE114\";\n    // U+E11D  Round white notehead, double slashed\n    Glyphs[\"noteheadRoundWhiteDoubleSlashed\"] = \"\\uE11D\";\n    // U+E111  Large round white notehead\n    Glyphs[\"noteheadRoundWhiteLarge\"] = \"\\uE111\";\n    // U+E119  Round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashed\"] = \"\\uE119\";\n    // U+E117  Large round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashedLarge\"] = \"\\uE117\";\n    // U+E115  Round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDot\"] = \"\\uE115\";\n    // U+E112  Large round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDotLarge\"] = \"\\uE112\";\n    // U+E104  Large white diamond\n    Glyphs[\"noteheadSlashDiamondWhite\"] = \"\\uE104\";\n    // U+E101  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEnds\"] = \"\\uE101\";\n    // U+1D10D  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsAlternate\"] = \"\\uD834\\uDD0D\";\n    // U+E108  Muted slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsMuted\"] = \"\\uE108\";\n    // U+E100  Slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEnds\"] = \"\\uE100\";\n    // U+E107  Muted slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsMuted\"] = \"\\uE107\";\n    // U+E105  Small slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsSmall\"] = \"\\uE105\";\n    // U+E10A  White slash double whole\n    Glyphs[\"noteheadSlashWhiteDoubleWhole\"] = \"\\uE10A\";\n    // U+E103  White slash half\n    Glyphs[\"noteheadSlashWhiteHalf\"] = \"\\uE103\";\n    // U+E109  Muted white slash\n    Glyphs[\"noteheadSlashWhiteMuted\"] = \"\\uE109\";\n    // U+E102  White slash whole\n    Glyphs[\"noteheadSlashWhiteWhole\"] = \"\\uE102\";\n    // U+E106  Large X notehead\n    Glyphs[\"noteheadSlashX\"] = \"\\uE106\";\n    // U+E0CF  Slashed black notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedBlack1\"] = \"\\uE0CF\";\n    // U+E0D0  Slashed black notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedBlack2\"] = \"\\uE0D0\";\n    // U+E0D5  Slashed double whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedDoubleWhole1\"] = \"\\uE0D5\";\n    // U+E0D6  Slashed double whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedDoubleWhole2\"] = \"\\uE0D6\";\n    // U+E0D1  Slashed half notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedHalf1\"] = \"\\uE0D1\";\n    // U+E0D2  Slashed half notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedHalf2\"] = \"\\uE0D2\";\n    // U+E0D3  Slashed whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedWhole1\"] = \"\\uE0D3\";\n    // U+E0D4  Slashed whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedWhole2\"] = \"\\uE0D4\";\n    // U+E0B9  Square notehead black\n    Glyphs[\"noteheadSquareBlack\"] = \"\\uE0B9\";\n    // U+1D147  Square notehead black\n    Glyphs[\"noteheadSquareBlackAlternate\"] = \"\\uD834\\uDD47\";\n    // U+E11A  Large square black notehead\n    Glyphs[\"noteheadSquareBlackLarge\"] = \"\\uE11A\";\n    // U+E11B  Large square white notehead\n    Glyphs[\"noteheadSquareBlackWhite\"] = \"\\uE11B\";\n    // U+E0B8  Square notehead white\n    Glyphs[\"noteheadSquareWhite\"] = \"\\uE0B8\";\n    // U+1D146  Square notehead white\n    Glyphs[\"noteheadSquareWhiteAlternate\"] = \"\\uD834\\uDD46\";\n    // U+E0C7  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlack\"] = \"\\uE0C7\";\n    // U+1D14F  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlackAlternate\"] = \"\\uD834\\uDD4F\";\n    // U+E0C3  Triangle notehead down double whole\n    Glyphs[\"noteheadTriangleDownDoubleWhole\"] = \"\\uE0C3\";\n    // U+E0C5  Triangle notehead down half\n    Glyphs[\"noteheadTriangleDownHalf\"] = \"\\uE0C5\";\n    // U+E0C6  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhite\"] = \"\\uE0C6\";\n    // U+1D14E  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhiteAlternate\"] = \"\\uD834\\uDD4E\";\n    // U+E0C4  Triangle notehead down whole\n    Glyphs[\"noteheadTriangleDownWhole\"] = \"\\uE0C4\";\n    // U+E0C0  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlack\"] = \"\\uE0C0\";\n    // U+1D14B  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlackAlternate\"] = \"\\uD834\\uDD4B\";\n    // U+E0BF  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhite\"] = \"\\uE0BF\";\n    // U+1D14A  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhiteAlternate\"] = \"\\uD834\\uDD4A\";\n    // U+E0C2  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlack\"] = \"\\uE0C2\";\n    // U+1D14D  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlackAlternate\"] = \"\\uD834\\uDD4D\";\n    // U+E0C1  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhite\"] = \"\\uE0C1\";\n    // U+1D14C  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhiteAlternate\"] = \"\\uD834\\uDD4C\";\n    // U+E0CD  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlack\"] = \"\\uE0CD\";\n    // U+1D155  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlackAlternate\"] = \"\\uD834\\uDD55\";\n    // U+E0CC  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhite\"] = \"\\uE0CC\";\n    // U+1D154  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhiteAlternate\"] = \"\\uD834\\uDD54\";\n    // U+E0BE  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlack\"] = \"\\uE0BE\";\n    // U+1D149  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlackAlternate\"] = \"\\uD834\\uDD49\";\n    // U+E0BA  Triangle notehead up double whole\n    Glyphs[\"noteheadTriangleUpDoubleWhole\"] = \"\\uE0BA\";\n    // U+E0BC  Triangle notehead up half\n    Glyphs[\"noteheadTriangleUpHalf\"] = \"\\uE0BC\";\n    // U+E0C9  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlack\"] = \"\\uE0C9\";\n    // U+1D151  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlackAlternate\"] = \"\\uD834\\uDD51\";\n    // U+E0C8  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhite\"] = \"\\uE0C8\";\n    // U+1D150  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhiteAlternate\"] = \"\\uD834\\uDD50\";\n    // U+E0BD  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhite\"] = \"\\uE0BD\";\n    // U+1D148  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhiteAlternate\"] = \"\\uD834\\uDD48\";\n    // U+E0BB  Triangle notehead up whole\n    Glyphs[\"noteheadTriangleUpWhole\"] = \"\\uE0BB\";\n    // U+E0B7  Void notehead with X\n    Glyphs[\"noteheadVoidWithX\"] = \"\\uE0B7\";\n    // U+E0A2  Whole (semibreve) notehead\n    Glyphs[\"noteheadWhole\"] = \"\\uE0A2\";\n    // U+E0FA  Filled whole (semibreve) notehead\n    Glyphs[\"noteheadWholeFilled\"] = \"\\uE0FA\";\n    // U+E0B5  Whole notehead with X\n    Glyphs[\"noteheadWholeWithX\"] = \"\\uE0B5\";\n    // U+E0A9  X notehead black\n    Glyphs[\"noteheadXBlack\"] = \"\\uE0A9\";\n    // U+1D143  X notehead black\n    Glyphs[\"noteheadXBlackAlternate\"] = \"\\uD834\\uDD43\";\n    // U+E0A6  X notehead double whole\n    Glyphs[\"noteheadXDoubleWhole\"] = \"\\uE0A6\";\n    // U+E0A8  X notehead half\n    Glyphs[\"noteheadXHalf\"] = \"\\uE0A8\";\n    // U+E0AA  Ornate X notehead\n    Glyphs[\"noteheadXOrnate\"] = \"\\uE0AA\";\n    // U+E0AB  Ornate X notehead in ellipse\n    Glyphs[\"noteheadXOrnateEllipse\"] = \"\\uE0AB\";\n    // U+E0A7  X notehead whole\n    Glyphs[\"noteheadXWhole\"] = \"\\uE0A7\";\n    // U+EC91  a (baseline)\n    Glyphs[\"octaveBaselineA\"] = \"\\uEC91\";\n    // U+EC93  b (baseline)\n    Glyphs[\"octaveBaselineB\"] = \"\\uEC93\";\n    // U+EC95  m (baseline)\n    Glyphs[\"octaveBaselineM\"] = \"\\uEC95\";\n    // U+EC97  v (baseline)\n    Glyphs[\"octaveBaselineV\"] = \"\\uEC97\";\n    // U+E51F  Bassa\n    Glyphs[\"octaveBassa\"] = \"\\uE51F\";\n    // U+EC90  Loco\n    Glyphs[\"octaveLoco\"] = \"\\uEC90\";\n    // U+E51A  Left parenthesis for octave signs\n    Glyphs[\"octaveParensLeft\"] = \"\\uE51A\";\n    // U+E51B  Right parenthesis for octave signs\n    Glyphs[\"octaveParensRight\"] = \"\\uE51B\";\n    // U+EC92  a (superscript)\n    Glyphs[\"octaveSuperscriptA\"] = \"\\uEC92\";\n    // U+EC94  b (superscript)\n    Glyphs[\"octaveSuperscriptB\"] = \"\\uEC94\";\n    // U+EC96  m (superscript)\n    Glyphs[\"octaveSuperscriptM\"] = \"\\uEC96\";\n    // U+EC98  v (superscript)\n    Glyphs[\"octaveSuperscriptV\"] = \"\\uEC98\";\n    // U+E233  One-handed roll (Stevens)\n    Glyphs[\"oneHandedRollStevens\"] = \"\\uE233\";\n    // U+EE2E  Two Fusae\n    Glyphs[\"organGerman2Fusae\"] = \"\\uEE2E\";\n    // U+EE2C  Two Minimae\n    Glyphs[\"organGerman2Minimae\"] = \"\\uEE2C\";\n    // U+EE19  Combining double octave line above\n    Glyphs[\"organGerman2OctaveUp\"] = \"\\uEE19\";\n    // U+EE2F  Two Semifusae\n    Glyphs[\"organGerman2Semifusae\"] = \"\\uEE2F\";\n    // U+EE2D  Two Semiminimae\n    Glyphs[\"organGerman2Semiminimae\"] = \"\\uEE2D\";\n    // U+EE32  Three Fusae\n    Glyphs[\"organGerman3Fusae\"] = \"\\uEE32\";\n    // U+EE30  Three Minimae\n    Glyphs[\"organGerman3Minimae\"] = \"\\uEE30\";\n    // U+EE33  Three Semifusae\n    Glyphs[\"organGerman3Semifusae\"] = \"\\uEE33\";\n    // U+EE31  Three Semiminimae\n    Glyphs[\"organGerman3Semiminimae\"] = \"\\uEE31\";\n    // U+EE36  Four Fusae\n    Glyphs[\"organGerman4Fusae\"] = \"\\uEE36\";\n    // U+EE34  Four Minimae\n    Glyphs[\"organGerman4Minimae\"] = \"\\uEE34\";\n    // U+EE37  Four Semifusae\n    Glyphs[\"organGerman4Semifusae\"] = \"\\uEE37\";\n    // U+EE35  Four Semiminimae\n    Glyphs[\"organGerman4Semiminimae\"] = \"\\uEE35\";\n    // U+EE3A  Five Fusae\n    Glyphs[\"organGerman5Fusae\"] = \"\\uEE3A\";\n    // U+EE38  Five Minimae\n    Glyphs[\"organGerman5Minimae\"] = \"\\uEE38\";\n    // U+EE3B  Five Semifusae\n    Glyphs[\"organGerman5Semifusae\"] = \"\\uEE3B\";\n    // U+EE39  Five Semiminimae\n    Glyphs[\"organGerman5Semiminimae\"] = \"\\uEE39\";\n    // U+EE3E  Six Fusae\n    Glyphs[\"organGerman6Fusae\"] = \"\\uEE3E\";\n    // U+EE3C  Six Minimae\n    Glyphs[\"organGerman6Minimae\"] = \"\\uEE3C\";\n    // U+EE3F  Six Semifusae\n    Glyphs[\"organGerman6Semifusae\"] = \"\\uEE3F\";\n    // U+EE3D  Six Semiminimae\n    Glyphs[\"organGerman6Semiminimae\"] = \"\\uEE3D\";\n    // U+EE15  German organ tablature small A\n    Glyphs[\"organGermanALower\"] = \"\\uEE15\";\n    // U+EE09  German organ tablature great A\n    Glyphs[\"organGermanAUpper\"] = \"\\uEE09\";\n    // U+EE1C  Rhythm Dot\n    Glyphs[\"organGermanAugmentationDot\"] = \"\\uEE1C\";\n    // U+EE16  German organ tablature small B\n    Glyphs[\"organGermanBLower\"] = \"\\uEE16\";\n    // U+EE0A  German organ tablature great B\n    Glyphs[\"organGermanBUpper\"] = \"\\uEE0A\";\n    // U+EE25  Brevis (Binary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis2\"] = \"\\uEE25\";\n    // U+EE24  Brevis (Ternary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis3\"] = \"\\uEE24\";\n    // U+EE1E  Minima Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerMinimaRest\"] = \"\\uEE1E\";\n    // U+EE26  Semibrevis Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevis\"] = \"\\uEE26\";\n    // U+EE1D  Semibrevis Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevisRest\"] = \"\\uEE1D\";\n    // U+EE0C  German organ tablature small C\n    Glyphs[\"organGermanCLower\"] = \"\\uEE0C\";\n    // U+EE00  German organ tablature great C\n    Glyphs[\"organGermanCUpper\"] = \"\\uEE00\";\n    // U+EE0D  German organ tablature small Cis\n    Glyphs[\"organGermanCisLower\"] = \"\\uEE0D\";\n    // U+EE01  German organ tablature great Cis\n    Glyphs[\"organGermanCisUpper\"] = \"\\uEE01\";\n    // U+EE0E  German organ tablature small D\n    Glyphs[\"organGermanDLower\"] = \"\\uEE0E\";\n    // U+EE02  German organ tablature great D\n    Glyphs[\"organGermanDUpper\"] = \"\\uEE02\";\n    // U+EE0F  German organ tablature small Dis\n    Glyphs[\"organGermanDisLower\"] = \"\\uEE0F\";\n    // U+EE03  German organ tablature great Dis\n    Glyphs[\"organGermanDisUpper\"] = \"\\uEE03\";\n    // U+EE10  German organ tablature small E\n    Glyphs[\"organGermanELower\"] = \"\\uEE10\";\n    // U+EE04  German organ tablature great E\n    Glyphs[\"organGermanEUpper\"] = \"\\uEE04\";\n    // U+EE11  German organ tablature small F\n    Glyphs[\"organGermanFLower\"] = \"\\uEE11\";\n    // U+EE05  German organ tablature great F\n    Glyphs[\"organGermanFUpper\"] = \"\\uEE05\";\n    // U+EE12  German organ tablature small Fis\n    Glyphs[\"organGermanFisLower\"] = \"\\uEE12\";\n    // U+EE06  German organ tablature great Fis\n    Glyphs[\"organGermanFisUpper\"] = \"\\uEE06\";\n    // U+EE2A  Fusa\n    Glyphs[\"organGermanFusa\"] = \"\\uEE2A\";\n    // U+EE22  Fusa Rest\n    Glyphs[\"organGermanFusaRest\"] = \"\\uEE22\";\n    // U+EE13  German organ tablature small G\n    Glyphs[\"organGermanGLower\"] = \"\\uEE13\";\n    // U+EE07  German organ tablature great G\n    Glyphs[\"organGermanGUpper\"] = \"\\uEE07\";\n    // U+EE14  German organ tablature small Gis\n    Glyphs[\"organGermanGisLower\"] = \"\\uEE14\";\n    // U+EE08  German organ tablature great Gis\n    Glyphs[\"organGermanGisUpper\"] = \"\\uEE08\";\n    // U+EE17  German organ tablature small H\n    Glyphs[\"organGermanHLower\"] = \"\\uEE17\";\n    // U+EE0B  German organ tablature great H\n    Glyphs[\"organGermanHUpper\"] = \"\\uEE0B\";\n    // U+EE28  Minima\n    Glyphs[\"organGermanMinima\"] = \"\\uEE28\";\n    // U+EE20  Minima Rest\n    Glyphs[\"organGermanMinimaRest\"] = \"\\uEE20\";\n    // U+EE1A  Combining single octave line below\n    Glyphs[\"organGermanOctaveDown\"] = \"\\uEE1A\";\n    // U+EE18  Combining single octave line above\n    Glyphs[\"organGermanOctaveUp\"] = \"\\uEE18\";\n    // U+EE27  Semibrevis\n    Glyphs[\"organGermanSemibrevis\"] = \"\\uEE27\";\n    // U+EE1F  Semibrevis Rest\n    Glyphs[\"organGermanSemibrevisRest\"] = \"\\uEE1F\";\n    // U+EE2B  Semifusa\n    Glyphs[\"organGermanSemifusa\"] = \"\\uEE2B\";\n    // U+EE23  Semifusa Rest\n    Glyphs[\"organGermanSemifusaRest\"] = \"\\uEE23\";\n    // U+EE29  Semiminima\n    Glyphs[\"organGermanSemiminima\"] = \"\\uEE29\";\n    // U+EE21  Semiminima Rest\n    Glyphs[\"organGermanSemiminimaRest\"] = \"\\uEE21\";\n    // U+EE1B  Tie\n    Glyphs[\"organGermanTie\"] = \"\\uEE1B\";\n    // U+E59A  Ornament bottom left concave stroke\n    Glyphs[\"ornamentBottomLeftConcaveStroke\"] = \"\\uE59A\";\n    // U+E59B  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLarge\"] = \"\\uE59B\";\n    // U+1D1A1  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLargeAlternate\"] = \"\\uD834\\uDDA1\";\n    // U+E59C  Ornament bottom left convex stroke\n    Glyphs[\"ornamentBottomLeftConvexStroke\"] = \"\\uE59C\";\n    // U+E5A7  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStroke\"] = \"\\uE5A7\";\n    // U+1D19F  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStrokeAlternate\"] = \"\\uD834\\uDD9F\";\n    // U+E5A8  Ornament bottom right convex stroke\n    Glyphs[\"ornamentBottomRightConvexStroke\"] = \"\\uE5A8\";\n    // U+E581  Comma\n    Glyphs[\"ornamentComma\"] = \"\\uE581\";\n    // U+E57E  Double oblique straight lines NW-SE\n    Glyphs[\"ornamentDoubleObliqueLinesAfterNote\"] = \"\\uE57E\";\n    // U+E57D  Double oblique straight lines SW-NE\n    Glyphs[\"ornamentDoubleObliqueLinesBeforeNote\"] = \"\\uE57D\";\n    // U+E578  Curve below\n    Glyphs[\"ornamentDownCurve\"] = \"\\uE578\";\n    // U+E56F  Haydn ornament\n    Glyphs[\"ornamentHaydn\"] = \"\\uE56F\";\n    // U+E592  Ornament high left concave stroke\n    Glyphs[\"ornamentHighLeftConcaveStroke\"] = \"\\uE592\";\n    // U+E593  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStroke\"] = \"\\uE593\";\n    // U+1D1A2  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStrokeAlternate\"] = \"\\uD834\\uDDA2\";\n    // U+E5A2  Ornament high right concave stroke\n    Glyphs[\"ornamentHighRightConcaveStroke\"] = \"\\uE5A2\";\n    // U+E5A3  Ornament high right convex stroke\n    Glyphs[\"ornamentHighRightConvexStroke\"] = \"\\uE5A3\";\n    // U+E576  Hook after note\n    Glyphs[\"ornamentHookAfterNote\"] = \"\\uE576\";\n    // U+E575  Hook before note\n    Glyphs[\"ornamentHookBeforeNote\"] = \"\\uE575\";\n    // U+E572  Left-facing half circle\n    Glyphs[\"ornamentLeftFacingHalfCircle\"] = \"\\uE572\";\n    // U+E574  Left-facing hook\n    Glyphs[\"ornamentLeftFacingHook\"] = \"\\uE574\";\n    // U+E597  Ornament left +\n    Glyphs[\"ornamentLeftPlus\"] = \"\\uE597\";\n    // U+E596  Ornament left shake t\n    Glyphs[\"ornamentLeftShakeT\"] = \"\\uE596\";\n    // U+E594  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStroke\"] = \"\\uE594\";\n    // U+1D19B  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStrokeAlternate\"] = \"\\uD834\\uDD9B\";\n    // U+E595  Ornament left vertical stroke with cross (+)\n    Glyphs[\"ornamentLeftVerticalStrokeWithCross\"] = \"\\uE595\";\n    // U+E598  Ornament low left concave stroke\n    Glyphs[\"ornamentLowLeftConcaveStroke\"] = \"\\uE598\";\n    // U+E599  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStroke\"] = \"\\uE599\";\n    // U+1D1A4  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStrokeAlternate\"] = \"\\uD834\\uDDA4\";\n    // U+E5A5  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStroke\"] = \"\\uE5A5\";\n    // U+1D1A3  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStrokeAlternate\"] = \"\\uD834\\uDDA3\";\n    // U+E5A6  Ornament low right convex stroke\n    Glyphs[\"ornamentLowRightConvexStroke\"] = \"\\uE5A6\";\n    // U+E59F  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStroke\"] = \"\\uE59F\";\n    // U+1D1A0  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStrokeAlternate\"] = \"\\uD834\\uDDA0\";\n    // U+E56D  Mordent\n    Glyphs[\"ornamentMordent\"] = \"\\uE56D\";\n    // U+E57C  Oblique straight line NW-SE\n    Glyphs[\"ornamentObliqueLineAfterNote\"] = \"\\uE57C\";\n    // U+E57B  Oblique straight line SW-NE\n    Glyphs[\"ornamentObliqueLineBeforeNote\"] = \"\\uE57B\";\n    // U+E580  Oblique straight line tilted NW-SE\n    Glyphs[\"ornamentObliqueLineHorizAfterNote\"] = \"\\uE580\";\n    // U+E57F  Oblique straight line tilted SW-NE\n    Glyphs[\"ornamentObliqueLineHorizBeforeNote\"] = \"\\uE57F\";\n    // U+EA21  Oriscus\n    Glyphs[\"ornamentOriscus\"] = \"\\uEA21\";\n    // U+E588  Pincé (Couperin)\n    Glyphs[\"ornamentPinceCouperin\"] = \"\\uE588\";\n    // U+E570  Port de voix\n    Glyphs[\"ornamentPortDeVoixV\"] = \"\\uE570\";\n    // U+E5B2  Supported appoggiatura trill\n    Glyphs[\"ornamentPrecompAppoggTrill\"] = \"\\uE5B2\";\n    // U+E5B3  Supported appoggiatura trill with two-note suffix\n    Glyphs[\"ornamentPrecompAppoggTrillSuffix\"] = \"\\uE5B3\";\n    // U+E5BE  Cadence\n    Glyphs[\"ornamentPrecompCadence\"] = \"\\uE5BE\";\n    // U+E5C1  Cadence with upper prefix\n    Glyphs[\"ornamentPrecompCadenceUpperPrefix\"] = \"\\uE5C1\";\n    // U+E5C2  Cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompCadenceUpperPrefixTurn\"] = \"\\uE5C2\";\n    // U+E5BF  Cadence with turn\n    Glyphs[\"ornamentPrecompCadenceWithTurn\"] = \"\\uE5BF\";\n    // U+E5B1  Descending slide\n    Glyphs[\"ornamentPrecompDescendingSlide\"] = \"\\uE5B1\";\n    // U+E5C0  Double cadence with lower prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceLowerPrefix\"] = \"\\uE5C0\";\n    // U+E5C3  Double cadence with upper prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefix\"] = \"\\uE5C3\";\n    // U+E5C4  Double cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefixTurn\"] = \"\\uE5C4\";\n    // U+E5C7  Inverted mordent with upper prefix\n    Glyphs[\"ornamentPrecompInvertedMordentUpperPrefix\"] = \"\\uE5C7\";\n    // U+E5C5  Mordent with release\n    Glyphs[\"ornamentPrecompMordentRelease\"] = \"\\uE5C5\";\n    // U+E5C6  Mordent with upper prefix\n    Glyphs[\"ornamentPrecompMordentUpperPrefix\"] = \"\\uE5C6\";\n    // U+E5BC  Pre-beat port de voix followed by multiple mordent (Dandrieu)\n    Glyphs[\"ornamentPrecompPortDeVoixMordent\"] = \"\\uE5BC\";\n    // U+E5B0  Slide\n    Glyphs[\"ornamentPrecompSlide\"] = \"\\uE5B0\";\n    // U+E5B8  Slide-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompSlideTrillBach\"] = \"\\uE5B8\";\n    // U+E5B5  Slide-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompSlideTrillDAnglebert\"] = \"\\uE5B5\";\n    // U+E5B6  Slide-trill with one-note suffix (Marpurg)\n    Glyphs[\"ornamentPrecompSlideTrillMarpurg\"] = \"\\uE5B6\";\n    // U+E5B9  Slide-trill (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillMuffat\"] = \"\\uE5B9\";\n    // U+E5BA  Slide-trill with two-note suffix (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillSuffixMuffat\"] = \"\\uE5BA\";\n    // U+E5C8  Trill with lower suffix\n    Glyphs[\"ornamentPrecompTrillLowerSuffix\"] = \"\\uE5C8\";\n    // U+E5BB  Trill with two-note suffix (Dandrieu)\n    Glyphs[\"ornamentPrecompTrillSuffixDandrieu\"] = \"\\uE5BB\";\n    // U+E5BD  Trill with mordent\n    Glyphs[\"ornamentPrecompTrillWithMordent\"] = \"\\uE5BD\";\n    // U+E5B7  Turn-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompTurnTrillBach\"] = \"\\uE5B7\";\n    // U+E5B4  Turn-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompTurnTrillDAnglebert\"] = \"\\uE5B4\";\n    // U+EA20  Quilisma\n    Glyphs[\"ornamentQuilisma\"] = \"\\uEA20\";\n    // U+E571  Right-facing half circle\n    Glyphs[\"ornamentRightFacingHalfCircle\"] = \"\\uE571\";\n    // U+E573  Right-facing hook\n    Glyphs[\"ornamentRightFacingHook\"] = \"\\uE573\";\n    // U+E5A4  Ornament right vertical stroke\n    Glyphs[\"ornamentRightVerticalStroke\"] = \"\\uE5A4\";\n    // U+E587  Schleifer (long mordent)\n    Glyphs[\"ornamentSchleifer\"] = \"\\uE587\";\n    // U+E582  Shake\n    Glyphs[\"ornamentShake3\"] = \"\\uE582\";\n    // U+E584  Shake (Muffat)\n    Glyphs[\"ornamentShakeMuffat1\"] = \"\\uE584\";\n    // U+E57A  Short oblique straight line NW-SE\n    Glyphs[\"ornamentShortObliqueLineAfterNote\"] = \"\\uE57A\";\n    // U+E579  Short oblique straight line SW-NE\n    Glyphs[\"ornamentShortObliqueLineBeforeNote\"] = \"\\uE579\";\n    // U+E56C  Short trill\n    Glyphs[\"ornamentShortTrill\"] = \"\\uE56C\";\n    // U+E590  Ornament top left concave stroke\n    Glyphs[\"ornamentTopLeftConcaveStroke\"] = \"\\uE590\";\n    // U+E591  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStroke\"] = \"\\uE591\";\n    // U+1D1A5  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStrokeAlternate\"] = \"\\uD834\\uDDA5\";\n    // U+E5A0  Ornament top right concave stroke\n    Glyphs[\"ornamentTopRightConcaveStroke\"] = \"\\uE5A0\";\n    // U+E5A1  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStroke\"] = \"\\uE5A1\";\n    // U+1D19E  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStrokeAlternate\"] = \"\\uD834\\uDD9E\";\n    // U+E56E  Tremblement\n    Glyphs[\"ornamentTremblement\"] = \"\\uE56E\";\n    // U+E589  Tremblement appuyé (Couperin)\n    Glyphs[\"ornamentTremblementCouperin\"] = \"\\uE589\";\n    // U+E566  Trill\n    Glyphs[\"ornamentTrill\"] = \"\\uE566\";\n    // U+1D196  Trill\n    Glyphs[\"ornamentTrillAlternate\"] = \"\\uD834\\uDD96\";\n    // U+E567  Turn\n    Glyphs[\"ornamentTurn\"] = \"\\uE567\";\n    // U+1D197  Turn\n    Glyphs[\"ornamentTurnAlternate\"] = \"\\uD834\\uDD97\";\n    // U+E568  Inverted turn\n    Glyphs[\"ornamentTurnInverted\"] = \"\\uE568\";\n    // U+1D198  Inverted turn\n    Glyphs[\"ornamentTurnInvertedAlternate\"] = \"\\uD834\\uDD98\";\n    // U+E569  Turn with slash\n    Glyphs[\"ornamentTurnSlash\"] = \"\\uE569\";\n    // U+1D199  Turn with slash\n    Glyphs[\"ornamentTurnSlashAlternate\"] = \"\\uD834\\uDD99\";\n    // U+E56A  Turn up\n    Glyphs[\"ornamentTurnUp\"] = \"\\uE56A\";\n    // U+1D19A  Turn up\n    Glyphs[\"ornamentTurnUpAlternate\"] = \"\\uD834\\uDD9A\";\n    // U+E56B  Inverted turn up\n    Glyphs[\"ornamentTurnUpS\"] = \"\\uE56B\";\n    // U+E577  Curve above\n    Glyphs[\"ornamentUpCurve\"] = \"\\uE577\";\n    // U+E583  Vertical line\n    Glyphs[\"ornamentVerticalLine\"] = \"\\uE583\";\n    // U+E59D  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEnd\"] = \"\\uE59D\";\n    // U+1D19C  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEndAlternate\"] = \"\\uD834\\uDD9C\";\n    // U+E59E  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEnd\"] = \"\\uE59E\";\n    // U+1D19D  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEndAlternate\"] = \"\\uD834\\uDD9D\";\n    // U+E510  Ottava\n    Glyphs[\"ottava\"] = \"\\uE510\";\n    // U+E511  Ottava alta\n    Glyphs[\"ottavaAlta\"] = \"\\uE511\";\n    // U+1D136  Ottava alta\n    Glyphs[\"ottavaAltaAlternate\"] = \"\\uD834\\uDD36\";\n    // U+E512  Ottava bassa\n    Glyphs[\"ottavaBassa\"] = \"\\uE512\";\n    // U+1D137  Ottava bassa\n    Glyphs[\"ottavaBassaAlternate\"] = \"\\uD834\\uDD37\";\n    // U+E513  Ottava bassa (ba)\n    Glyphs[\"ottavaBassaBa\"] = \"\\uE513\";\n    // U+E51C  Ottava bassa (8vb)\n    Glyphs[\"ottavaBassaVb\"] = \"\\uE51C\";\n    // U+E22B  Penderecki unmeasured tremolo\n    Glyphs[\"pendereckiTremolo\"] = \"\\uE22B\";\n    // U+E717  Agogo\n    Glyphs[\"pictAgogo\"] = \"\\uE717\";\n    // U+E712  Almglocken\n    Glyphs[\"pictAlmglocken\"] = \"\\uE712\";\n    // U+E701  Anvil\n    Glyphs[\"pictAnvil\"] = \"\\uE701\";\n    // U+E6C3  Bamboo tube chimes\n    Glyphs[\"pictBambooChimes\"] = \"\\uE6C3\";\n    // U+E6FB  Bamboo scraper\n    Glyphs[\"pictBambooScraper\"] = \"\\uE6FB\";\n    // U+E6D4  Bass drum\n    Glyphs[\"pictBassDrum\"] = \"\\uE6D4\";\n    // U+E6D5  Bass drum on side\n    Glyphs[\"pictBassDrumOnSide\"] = \"\\uE6D5\";\n    // U+E7DE  Bow\n    Glyphs[\"pictBeaterBow\"] = \"\\uE7DE\";\n    // U+E7EB  Box for percussion beater\n    Glyphs[\"pictBeaterBox\"] = \"\\uE7EB\";\n    // U+E7DA  Brass mallets down\n    Glyphs[\"pictBeaterBrassMalletsDown\"] = \"\\uE7DA\";\n    // U+E7EE  Brass mallets left\n    Glyphs[\"pictBeaterBrassMalletsLeft\"] = \"\\uE7EE\";\n    // U+E7ED  Brass mallets right\n    Glyphs[\"pictBeaterBrassMalletsRight\"] = \"\\uE7ED\";\n    // U+E7D9  Brass mallets up\n    Glyphs[\"pictBeaterBrassMalletsUp\"] = \"\\uE7D9\";\n    // U+E7EA  Combining dashed circle for round beaters (plated)\n    Glyphs[\"pictBeaterCombiningDashedCircle\"] = \"\\uE7EA\";\n    // U+E7E9  Combining parentheses for round beaters (padded)\n    Glyphs[\"pictBeaterCombiningParentheses\"] = \"\\uE7E9\";\n    // U+E7A1  Double bass drum stick down\n    Glyphs[\"pictBeaterDoubleBassDrumDown\"] = \"\\uE7A1\";\n    // U+E7A0  Double bass drum stick up\n    Glyphs[\"pictBeaterDoubleBassDrumUp\"] = \"\\uE7A0\";\n    // U+E7E4  Finger\n    Glyphs[\"pictBeaterFinger\"] = \"\\uE7E4\";\n    // U+E7E6  Fingernails\n    Glyphs[\"pictBeaterFingernails\"] = \"\\uE7E6\";\n    // U+E7E5  Fist\n    Glyphs[\"pictBeaterFist\"] = \"\\uE7E5\";\n    // U+E7DD  Guiro scraper\n    Glyphs[\"pictBeaterGuiroScraper\"] = \"\\uE7DD\";\n    // U+E7E1  Hammer\n    Glyphs[\"pictBeaterHammer\"] = \"\\uE7E1\";\n    // U+E7D0  Metal hammer, down\n    Glyphs[\"pictBeaterHammerMetalDown\"] = \"\\uE7D0\";\n    // U+E7CF  Metal hammer, up\n    Glyphs[\"pictBeaterHammerMetalUp\"] = \"\\uE7CF\";\n    // U+E7CE  Plastic hammer, down\n    Glyphs[\"pictBeaterHammerPlasticDown\"] = \"\\uE7CE\";\n    // U+E7CD  Plastic hammer, up\n    Glyphs[\"pictBeaterHammerPlasticUp\"] = \"\\uE7CD\";\n    // U+E7CC  Wooden hammer, down\n    Glyphs[\"pictBeaterHammerWoodDown\"] = \"\\uE7CC\";\n    // U+E7CB  Wooden hammer, up\n    Glyphs[\"pictBeaterHammerWoodUp\"] = \"\\uE7CB\";\n    // U+E7E3  Hand\n    Glyphs[\"pictBeaterHand\"] = \"\\uE7E3\";\n    // U+E79D  Hard bass drum stick down\n    Glyphs[\"pictBeaterHardBassDrumDown\"] = \"\\uE79D\";\n    // U+E79C  Hard bass drum stick up\n    Glyphs[\"pictBeaterHardBassDrumUp\"] = \"\\uE79C\";\n    // U+E785  Hard glockenspiel stick down\n    Glyphs[\"pictBeaterHardGlockenspielDown\"] = \"\\uE785\";\n    // U+E787  Hard glockenspiel stick left\n    Glyphs[\"pictBeaterHardGlockenspielLeft\"] = \"\\uE787\";\n    // U+E786  Hard glockenspiel stick right\n    Glyphs[\"pictBeaterHardGlockenspielRight\"] = \"\\uE786\";\n    // U+E784  Hard glockenspiel stick up\n    Glyphs[\"pictBeaterHardGlockenspielUp\"] = \"\\uE784\";\n    // U+E791  Hard timpani stick down\n    Glyphs[\"pictBeaterHardTimpaniDown\"] = \"\\uE791\";\n    // U+E793  Hard timpani stick left\n    Glyphs[\"pictBeaterHardTimpaniLeft\"] = \"\\uE793\";\n    // U+E792  Hard timpani stick right\n    Glyphs[\"pictBeaterHardTimpaniRight\"] = \"\\uE792\";\n    // U+E790  Hard timpani stick up\n    Glyphs[\"pictBeaterHardTimpaniUp\"] = \"\\uE790\";\n    // U+E779  Hard xylophone stick down\n    Glyphs[\"pictBeaterHardXylophoneDown\"] = \"\\uE779\";\n    // U+E77B  Hard xylophone stick left\n    Glyphs[\"pictBeaterHardXylophoneLeft\"] = \"\\uE77B\";\n    // U+E77A  Hard xylophone stick right\n    Glyphs[\"pictBeaterHardXylophoneRight\"] = \"\\uE77A\";\n    // U+E778  Hard xylophone stick up\n    Glyphs[\"pictBeaterHardXylophoneUp\"] = \"\\uE778\";\n    // U+E7AB  Hard yarn beater down\n    Glyphs[\"pictBeaterHardYarnDown\"] = \"\\uE7AB\";\n    // U+E7AD  Hard yarn beater left\n    Glyphs[\"pictBeaterHardYarnLeft\"] = \"\\uE7AD\";\n    // U+E7AC  Hard yarn beater right\n    Glyphs[\"pictBeaterHardYarnRight\"] = \"\\uE7AC\";\n    // U+E7AA  Hard yarn beater up\n    Glyphs[\"pictBeaterHardYarnUp\"] = \"\\uE7AA\";\n    // U+E7D4  Jazz sticks down\n    Glyphs[\"pictBeaterJazzSticksDown\"] = \"\\uE7D4\";\n    // U+E7D3  Jazz sticks up\n    Glyphs[\"pictBeaterJazzSticksUp\"] = \"\\uE7D3\";\n    // U+E7E2  Knitting needle\n    Glyphs[\"pictBeaterKnittingNeedle\"] = \"\\uE7E2\";\n    // U+E7DF  Chime hammer up\n    Glyphs[\"pictBeaterMallet\"] = \"\\uE7DF\";\n    // U+E7EC  Chime hammer down\n    Glyphs[\"pictBeaterMalletDown\"] = \"\\uE7EC\";\n    // U+E79B  Medium bass drum stick down\n    Glyphs[\"pictBeaterMediumBassDrumDown\"] = \"\\uE79B\";\n    // U+E79A  Medium bass drum stick up\n    Glyphs[\"pictBeaterMediumBassDrumUp\"] = \"\\uE79A\";\n    // U+E78D  Medium timpani stick down\n    Glyphs[\"pictBeaterMediumTimpaniDown\"] = \"\\uE78D\";\n    // U+E78F  Medium timpani stick left\n    Glyphs[\"pictBeaterMediumTimpaniLeft\"] = \"\\uE78F\";\n    // U+E78E  Medium timpani stick right\n    Glyphs[\"pictBeaterMediumTimpaniRight\"] = \"\\uE78E\";\n    // U+E78C  Medium timpani stick up\n    Glyphs[\"pictBeaterMediumTimpaniUp\"] = \"\\uE78C\";\n    // U+E775  Medium xylophone stick down\n    Glyphs[\"pictBeaterMediumXylophoneDown\"] = \"\\uE775\";\n    // U+E777  Medium xylophone stick left\n    Glyphs[\"pictBeaterMediumXylophoneLeft\"] = \"\\uE777\";\n    // U+E776  Medium xylophone stick right\n    Glyphs[\"pictBeaterMediumXylophoneRight\"] = \"\\uE776\";\n    // U+E774  Medium xylophone stick up\n    Glyphs[\"pictBeaterMediumXylophoneUp\"] = \"\\uE774\";\n    // U+E7A7  Medium yarn beater down\n    Glyphs[\"pictBeaterMediumYarnDown\"] = \"\\uE7A7\";\n    // U+E7A9  Medium yarn beater left\n    Glyphs[\"pictBeaterMediumYarnLeft\"] = \"\\uE7A9\";\n    // U+E7A8  Medium yarn beater right\n    Glyphs[\"pictBeaterMediumYarnRight\"] = \"\\uE7A8\";\n    // U+E7A6  Medium yarn beater up\n    Glyphs[\"pictBeaterMediumYarnUp\"] = \"\\uE7A6\";\n    // U+E79F  Metal bass drum stick down\n    Glyphs[\"pictBeaterMetalBassDrumDown\"] = \"\\uE79F\";\n    // U+E79E  Metal bass drum stick up\n    Glyphs[\"pictBeaterMetalBassDrumUp\"] = \"\\uE79E\";\n    // U+E7C8  Metal beater down\n    Glyphs[\"pictBeaterMetalDown\"] = \"\\uE7C8\";\n    // U+E7E0  Metal hammer\n    Glyphs[\"pictBeaterMetalHammer\"] = \"\\uE7E0\";\n    // U+E7CA  Metal beater, left\n    Glyphs[\"pictBeaterMetalLeft\"] = \"\\uE7CA\";\n    // U+E7C9  Metal beater, right\n    Glyphs[\"pictBeaterMetalRight\"] = \"\\uE7C9\";\n    // U+E7C7  Metal beater, up\n    Glyphs[\"pictBeaterMetalUp\"] = \"\\uE7C7\";\n    // U+E7D2  Snare sticks down\n    Glyphs[\"pictBeaterSnareSticksDown\"] = \"\\uE7D2\";\n    // U+E7D1  Snare sticks up\n    Glyphs[\"pictBeaterSnareSticksUp\"] = \"\\uE7D1\";\n    // U+E799  Soft bass drum stick down\n    Glyphs[\"pictBeaterSoftBassDrumDown\"] = \"\\uE799\";\n    // U+E798  Soft bass drum stick up\n    Glyphs[\"pictBeaterSoftBassDrumUp\"] = \"\\uE798\";\n    // U+E781  Soft glockenspiel stick down\n    Glyphs[\"pictBeaterSoftGlockenspielDown\"] = \"\\uE781\";\n    // U+E783  Soft glockenspiel stick left\n    Glyphs[\"pictBeaterSoftGlockenspielLeft\"] = \"\\uE783\";\n    // U+E782  Soft glockenspiel stick right\n    Glyphs[\"pictBeaterSoftGlockenspielRight\"] = \"\\uE782\";\n    // U+E780  Soft glockenspiel stick up\n    Glyphs[\"pictBeaterSoftGlockenspielUp\"] = \"\\uE780\";\n    // U+E789  Soft timpani stick down\n    Glyphs[\"pictBeaterSoftTimpaniDown\"] = \"\\uE789\";\n    // U+E78B  Soft timpani stick left\n    Glyphs[\"pictBeaterSoftTimpaniLeft\"] = \"\\uE78B\";\n    // U+E78A  Soft timpani stick right\n    Glyphs[\"pictBeaterSoftTimpaniRight\"] = \"\\uE78A\";\n    // U+E788  Soft timpani stick up\n    Glyphs[\"pictBeaterSoftTimpaniUp\"] = \"\\uE788\";\n    // U+E7DB  Soft xylophone beaters\n    Glyphs[\"pictBeaterSoftXylophone\"] = \"\\uE7DB\";\n    // U+E771  Soft xylophone stick down\n    Glyphs[\"pictBeaterSoftXylophoneDown\"] = \"\\uE771\";\n    // U+E773  Soft xylophone stick left\n    Glyphs[\"pictBeaterSoftXylophoneLeft\"] = \"\\uE773\";\n    // U+E772  Soft xylophone stick right\n    Glyphs[\"pictBeaterSoftXylophoneRight\"] = \"\\uE772\";\n    // U+E770  Soft xylophone stick up\n    Glyphs[\"pictBeaterSoftXylophoneUp\"] = \"\\uE770\";\n    // U+E7A3  Soft yarn beater down\n    Glyphs[\"pictBeaterSoftYarnDown\"] = \"\\uE7A3\";\n    // U+E7A5  Soft yarn beater left\n    Glyphs[\"pictBeaterSoftYarnLeft\"] = \"\\uE7A5\";\n    // U+E7A4  Soft yarn beater right\n    Glyphs[\"pictBeaterSoftYarnRight\"] = \"\\uE7A4\";\n    // U+E7A2  Soft yarn beater up\n    Glyphs[\"pictBeaterSoftYarnUp\"] = \"\\uE7A2\";\n    // U+E7DC  Spoon-shaped wooden mallet\n    Glyphs[\"pictBeaterSpoonWoodenMallet\"] = \"\\uE7DC\";\n    // U+E7AF  Superball beater down\n    Glyphs[\"pictBeaterSuperballDown\"] = \"\\uE7AF\";\n    // U+E7B1  Superball beater left\n    Glyphs[\"pictBeaterSuperballLeft\"] = \"\\uE7B1\";\n    // U+E7B0  Superball beater right\n    Glyphs[\"pictBeaterSuperballRight\"] = \"\\uE7B0\";\n    // U+E7AE  Superball beater up\n    Glyphs[\"pictBeaterSuperballUp\"] = \"\\uE7AE\";\n    // U+E7D6  Triangle beater down\n    Glyphs[\"pictBeaterTriangleDown\"] = \"\\uE7D6\";\n    // U+E7EF  Triangle beater plain\n    Glyphs[\"pictBeaterTrianglePlain\"] = \"\\uE7EF\";\n    // U+E7D5  Triangle beater up\n    Glyphs[\"pictBeaterTriangleUp\"] = \"\\uE7D5\";\n    // U+E7D8  Wire brushes down\n    Glyphs[\"pictBeaterWireBrushesDown\"] = \"\\uE7D8\";\n    // U+E7D7  Wire brushes up\n    Glyphs[\"pictBeaterWireBrushesUp\"] = \"\\uE7D7\";\n    // U+E795  Wood timpani stick down\n    Glyphs[\"pictBeaterWoodTimpaniDown\"] = \"\\uE795\";\n    // U+E797  Wood timpani stick left\n    Glyphs[\"pictBeaterWoodTimpaniLeft\"] = \"\\uE797\";\n    // U+E796  Wood timpani stick right\n    Glyphs[\"pictBeaterWoodTimpaniRight\"] = \"\\uE796\";\n    // U+E794  Wood timpani stick up\n    Glyphs[\"pictBeaterWoodTimpaniUp\"] = \"\\uE794\";\n    // U+E77D  Wood xylophone stick down\n    Glyphs[\"pictBeaterWoodXylophoneDown\"] = \"\\uE77D\";\n    // U+E77F  Wood xylophone stick left\n    Glyphs[\"pictBeaterWoodXylophoneLeft\"] = \"\\uE77F\";\n    // U+E77E  Wood xylophone stick right\n    Glyphs[\"pictBeaterWoodXylophoneRight\"] = \"\\uE77E\";\n    // U+E77C  Wood xylophone stick up\n    Glyphs[\"pictBeaterWoodXylophoneUp\"] = \"\\uE77C\";\n    // U+E714  Bell\n    Glyphs[\"pictBell\"] = \"\\uE714\";\n    // U+E72A  Bell of cymbal\n    Glyphs[\"pictBellOfCymbal\"] = \"\\uE72A\";\n    // U+E713  Bell plate\n    Glyphs[\"pictBellPlate\"] = \"\\uE713\";\n    // U+E71A  Bell tree\n    Glyphs[\"pictBellTree\"] = \"\\uE71A\";\n    // U+E751  Bird whistle\n    Glyphs[\"pictBirdWhistle\"] = \"\\uE751\";\n    // U+E6F7  Board clapper\n    Glyphs[\"pictBoardClapper\"] = \"\\uE6F7\";\n    // U+E6DD  Bongos\n    Glyphs[\"pictBongos\"] = \"\\uE6DD\";\n    // U+E6E1  Brake drum\n    Glyphs[\"pictBrakeDrum\"] = \"\\uE6E1\";\n    // U+E743  Cabasa\n    Glyphs[\"pictCabasa\"] = \"\\uE743\";\n    // U+E761  Cannon\n    Glyphs[\"pictCannon\"] = \"\\uE761\";\n    // U+E755  Car horn\n    Glyphs[\"pictCarHorn\"] = \"\\uE755\";\n    // U+E6F8  Castanets\n    Glyphs[\"pictCastanets\"] = \"\\uE6F8\";\n    // U+E6F9  Castanets with handle\n    Glyphs[\"pictCastanetsWithHandle\"] = \"\\uE6F9\";\n    // U+E6B0  Celesta\n    Glyphs[\"pictCelesta\"] = \"\\uE6B0\";\n    // U+E716  Cencerro\n    Glyphs[\"pictCencerro\"] = \"\\uE716\";\n    // U+E7FE  Center (Weinberg)\n    Glyphs[\"pictCenter1\"] = \"\\uE7FE\";\n    // U+E7FF  Center (Ghent)\n    Glyphs[\"pictCenter2\"] = \"\\uE7FF\";\n    // U+E800  Center (Caltabiano)\n    Glyphs[\"pictCenter3\"] = \"\\uE800\";\n    // U+E748  Chain rattle\n    Glyphs[\"pictChainRattle\"] = \"\\uE748\";\n    // U+E6C2  Chimes\n    Glyphs[\"pictChimes\"] = \"\\uE6C2\";\n    // U+E726  Chinese cymbal\n    Glyphs[\"pictChineseCymbal\"] = \"\\uE726\";\n    // U+E805  Choke (Weinberg)\n    Glyphs[\"pictChokeCymbal\"] = \"\\uE805\";\n    // U+E6F2  Claves\n    Glyphs[\"pictClaves\"] = \"\\uE6F2\";\n    // U+E7E7  Coins\n    Glyphs[\"pictCoins\"] = \"\\uE7E7\";\n    // U+E6DE  Conga\n    Glyphs[\"pictConga\"] = \"\\uE6DE\";\n    // U+E711  Cow bell\n    Glyphs[\"pictCowBell\"] = \"\\uE711\";\n    // U+E720  Crash cymbals\n    Glyphs[\"pictCrashCymbals\"] = \"\\uE720\";\n    // U+E6AE  Crotales\n    Glyphs[\"pictCrotales\"] = \"\\uE6AE\";\n    // U+E80C  Combining crush for stem\n    Glyphs[\"pictCrushStem\"] = \"\\uE80C\";\n    // U+E6E4  Cuica\n    Glyphs[\"pictCuica\"] = \"\\uE6E4\";\n    // U+E728  Cymbal tongs\n    Glyphs[\"pictCymbalTongs\"] = \"\\uE728\";\n    // U+E7F9  Damp\n    Glyphs[\"pictDamp1\"] = \"\\uE7F9\";\n    // U+E7FA  Damp 2\n    Glyphs[\"pictDamp2\"] = \"\\uE7FA\";\n    // U+E7FB  Damp 3\n    Glyphs[\"pictDamp3\"] = \"\\uE7FB\";\n    // U+E7FC  Damp 4\n    Glyphs[\"pictDamp4\"] = \"\\uE7FC\";\n    // U+E80D  Combining X for stem (dead note)\n    Glyphs[\"pictDeadNoteStem\"] = \"\\uE80D\";\n    // U+E7E8  Drum stick\n    Glyphs[\"pictDrumStick\"] = \"\\uE7E8\";\n    // U+E757  Duck call\n    Glyphs[\"pictDuckCall\"] = \"\\uE757\";\n    // U+E729  Edge of cymbal\n    Glyphs[\"pictEdgeOfCymbal\"] = \"\\uE729\";\n    // U+E6A9  Empty trapezoid\n    Glyphs[\"pictEmptyTrap\"] = \"\\uE6A9\";\n    // U+E727  Finger cymbals\n    Glyphs[\"pictFingerCymbals\"] = \"\\uE727\";\n    // U+E740  Flexatone\n    Glyphs[\"pictFlexatone\"] = \"\\uE740\";\n    // U+E6F5  Football rattle\n    Glyphs[\"pictFootballRatchet\"] = \"\\uE6F5\";\n    // U+E765  Glass harmonica\n    Glyphs[\"pictGlassHarmonica\"] = \"\\uE765\";\n    // U+E764  Glass harp\n    Glyphs[\"pictGlassHarp\"] = \"\\uE764\";\n    // U+E6C6  Glass plate chimes\n    Glyphs[\"pictGlassPlateChimes\"] = \"\\uE6C6\";\n    // U+E6C5  Glass tube chimes\n    Glyphs[\"pictGlassTubeChimes\"] = \"\\uE6C5\";\n    // U+E6A0  Glockenspiel\n    Glyphs[\"pictGlsp\"] = \"\\uE6A0\";\n    // U+E6AA  Glockenspiel (Smith Brindle)\n    Glyphs[\"pictGlspSmithBrindle\"] = \"\\uE6AA\";\n    // U+E6E2  Goblet drum (djembe, dumbek)\n    Glyphs[\"pictGobletDrum\"] = \"\\uE6E2\";\n    // U+E732  Gong\n    Glyphs[\"pictGong\"] = \"\\uE732\";\n    // U+E733  Gong with button (nipple)\n    Glyphs[\"pictGongWithButton\"] = \"\\uE733\";\n    // U+E6F3  Guiro\n    Glyphs[\"pictGuiro\"] = \"\\uE6F3\";\n    // U+E7C4  Hard gum beater, down\n    Glyphs[\"pictGumHardDown\"] = \"\\uE7C4\";\n    // U+E7C6  Hard gum beater, left\n    Glyphs[\"pictGumHardLeft\"] = \"\\uE7C6\";\n    // U+E7C5  Hard gum beater, right\n    Glyphs[\"pictGumHardRight\"] = \"\\uE7C5\";\n    // U+E7C3  Hard gum beater, up\n    Glyphs[\"pictGumHardUp\"] = \"\\uE7C3\";\n    // U+E7C0  Medium gum beater, down\n    Glyphs[\"pictGumMediumDown\"] = \"\\uE7C0\";\n    // U+E7C2  Medium gum beater, left\n    Glyphs[\"pictGumMediumLeft\"] = \"\\uE7C2\";\n    // U+E7C1  Medium gum beater, right\n    Glyphs[\"pictGumMediumRight\"] = \"\\uE7C1\";\n    // U+E7BF  Medium gum beater, up\n    Glyphs[\"pictGumMediumUp\"] = \"\\uE7BF\";\n    // U+E7BC  Soft gum beater, down\n    Glyphs[\"pictGumSoftDown\"] = \"\\uE7BC\";\n    // U+E7BE  Soft gum beater, left\n    Glyphs[\"pictGumSoftLeft\"] = \"\\uE7BE\";\n    // U+E7BD  Soft gum beater, right\n    Glyphs[\"pictGumSoftRight\"] = \"\\uE7BD\";\n    // U+E7BB  Soft gum beater, up\n    Glyphs[\"pictGumSoftUp\"] = \"\\uE7BB\";\n    // U+E7F6  Half-open\n    Glyphs[\"pictHalfOpen1\"] = \"\\uE7F6\";\n    // U+E7F7  Half-open 2 (Weinberg)\n    Glyphs[\"pictHalfOpen2\"] = \"\\uE7F7\";\n    // U+E715  Handbell\n    Glyphs[\"pictHandbell\"] = \"\\uE715\";\n    // U+E722  Hi-hat\n    Glyphs[\"pictHiHat\"] = \"\\uE722\";\n    // U+E723  Hi-hat cymbals on stand\n    Glyphs[\"pictHiHatOnStand\"] = \"\\uE723\";\n    // U+E767  Jaw harp\n    Glyphs[\"pictJawHarp\"] = \"\\uE767\";\n    // U+E719  Jingle bells\n    Glyphs[\"pictJingleBells\"] = \"\\uE719\";\n    // U+E756  Klaxon horn\n    Glyphs[\"pictKlaxonHorn\"] = \"\\uE756\";\n    // U+E807  Right hand (Agostini)\n    Glyphs[\"pictLeftHandCircle\"] = \"\\uE807\";\n    // U+E763  Lion's roar\n    Glyphs[\"pictLionsRoar\"] = \"\\uE763\";\n    // U+E6B1  Lithophone\n    Glyphs[\"pictLithophone\"] = \"\\uE6B1\";\n    // U+E6DF  Log drum\n    Glyphs[\"pictLogDrum\"] = \"\\uE6DF\";\n    // U+E75A  Lotus flute\n    Glyphs[\"pictLotusFlute\"] = \"\\uE75A\";\n    // U+E6A6  Marimba\n    Glyphs[\"pictMar\"] = \"\\uE6A6\";\n    // U+E6AC  Marimba (Smith Brindle)\n    Glyphs[\"pictMarSmithBrindle\"] = \"\\uE6AC\";\n    // U+E741  Maraca\n    Glyphs[\"pictMaraca\"] = \"\\uE741\";\n    // U+E742  Maracas\n    Glyphs[\"pictMaracas\"] = \"\\uE742\";\n    // U+E759  Megaphone\n    Glyphs[\"pictMegaphone\"] = \"\\uE759\";\n    // U+E6C8  Metal plate chimes\n    Glyphs[\"pictMetalPlateChimes\"] = \"\\uE6C8\";\n    // U+E6C7  Metal tube chimes\n    Glyphs[\"pictMetalTubeChimes\"] = \"\\uE6C7\";\n    // U+E766  Musical saw\n    Glyphs[\"pictMusicalSaw\"] = \"\\uE766\";\n    // U+E804  Normal position (Caltabiano)\n    Glyphs[\"pictNormalPosition\"] = \"\\uE804\";\n    // U+E7F4  On rim\n    Glyphs[\"pictOnRim\"] = \"\\uE7F4\";\n    // U+E7F8  Open\n    Glyphs[\"pictOpen\"] = \"\\uE7F8\";\n    // U+E7F5  Closed / rim shot\n    Glyphs[\"pictOpenRimShot\"] = \"\\uE7F5\";\n    // U+E760  Pistol shot\n    Glyphs[\"pictPistolShot\"] = \"\\uE760\";\n    // U+E752  Police whistle\n    Glyphs[\"pictPoliceWhistle\"] = \"\\uE752\";\n    // U+E6FA  Quijada (jawbone)\n    Glyphs[\"pictQuijada\"] = \"\\uE6FA\";\n    // U+E747  Rainstick\n    Glyphs[\"pictRainstick\"] = \"\\uE747\";\n    // U+E6F4  Ratchet\n    Glyphs[\"pictRatchet\"] = \"\\uE6F4\";\n    // U+E6FC  Reco-reco\n    Glyphs[\"pictRecoReco\"] = \"\\uE6FC\";\n    // U+E806  Left hand (Agostini)\n    Glyphs[\"pictRightHandSquare\"] = \"\\uE806\";\n    // U+E801  Rim or edge (Weinberg)\n    Glyphs[\"pictRim1\"] = \"\\uE801\";\n    // U+E802  Rim (Ghent)\n    Glyphs[\"pictRim2\"] = \"\\uE802\";\n    // U+E803  Rim (Caltabiano)\n    Glyphs[\"pictRim3\"] = \"\\uE803\";\n    // U+E7FD  Rim shot for stem\n    Glyphs[\"pictRimShotOnStem\"] = \"\\uE7FD\";\n    // U+E762  Sandpaper blocks\n    Glyphs[\"pictSandpaperBlocks\"] = \"\\uE762\";\n    // U+E7F3  Scrape around rim (counter-clockwise)\n    Glyphs[\"pictScrapeAroundRim\"] = \"\\uE7F3\";\n    // U+E80E  Scrape around rim (clockwise)\n    Glyphs[\"pictScrapeAroundRimClockwise\"] = \"\\uE80E\";\n    // U+E7F1  Scrape from center to edge\n    Glyphs[\"pictScrapeCenterToEdge\"] = \"\\uE7F1\";\n    // U+E7F2  Scrape from edge to center\n    Glyphs[\"pictScrapeEdgeToCenter\"] = \"\\uE7F2\";\n    // U+E718  Shell bells\n    Glyphs[\"pictShellBells\"] = \"\\uE718\";\n    // U+E6C4  Shell chimes\n    Glyphs[\"pictShellChimes\"] = \"\\uE6C4\";\n    // U+E753  Siren\n    Glyphs[\"pictSiren\"] = \"\\uE753\";\n    // U+E746  Sistrum\n    Glyphs[\"pictSistrum\"] = \"\\uE746\";\n    // U+E724  Sizzle cymbal\n    Glyphs[\"pictSizzleCymbal\"] = \"\\uE724\";\n    // U+E710  Sleigh bell\n    Glyphs[\"pictSleighBell\"] = \"\\uE710\";\n    // U+E734  Slide brush on gong\n    Glyphs[\"pictSlideBrushOnGong\"] = \"\\uE734\";\n    // U+E750  Slide whistle\n    Glyphs[\"pictSlideWhistle\"] = \"\\uE750\";\n    // U+E6E0  Slit drum\n    Glyphs[\"pictSlitDrum\"] = \"\\uE6E0\";\n    // U+E6D1  Snare drum\n    Glyphs[\"pictSnareDrum\"] = \"\\uE6D1\";\n    // U+E6D3  Military snare drum\n    Glyphs[\"pictSnareDrumMilitary\"] = \"\\uE6D3\";\n    // U+E6D2  Snare drum, snares off\n    Glyphs[\"pictSnareDrumSnaresOff\"] = \"\\uE6D2\";\n    // U+E6AF  Steel drums\n    Glyphs[\"pictSteelDrums\"] = \"\\uE6AF\";\n    // U+E7F0  Stick shot\n    Glyphs[\"pictStickShot\"] = \"\\uE7F0\";\n    // U+E7B2  Superball\n    Glyphs[\"pictSuperball\"] = \"\\uE7B2\";\n    // U+E721  Suspended cymbal\n    Glyphs[\"pictSuspendedCymbal\"] = \"\\uE721\";\n    // U+E808  Combining swish for stem\n    Glyphs[\"pictSwishStem\"] = \"\\uE808\";\n    // U+E6E3  Indian tabla\n    Glyphs[\"pictTabla\"] = \"\\uE6E3\";\n    // U+E730  Tam-tam\n    Glyphs[\"pictTamTam\"] = \"\\uE730\";\n    // U+E731  Tam-tam with beater (Smith Brindle)\n    Glyphs[\"pictTamTamWithBeater\"] = \"\\uE731\";\n    // U+E6DB  Tambourine\n    Glyphs[\"pictTambourine\"] = \"\\uE6DB\";\n    // U+E6F1  Temple blocks\n    Glyphs[\"pictTempleBlocks\"] = \"\\uE6F1\";\n    // U+E6D6  Tenor drum\n    Glyphs[\"pictTenorDrum\"] = \"\\uE6D6\";\n    // U+E744  Thundersheet\n    Glyphs[\"pictThundersheet\"] = \"\\uE744\";\n    // U+E6DC  Timbales\n    Glyphs[\"pictTimbales\"] = \"\\uE6DC\";\n    // U+E6D0  Timpani\n    Glyphs[\"pictTimpani\"] = \"\\uE6D0\";\n    // U+E6D7  Tom-tom\n    Glyphs[\"pictTomTom\"] = \"\\uE6D7\";\n    // U+E6D8  Chinese tom-tom\n    Glyphs[\"pictTomTomChinese\"] = \"\\uE6D8\";\n    // U+E6DA  Indo-American tom tom\n    Glyphs[\"pictTomTomIndoAmerican\"] = \"\\uE6DA\";\n    // U+E6D9  Japanese tom-tom\n    Glyphs[\"pictTomTomJapanese\"] = \"\\uE6D9\";\n    // U+E700  Triangle\n    Glyphs[\"pictTriangle\"] = \"\\uE700\";\n    // U+E6B2  Tubaphone\n    Glyphs[\"pictTubaphone\"] = \"\\uE6B2\";\n    // U+E6C0  Tubular bells\n    Glyphs[\"pictTubularBells\"] = \"\\uE6C0\";\n    // U+E80A  Combining turn left for stem\n    Glyphs[\"pictTurnLeftStem\"] = \"\\uE80A\";\n    // U+E80B  Combining turn left or right for stem\n    Glyphs[\"pictTurnRightLeftStem\"] = \"\\uE80B\";\n    // U+E809  Combining turn right for stem\n    Glyphs[\"pictTurnRightStem\"] = \"\\uE809\";\n    // U+E6A7  Vibraphone\n    Glyphs[\"pictVib\"] = \"\\uE6A7\";\n    // U+E6A8  Metallophone (vibraphone motor off)\n    Glyphs[\"pictVibMotorOff\"] = \"\\uE6A8\";\n    // U+E6AD  Vibraphone (Smith Brindle)\n    Glyphs[\"pictVibSmithBrindle\"] = \"\\uE6AD\";\n    // U+E745  Vibraslap\n    Glyphs[\"pictVibraslap\"] = \"\\uE745\";\n    // U+E725  Vietnamese hat cymbal\n    Glyphs[\"pictVietnameseHat\"] = \"\\uE725\";\n    // U+E6F6  Whip\n    Glyphs[\"pictWhip\"] = \"\\uE6F6\";\n    // U+E6C1  Wind chimes (glass)\n    Glyphs[\"pictWindChimesGlass\"] = \"\\uE6C1\";\n    // U+E754  Wind machine\n    Glyphs[\"pictWindMachine\"] = \"\\uE754\";\n    // U+E758  Wind whistle (or mouth siren)\n    Glyphs[\"pictWindWhistle\"] = \"\\uE758\";\n    // U+E6F0  Wood block\n    Glyphs[\"pictWoodBlock\"] = \"\\uE6F0\";\n    // U+E7B4  Wound beater, hard core down\n    Glyphs[\"pictWoundHardDown\"] = \"\\uE7B4\";\n    // U+E7B6  Wound beater, hard core left\n    Glyphs[\"pictWoundHardLeft\"] = \"\\uE7B6\";\n    // U+E7B5  Wound beater, hard core right\n    Glyphs[\"pictWoundHardRight\"] = \"\\uE7B5\";\n    // U+E7B3  Wound beater, hard core up\n    Glyphs[\"pictWoundHardUp\"] = \"\\uE7B3\";\n    // U+E7B8  Wound beater, soft core down\n    Glyphs[\"pictWoundSoftDown\"] = \"\\uE7B8\";\n    // U+E7BA  Wound beater, soft core left\n    Glyphs[\"pictWoundSoftLeft\"] = \"\\uE7BA\";\n    // U+E7B9  Wound beater, soft core right\n    Glyphs[\"pictWoundSoftRight\"] = \"\\uE7B9\";\n    // U+E7B7  Wound beater, soft core up\n    Glyphs[\"pictWoundSoftUp\"] = \"\\uE7B7\";\n    // U+E6A1  Xylophone\n    Glyphs[\"pictXyl\"] = \"\\uE6A1\";\n    // U+E6A3  Bass xylophone\n    Glyphs[\"pictXylBass\"] = \"\\uE6A3\";\n    // U+E6AB  Xylophone (Smith Brindle)\n    Glyphs[\"pictXylSmithBrindle\"] = \"\\uE6AB\";\n    // U+E6A2  Tenor xylophone\n    Glyphs[\"pictXylTenor\"] = \"\\uE6A2\";\n    // U+E6A5  Trough tenor xylophone\n    Glyphs[\"pictXylTenorTrough\"] = \"\\uE6A5\";\n    // U+E6A4  Trough xylophone\n    Glyphs[\"pictXylTrough\"] = \"\\uE6A4\";\n    // U+E632  Buzz pizzicato\n    Glyphs[\"pluckedBuzzPizzicato\"] = \"\\uE632\";\n    // U+E638  Damp\n    Glyphs[\"pluckedDamp\"] = \"\\uE638\";\n    // U+1D1B4  Damp\n    Glyphs[\"pluckedDampAlternate\"] = \"\\uD834\\uDDB4\";\n    // U+E639  Damp all\n    Glyphs[\"pluckedDampAll\"] = \"\\uE639\";\n    // U+1D1B5  Damp all\n    Glyphs[\"pluckedDampAllAlternate\"] = \"\\uD834\\uDDB5\";\n    // U+E63B  Damp for stem\n    Glyphs[\"pluckedDampOnStem\"] = \"\\uE63B\";\n    // U+E637  Fingernail flick\n    Glyphs[\"pluckedFingernailFlick\"] = \"\\uE637\";\n    // U+E633  Left-hand pizzicato\n    Glyphs[\"pluckedLeftHandPizzicato\"] = \"\\uE633\";\n    // U+E63A  Plectrum\n    Glyphs[\"pluckedPlectrum\"] = \"\\uE63A\";\n    // U+E631  Snap pizzicato above\n    Glyphs[\"pluckedSnapPizzicatoAbove\"] = \"\\uE631\";\n    // U+E630  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelow\"] = \"\\uE630\";\n    // U+1D1AD  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelowAlternate\"] = \"\\uD834\\uDDAD\";\n    // U+E636  With fingernails\n    Glyphs[\"pluckedWithFingernails\"] = \"\\uE636\";\n    // U+1D1B3  With fingernails\n    Glyphs[\"pluckedWithFingernailsAlternate\"] = \"\\uD834\\uDDB3\";\n    // U+E514  Quindicesima\n    Glyphs[\"quindicesima\"] = \"\\uE514\";\n    // U+E515  Quindicesima alta\n    Glyphs[\"quindicesimaAlta\"] = \"\\uE515\";\n    // U+E516  Quindicesima bassa\n    Glyphs[\"quindicesimaBassa\"] = \"\\uE516\";\n    // U+1D139  Quindicesima bassa\n    Glyphs[\"quindicesimaBassaAlternate\"] = \"\\uD834\\uDD39\";\n    // U+E51D  Quindicesima bassa (mb)\n    Glyphs[\"quindicesimaBassaMb\"] = \"\\uE51D\";\n    // U+E500  Repeat last bar\n    Glyphs[\"repeat1Bar\"] = \"\\uE500\";\n    // U+1D10E  Repeat last bar\n    Glyphs[\"repeat1BarAlternate\"] = \"\\uD834\\uDD0E\";\n    // U+E501  Repeat last two bars\n    Glyphs[\"repeat2Bars\"] = \"\\uE501\";\n    // U+1D10F  Repeat last two bars\n    Glyphs[\"repeat2BarsAlternate\"] = \"\\uD834\\uDD0F\";\n    // U+E502  Repeat last four bars\n    Glyphs[\"repeat4Bars\"] = \"\\uE502\";\n    // U+E505  Repeat bar lower dot\n    Glyphs[\"repeatBarLowerDot\"] = \"\\uE505\";\n    // U+E504  Repeat bar slash\n    Glyphs[\"repeatBarSlash\"] = \"\\uE504\";\n    // U+E503  Repeat bar upper dot\n    Glyphs[\"repeatBarUpperDot\"] = \"\\uE503\";\n    // U+E044  Single repeat dot\n    Glyphs[\"repeatDot\"] = \"\\uE044\";\n    // U+E043  Repeat dots\n    Glyphs[\"repeatDots\"] = \"\\uE043\";\n    // U+1D108  Repeat dots\n    Glyphs[\"repeatDotsAlternate\"] = \"\\uD834\\uDD08\";\n    // U+E040  Left (start) repeat sign\n    Glyphs[\"repeatLeft\"] = \"\\uE040\";\n    // U+1D106  Left (start) repeat sign\n    Glyphs[\"repeatLeftAlternate\"] = \"\\uD834\\uDD06\";\n    // U+E041  Right (end) repeat sign\n    Glyphs[\"repeatRight\"] = \"\\uE041\";\n    // U+1D107  Right (end) repeat sign\n    Glyphs[\"repeatRightAlternate\"] = \"\\uD834\\uDD07\";\n    // U+E042  Right and left repeat sign\n    Glyphs[\"repeatRightLeft\"] = \"\\uE042\";\n    // U+E4ED  1024th rest\n    Glyphs[\"rest1024th\"] = \"\\uE4ED\";\n    // U+E4EA  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128th\"] = \"\\uE4EA\";\n    // U+1D142  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128thAlternate\"] = \"\\uD834\\uDD42\";\n    // U+E4E7  16th (semiquaver) rest\n    Glyphs[\"rest16th\"] = \"\\uE4E7\";\n    // U+1D13F  16th (semiquaver) rest\n    Glyphs[\"rest16thAlternate\"] = \"\\uD834\\uDD3F\";\n    // U+E4EB  256th rest\n    Glyphs[\"rest256th\"] = \"\\uE4EB\";\n    // U+E4E8  32nd (demisemiquaver) rest\n    Glyphs[\"rest32nd\"] = \"\\uE4E8\";\n    // U+1D140  32nd (demisemiquaver) rest\n    Glyphs[\"rest32ndAlternate\"] = \"\\uD834\\uDD40\";\n    // U+E4EC  512th rest\n    Glyphs[\"rest512th\"] = \"\\uE4EC\";\n    // U+E4E9  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64th\"] = \"\\uE4E9\";\n    // U+1D141  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64thAlternate\"] = \"\\uD834\\uDD41\";\n    // U+E4E6  Eighth (quaver) rest\n    Glyphs[\"rest8th\"] = \"\\uE4E6\";\n    // U+1D13E  Eighth (quaver) rest\n    Glyphs[\"rest8thAlternate\"] = \"\\uD834\\uDD3E\";\n    // U+E4E2  Double whole (breve) rest\n    Glyphs[\"restDoubleWhole\"] = \"\\uE4E2\";\n    // U+1D13A  Double whole (breve) rest\n    Glyphs[\"restDoubleWholeAlternate\"] = \"\\uD834\\uDD3A\";\n    // U+E4F3  Double whole rest on leger lines\n    Glyphs[\"restDoubleWholeLegerLine\"] = \"\\uE4F3\";\n    // U+E4EE  Multiple measure rest\n    Glyphs[\"restHBar\"] = \"\\uE4EE\";\n    // U+1D129  Multiple measure rest\n    Glyphs[\"restHBarAlternate\"] = \"\\uD834\\uDD29\";\n    // U+E4EF  H-bar, left half\n    Glyphs[\"restHBarLeft\"] = \"\\uE4EF\";\n    // U+E4F0  H-bar, middle\n    Glyphs[\"restHBarMiddle\"] = \"\\uE4F0\";\n    // U+E4F1  H-bar, right half\n    Glyphs[\"restHBarRight\"] = \"\\uE4F1\";\n    // U+E4E4  Half (minim) rest\n    Glyphs[\"restHalf\"] = \"\\uE4E4\";\n    // U+1D13C  Half (minim) rest\n    Glyphs[\"restHalfAlternate\"] = \"\\uD834\\uDD3C\";\n    // U+E4F5  Half rest on leger line\n    Glyphs[\"restHalfLegerLine\"] = \"\\uE4F5\";\n    // U+E4E1  Longa rest\n    Glyphs[\"restLonga\"] = \"\\uE4E1\";\n    // U+E4E0  Maxima rest\n    Glyphs[\"restMaxima\"] = \"\\uE4E0\";\n    // U+E4E5  Quarter (crotchet) rest\n    Glyphs[\"restQuarter\"] = \"\\uE4E5\";\n    // U+1D13D  Quarter (crotchet) rest\n    Glyphs[\"restQuarterAlternate\"] = \"\\uD834\\uDD3D\";\n    // U+E4F2  Old-style quarter (crotchet) rest\n    Glyphs[\"restQuarterOld\"] = \"\\uE4F2\";\n    // U+E4F6  Z-style quarter (crotchet) rest\n    Glyphs[\"restQuarterZ\"] = \"\\uE4F6\";\n    // U+E4E3  Whole (semibreve) rest\n    Glyphs[\"restWhole\"] = \"\\uE4E3\";\n    // U+1D13B  Whole (semibreve) rest\n    Glyphs[\"restWholeAlternate\"] = \"\\uD834\\uDD3B\";\n    // U+E4F4  Whole rest on leger line\n    Glyphs[\"restWholeLegerLine\"] = \"\\uE4F4\";\n    // U+E001  Reversed brace\n    Glyphs[\"reversedBrace\"] = \"\\uE001\";\n    // U+E006  Reversed bracket bottom\n    Glyphs[\"reversedBracketBottom\"] = \"\\uE006\";\n    // U+E005  Reversed bracket top\n    Glyphs[\"reversedBracketTop\"] = \"\\uE005\";\n    // U+E04D  Right repeat sign within bar\n    Glyphs[\"rightRepeatSmall\"] = \"\\uE04D\";\n    // U+EF00  Scale degree 1\n    Glyphs[\"scaleDegree1\"] = \"\\uEF00\";\n    // U+EF01  Scale degree 2\n    Glyphs[\"scaleDegree2\"] = \"\\uEF01\";\n    // U+EF02  Scale degree 3\n    Glyphs[\"scaleDegree3\"] = \"\\uEF02\";\n    // U+EF03  Scale degree 4\n    Glyphs[\"scaleDegree4\"] = \"\\uEF03\";\n    // U+EF04  Scale degree 5\n    Glyphs[\"scaleDegree5\"] = \"\\uEF04\";\n    // U+EF05  Scale degree 6\n    Glyphs[\"scaleDegree6\"] = \"\\uEF05\";\n    // U+EF06  Scale degree 7\n    Glyphs[\"scaleDegree7\"] = \"\\uEF06\";\n    // U+EF07  Scale degree 8\n    Glyphs[\"scaleDegree8\"] = \"\\uEF07\";\n    // U+EF08  Scale degree 9\n    Glyphs[\"scaleDegree9\"] = \"\\uEF08\";\n    // U+E06F  Schäffer clef\n    Glyphs[\"schaefferClef\"] = \"\\uE06F\";\n    // U+E072  Schäffer F clef to G clef change\n    Glyphs[\"schaefferFClefToGClef\"] = \"\\uE072\";\n    // U+E071  Schäffer G clef to F clef change\n    Glyphs[\"schaefferGClefToFClef\"] = \"\\uE071\";\n    // U+E070  Schäffer previous clef\n    Glyphs[\"schaefferPreviousClef\"] = \"\\uE070\";\n    // U+E047  Segno\n    Glyphs[\"segno\"] = \"\\uE047\";\n    // U+1D10B  Segno\n    Glyphs[\"segnoAlternate\"] = \"\\uD834\\uDD0B\";\n    // U+E04A  Segno (serpent)\n    Glyphs[\"segnoSerpent1\"] = \"\\uE04A\";\n    // U+E04B  Segno (serpent with vertical lines)\n    Glyphs[\"segnoSerpent2\"] = \"\\uE04B\";\n    // U+E06B  Semi-pitched percussion clef 1\n    Glyphs[\"semipitchedPercussionClef1\"] = \"\\uE06B\";\n    // U+E06C  Semi-pitched percussion clef 2\n    Glyphs[\"semipitchedPercussionClef2\"] = \"\\uE06C\";\n    // U+EC52  Flat\n    Glyphs[\"smnFlat\"] = \"\\uEC52\";\n    // U+EC53  Flat (white)\n    Glyphs[\"smnFlatWhite\"] = \"\\uEC53\";\n    // U+EC57  Double flat history sign\n    Glyphs[\"smnHistoryDoubleFlat\"] = \"\\uEC57\";\n    // U+EC55  Double sharp history sign\n    Glyphs[\"smnHistoryDoubleSharp\"] = \"\\uEC55\";\n    // U+EC56  Flat history sign\n    Glyphs[\"smnHistoryFlat\"] = \"\\uEC56\";\n    // U+EC54  Sharp history sign\n    Glyphs[\"smnHistorySharp\"] = \"\\uEC54\";\n    // U+EC58  Natural (N)\n    Glyphs[\"smnNatural\"] = \"\\uEC58\";\n    // U+EC50  Sharp stem up\n    Glyphs[\"smnSharp\"] = \"\\uEC50\";\n    // U+EC59  Sharp stem down\n    Glyphs[\"smnSharpDown\"] = \"\\uEC59\";\n    // U+EC51  Sharp (white) stem up\n    Glyphs[\"smnSharpWhite\"] = \"\\uEC51\";\n    // U+EC5A  Sharp (white) stem down\n    Glyphs[\"smnSharpWhiteDown\"] = \"\\uEC5A\";\n    // U+E00A  Split bar divider (bar spans a system break)\n    Glyphs[\"splitBarDivider\"] = \"\\uE00A\";\n    // U+E010  1-line staff\n    Glyphs[\"staff1Line\"] = \"\\uE010\";\n    // U+1D116  1-line staff\n    Glyphs[\"staff1LineAlternate\"] = \"\\uD834\\uDD16\";\n    // U+E01C  1-line staff (narrow)\n    Glyphs[\"staff1LineNarrow\"] = \"\\uE01C\";\n    // U+E016  1-line staff (wide)\n    Glyphs[\"staff1LineWide\"] = \"\\uE016\";\n    // U+E011  2-line staff\n    Glyphs[\"staff2Lines\"] = \"\\uE011\";\n    // U+1D117  2-line staff\n    Glyphs[\"staff2LinesAlternate\"] = \"\\uD834\\uDD17\";\n    // U+E01D  2-line staff (narrow)\n    Glyphs[\"staff2LinesNarrow\"] = \"\\uE01D\";\n    // U+E017  2-line staff (wide)\n    Glyphs[\"staff2LinesWide\"] = \"\\uE017\";\n    // U+E012  3-line staff\n    Glyphs[\"staff3Lines\"] = \"\\uE012\";\n    // U+1D118  3-line staff\n    Glyphs[\"staff3LinesAlternate\"] = \"\\uD834\\uDD18\";\n    // U+E01E  3-line staff (narrow)\n    Glyphs[\"staff3LinesNarrow\"] = \"\\uE01E\";\n    // U+E018  3-line staff (wide)\n    Glyphs[\"staff3LinesWide\"] = \"\\uE018\";\n    // U+E013  4-line staff\n    Glyphs[\"staff4Lines\"] = \"\\uE013\";\n    // U+1D119  4-line staff\n    Glyphs[\"staff4LinesAlternate\"] = \"\\uD834\\uDD19\";\n    // U+E01F  4-line staff (narrow)\n    Glyphs[\"staff4LinesNarrow\"] = \"\\uE01F\";\n    // U+E019  4-line staff (wide)\n    Glyphs[\"staff4LinesWide\"] = \"\\uE019\";\n    // U+E014  5-line staff\n    Glyphs[\"staff5Lines\"] = \"\\uE014\";\n    // U+1D11A  5-line staff\n    Glyphs[\"staff5LinesAlternate\"] = \"\\uD834\\uDD1A\";\n    // U+E020  5-line staff (narrow)\n    Glyphs[\"staff5LinesNarrow\"] = \"\\uE020\";\n    // U+E01A  5-line staff (wide)\n    Glyphs[\"staff5LinesWide\"] = \"\\uE01A\";\n    // U+E015  6-line staff\n    Glyphs[\"staff6Lines\"] = \"\\uE015\";\n    // U+1D11B  6-line staff\n    Glyphs[\"staff6LinesAlternate\"] = \"\\uD834\\uDD1B\";\n    // U+E021  6-line staff (narrow)\n    Glyphs[\"staff6LinesNarrow\"] = \"\\uE021\";\n    // U+E01B  6-line staff (wide)\n    Glyphs[\"staff6LinesWide\"] = \"\\uE01B\";\n    // U+E00B  Staff divide arrow down\n    Glyphs[\"staffDivideArrowDown\"] = \"\\uE00B\";\n    // U+E00C  Staff divide arrow up\n    Glyphs[\"staffDivideArrowUp\"] = \"\\uE00C\";\n    // U+E00D  Staff divide arrows\n    Glyphs[\"staffDivideArrowUpDown\"] = \"\\uE00D\";\n    // U+EB98  Lower 1 staff position\n    Glyphs[\"staffPosLower1\"] = \"\\uEB98\";\n    // U+EB99  Lower 2 staff positions\n    Glyphs[\"staffPosLower2\"] = \"\\uEB99\";\n    // U+EB9A  Lower 3 staff positions\n    Glyphs[\"staffPosLower3\"] = \"\\uEB9A\";\n    // U+EB9B  Lower 4 staff positions\n    Glyphs[\"staffPosLower4\"] = \"\\uEB9B\";\n    // U+EB9C  Lower 5 staff positions\n    Glyphs[\"staffPosLower5\"] = \"\\uEB9C\";\n    // U+EB9D  Lower 6 staff positions\n    Glyphs[\"staffPosLower6\"] = \"\\uEB9D\";\n    // U+EB9E  Lower 7 staff positions\n    Glyphs[\"staffPosLower7\"] = \"\\uEB9E\";\n    // U+EB9F  Lower 8 staff positions\n    Glyphs[\"staffPosLower8\"] = \"\\uEB9F\";\n    // U+EB90  Raise 1 staff position\n    Glyphs[\"staffPosRaise1\"] = \"\\uEB90\";\n    // U+EB91  Raise 2 staff positions\n    Glyphs[\"staffPosRaise2\"] = \"\\uEB91\";\n    // U+EB92  Raise 3 staff positions\n    Glyphs[\"staffPosRaise3\"] = \"\\uEB92\";\n    // U+EB93  Raise 4 staff positions\n    Glyphs[\"staffPosRaise4\"] = \"\\uEB93\";\n    // U+EB94  Raise 5 staff positions\n    Glyphs[\"staffPosRaise5\"] = \"\\uEB94\";\n    // U+EB95  Raise 6 staff positions\n    Glyphs[\"staffPosRaise6\"] = \"\\uEB95\";\n    // U+EB96  Raise 7 staff positions\n    Glyphs[\"staffPosRaise7\"] = \"\\uEB96\";\n    // U+EB97  Raise 8 staff positions\n    Glyphs[\"staffPosRaise8\"] = \"\\uEB97\";\n    // U+E210  Combining stem\n    Glyphs[\"stem\"] = \"\\uE210\";\n    // U+1D165  Combining stem\n    Glyphs[\"stemAlternate\"] = \"\\uD834\\uDD65\";\n    // U+E215  Combining bow on bridge stem\n    Glyphs[\"stemBowOnBridge\"] = \"\\uE215\";\n    // U+E216  Combining bow on tailpiece stem\n    Glyphs[\"stemBowOnTailpiece\"] = \"\\uE216\";\n    // U+E217  Combining buzz roll stem\n    Glyphs[\"stemBuzzRoll\"] = \"\\uE217\";\n    // U+E218  Combining damp stem\n    Glyphs[\"stemDamp\"] = \"\\uE218\";\n    // U+E21F  Combining harp string noise stem\n    Glyphs[\"stemHarpStringNoise\"] = \"\\uE21F\";\n    // U+E21A  Combining multiphonics (black) stem\n    Glyphs[\"stemMultiphonicsBlack\"] = \"\\uE21A\";\n    // U+E21C  Combining multiphonics (black and white) stem\n    Glyphs[\"stemMultiphonicsBlackWhite\"] = \"\\uE21C\";\n    // U+E21B  Combining multiphonics (white) stem\n    Glyphs[\"stemMultiphonicsWhite\"] = \"\\uE21B\";\n    // U+E213  Combining Penderecki unmeasured tremolo stem\n    Glyphs[\"stemPendereckiTremolo\"] = \"\\uE213\";\n    // U+E21E  Combining rim shot stem\n    Glyphs[\"stemRimShot\"] = \"\\uE21E\";\n    // U+E211  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesang\"] = \"\\uE211\";\n    // U+1D166  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesangAlternate\"] = \"\\uD834\\uDD66\";\n    // U+E214  Combining sul ponticello (bow behind bridge) stem\n    Glyphs[\"stemSulPonticello\"] = \"\\uE214\";\n    // U+E21D  Combining sussurando stem\n    Glyphs[\"stemSussurando\"] = \"\\uE21D\";\n    // U+E212  Combining swished stem\n    Glyphs[\"stemSwished\"] = \"\\uE212\";\n    // U+E219  Combining vibrato pulse accent (Saunders) stem\n    Glyphs[\"stemVibratoPulse\"] = \"\\uE219\";\n    // U+E232  Stockhausen irregular tremolo (\"Morsen\", like Morse code)\n    Glyphs[\"stockhausenTremolo\"] = \"\\uE232\";\n    // U+E618  Bow behind bridge (sul ponticello)\n    Glyphs[\"stringsBowBehindBridge\"] = \"\\uE618\";\n    // U+E62A  Bow behind bridge on four strings\n    Glyphs[\"stringsBowBehindBridgeFourStrings\"] = \"\\uE62A\";\n    // U+E627  Bow behind bridge on one string\n    Glyphs[\"stringsBowBehindBridgeOneString\"] = \"\\uE627\";\n    // U+E629  Bow behind bridge on three strings\n    Glyphs[\"stringsBowBehindBridgeThreeStrings\"] = \"\\uE629\";\n    // U+E628  Bow behind bridge on two strings\n    Glyphs[\"stringsBowBehindBridgeTwoStrings\"] = \"\\uE628\";\n    // U+E619  Bow on top of bridge\n    Glyphs[\"stringsBowOnBridge\"] = \"\\uE619\";\n    // U+E61A  Bow on tailpiece\n    Glyphs[\"stringsBowOnTailpiece\"] = \"\\uE61A\";\n    // U+E626  Change bow direction, indeterminate\n    Glyphs[\"stringsChangeBowDirection\"] = \"\\uE626\";\n    // U+E610  Down bow\n    Glyphs[\"stringsDownBow\"] = \"\\uE610\";\n    // U+1D1AA  Down bow\n    Glyphs[\"stringsDownBowAlternate\"] = \"\\uD834\\uDDAA\";\n    // U+EE82  Down bow, away from body\n    Glyphs[\"stringsDownBowAwayFromBody\"] = \"\\uEE82\";\n    // U+EE84  Down bow, beyond bridge\n    Glyphs[\"stringsDownBowBeyondBridge\"] = \"\\uEE84\";\n    // U+EE80  Down bow, towards body\n    Glyphs[\"stringsDownBowTowardsBody\"] = \"\\uEE80\";\n    // U+E611  Turned down bow\n    Glyphs[\"stringsDownBowTurned\"] = \"\\uE611\";\n    // U+E622  Fouetté\n    Glyphs[\"stringsFouette\"] = \"\\uE622\";\n    // U+E615  Half-harmonic\n    Glyphs[\"stringsHalfHarmonic\"] = \"\\uE615\";\n    // U+E614  Harmonic\n    Glyphs[\"stringsHarmonic\"] = \"\\uE614\";\n    // U+1D1AC  Harmonic\n    Glyphs[\"stringsHarmonicAlternate\"] = \"\\uD834\\uDDAC\";\n    // U+E620  Jeté (gettato) above\n    Glyphs[\"stringsJeteAbove\"] = \"\\uE620\";\n    // U+E621  Jeté (gettato) below\n    Glyphs[\"stringsJeteBelow\"] = \"\\uE621\";\n    // U+E617  Mute off\n    Glyphs[\"stringsMuteOff\"] = \"\\uE617\";\n    // U+E616  Mute on\n    Glyphs[\"stringsMuteOn\"] = \"\\uE616\";\n    // U+E61B  Overpressure, down bow\n    Glyphs[\"stringsOverpressureDownBow\"] = \"\\uE61B\";\n    // U+E61F  Overpressure, no bow direction\n    Glyphs[\"stringsOverpressureNoDirection\"] = \"\\uE61F\";\n    // U+E61D  Overpressure possibile, down bow\n    Glyphs[\"stringsOverpressurePossibileDownBow\"] = \"\\uE61D\";\n    // U+E61E  Overpressure possibile, up bow\n    Glyphs[\"stringsOverpressurePossibileUpBow\"] = \"\\uE61E\";\n    // U+E61C  Overpressure, up bow\n    Glyphs[\"stringsOverpressureUpBow\"] = \"\\uE61C\";\n    // U+EE88  Scrape, circular clockwise\n    Glyphs[\"stringsScrapeCircularClockwise\"] = \"\\uEE88\";\n    // U+EE89  Scrape, circular counter-clockwise\n    Glyphs[\"stringsScrapeCircularCounterclockwise\"] = \"\\uEE89\";\n    // U+EE86  Scrape, parallel inward\n    Glyphs[\"stringsScrapeParallelInward\"] = \"\\uEE86\";\n    // U+EE87  Scrape, parallel outward\n    Glyphs[\"stringsScrapeParallelOutward\"] = \"\\uEE87\";\n    // U+E624  Thumb position\n    Glyphs[\"stringsThumbPosition\"] = \"\\uE624\";\n    // U+E625  Turned thumb position\n    Glyphs[\"stringsThumbPositionTurned\"] = \"\\uE625\";\n    // U+EE8A  Triple chop, inward\n    Glyphs[\"stringsTripleChopInward\"] = \"\\uEE8A\";\n    // U+EE8B  Triple chop, outward\n    Glyphs[\"stringsTripleChopOutward\"] = \"\\uEE8B\";\n    // U+E612  Up bow\n    Glyphs[\"stringsUpBow\"] = \"\\uE612\";\n    // U+1D1AB  Up bow\n    Glyphs[\"stringsUpBowAlternate\"] = \"\\uD834\\uDDAB\";\n    // U+EE83  Up bow, away from body\n    Glyphs[\"stringsUpBowAwayFromBody\"] = \"\\uEE83\";\n    // U+EE85  Up bow, beyond bridge\n    Glyphs[\"stringsUpBowBeyondBridge\"] = \"\\uEE85\";\n    // U+EE81  Up bow, towards body\n    Glyphs[\"stringsUpBowTowardsBody\"] = \"\\uEE81\";\n    // U+E613  Turned up bow\n    Glyphs[\"stringsUpBowTurned\"] = \"\\uE613\";\n    // U+E623  Vibrato pulse accent (Saunders) for stem\n    Glyphs[\"stringsVibratoPulse\"] = \"\\uE623\";\n    // U+EE72  Swiss rudiments doublé black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackDouble\"] = \"\\uEE72\";\n    // U+EE70  Swiss rudiments flam black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackFlam\"] = \"\\uEE70\";\n    // U+EE73  Swiss rudiments doublé half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfDouble\"] = \"\\uEE73\";\n    // U+EE71  Swiss rudiments flam half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfFlam\"] = \"\\uEE71\";\n    // U+E007  System divider\n    Glyphs[\"systemDivider\"] = \"\\uE007\";\n    // U+E009  Extra long system divider\n    Glyphs[\"systemDividerExtraLong\"] = \"\\uE009\";\n    // U+E008  Long system divider\n    Glyphs[\"systemDividerLong\"] = \"\\uE008\";\n    // U+E1FC  Augmentation dot\n    Glyphs[\"textAugmentationDot\"] = \"\\uE1FC\";\n    // U+E1F5  Black note, fractional 16th beam, long stem\n    Glyphs[\"textBlackNoteFrac16thLongStem\"] = \"\\uE1F5\";\n    // U+E1F4  Black note, fractional 16th beam, short stem\n    Glyphs[\"textBlackNoteFrac16thShortStem\"] = \"\\uE1F4\";\n    // U+E1F6  Black note, fractional 32nd beam, long stem\n    Glyphs[\"textBlackNoteFrac32ndLongStem\"] = \"\\uE1F6\";\n    // U+E1F3  Black note, fractional 8th beam, long stem\n    Glyphs[\"textBlackNoteFrac8thLongStem\"] = \"\\uE1F3\";\n    // U+E1F2  Black note, fractional 8th beam, short stem\n    Glyphs[\"textBlackNoteFrac8thShortStem\"] = \"\\uE1F2\";\n    // U+E1F1  Black note, long stem\n    Glyphs[\"textBlackNoteLongStem\"] = \"\\uE1F1\";\n    // U+E1F0  Black note, short stem\n    Glyphs[\"textBlackNoteShortStem\"] = \"\\uE1F0\";\n    // U+E1FA  Continuing 16th beam for long stem\n    Glyphs[\"textCont16thBeamLongStem\"] = \"\\uE1FA\";\n    // U+E1F9  Continuing 16th beam for short stem\n    Glyphs[\"textCont16thBeamShortStem\"] = \"\\uE1F9\";\n    // U+E1FB  Continuing 32nd beam for long stem\n    Glyphs[\"textCont32ndBeamLongStem\"] = \"\\uE1FB\";\n    // U+E1F8  Continuing 8th beam for long stem\n    Glyphs[\"textCont8thBeamLongStem\"] = \"\\uE1F8\";\n    // U+E1F7  Continuing 8th beam for short stem\n    Glyphs[\"textCont8thBeamShortStem\"] = \"\\uE1F7\";\n    // U+E209  Headless black note, fractional 16th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thLongStem\"] = \"\\uE209\";\n    // U+E208  Headless black note, fractional 16th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thShortStem\"] = \"\\uE208\";\n    // U+E20A  Headless black note, fractional 32nd beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac32ndLongStem\"] = \"\\uE20A\";\n    // U+E207  Headless black note, fractional 8th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thLongStem\"] = \"\\uE207\";\n    // U+E206  Headless black note, fractional 8th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thShortStem\"] = \"\\uE206\";\n    // U+E205  Headless black note, long stem\n    Glyphs[\"textHeadlessBlackNoteLongStem\"] = \"\\uE205\";\n    // U+E204  Headless black note, short stem\n    Glyphs[\"textHeadlessBlackNoteShortStem\"] = \"\\uE204\";\n    // U+E1FD  Tie\n    Glyphs[\"textTie\"] = \"\\uE1FD\";\n    // U+E202  Tuplet number 3 for long stem\n    Glyphs[\"textTuplet3LongStem\"] = \"\\uE202\";\n    // U+E1FF  Tuplet number 3 for short stem\n    Glyphs[\"textTuplet3ShortStem\"] = \"\\uE1FF\";\n    // U+E203  Tuplet bracket end for long stem\n    Glyphs[\"textTupletBracketEndLongStem\"] = \"\\uE203\";\n    // U+E200  Tuplet bracket end for short stem\n    Glyphs[\"textTupletBracketEndShortStem\"] = \"\\uE200\";\n    // U+E201  Tuplet bracket start for long stem\n    Glyphs[\"textTupletBracketStartLongStem\"] = \"\\uE201\";\n    // U+E1FE  Tuplet bracket start for short stem\n    Glyphs[\"textTupletBracketStartShortStem\"] = \"\\uE1FE\";\n    // U+E080  Time signature 0\n    Glyphs[\"timeSig0\"] = \"\\uE080\";\n    // U+ECF0  Reversed time signature 0\n    Glyphs[\"timeSig0Reversed\"] = \"\\uECF0\";\n    // U+ECE0  Turned time signature 0\n    Glyphs[\"timeSig0Turned\"] = \"\\uECE0\";\n    // U+E081  Time signature 1\n    Glyphs[\"timeSig1\"] = \"\\uE081\";\n    // U+ECF1  Reversed time signature 1\n    Glyphs[\"timeSig1Reversed\"] = \"\\uECF1\";\n    // U+ECE1  Turned time signature 1\n    Glyphs[\"timeSig1Turned\"] = \"\\uECE1\";\n    // U+E082  Time signature 2\n    Glyphs[\"timeSig2\"] = \"\\uE082\";\n    // U+ECF2  Reversed time signature 2\n    Glyphs[\"timeSig2Reversed\"] = \"\\uECF2\";\n    // U+ECE2  Turned time signature 2\n    Glyphs[\"timeSig2Turned\"] = \"\\uECE2\";\n    // U+E083  Time signature 3\n    Glyphs[\"timeSig3\"] = \"\\uE083\";\n    // U+ECF3  Reversed time signature 3\n    Glyphs[\"timeSig3Reversed\"] = \"\\uECF3\";\n    // U+ECE3  Turned time signature 3\n    Glyphs[\"timeSig3Turned\"] = \"\\uECE3\";\n    // U+E084  Time signature 4\n    Glyphs[\"timeSig4\"] = \"\\uE084\";\n    // U+ECF4  Reversed time signature 4\n    Glyphs[\"timeSig4Reversed\"] = \"\\uECF4\";\n    // U+ECE4  Turned time signature 4\n    Glyphs[\"timeSig4Turned\"] = \"\\uECE4\";\n    // U+E085  Time signature 5\n    Glyphs[\"timeSig5\"] = \"\\uE085\";\n    // U+ECF5  Reversed time signature 5\n    Glyphs[\"timeSig5Reversed\"] = \"\\uECF5\";\n    // U+ECE5  Turned time signature 5\n    Glyphs[\"timeSig5Turned\"] = \"\\uECE5\";\n    // U+E086  Time signature 6\n    Glyphs[\"timeSig6\"] = \"\\uE086\";\n    // U+ECF6  Reversed time signature 6\n    Glyphs[\"timeSig6Reversed\"] = \"\\uECF6\";\n    // U+ECE6  Turned time signature 6\n    Glyphs[\"timeSig6Turned\"] = \"\\uECE6\";\n    // U+E087  Time signature 7\n    Glyphs[\"timeSig7\"] = \"\\uE087\";\n    // U+ECF7  Reversed time signature 7\n    Glyphs[\"timeSig7Reversed\"] = \"\\uECF7\";\n    // U+ECE7  Turned time signature 7\n    Glyphs[\"timeSig7Turned\"] = \"\\uECE7\";\n    // U+E088  Time signature 8\n    Glyphs[\"timeSig8\"] = \"\\uE088\";\n    // U+ECF8  Reversed time signature 8\n    Glyphs[\"timeSig8Reversed\"] = \"\\uECF8\";\n    // U+ECE8  Turned time signature 8\n    Glyphs[\"timeSig8Turned\"] = \"\\uECE8\";\n    // U+E089  Time signature 9\n    Glyphs[\"timeSig9\"] = \"\\uE089\";\n    // U+ECF9  Reversed time signature 9\n    Glyphs[\"timeSig9Reversed\"] = \"\\uECF9\";\n    // U+ECE9  Turned time signature 9\n    Glyphs[\"timeSig9Turned\"] = \"\\uECE9\";\n    // U+EC80  Left bracket for whole time signature\n    Glyphs[\"timeSigBracketLeft\"] = \"\\uEC80\";\n    // U+EC82  Left bracket for numerator only\n    Glyphs[\"timeSigBracketLeftSmall\"] = \"\\uEC82\";\n    // U+EC81  Right bracket for whole time signature\n    Glyphs[\"timeSigBracketRight\"] = \"\\uEC81\";\n    // U+EC83  Right bracket for numerator only\n    Glyphs[\"timeSigBracketRightSmall\"] = \"\\uEC83\";\n    // U+E09F  Control character for denominator digit\n    Glyphs[\"timeSigCombDenominator\"] = \"\\uE09F\";\n    // U+E09E  Control character for numerator digit\n    Glyphs[\"timeSigCombNumerator\"] = \"\\uE09E\";\n    // U+E096  Time signature comma\n    Glyphs[\"timeSigComma\"] = \"\\uE096\";\n    // U+E08A  Common time\n    Glyphs[\"timeSigCommon\"] = \"\\uE08A\";\n    // U+1D134  Common time\n    Glyphs[\"timeSigCommonAlternate\"] = \"\\uD834\\uDD34\";\n    // U+ECFA  Reversed common time\n    Glyphs[\"timeSigCommonReversed\"] = \"\\uECFA\";\n    // U+ECEA  Turned common time\n    Glyphs[\"timeSigCommonTurned\"] = \"\\uECEA\";\n    // U+EC85  Cut time (Bach)\n    Glyphs[\"timeSigCut2\"] = \"\\uEC85\";\n    // U+EC86  Cut triple time (9/8)\n    Glyphs[\"timeSigCut3\"] = \"\\uEC86\";\n    // U+E08B  Cut time\n    Glyphs[\"timeSigCutCommon\"] = \"\\uE08B\";\n    // U+1D135  Cut time\n    Glyphs[\"timeSigCutCommonAlternate\"] = \"\\uD834\\uDD35\";\n    // U+ECFB  Reversed cut time\n    Glyphs[\"timeSigCutCommonReversed\"] = \"\\uECFB\";\n    // U+ECEB  Turned cut time\n    Glyphs[\"timeSigCutCommonTurned\"] = \"\\uECEB\";\n    // U+E08F  Time signature equals\n    Glyphs[\"timeSigEquals\"] = \"\\uE08F\";\n    // U+E098  Time signature fraction ½\n    Glyphs[\"timeSigFractionHalf\"] = \"\\uE098\";\n    // U+E09A  Time signature fraction ⅓\n    Glyphs[\"timeSigFractionOneThird\"] = \"\\uE09A\";\n    // U+E097  Time signature fraction ¼\n    Glyphs[\"timeSigFractionQuarter\"] = \"\\uE097\";\n    // U+E099  Time signature fraction ¾\n    Glyphs[\"timeSigFractionThreeQuarters\"] = \"\\uE099\";\n    // U+E09B  Time signature fraction ⅔\n    Glyphs[\"timeSigFractionTwoThirds\"] = \"\\uE09B\";\n    // U+E08E  Time signature fraction slash\n    Glyphs[\"timeSigFractionalSlash\"] = \"\\uE08E\";\n    // U+E090  Time signature minus\n    Glyphs[\"timeSigMinus\"] = \"\\uE090\";\n    // U+E091  Time signature multiply\n    Glyphs[\"timeSigMultiply\"] = \"\\uE091\";\n    // U+E09D  Open time signature (Penderecki)\n    Glyphs[\"timeSigOpenPenderecki\"] = \"\\uE09D\";\n    // U+E094  Left parenthesis for whole time signature\n    Glyphs[\"timeSigParensLeft\"] = \"\\uE094\";\n    // U+E092  Left parenthesis for numerator only\n    Glyphs[\"timeSigParensLeftSmall\"] = \"\\uE092\";\n    // U+E095  Right parenthesis for whole time signature\n    Glyphs[\"timeSigParensRight\"] = \"\\uE095\";\n    // U+E093  Right parenthesis for numerator only\n    Glyphs[\"timeSigParensRightSmall\"] = \"\\uE093\";\n    // U+E08C  Time signature +\n    Glyphs[\"timeSigPlus\"] = \"\\uE08C\";\n    // U+E08D  Time signature + (for numerators)\n    Glyphs[\"timeSigPlusSmall\"] = \"\\uE08D\";\n    // U+EC84  Time signature slash separator\n    Glyphs[\"timeSigSlash\"] = \"\\uEC84\";\n    // U+E09C  Open time signature\n    Glyphs[\"timeSigX\"] = \"\\uE09C\";\n    // U+E220  Combining tremolo 1\n    Glyphs[\"tremolo1\"] = \"\\uE220\";\n    // U+1D167  Combining tremolo 1\n    Glyphs[\"tremolo1Alternate\"] = \"\\uD834\\uDD67\";\n    // U+E221  Combining tremolo 2\n    Glyphs[\"tremolo2\"] = \"\\uE221\";\n    // U+1D168  Combining tremolo 2\n    Glyphs[\"tremolo2Alternate\"] = \"\\uD834\\uDD68\";\n    // U+E222  Combining tremolo 3\n    Glyphs[\"tremolo3\"] = \"\\uE222\";\n    // U+1D169  Combining tremolo 3\n    Glyphs[\"tremolo3Alternate\"] = \"\\uD834\\uDD69\";\n    // U+E223  Combining tremolo 4\n    Glyphs[\"tremolo4\"] = \"\\uE223\";\n    // U+E224  Combining tremolo 5\n    Glyphs[\"tremolo5\"] = \"\\uE224\";\n    // U+E22E  Divide measured tremolo by 2\n    Glyphs[\"tremoloDivisiDots2\"] = \"\\uE22E\";\n    // U+E22F  Divide measured tremolo by 3\n    Glyphs[\"tremoloDivisiDots3\"] = \"\\uE22F\";\n    // U+E230  Divide measured tremolo by 4\n    Glyphs[\"tremoloDivisiDots4\"] = \"\\uE230\";\n    // U+E231  Divide measured tremolo by 6\n    Glyphs[\"tremoloDivisiDots6\"] = \"\\uE231\";\n    // U+E225  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1\"] = \"\\uE225\";\n    // U+1D16A  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1Alternate\"] = \"\\uD834\\uDD6A\";\n    // U+E226  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2\"] = \"\\uE226\";\n    // U+1D16B  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2Alternate\"] = \"\\uD834\\uDD6B\";\n    // U+E227  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3\"] = \"\\uE227\";\n    // U+1D16C  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3Alternate\"] = \"\\uD834\\uDD6C\";\n    // U+E228  Fingered tremolo 4\n    Glyphs[\"tremoloFingered4\"] = \"\\uE228\";\n    // U+E229  Fingered tremolo 5\n    Glyphs[\"tremoloFingered5\"] = \"\\uE229\";\n    // U+E5F2  Triple-tongue above\n    Glyphs[\"tripleTongueAbove\"] = \"\\uE5F2\";\n    // U+1D18B  Triple-tongue above\n    Glyphs[\"tripleTongueAboveAlternate\"] = \"\\uD834\\uDD8B\";\n    // U+E5F3  Triple-tongue below\n    Glyphs[\"tripleTongueBelow\"] = \"\\uE5F3\";\n    // U+E880  Tuplet 0\n    Glyphs[\"tuplet0\"] = \"\\uE880\";\n    // U+E881  Tuplet 1\n    Glyphs[\"tuplet1\"] = \"\\uE881\";\n    // U+E882  Tuplet 2\n    Glyphs[\"tuplet2\"] = \"\\uE882\";\n    // U+E883  Tuplet 3\n    Glyphs[\"tuplet3\"] = \"\\uE883\";\n    // U+E884  Tuplet 4\n    Glyphs[\"tuplet4\"] = \"\\uE884\";\n    // U+E885  Tuplet 5\n    Glyphs[\"tuplet5\"] = \"\\uE885\";\n    // U+E886  Tuplet 6\n    Glyphs[\"tuplet6\"] = \"\\uE886\";\n    // U+E887  Tuplet 7\n    Glyphs[\"tuplet7\"] = \"\\uE887\";\n    // U+E888  Tuplet 8\n    Glyphs[\"tuplet8\"] = \"\\uE888\";\n    // U+E889  Tuplet 9\n    Glyphs[\"tuplet9\"] = \"\\uE889\";\n    // U+E88A  Tuplet colon\n    Glyphs[\"tupletColon\"] = \"\\uE88A\";\n    // U+E22C  Wieniawski unmeasured tremolo\n    Glyphs[\"unmeasuredTremolo\"] = \"\\uE22C\";\n    // U+E22D  Wieniawski unmeasured tremolo (simpler)\n    Glyphs[\"unmeasuredTremoloSimple\"] = \"\\uE22D\";\n    // U+E069  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1\"] = \"\\uE069\";\n    // U+1D125  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1Alternate\"] = \"\\uD834\\uDD25\";\n    // U+E06A  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2\"] = \"\\uE06A\";\n    // U+1D126  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2Alternate\"] = \"\\uD834\\uDD26\";\n    // U+E517  Ventiduesima\n    Glyphs[\"ventiduesima\"] = \"\\uE517\";\n    // U+E518  Ventiduesima alta\n    Glyphs[\"ventiduesimaAlta\"] = \"\\uE518\";\n    // U+E519  Ventiduesima bassa\n    Glyphs[\"ventiduesimaBassa\"] = \"\\uE519\";\n    // U+E51E  Ventiduesima bassa (mb)\n    Glyphs[\"ventiduesimaBassaMb\"] = \"\\uE51E\";\n    // U+E649  Finger click (Stockhausen)\n    Glyphs[\"vocalFingerClickStockhausen\"] = \"\\uE649\";\n    // U+E64B  Halb gesungen (semi-sprechgesang)\n    Glyphs[\"vocalHalbGesungen\"] = \"\\uE64B\";\n    // U+E640  Mouth closed\n    Glyphs[\"vocalMouthClosed\"] = \"\\uE640\";\n    // U+E642  Mouth open\n    Glyphs[\"vocalMouthOpen\"] = \"\\uE642\";\n    // U+E644  Mouth pursed\n    Glyphs[\"vocalMouthPursed\"] = \"\\uE644\";\n    // U+E641  Mouth slightly open\n    Glyphs[\"vocalMouthSlightlyOpen\"] = \"\\uE641\";\n    // U+E643  Mouth wide open\n    Glyphs[\"vocalMouthWideOpen\"] = \"\\uE643\";\n    // U+E647  Nasal voice\n    Glyphs[\"vocalNasalVoice\"] = \"\\uE647\";\n    // U+E645  Sprechgesang\n    Glyphs[\"vocalSprechgesang\"] = \"\\uE645\";\n    // U+E648  Tongue click (Stockhausen)\n    Glyphs[\"vocalTongueClickStockhausen\"] = \"\\uE648\";\n    // U+E64A  Tongue and finger click (Stockhausen)\n    Glyphs[\"vocalTongueFingerClickStockhausen\"] = \"\\uE64A\";\n    // U+E646  Combining sussurando for stem\n    Glyphs[\"vocalsSussurando\"] = \"\\uE646\";\n    // U+EAAA  Arpeggiato wiggle segment, downwards\n    Glyphs[\"wiggleArpeggiatoDown\"] = \"\\uEAAA\";\n    // U+EAAE  Arpeggiato arrowhead down\n    Glyphs[\"wiggleArpeggiatoDownArrow\"] = \"\\uEAAE\";\n    // U+EAAC  Arpeggiato downward swash\n    Glyphs[\"wiggleArpeggiatoDownSwash\"] = \"\\uEAAC\";\n    // U+EAA9  Arpeggiato wiggle segment, upwards\n    Glyphs[\"wiggleArpeggiatoUp\"] = \"\\uEAA9\";\n    // U+EAAD  Arpeggiato arrowhead up\n    Glyphs[\"wiggleArpeggiatoUpArrow\"] = \"\\uEAAD\";\n    // U+EAAB  Arpeggiato upward swash\n    Glyphs[\"wiggleArpeggiatoUpSwash\"] = \"\\uEAAB\";\n    // U+EAC9  Circular motion segment\n    Glyphs[\"wiggleCircular\"] = \"\\uEAC9\";\n    // U+EAC0  Constant circular motion segment\n    Glyphs[\"wiggleCircularConstant\"] = \"\\uEAC0\";\n    // U+EAC1  Constant circular motion segment (flipped)\n    Glyphs[\"wiggleCircularConstantFlipped\"] = \"\\uEAC1\";\n    // U+EAC3  Constant circular motion segment (flipped, large)\n    Glyphs[\"wiggleCircularConstantFlippedLarge\"] = \"\\uEAC3\";\n    // U+EAC2  Constant circular motion segment (large)\n    Glyphs[\"wiggleCircularConstantLarge\"] = \"\\uEAC2\";\n    // U+EACB  Circular motion end\n    Glyphs[\"wiggleCircularEnd\"] = \"\\uEACB\";\n    // U+EAC8  Circular motion segment, large\n    Glyphs[\"wiggleCircularLarge\"] = \"\\uEAC8\";\n    // U+EAC7  Circular motion segment, larger\n    Glyphs[\"wiggleCircularLarger\"] = \"\\uEAC7\";\n    // U+EAC6  Circular motion segment, larger still\n    Glyphs[\"wiggleCircularLargerStill\"] = \"\\uEAC6\";\n    // U+EAC5  Circular motion segment, largest\n    Glyphs[\"wiggleCircularLargest\"] = \"\\uEAC5\";\n    // U+EACA  Circular motion segment, small\n    Glyphs[\"wiggleCircularSmall\"] = \"\\uEACA\";\n    // U+EAC4  Circular motion start\n    Glyphs[\"wiggleCircularStart\"] = \"\\uEAC4\";\n    // U+EAAF  Glissando wiggle segment\n    Glyphs[\"wiggleGlissando\"] = \"\\uEAAF\";\n    // U+EABD  Group glissando 1\n    Glyphs[\"wiggleGlissandoGroup1\"] = \"\\uEABD\";\n    // U+EABE  Group glissando 2\n    Glyphs[\"wiggleGlissandoGroup2\"] = \"\\uEABE\";\n    // U+EABF  Group glissando 3\n    Glyphs[\"wiggleGlissandoGroup3\"] = \"\\uEABF\";\n    // U+EAF0  Quasi-random squiggle 1\n    Glyphs[\"wiggleRandom1\"] = \"\\uEAF0\";\n    // U+EAF1  Quasi-random squiggle 2\n    Glyphs[\"wiggleRandom2\"] = \"\\uEAF1\";\n    // U+EAF2  Quasi-random squiggle 3\n    Glyphs[\"wiggleRandom3\"] = \"\\uEAF2\";\n    // U+EAF3  Quasi-random squiggle 4\n    Glyphs[\"wiggleRandom4\"] = \"\\uEAF3\";\n    // U+EABB  Sawtooth line segment\n    Glyphs[\"wiggleSawtooth\"] = \"\\uEABB\";\n    // U+EABA  Narrow sawtooth line segment\n    Glyphs[\"wiggleSawtoothNarrow\"] = \"\\uEABA\";\n    // U+EABC  Wide sawtooth line segment\n    Glyphs[\"wiggleSawtoothWide\"] = \"\\uEABC\";\n    // U+EAB8  Square wave line segment\n    Glyphs[\"wiggleSquareWave\"] = \"\\uEAB8\";\n    // U+EAB7  Narrow square wave line segment\n    Glyphs[\"wiggleSquareWaveNarrow\"] = \"\\uEAB7\";\n    // U+EAB9  Wide square wave line segment\n    Glyphs[\"wiggleSquareWaveWide\"] = \"\\uEAB9\";\n    // U+EAA4  Trill wiggle segment\n    Glyphs[\"wiggleTrill\"] = \"\\uEAA4\";\n    // U+EAA3  Trill wiggle segment, fast\n    Glyphs[\"wiggleTrillFast\"] = \"\\uEAA3\";\n    // U+EAA2  Trill wiggle segment, faster\n    Glyphs[\"wiggleTrillFaster\"] = \"\\uEAA2\";\n    // U+EAA1  Trill wiggle segment, faster still\n    Glyphs[\"wiggleTrillFasterStill\"] = \"\\uEAA1\";\n    // U+EAA0  Trill wiggle segment, fastest\n    Glyphs[\"wiggleTrillFastest\"] = \"\\uEAA0\";\n    // U+EAA5  Trill wiggle segment, slow\n    Glyphs[\"wiggleTrillSlow\"] = \"\\uEAA5\";\n    // U+EAA6  Trill wiggle segment, slower\n    Glyphs[\"wiggleTrillSlower\"] = \"\\uEAA6\";\n    // U+EAA7  Trill wiggle segment, slower still\n    Glyphs[\"wiggleTrillSlowerStill\"] = \"\\uEAA7\";\n    // U+EAA8  Trill wiggle segment, slowest\n    Glyphs[\"wiggleTrillSlowest\"] = \"\\uEAA8\";\n    // U+EAEE  Vibrato largest, slower\n    Glyphs[\"wiggleVIbratoLargestSlower\"] = \"\\uEAEE\";\n    // U+EAE0  Vibrato medium, slower\n    Glyphs[\"wiggleVIbratoMediumSlower\"] = \"\\uEAE0\";\n    // U+EAB0  Vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibrato\"] = \"\\uEAB0\";\n    // U+EAE5  Vibrato large, fast\n    Glyphs[\"wiggleVibratoLargeFast\"] = \"\\uEAE5\";\n    // U+EAE4  Vibrato large, faster\n    Glyphs[\"wiggleVibratoLargeFaster\"] = \"\\uEAE4\";\n    // U+EAE3  Vibrato large, faster still\n    Glyphs[\"wiggleVibratoLargeFasterStill\"] = \"\\uEAE3\";\n    // U+EAE2  Vibrato large, fastest\n    Glyphs[\"wiggleVibratoLargeFastest\"] = \"\\uEAE2\";\n    // U+EAE6  Vibrato large, slow\n    Glyphs[\"wiggleVibratoLargeSlow\"] = \"\\uEAE6\";\n    // U+EAE7  Vibrato large, slower\n    Glyphs[\"wiggleVibratoLargeSlower\"] = \"\\uEAE7\";\n    // U+EAE8  Vibrato large, slowest\n    Glyphs[\"wiggleVibratoLargeSlowest\"] = \"\\uEAE8\";\n    // U+EAEC  Vibrato largest, fast\n    Glyphs[\"wiggleVibratoLargestFast\"] = \"\\uEAEC\";\n    // U+EAEB  Vibrato largest, faster\n    Glyphs[\"wiggleVibratoLargestFaster\"] = \"\\uEAEB\";\n    // U+EAEA  Vibrato largest, faster still\n    Glyphs[\"wiggleVibratoLargestFasterStill\"] = \"\\uEAEA\";\n    // U+EAE9  Vibrato largest, fastest\n    Glyphs[\"wiggleVibratoLargestFastest\"] = \"\\uEAE9\";\n    // U+EAED  Vibrato largest, slow\n    Glyphs[\"wiggleVibratoLargestSlow\"] = \"\\uEAED\";\n    // U+EAEF  Vibrato largest, slowest\n    Glyphs[\"wiggleVibratoLargestSlowest\"] = \"\\uEAEF\";\n    // U+EADE  Vibrato medium, fast\n    Glyphs[\"wiggleVibratoMediumFast\"] = \"\\uEADE\";\n    // U+EADD  Vibrato medium, faster\n    Glyphs[\"wiggleVibratoMediumFaster\"] = \"\\uEADD\";\n    // U+EADC  Vibrato medium, faster still\n    Glyphs[\"wiggleVibratoMediumFasterStill\"] = \"\\uEADC\";\n    // U+EADB  Vibrato medium, fastest\n    Glyphs[\"wiggleVibratoMediumFastest\"] = \"\\uEADB\";\n    // U+EADF  Vibrato medium, slow\n    Glyphs[\"wiggleVibratoMediumSlow\"] = \"\\uEADF\";\n    // U+EAE1  Vibrato medium, slowest\n    Glyphs[\"wiggleVibratoMediumSlowest\"] = \"\\uEAE1\";\n    // U+EAD7  Vibrato small, fast\n    Glyphs[\"wiggleVibratoSmallFast\"] = \"\\uEAD7\";\n    // U+EAD6  Vibrato small, faster\n    Glyphs[\"wiggleVibratoSmallFaster\"] = \"\\uEAD6\";\n    // U+EAD5  Vibrato small, faster still\n    Glyphs[\"wiggleVibratoSmallFasterStill\"] = \"\\uEAD5\";\n    // U+EAD4  Vibrato small, fastest\n    Glyphs[\"wiggleVibratoSmallFastest\"] = \"\\uEAD4\";\n    // U+EAD8  Vibrato small, slow\n    Glyphs[\"wiggleVibratoSmallSlow\"] = \"\\uEAD8\";\n    // U+EAD9  Vibrato small, slower\n    Glyphs[\"wiggleVibratoSmallSlower\"] = \"\\uEAD9\";\n    // U+EADA  Vibrato small, slowest\n    Glyphs[\"wiggleVibratoSmallSlowest\"] = \"\\uEADA\";\n    // U+EAD0  Vibrato smallest, fast\n    Glyphs[\"wiggleVibratoSmallestFast\"] = \"\\uEAD0\";\n    // U+EACF  Vibrato smallest, faster\n    Glyphs[\"wiggleVibratoSmallestFaster\"] = \"\\uEACF\";\n    // U+EACE  Vibrato smallest, faster still\n    Glyphs[\"wiggleVibratoSmallestFasterStill\"] = \"\\uEACE\";\n    // U+EACD  Vibrato smallest, fastest\n    Glyphs[\"wiggleVibratoSmallestFastest\"] = \"\\uEACD\";\n    // U+EAD1  Vibrato smallest, slow\n    Glyphs[\"wiggleVibratoSmallestSlow\"] = \"\\uEAD1\";\n    // U+EAD2  Vibrato smallest, slower\n    Glyphs[\"wiggleVibratoSmallestSlower\"] = \"\\uEAD2\";\n    // U+EAD3  Vibrato smallest, slowest\n    Glyphs[\"wiggleVibratoSmallestSlowest\"] = \"\\uEAD3\";\n    // U+EACC  Vibrato start\n    Glyphs[\"wiggleVibratoStart\"] = \"\\uEACC\";\n    // U+EAB1  Wide vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibratoWide\"] = \"\\uEAB1\";\n    // U+EAB5  Wavy line segment\n    Glyphs[\"wiggleWavy\"] = \"\\uEAB5\";\n    // U+EAB4  Narrow wavy line segment\n    Glyphs[\"wiggleWavyNarrow\"] = \"\\uEAB4\";\n    // U+EAB6  Wide wavy line segment\n    Glyphs[\"wiggleWavyWide\"] = \"\\uEAB6\";\n    // U+E5F4  Closed hole\n    Glyphs[\"windClosedHole\"] = \"\\uE5F4\";\n    // U+E5FB  Flatter embouchure\n    Glyphs[\"windFlatEmbouchure\"] = \"\\uE5FB\";\n    // U+E5F6  Half-closed hole\n    Glyphs[\"windHalfClosedHole1\"] = \"\\uE5F6\";\n    // U+E5F7  Half-closed hole 2\n    Glyphs[\"windHalfClosedHole2\"] = \"\\uE5F7\";\n    // U+E5F8  Half-open hole\n    Glyphs[\"windHalfClosedHole3\"] = \"\\uE5F8\";\n    // U+E5FE  Somewhat relaxed embouchure\n    Glyphs[\"windLessRelaxedEmbouchure\"] = \"\\uE5FE\";\n    // U+E600  Somewhat tight embouchure\n    Glyphs[\"windLessTightEmbouchure\"] = \"\\uE600\";\n    // U+E60A  Mouthpiece or hand pop\n    Glyphs[\"windMouthpiecePop\"] = \"\\uE60A\";\n    // U+E607  Combining multiphonics (black) for stem\n    Glyphs[\"windMultiphonicsBlackStem\"] = \"\\uE607\";\n    // U+E609  Combining multiphonics (black and white) for stem\n    Glyphs[\"windMultiphonicsBlackWhiteStem\"] = \"\\uE609\";\n    // U+E608  Combining multiphonics (white) for stem\n    Glyphs[\"windMultiphonicsWhiteStem\"] = \"\\uE608\";\n    // U+E5F9  Open hole\n    Glyphs[\"windOpenHole\"] = \"\\uE5F9\";\n    // U+E606  Much more reed (push inwards)\n    Glyphs[\"windReedPositionIn\"] = \"\\uE606\";\n    // U+E604  Normal reed position\n    Glyphs[\"windReedPositionNormal\"] = \"\\uE604\";\n    // U+E605  Very little reed (pull outwards)\n    Glyphs[\"windReedPositionOut\"] = \"\\uE605\";\n    // U+E5FD  Relaxed embouchure\n    Glyphs[\"windRelaxedEmbouchure\"] = \"\\uE5FD\";\n    // U+E60B  Rim only\n    Glyphs[\"windRimOnly\"] = \"\\uE60B\";\n    // U+E5FC  Sharper embouchure\n    Glyphs[\"windSharpEmbouchure\"] = \"\\uE5FC\";\n    // U+E603  Very tight embouchure / strong air pressure\n    Glyphs[\"windStrongAirPressure\"] = \"\\uE603\";\n    // U+E5F5  Three-quarters closed hole\n    Glyphs[\"windThreeQuartersClosedHole\"] = \"\\uE5F5\";\n    // U+E5FF  Tight embouchure\n    Glyphs[\"windTightEmbouchure\"] = \"\\uE5FF\";\n    // U+E5FA  Trill key\n    Glyphs[\"windTrillKey\"] = \"\\uE5FA\";\n    // U+E601  Very tight embouchure\n    Glyphs[\"windVeryTightEmbouchure\"] = \"\\uE601\";\n    // U+E602  Very relaxed embouchure / weak air-pressure\n    Glyphs[\"windWeakAirPressure\"] = \"\\uE602\";\n})(Glyphs || (Glyphs = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    static get SCALE() {\n        return 0.66;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ glyphFontScale: Tables.lookupMetric('fontSize') * GraceNote.SCALE, strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stemExtensionOverride) {\n            return this.stemExtensionOverride;\n        }\n        let ret = super.getStemExtension();\n        ret = Stem.HEIGHT * this.getStaveNoteScale() - Stem.HEIGHT + ret;\n        return ret;\n    }\n    getStaveNoteScale() {\n        return 2 / 3;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const scale = this.getStaveNoteScale();\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {\n                    stem: 6 * scale,\n                    beam: 5 * scale,\n                });\n            }\n            else {\n                const stemDirection = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteHeadWidth = this.noteHeads[0].getWidth();\n                const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;\n                const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;\n                const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;\n                if (stemDirection === Stem.DOWN) {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y - noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y + noteHeadWidth,\n                    };\n                }\n                else {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y + noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y - noteHeadWidth,\n                    };\n                }\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * scale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beamSlope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beamAngle = Math.atan(beamSlope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beamAngle) * slashBeamOffset,\n            dy: Math.sin(beamAngle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;\n        const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;\n        const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;\n        const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;\n        const ret = {\n            x1: stemX - protrusionStemDeltaX,\n            y1: stemY + slashStemOffset - protrusionStemDeltaY,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,\n            y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,\n        };\n        return ret;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenoteGroups, state) {\n        const groupSpacingStave = 4;\n        const groupSpacingTab = 0;\n        if (!gracenoteGroups || gracenoteGroups.length === 0)\n            return false;\n        const groupList = [];\n        let prevNote = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenoteGroups.length; ++i) {\n            const gracenoteGroup = gracenoteGroups[i];\n            const note = gracenoteGroup.getNote();\n            const isStavenote = isStaveNote(note);\n            const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;\n            if (isStavenote && note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prevNote = note;\n            }\n            groupList.push({ shift: shiftL, gracenoteGroup, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let groupShift = groupList[0].shift;\n        let formatWidth;\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            gracenoteGroup.preFormat();\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            groupShift = Math.max(formatWidth, groupShift);\n        }\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);\n        }\n        state.leftShift += groupShift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(graceNotes, showSlur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.graceNotes = graceNotes;\n        this.width = 0;\n        this.showSlur = showSlur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.renderOptions = {\n            slurYShift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.graceNotes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(graceNotes) {\n        graceNotes = graceNotes || this.graceNotes;\n        if (graceNotes.length > 1) {\n            const beam = new Beam(graceNotes);\n            beam.renderOptions.beamWidth = 3;\n            beam.renderOptions.partialBeamLength = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.graceNotes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.showSlur) {\n            // Create and draw slur.\n            const isStavenote = isStaveNote(note);\n            const TieClass = isStavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                lastNote: this.graceNotes[0],\n                firstNote: note,\n                firstIndexes: [0],\n                lastIndexes: [0],\n            });\n            this.slur.renderOptions.cp2 = 12;\n            this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { Font } from './font';\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // vertical shift from stave line\n            yShift: 0.3, \n            // grace glyph scale\n            scale: 0.6, \n            // grace tablature font\n            font: `7.5pt ${Font.SANS_SERIF}` });\n        this.updateWidth();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport * from './accidental';\nexport * from './annotation';\nexport * from './articulation';\nexport * from './barnote';\nexport * from './beam';\nexport * from './bend';\nexport * from './boundingbox';\nexport * from './canvascontext';\nexport * from './chordsymbol';\nexport * from './clef';\nexport * from './clefnote';\nexport * from './crescendo';\nexport * from './curve';\nexport * from './dot';\nexport * from './easyscore';\nexport * from './element';\nexport * from './factory';\nexport * from './flow';\nexport * from './font';\n// Do not export './fonts/*' because they are used by the entry/* files.\nexport * from './formatter';\nexport * from './fraction';\nexport * from './frethandfinger';\nexport * from './ghostnote';\nexport * from './glyphnote';\nexport * from './gracenote';\nexport * from './gracenotegroup';\nexport * from './gracetabnote';\nexport * from './keymanager';\nexport * from './keysignature';\nexport * from './keysignote';\nexport * from './modifier';\nexport * from './modifiercontext';\nexport * from './multimeasurerest';\nexport * from './music';\nexport * from './note';\nexport * from './notehead';\nexport * from './notesubgroup';\nexport * from './ornament';\nexport * from './parenthesis';\nexport * from './parser';\nexport * from './pedalmarking';\nexport * from './registry';\nexport * from './rendercontext';\nexport * from './renderer';\nexport * from './repeatnote';\nexport * from './stave';\nexport * from './stavebarline';\nexport * from './staveconnector';\nexport * from './stavehairpin';\nexport * from './staveline';\nexport * from './stavemodifier';\nexport * from './stavenote';\nexport * from './staverepetition';\nexport * from './stavesection';\nexport * from './stavetempo';\nexport * from './stavetext';\nexport * from './stavetie';\nexport * from './stavevolta';\nexport * from './stem';\nexport * from './stemmablenote';\nexport * from './stringnumber';\nexport * from './strokes';\nexport * from './svgcontext';\nexport * from './system';\n// Do not export './tables' because it is internal. Its public API is accessible via Vex.Flow.*.\nexport * from './tabnote';\nexport * from './tabslide';\nexport * from './tabstave';\nexport * from './tabtie';\nexport * from './textbracket';\nexport * from './textdynamics';\nexport * from './textnote';\nexport * from './tickable';\nexport * from './tickcontext';\nexport * from './timesignature';\nexport * from './timesignote';\nexport * from './tremolo';\nexport * from './tuning';\nexport * from './tuplet';\nexport * from './typeguard';\nexport * from './util';\n// Do not export './version'. It is accessible via Vex.Flow.BUILD.\nexport * from './vex';\nexport * from './vibrato';\nexport * from './vibratobracket';\nexport * from './voice';\nexport * from './web';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const isSupportedType = Music.scaleTypes[this.keyParts.type];\n        if (!isSupportedType) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.rootIndexes[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote !== undefined) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote !== undefined) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Element } from './element';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `keySpec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphFontScale = Tables.lookupMetric('fontSize');\n        this.glyphs = [];\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc, stave) {\n        const code = Tables.accidentalCodes(acc.type);\n        const glyph = new Element(Category.KeySignature);\n        glyph.setText(code);\n        glyph.measureText();\n        // Determine spacing between current accidental and the next accidental\n        const extraWidth = 1;\n        // Place the glyph on the stave\n        glyph.setYShift(stave.getYForLine(acc.line));\n        if (this.glyphs.length > 0) {\n            const prevGlyph = this.glyphs[this.glyphs.length - 1];\n            glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);\n        }\n        this.glyphs.push(glyph);\n        // Expand size of key signature\n        this.width += glyph.getWidth() + extraWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancelAccList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!differentTypes) {\n                index = cancelAccList.length - naturals + i;\n            }\n            const acc = cancelAccList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancelAccList[0].type,\n        };\n    }\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);\n            }\n        }\n        this.formatted = true;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            glyph.renderText(ctx, this.x, 0);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Modifier_spacingFromNextModifier, _Modifier_modifierContext;\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        _Modifier_spacingFromNextModifier.set(this, void 0);\n        _Modifier_modifierContext.set(this, void 0);\n        this.width = 0;\n        // The `textLine` is reserved space above or below a stave.\n        this.textLine = 0;\n        this.position = Modifier.Position.LEFT;\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, 0, \"f\");\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return __classPrivateFieldGet(this, _Modifier_modifierContext, \"f\");\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(__classPrivateFieldGet(this, _Modifier_modifierContext, \"f\"), 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        __classPrivateFieldSet(this, _Modifier_modifierContext, c, \"f\");\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `textLine` for the modifier. */\n    setTextLine(line) {\n        this.textLine = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.yShift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, x, \"f\");\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return __classPrivateFieldGet(this, _Modifier_spacingFromNextModifier, \"f\");\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.xShift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.xShift -= x;\n        }\n        else {\n            this.xShift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n_Modifier_spacingFromNextModifier = new WeakMap(), _Modifier_modifierContext = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.).  The ModifierContext works with tickables\n// that are at the same tick to ensure that they and their modifiers\n// all have proper alignment.  (Note that the ModifierContext also\n// runs the spacing of the tickable).\n//\n// see https://github.com/0xfe/vexflow/wiki/How-Formatting-Works\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            leftShift: 0,\n            rightShift: 0,\n            textLine: 0,\n            topTextLine: 0,\n        };\n        // Current members -- a mapping of Category (string) to a list of Tickables, Modifiers,\n        // StaveNotes, TabNotes, etc.\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Get the width of the entire\n     */\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.leftShift;\n    }\n    getRightShift() {\n        return this.state.rightShift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.leftShift + this.state.rightShift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.leftShift + state.rightShift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements multiple measure rests.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _MultiMeasureRest_hasPaddingLeft, _MultiMeasureRest_hasPaddingRight, _MultiMeasureRest_hasLineThickness, _MultiMeasureRest_hasSymbolSpacing;\nimport { Element } from './element';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param numberOfMeasures Number of measures.\n     * @param options The options object.\n     */\n    constructor(numberOfMeasures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        _MultiMeasureRest_hasPaddingLeft.set(this, false);\n        _MultiMeasureRest_hasPaddingRight.set(this, false);\n        _MultiMeasureRest_hasLineThickness.set(this, false);\n        _MultiMeasureRest_hasSymbolSpacing.set(this, false);\n        const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Tables.lookupMetric('MultiMeasureRest.fontSize'); // same as TimeSignature.\n        this.textFont.size = fontSize;\n        this.numberOfMeasures = numberOfMeasures;\n        this.text = '';\n        const t = `${this.numberOfMeasures}`;\n        for (const digit of t) {\n            // 0xe080 is timeSig0. We calculate the code point for timeSigN to assemble the digits via SMuFL glyphs.\n            this.text += String.fromCodePoint(0xe080 + Number(digit));\n        }\n        this.measureText();\n        // Keep track of whether these four options were provided.\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingLeft, typeof options.paddingLeft === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingRight, typeof options.paddingRight === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasLineThickness, typeof options.lineThickness === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasSymbolSpacing, typeof options.symbolSpacing === 'number', \"f\");\n        this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Tables.lookupMetric('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\n        const options = this.renderOptions;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let txt = '\\ue4ef'; /*restHBarLeft*/\n        const el = new Element();\n        el.setText(txt);\n        el.measureText();\n        // Add middle bars until the right padding is reached\n        for (let i = 1; (i + 2) * el.getWidth() + left <= right; i++) {\n            txt += '\\ue4f0'; /*restHBarMiddle*/\n        }\n        txt += '\\ue4f1'; /*restHBarRight*/\n        el.setText(txt);\n        el.measureText();\n        el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);\n    }\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n        const n4 = Math.floor(this.numberOfMeasures / 4);\n        const n = this.numberOfMeasures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.renderOptions;\n        const elMiddle = new Element();\n        let txt = '';\n        for (let i = 0; i < n4; ++i) {\n            txt += '\\ue4e1' /*restLonga*/ + ' ';\n        }\n        for (let i = 0; i < n2; ++i) {\n            txt += '\\ue4e2' /*restDoubleWhole*/ + ' ';\n        }\n        elMiddle.setText(txt);\n        elMiddle.measureText();\n        const elTop = new Element();\n        txt = '';\n        for (let i = 0; i < n1; ++i) {\n            txt += '\\ue4e3' /*restWhole*/ + ' ';\n        }\n        elTop.setText(txt);\n        elTop.measureText();\n        const width = elMiddle.getWidth() + elTop.getWidth();\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        elMiddle.renderText(ctx, x, yMiddle);\n        x += elMiddle.getWidth();\n        elTop.renderText(ctx, x, yTop);\n        x += elTop.getWidth();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.renderOptions;\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingLeft, \"f\")) {\n            left = stave.getX() + options.paddingLeft;\n        }\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingRight, \"f\")) {\n            right = stave.getX() + stave.getWidth() - options.paddingRight;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        const spacingBetweenLines = options.spacingBetweenLinesPx;\n        if (options.useSymbols) {\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n        }\n        if (options.showNumber) {\n            this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);\n        }\n    }\n}\n_MultiMeasureRest_hasPaddingLeft = new WeakMap(), _MultiMeasureRest_hasPaddingRight = new WeakMap(), _MultiMeasureRest_hasLineThickness = new WeakMap(), _MultiMeasureRest_hasSymbolSpacing = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonicalNotes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get rootValues() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indexes of the root notes.*/\n    static get rootIndexes() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonicalNotes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonicIntervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonicAccidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { rootIndex: 0, intVal: 0 },\n            cn: { rootIndex: 0, intVal: 0 },\n            'c#': { rootIndex: 0, intVal: 1 },\n            'c##': { rootIndex: 0, intVal: 2 },\n            cb: { rootIndex: 0, intVal: 11 },\n            cbb: { rootIndex: 0, intVal: 10 },\n            d: { rootIndex: 1, intVal: 2 },\n            dn: { rootIndex: 1, intVal: 2 },\n            'd#': { rootIndex: 1, intVal: 3 },\n            'd##': { rootIndex: 1, intVal: 4 },\n            db: { rootIndex: 1, intVal: 1 },\n            dbb: { rootIndex: 1, intVal: 0 },\n            e: { rootIndex: 2, intVal: 4 },\n            en: { rootIndex: 2, intVal: 4 },\n            'e#': { rootIndex: 2, intVal: 5 },\n            'e##': { rootIndex: 2, intVal: 6 },\n            eb: { rootIndex: 2, intVal: 3 },\n            ebb: { rootIndex: 2, intVal: 2 },\n            f: { rootIndex: 3, intVal: 5 },\n            fn: { rootIndex: 3, intVal: 5 },\n            'f#': { rootIndex: 3, intVal: 6 },\n            'f##': { rootIndex: 3, intVal: 7 },\n            fb: { rootIndex: 3, intVal: 4 },\n            fbb: { rootIndex: 3, intVal: 3 },\n            g: { rootIndex: 4, intVal: 7 },\n            gn: { rootIndex: 4, intVal: 7 },\n            'g#': { rootIndex: 4, intVal: 8 },\n            'g##': { rootIndex: 4, intVal: 9 },\n            gb: { rootIndex: 4, intVal: 6 },\n            gbb: { rootIndex: 4, intVal: 5 },\n            a: { rootIndex: 5, intVal: 9 },\n            an: { rootIndex: 5, intVal: 9 },\n            'a#': { rootIndex: 5, intVal: 10 },\n            'a##': { rootIndex: 5, intVal: 11 },\n            ab: { rootIndex: 5, intVal: 8 },\n            abb: { rootIndex: 5, intVal: 7 },\n            b: { rootIndex: 6, intVal: 11 },\n            bn: { rootIndex: 6, intVal: 11 },\n            'b#': { rootIndex: 6, intVal: 0 },\n            'b##': { rootIndex: 6, intVal: 1 },\n            bb: { rootIndex: 6, intVal: 10 },\n            bbb: { rootIndex: 6, intVal: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonicalNotes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonicIntervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.intVal;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonicalNotes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonicIntervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverseInterval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverseInterval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.rootIndexes[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = Tables.durationCodes[duration];\n        if (code === undefined) {\n            code = Tables.durationCodes['4'];\n        }\n        // Try and get the note head\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        // Merge duration props for 'duration' with the note head properties.\n        if (codeNoteHead !== Glyphs.null) {\n            code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });\n        }\n        return code;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        var _a;\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Tables.lookupMetric('fontFamily'), 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.durationOverride) {\n            // Custom duration\n            this.setDuration(noteStruct.durationOverride);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignoreTicks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.xShift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.alignCenter) {\n            this.setCenterAlignment(noteStruct.alignCenter);\n        }\n        // The render surface.\n        this.renderOptions = {\n            annotationSpacing: 5,\n            glyphFontScale: 1,\n            strokePx: 1,\n            scale: 1,\n            font: '',\n            yShift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(textLine) {\n        return this.checkStave().getYForTopText(textLine);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType(Category.Dot).length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam !== undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        const parentheses = this.checkModifierContext().getMembers('Parenthesis');\n        // consider parentheses on noteheads, dots should be to the right of them\n        if (parentheses.length !== 0) {\n            px += parentheses[0].getWidth() + 1;\n        }\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes xShift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Tables.lookupMetric('Stave.padding', 0);\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieStartX += noteGlyphWidth / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieEndX += noteGlyphWidth / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.customGlyph = false;\n        // map notehead SMuFL codes to the corresponding SMuFL code with ledger line\n        this.ledger = {\n            '\\ue4e3' /*restWhole*/: '\\ue4f4' /*restWholeLegerLine*/,\n            '\\ue4e4' /*restHalf*/: '\\ue4f5' /*restHalfLegerLine*/,\n        };\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.noteType)\n            this.noteType = noteStruct.noteType;\n        this.displaced = noteStruct.displaced || false;\n        this.stemDirection = noteStruct.stemDirection || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {\n            this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];\n        }\n        this.text = this.glyphProps.codeHead;\n        if (noteStruct.customGlyphCode) {\n            this.customGlyph = true;\n            this.text = noteStruct.customGlyphCode;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // font size for note heads\n            glyphFontScale: noteStruct.glyphFontScale || Tables.lookupMetric('fontSize') });\n        this.textFont.size = this.renderOptions.glyphFontScale;\n        this.measureText();\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);\n    }\n    /** Get the `BoundingBox` for the `NoteHead`. */\n    getBoundingBox() {\n        return new BoundingBox(this.getAbsoluteX() - this.textMetrics.actualBoundingBoxLeft, this.y - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        this.measureText();\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", this.x, this.y);\n        this.renderText(ctx, this.getAbsoluteX() - this.x, 0);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.leftShift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n// MIT License\nimport { getBottomY, getInitialOffset, getTopY } from './articulation';\nimport { Element } from './element';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        return Tables.lookupMetric('NoteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let rightShift = state.rightShift; // jazz ornaments calculate r/l shift separately\n        let leftShift = state.leftShift;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (ornament.position === ModifierPosition.RIGHT) {\n                ornament.xShift += rightShift + 2;\n                rightShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.LEFT) {\n                ornament.xShift -= leftShift + ornament.width + 2;\n                leftShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.ABOVE) {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.leftShift = leftShift + width / 2;\n        state.rightShift = rightShift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentLeft() {\n        return ['scoop'];\n    }\n    static get ornamentRight() {\n        return ['doit', 'fall', 'fallLong', 'doitLong'];\n    }\n    static get ornamentYShift() {\n        return ['fallLong'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        // Default position ABOVE\n        this.position = ModifierPosition.ABOVE;\n        if (Ornament.ornamentRight.indexOf(type) >= 0) {\n            this.position = ModifierPosition.RIGHT;\n        }\n        if (Ornament.ornamentLeft.indexOf(type) >= 0) {\n            this.position = ModifierPosition.LEFT;\n        }\n        this.type = type;\n        this.delayed = false;\n        this.renderOptions = {\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        this.text = Tables.ornamentCodes(this.type);\n        this.measureText();\n    }\n    /** Set note attached to ornament. */\n    setNote(note) {\n        super.setNote(note);\n        // articulations above/below the line can be stacked.\n        if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {\n            // Unfortunately we don't know the stem direction.  So we base it\n            // on the line number, but also allow it to be overridden.\n            if (note.getLineNumber() >= 3) {\n                this.position = Modifier.Position.ABOVE;\n            }\n            else {\n                this.position = Modifier.Position.BELOW;\n            }\n        }\n        return this;\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        this.accidentalUpper = new Element();\n        this.accidentalUpper.setText(Tables.accidentalCodes(accid));\n        this.accidentalUpper.measureText();\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        this.accidentalLower = new Element();\n        this.accidentalLower.setText(Tables.accidentalCodes(accid));\n        this.accidentalLower.measureText();\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        const staffSpace = stave.getSpacingBetweenLines();\n        const initialOffset = getInitialOffset(note, this.position);\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;\n        if (this.position === ModifierPosition.ABOVE) {\n            glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;\n        }\n        if (this.position === ModifierPosition.BELOW) {\n            glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;\n        }\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = note.getTickContext().getX();\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                const nextContext = TickContext.getNextContext(note.getTickContext());\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);\n            glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;\n        }\n        // ornament requires yShift\n        if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {\n            this.yShift += this.getHeight();\n        }\n        this.renderText(ctx, glyphX -\n            (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0), glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;\n            this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Rodrigo Vilar\n// MIT License\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Category } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index) + parenthesis.width;\n                xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        if (this.position === Modifier.Position.RIGHT) {\n            this.text = '\\uE0F6'; /*noteheadParenthesisRight*/\n        }\n        else if (this.position === Modifier.Position.LEFT) {\n            this.text = '\\uE0F5'; /*noteheadParenthesisLeft*/\n        }\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.setFont(note.getFont());\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        this.renderText(ctx, start.x, start.y);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, ctx, x, y) {\n    var _a;\n    const glyph = new Element(PedalMarking.CATEGORY);\n    glyph.setText((_a = PedalMarking.GLYPHS[name]) !== null && _a !== void 0 ? _a : name);\n    glyph.measureText();\n    glyph.renderText(ctx, x - (glyph.getWidth() - Tables.STAVE_LINE_DISTANCE) / 2, y);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.customDepressText = '';\n        this.customReleaseText = '';\n        this.renderOptions = {\n            bracketHeight: 10,\n            textMarginRight: 6,\n            bracketLineWidth: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.customDepressText = depress || '';\n        this.customReleaseText = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let prevX;\n        let prevY;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            isPedalDepressed = !isPedalDepressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prevX) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const nextNoteIsSame = notes[index + 1] === note;\n            const prevNoteIsSame = notes[index - 1] === note;\n            let xShift = 0;\n            if (isPedalDepressed) {\n                // Adjustment for release+depress\n                xShift = prevNoteIsSame ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.customDepressText) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const textWidth = ctx.measureText(this.customDepressText).width;\n                        ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                        xShift = textWidth / 2 + this.renderOptions.textMarginRight;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedalDepress', ctx, x, y);\n                        xShift = 20 + this.renderOptions.textMarginRight;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.renderOptions.bracketHeight);\n                    ctx.lineTo(x + xShift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                xShift = nextNoteIsSame ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x + xShift, y);\n                ctx.lineTo(x, y - this.renderOptions.bracketHeight);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prevX = x + xShift;\n            prevY = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            isPedalDepressed = !isPedalDepressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            let textWidth = 0;\n            if (isPedalDepressed) {\n                if (this.customDepressText) {\n                    textWidth = ctx.measureText(this.customDepressText).width;\n                    ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalDepress', ctx, x, y);\n                }\n            }\n            else {\n                if (this.customReleaseText) {\n                    textWidth = ctx.measureText(this.customReleaseText).width;\n                    ctx.fillText(this.customReleaseText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalRelease', ctx, x, y);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.renderOptions.color);\n        ctx.setFillStyle(this.renderOptions.color);\n        ctx.setFont(Tables.lookupMetricFontInfo('PedalMarking.text'));\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.renderOptions.bracketLineWidth);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedalDepress: '\\uE650' /*keyboardPedalPed*/,\n    pedalRelease: '\\uE655' /*keyboardPedalUp*/,\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _Registry_defaultRegistry;\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return __classPrivateFieldGet(Registry, _a, \"f\", _Registry_defaultRegistry);\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        __classPrivateFieldSet(Registry, _a, registry, \"f\", _Registry_defaultRegistry);\n    }\n    static disableDefaultRegistry() {\n        __classPrivateFieldSet(Registry, _a, undefined, \"f\", _Registry_defaultRegistry);\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _b, _c;\n        return (_c = (_b = this.index.id) === null || _b === void 0 ? void 0 : _b[id]) === null || _c === void 0 ? void 0 : _c[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const indexAttr = this.index[attribute];\n        if (indexAttr) {\n            const indexAttrVal = indexAttr[value];\n            if (indexAttrVal) {\n                const keys = Object.keys(indexAttrVal);\n                return keys.map((k) => indexAttrVal[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n_a = Registry;\n_Registry_defaultRegistry = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 === 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { GlyphNote } from './glyphnote';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': '\\uE500' /*repeat1Bar*/,\n    '2': '\\uE501' /*repeat2Bars*/,\n    '4': '\\uE502' /*repeat4Bars*/,\n    slash: '\\uE504' /*repeatBarSlash*/,\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || '\\uE500'; /*repeat1Bar*/\n        super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        return Tables.lookupMetric('Stave.padding') + Tables.lookupMetric('Stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        return Tables.lookupMetric('Stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.startX = x + 5;\n        this.endX = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, fillStyle: '#999999', leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacingBetweenLinesPx * spacing;\n    }\n    resetLines() {\n        this.options.lineConfig = [];\n        for (let i = 0; i < this.options.numLines; i++) {\n            this.options.lineConfig.push({ visible: true });\n        }\n        this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;\n        this.options.bottomTextPosition = this.options.numLines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.startX = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.startX;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.endX;\n    }\n    getTieStartX() {\n        return this.startX;\n    }\n    getTieEndX() {\n        return this.endX;\n    }\n    getNumLines() {\n        return this.options.numLines;\n    }\n    setNumLines(n) {\n        this.options.numLines = n;\n        this.resetLines();\n        return this;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.startX += shift;\n        this.endX += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.endX = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.endX);\n        return this;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fillStyle, strokeStyle: this.options.fillStyle, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let startX = this.startX - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {\n            startX -= begBarline.getWidth();\n        }\n        return startX;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, label, y) {\n        this.modifiers.push(new Volta(type, label, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize)\n            staveSection.setFontSize(fontSize);\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setStaveText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacingBetweenLinesPx;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;\n        return scoreBottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.numLines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.topTextPosition);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottomTextPosition + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        var _a, _b, _c, _d;\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.startX = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;\n                    widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;\n                }\n                widths.left = (_c = -layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0;\n                widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.endX = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const numLines = this.options.numLines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < numLines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.lineConfig[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.verticalBarWidth;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.lineConfig;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param lineNumber The index of the line to configure.\n     * @param lineConfig An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(lineNumber, lineConfig) {\n        if (lineNumber >= this.options.numLines || lineNumber < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (lineConfig.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof lineConfig.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.lineConfig[lineNumber] = lineConfig;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param linesConfiguration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the numLines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(linesConfiguration) {\n        if (linesConfiguration.length !== this.options.numLines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const lineConfig in linesConfiguration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (linesConfiguration[lineConfig].visible === undefined) {\n                linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];\n            }\n            this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);\n        }\n        this.options.lineConfig = linesConfiguration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            // Calculate min start X for the category\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Consider only the first instance\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Calculate adjustement required for the stave\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                // Apply adjustment to all the modifiers in and beyond the category\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                // Apply adjustment also to note start.\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        // Make sure that staves are formatted\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        // Align Clefs\n        adjustCategoryStartX(Category.Clef);\n        // Align key signatures\n        adjustCategoryStartX(Category.KeySignature);\n        // Align time signatures\n        adjustCategoryStartX(Category.TimeSignature);\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author: Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, doubleBar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (doubleBar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let xShift = 3;\n        if (!begin) {\n            xShift = -5;\n        }\n        staveCtx.fillRect(x + xShift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dotRadius = 2;\n        // Shift dots left or right\n        if (begin) {\n            xShift += 4;\n        }\n        else {\n            xShift -= 4;\n        }\n        const dotX = x + xShift + dotRadius / 2;\n        // calculate the y offset based on number of stave lines\n        let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dotY = topY + yOffset + dotRadius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dotY += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let xShift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        xShift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + xShift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(topStave, bottomStave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.topStave = topStave;\n        this.bottomStave = bottomStave;\n        this.type = StaveConnector.type.DOUBLE;\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.xShift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        var _a, _b;\n        const textElement = new Element('StaveConnector.text');\n        textElement.setText(text);\n        textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        textElement.measureText();\n        this.texts.push(textElement);\n        return this;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.topStave.getYForLine(0);\n        let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;\n        let width = 3;\n        let topX = this.topStave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.topStave.getX() + this.topStave.getWidth();\n        }\n        let attachmentHeight = botY - topY;\n        const element = new Element();\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= 5;\n                topY -= this.thickness;\n                attachmentHeight += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.topStave.getX() - 2 + this.xShift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachmentHeight / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachmentHeight;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachmentHeight;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachmentHeight;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachmentHeight;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachmentHeight;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachmentHeight;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachmentHeight = botY - topY;\n                element.setText('\\ue003' /* bracketTop */);\n                element.renderText(ctx, topX - 5, topY);\n                element.setText('\\ue004' /* bracketBottom */);\n                element.renderText(ctx, topX - 5, botY);\n                topX -= 5;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachmentHeight -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachmentHeight);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachmentHeight);\n        }\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const textElement = this.texts[i];\n            const x = this.topStave.getX() - textElement.getWidth() - 24;\n            const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;\n            textElement.renderText(ctx, x, y + 4);\n        }\n    }\n}\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// @author Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   yShift: px,         // vertical offset\n     *   leftShiftTicks: 0, // left horizontal offset expressed in ticks\n     *   rightShiftTicks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt === null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);\n        const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);\n        const hairpinOptions = {\n            height: options.height,\n            yShift: options.yShift,\n            leftShiftPx,\n            rightShiftPx,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n        new StaveHairpin({\n            firstNote: notes.firstNote,\n            lastNote: notes.lastNote,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpinOptions)\n            .setPosition(position)\n            .draw();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.renderOptions = {\n            height: 10,\n            yShift: 0,\n            leftShiftPx: 0,\n            rightShiftPx: 0,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        this.renderOptions = options;\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.lastNote = notes.lastNote;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.renderOptions.yShift + 20;\n        let yShift = params.firstY;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            yShift = params.firstY - params.staffHeight;\n        }\n        const leftShiftPx = this.renderOptions.leftShiftPx;\n        const rightShiftPx = this.renderOptions.rightShiftPx;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            firstX: start.x,\n            lastX: end.x,\n            firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staffHeight: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `renderOptions`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    firstNote: Note,\n    //    lastNote: Note,\n    //    firstIndexes: [n1, n2, n3],\n    //    lastIndexes: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.renderOptions = {\n            // Space to add to the left or the right\n            paddingLeft: 4,\n            paddingRight: 3,\n            // The width of the line in pixels\n            lineWidth: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            lineDash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            roundedEnd: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            drawStartArrow: false,\n            drawEndArrow: false,\n            // The length of the arrowhead sides\n            arrowheadLength: 10,\n            // The angle of the arrowhead\n            arrowheadAngle: Math.PI / 8,\n            // The position of the text\n            textPositionVertical: StaveLine.TextVerticalPosition.TOP,\n            textJustification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes)\n            notes.firstIndexes = [0];\n        if (!notes.lastIndexes)\n            notes.lastIndexes = [0];\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.firstIndexes = notes.firstIndexes;\n        this.lastNote = notes.lastNote;\n        this.lastIndexes = notes.lastIndexes;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const renderOptions = this.renderOptions;\n        if (renderOptions.lineDash) {\n            ctx.setLineDash(renderOptions.lineDash);\n        }\n        if (renderOptions.lineWidth) {\n            ctx.setLineWidth(renderOptions.lineWidth);\n        }\n        if (renderOptions.roundedEnd) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Apply the text styling to the context\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        const renderOptions = this.renderOptions;\n        const color = renderOptions.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;\n        let endX;\n        let endY;\n        let startX;\n        let startY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            endX = Math.round(x1 + (x2 - x1) * ratio);\n            endY = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            endX = x2;\n            endY = y2;\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            startX = x1 + (x2 - x1) * (1 - ratio);\n            startY = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            startX = x1;\n            startY = y1;\n        }\n        if (this.renderOptions.color) {\n            ctx.setStrokeStyle(this.renderOptions.color);\n            ctx.setFillStyle(this.renderOptions.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const lineAngle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));\n        let angle1;\n        let angle2;\n        let topX;\n        let topY;\n        let bottomX;\n        let bottomY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;\n            topX = x2 + Math.cos(angle1) * h;\n            topY = y2 + Math.sin(angle1) * h;\n            angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;\n            bottomX = x2 + Math.cos(angle2) * h;\n            bottomY = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            angle1 = lineAngle + this.renderOptions.arrowheadAngle;\n            topX = x1 + Math.cos(angle1) * h;\n            topY = y1 + Math.sin(angle1) * h;\n            angle2 = lineAngle - this.renderOptions.arrowheadAngle;\n            bottomX = x1 + Math.cos(angle2) * h;\n            bottomY = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        const renderOptions = this.renderOptions;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indexes and draw lines\n        let startPosition = { x: 0, y: 0 };\n        let endPosition = { x: 0, y: 0 };\n        this.firstIndexes.forEach((firstIndex, i) => {\n            const lastIndex = this.lastIndexes[i];\n            // Get initial coordinates for the start/end of the line\n            startPosition = firstNote.getModifierStartXY(2, firstIndex);\n            endPosition = lastNote.getModifierStartXY(1, lastIndex);\n            const upwardsSlope = startPosition.y > endPosition.y;\n            // Adjust `x` coordinates for modifiers\n            startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;\n            endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;\n            // Adjust first `x` coordinates for displacements\n            const noteheadWidth = firstNote.getGlyphWidth();\n            const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;\n            if (firstDisplaced && firstNote.getStemDirection() === 1) {\n                startPosition.x += noteheadWidth + renderOptions.paddingLeft;\n            }\n            // Adjust last `x` coordinates for displacements\n            const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;\n            if (lastDisplaced && lastNote.getStemDirection() === -1) {\n                endPosition.x -= noteheadWidth + renderOptions.paddingRight;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            startPosition.y += upwardsSlope ? -3 : 1;\n            endPosition.y += upwardsSlope ? 2 : 0;\n            this.drawArrowLine(ctx, startPosition, endPosition);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const textWidth = ctx.measureText(this.text).width;\n        const justification = renderOptions.textJustification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = startPosition.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const deltaX = endPosition.x - startPosition.x;\n            const centerX = deltaX / 2 + startPosition.x;\n            x = centerX - textWidth / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = endPosition.x - textWidth;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const verticalPosition = renderOptions.textPositionVertical;\n        if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {\n            y = firstNote.checkStave().getYForTopText();\n        }\n        else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StaveNote_noteHeads, _StaveNote_sortedKeyProps;\nimport { BoundingBox } from './boundingbox';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        return Tables.lookupMetric('NoteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = __classPrivateFieldGet(notes[i], _StaveNote_sortedKeyProps, \"f\");\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL =\n                    line +\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);\n                minL =\n                    line -\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection,\n                stemMax,\n                stemMin,\n                voiceShift: notes[i].getVoiceShiftWidth(),\n                isDisplaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            // If .draw is true or undefined, we set draw[i] = true\n            draw[i] = notesList[i].note.renderOptions.draw !== false;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.renderOptions.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        const noteUHead = __classPrivateFieldGet(noteU.note, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.code;\n                        const noteLHead = __classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\")[__classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\").length - 1].keyProps.code;\n                        if (\n                        // If unison is not configured, shift\n                        !Tables.UNISON ||\n                            // If we have different noteheads, shift\n                            noteUHead !== noteLHead ||\n                            // If we have different dot values, shift\n                            noteU.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                .length !==\n                                noteL.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                    .length ||\n                            // If the notes are quite close but not on the same line, shift\n                            (lineDiff < 1 && lineDiff > 0) ||\n                            // If styles are different, shift\n                            JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line !== noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.note.duration < noteL.note.duration) {\n                            // upper voice is shorter, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.rightShift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.renderOptions.draw = false;\n            // Hide lower voice rest\n            noteL.note.renderOptions.draw = false;\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.rightShift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        _StaveNote_noteHeads.set(this, void 0);\n        // Sorted variant of keyProps used internally.\n        _StaveNote_sortedKeyProps.set(this, []);\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dotShiftY = 0;\n        // for displaced ledger lines\n        this.useDefaultHeadX = false;\n        // Drawing\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        this.modifiers = [];\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // font size for note heads and rests\n            glyphFontScale: noteStruct.glyphFontScale || Tables.lookupMetric('fontSize'), \n            // number of stroke px to the left and right of head\n            strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.autoStem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this.setStave(stave);\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.useDefaultHeadX = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                noteType: this.noteType,\n                displaced,\n                stemDirection,\n                customGlyphCode: noteProps.code,\n                glyphFontScale: this.renderOptions.glyphFontScale,\n                line: noteProps.line,\n            });\n            this.addChildElement(notehead);\n            __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[__classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].index] = notehead;\n        }\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.line;\n        this.maxLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        var _a;\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, this.noteType, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").push({ keyProps, index });\n        });\n        __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        var _a, _b;\n        this.boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            var _a;\n            (_a = this.boundingBox) === null || _a === void 0 ? void 0 : _a.mergeWith(notehead.getBoundingBox());\n        });\n        const { yTop, yBottom } = this.getNoteHeadBounds();\n        // eslint-disable-next-line\n        const noteStemHeight = this.stem.getHeight();\n        const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n        const flagY = this.getStemDirection() === Stem.DOWN\n            ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n            : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n        if (!this.isRest() && this.hasStem()) {\n            (_a = this.boundingBox) === null || _a === void 0 ? void 0 : _a.mergeWith(new BoundingBox(this.getAbsoluteX(), flagY, 0, 0));\n        }\n        const bbFlag = this.flag.getBoundingBox();\n        if (!this.isRest() && bbFlag) {\n            (_b = this.boundingBox) === null || _b === void 0 ? void 0 : _b.mergeWith(bbFlag.move(flagX, flagY));\n        }\n        return this.boundingBox;\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        const val = this.glyphProps.codeHead;\n        return val >= '\\ue4e0' && val <= '\\ue4ff';\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `textLine`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(yTop, yBottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.xShift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.xShift + 2;\n            if (this.stemDirection === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += this.flag.getWidth();\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        // addtional y shifts for rests\n        let restShift = 0;\n        switch (__classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].getText()) {\n            case '\\ue4e2' /*restDoubleWhole*/:\n            case '\\ue4e3' /*restWhole*/:\n                restShift += 0.5;\n                break;\n            case '\\ue4e4' /*restHalf*/:\n            case '\\ue4e5' /*restQuarter*/:\n            case '\\ue4e6' /*rest8th*/:\n            case '\\ue4e7' /*rest16th*/:\n                restShift -= 0.5;\n                break;\n            case '\\ue4e8' /*rest32nd*/:\n            case '\\ue4e9' /*rest64th*/:\n                restShift -= 1.5;\n                break;\n            case '\\ue4ea' /*rest128th*/:\n                restShift -= 2.5;\n                break;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flagStyle = style;\n    }\n    getFlagStyle() {\n        return this.flagStyle;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.noteHeads[0].getWidth();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} yTop the highest notehead bound\n     * @property {number} yBottom the lowest notehead bound\n     * @property {number|Null} displacedX the starting x for displaced noteheads\n     * @property {number|Null} nonDisplacedX the starting x for non-displaced noteheads\n     * @property {number} highestLine the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowestLine the lowest notehead line\n     * @property {number|false} highestDisplacedLine the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowestDisplacedLine\n     * @property {number} highestNonDisplacedLine\n     * @property {number} lowestNonDisplacedLine\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            yTop,\n            yBottom,\n            displacedX,\n            nonDisplacedX,\n            highestLine,\n            lowestLine,\n            highestDisplacedLine,\n            lowestDisplacedLine,\n            highestNonDisplacedLine,\n            lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.xShift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").slice();\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { renderOptions: { strokePx }, } = this;\n        const ctx = this.checkContext();\n        const width = this.getGlyphWidth() + strokePx * 2;\n        const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highestLine < 6 && lowestLine > 0)\n            return;\n        const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = minX - strokePx;\n            else if (normal)\n                x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;\n            else\n                x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highestLine; ++line) {\n            const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;\n            const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowestLine; --line) {\n            const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;\n            const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index];\n            if (notehead === noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.codeFlagUp !== undefined;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam && !this.isRest();\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : // Up stems are above the note head and have flags on the right.\n                    yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            // Draw the Flag\n            this.applyStyle(ctx, this.flagStyle);\n            this.flag.renderText(ctx, flagX, flagY);\n            this.restoreStyle(ctx, this.flagStyle);\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'), { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    /** Primarily used as the scaling factor for grace notes, GraceNote will return the required scale. */\n    getStaveNoteScale() {\n        return 1.0;\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const superStemExtension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return superStemExtension;\n        }\n        const stemDirection = this.getStemDirection();\n        if (stemDirection !== this.calculateOptimalStemDirection()) {\n            return superStemExtension; // no adjustment for manually set stem direction.\n        }\n        let midLineDistance;\n        const MIDDLE_LINE = 3;\n        if (stemDirection === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            midLineDistance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            midLineDistance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const linesOverOctaveFromMidLine = midLineDistance - 3.5;\n        if (linesOverOctaveFromMidLine <= 0) {\n            return superStemExtension;\n        }\n        const stave = this.getStave();\n        let spacingBetweenLines = 10;\n        if (stave !== undefined) {\n            spacingBetweenLines = stave.getSpacingBetweenLines();\n        }\n        return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.renderOptions.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\n_StaveNote_noteHeads = new WeakMap(), _StaveNote_sortedKeyProps = new WeakMap();\nStaveNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, yShift) {\n        super();\n        this.symbolType = type;\n        this.x = x;\n        this.xShift = 0;\n        this.yShift = yShift;\n    }\n    setShiftX(x) {\n        this.xShift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.yShift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbolType) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSegnoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSegnoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue048' /*coda*/;\n        this.renderText(stave.checkContext(), x, y + Tables.lookupMetric('Repetition.coda.offsetY'));\n        return this;\n    }\n    drawSegnoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = '\\ue047' /*segno*/;\n        this.renderText(stave.checkContext(), x, y + Tables.lookupMetric('Repetition.segno.offsetY'));\n        return this;\n    }\n    drawSymbolText(stave, x, text, drawCoda) {\n        const ctx = stave.checkContext();\n        let textX = 0;\n        this.text = text;\n        if (drawCoda) {\n            this.text += ' \\ue048' /*coda*/;\n        }\n        this.setFont(Tables.lookupMetricFontInfo('Repetition.text'));\n        switch (this.symbolType) {\n            // To the left\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                textX = stave.getVerticalBarWidth();\n                break;\n            // To the right\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n            default:\n                textX =\n                    x -\n                        (stave.getNoteStartX() - this.x) +\n                        stave.getWidth() -\n                        this.width -\n                        Tables.lookupMetric('Repetition.text.offsetX');\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) + Tables.lookupMetric('Repetition.text.offsetY');\n        this.renderText(ctx, textX, y);\n        return this;\n    }\n}\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x, yShift, drawRect = true) {\n        super();\n        this.setStaveSection(section);\n        this.x = x;\n        this.yShift = yShift;\n        this.drawRect = drawRect;\n    }\n    setStaveSection(section) {\n        this.text = section;\n        this.measureText();\n        return this;\n    }\n    draw(stave, xShift) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;\n        const width = this.width + 2 * padding; // add left & right padding\n        const height = this.height + 2 * padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.yShift;\n        const x = this.x + xShift;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        this.renderText(ctx, xShift + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Radosaw Eichler 2012\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StaveTempo_durationToCode;\nimport { Element } from './element';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shiftY) {\n        super();\n        _StaveTempo_durationToCode.set(this, {\n            '1/2': '\\ue1d0' /*metNoteDoubleWhole*/,\n            1: '\\ueca2' /*metNoteWhole*/,\n            2: '\\ueca3' /*metNoteHalfUp*/,\n            4: '\\ueca5' /*metNoteQuarterUp*/,\n            8: '\\ueca7' /*metNote8thUp*/,\n            16: '\\ueca9' /*metNote16thUp*/,\n            32: '\\uecab' /*metNote32ndUp*/,\n            64: '\\uecad' /*metNote64thUp*/,\n            128: '\\uecaf' /*metNote128thUp*/,\n            256: '\\uecb1' /*metNote256thUp*/,\n            512: '\\uecb3' /*metNote512thUp*/,\n            1024: '\\uecb5' /*metNote1024thUp*/,\n        });\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.setXShift(10);\n        this.setYShift(shiftY);\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    draw(stave, shiftX) {\n        var _a;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = (_a = this.tempo.dots) !== null && _a !== void 0 ? _a : 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + shiftX;\n        const y = stave.getYForTopText(1);\n        ctx.save();\n        if (name) {\n            this.text = name;\n            this.textFont = Tables.lookupMetricFontInfo('StaveTempo.name');\n            this.measureText();\n            this.renderText(ctx, shiftX, y);\n            x += this.getWidth();\n        }\n        if (duration && bpm) {\n            if (name) {\n                x += 2;\n                ctx.setFont(Tables.lookupMetricFontInfo('StaveTempo'));\n                ctx.fillText('(', x + this.xShift, y + this.yShift);\n                x += 5;\n            }\n            x += 3;\n            const el = new Element('StaveTempo.glyph');\n            el.setText(__classPrivateFieldGet(this, _StaveTempo_durationToCode, \"f\")[Tables.sanitizeDuration(duration)]);\n            el.measureText();\n            el.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += el.getWidth();\n            // Draw dot\n            ctx.setFont(Tables.lookupMetricFontInfo('StaveTempo.glyph'));\n            for (let i = 0; i < dots; i++) {\n                x += 6;\n                ctx.fillText('\\uecb7' /*metAugmentationDot*/, x + this.xShift, y + 2 + this.yShift);\n            }\n            ctx.setFont(Tables.lookupMetricFontInfo('StaveTempo'));\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 + this.xShift, y + this.yShift);\n        }\n        ctx.restore();\n        return this;\n    }\n}\n_StaveTempo_durationToCode = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        var _a, _b, _c;\n        super();\n        this.setText(text);\n        this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.position = position;\n        this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;\n        this.measureText();\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - this.width - 24;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX();\n                if (this.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - this.width / 2;\n                }\n                else if (this.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - this.width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2);\n                }\n                else {\n                    y = stave.getYForBottomText(2);\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        this.renderText(ctx, x, y + 4);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text = '') {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.renderOptions = {\n            cp1: 8,\n            cp2: 12,\n            textShiftX: 0,\n            firstXShift: 0,\n            lastXShift: 0,\n            yShift: 7,\n            tieSpacing: 0,\n        };\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes) {\n            notes.firstIndexes = [0];\n        }\n        if (!notes.lastIndexes) {\n            notes.lastIndexes = [0];\n        }\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.firstNote || !this.notes.lastNote;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.renderOptions.cp1;\n        let cp2 = this.renderOptions.cp2;\n        if (Math.abs(params.lastX - params.firstX) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const firstXShift = this.renderOptions.firstXShift;\n        const lastXShift = this.renderOptions.lastXShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        // setNotes(...) verified that firstIndexes and lastIndexes are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        // eslint-disable-next-line\n        const lastIndexes = this.notes.lastIndexes;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;\n            // firstY and lastY are specified in pixels.\n            const firstY = params.firstYs[firstIndexes[i]] + yShift;\n            const lastY = params.lastYs[lastIndexes[i]] + yShift;\n            if (isNaN(firstY) || isNaN(lastY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');\n            }\n            const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;\n            const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.firstX + firstXShift, firstY);\n            ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);\n            ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    /**\n     * @param firstX specified in pixels\n     * @param lastX specified in pixels\n     */\n    renderTieText(firstX, lastX) {\n        var _a, _b, _c;\n        const ctx = this.checkContext();\n        let centerX = (firstX + lastX) / 2;\n        centerX -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.notes.firstNote;\n        const lastNote = this.notes.lastNote;\n        // Provide some default values so the compiler doesn't complain.\n        // firstX and lastX are in pixels.\n        let firstX = 0;\n        let lastX = 0;\n        let firstYs = [0];\n        let lastYs = [0];\n        let stemDirection = 0;\n        if (firstNote) {\n            firstX = firstNote.getTieRightX() + this.renderOptions.tieSpacing;\n            stemDirection = firstNote.getStemDirection();\n            firstYs = firstNote.getYs();\n        }\n        else if (lastNote) {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstYs = lastNote.getYs();\n            this.notes.firstIndexes = this.notes.lastIndexes;\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX() + this.renderOptions.tieSpacing;\n            stemDirection = lastNote.getStemDirection();\n            lastYs = lastNote.getYs();\n        }\n        else if (firstNote) {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastYs = firstNote.getYs();\n            this.notes.lastIndexes = this.notes.firstIndexes;\n        }\n        if (this.direction) {\n            stemDirection = this.direction;\n        }\n        this.renderTie({\n            firstX,\n            lastX,\n            firstYs,\n            lastYs,\n            direction: stemDirection,\n        });\n        this.renderTieText(firstX, lastX);\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, label, x, yShift) {\n        super();\n        this.type = type;\n        this.x = x;\n        this.yShift = yShift;\n        this.text = label;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;\n        const vertHeight = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.type) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {\n            this.renderText(ctx, x + 5, topY - this.yShift + 15);\n        }\n        ctx.fillRect(this.x + x, topY, width, 1);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super();\n        this.stemUpYOffset = 0;\n        this.stemDownYOffset = 0;\n        this.stemUpYBaseOffset = 0;\n        this.stemDownYBaseOffset = 0;\n        // Default notehead x bounds\n        this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;\n        this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;\n        // Y bounds for top/bottom most notehead\n        this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;\n        this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;\n        // Stem top extension\n        this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;\n        // Direction of the stem\n        this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        var _a, _b, _c, _d;\n        // Changing where the stem meets the head\n        this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;\n        this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;\n        this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;\n        this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(xBegin, xEnd) {\n        this.xBegin = xBegin;\n        this.xEnd = xEnd;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stemDirection = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stemExtension = ext;\n    }\n    getExtension() {\n        return this.stemExtension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(yTop, yBottom) {\n        this.yTop = yTop;\n        this.yBottom = yBottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;\n        const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension); // parentheses just for grouping.\n        return unsignedHeight * this.stemDirection;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stemDirection === Stem.UP;\n        const ys = [this.yTop, this.yBottom];\n        const stemHeight = Stem.HEIGHT + this.stemExtension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Tables.lookupMetric('Stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stemX;\n        let stemY;\n        const stemDirection = this.stemDirection;\n        let yBaseOffset = 0;\n        if (stemDirection === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stemX = this.xBegin;\n            stemY = this.yTop + this.stemDownYOffset;\n            yBaseOffset = this.stemDownYBaseOffset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stemX = this.xEnd;\n            stemY = this.yBottom - this.stemUpYOffset;\n            yBaseOffset = this.stemUpYBaseOffset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'), { pointerBBox: true });\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);\n        ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.flag = new Element();\n        this.flagStyle = {};\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag() {\n        var _a, _b, _c;\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = \n            // codeFlagDown = codeFlagUp + 1\n            // if codeFlagUp is undefined, codePoint will be 0\n            this.getStemDirection() === Stem.DOWN\n                ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)\n                : (_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null;\n            this.flag.setText(flagCode);\n            this.flag.fontSize = this.renderOptions.glyphFontScale;\n            this.flag.measureText();\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beamCount;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        const beamIsUndefined = this.beam === undefined;\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n            case '16':\n                length = beamIsUndefined ? 35 : 25;\n                break;\n            case '32':\n                length = beamIsUndefined ? 45 : 35;\n                break;\n            case '64':\n                length = beamIsUndefined ? 50 : 40;\n                break;\n            case '128':\n                length = beamIsUndefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stemDirection)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stemDirection;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stemDirection = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const xBegin = this.getAbsoluteX() + this.xShift;\n        const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();\n        const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;\n        return stemX;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;\n    }\n    /** Primarily used as the scaling factor for grace notes, GraceNote will return the required scale. */\n    getStaveNoteScale() {\n        return 1.0;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        const flagHeight = this.flag.getHeight();\n        const scale = this.getStaveNoteScale();\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        // Use stemBeamExtension with beams\n        if (this.beam) {\n            return glyphProps.stemBeamExtension * scale;\n        }\n        // If the flag is longer than the stem, extend the stem by the difference.\n        return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stemExtensionOverride = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        /**\n         * The modifier context's leftShift state.\n         */\n        const leftShift = state.leftShift;\n        /**\n         * The modifier context's rightShift state.\n         */\n        const rightShift = state.rightShift;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let extraXSpaceForDisplacedNotehead = 0;\n        let shiftRight = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.textLine = mc.getState().topTextLine;\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.textLine = mc.getState().textLine;\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (pos === Modifier.Position.LEFT) {\n                        extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            numsList.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: extraXSpaceForDisplacedNotehead,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort string numbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            const note = numsList[i].note;\n            const pos = numsList[i].pos;\n            const num = numsList[i].num;\n            const line = numsList[i].line;\n            const shiftR = numsList[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            let numXShift = 0;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);\n                numXShift = numWidth; // spacing\n                xWidthL = Math.max(numXShift, xWidthL);\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numXShift += numWidth; // spacing\n                xWidthR = numXShift > xWidthR ? numXShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.stringNumber = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.xShift = 0;\n        this.yShift = 0;\n        this.textLine = 0;\n        this.stemOffset = 0;\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.stringNumber = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.lastNote = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dotX = start.x + this.xShift + this.xOffset;\n        let stemExt = {};\n        if (note.hasStem()) {\n            stemExt = note.checkStem().getExtents();\n        }\n        let dotY = start.y + this.yShift + this.yOffset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.UP) {\n                        dotY = stemExt.topY + Tables.lookupMetric('StringNumber.stemPadding');\n                    }\n                    dotY -=\n                        this.radius +\n                            Tables.lookupMetric('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.DOWN) {\n                        dotY = stemExt.topY - Tables.lookupMetric('StringNumber.stemPadding');\n                    }\n                    dotY +=\n                        this.radius +\n                            Tables.lookupMetric('StringNumber.verticalPadding') +\n                            this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.radius / 2 + Tables.lookupMetric('StringNumber.leftPadding');\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += this.radius / 2 + Tables.lookupMetric('StringNumber.rightPadding');\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.textFont);\n        const x = dotX - ctx.measureText(this.stringNumber).width / 2;\n        ctx.fillText('' + this.stringNumber, x, dotY + 4.5);\n        const lastNote = this.lastNote;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const leftShift = state.leftShift;\n        const strokeSpacing = 5;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = leftShift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + strokeSpacing, xShift);\n        }, 0);\n        state.leftShift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ allVoices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.allVoices = this.options.allVoices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.renderOptions = {\n            fontScale: Tables.lookupMetric('Stroke.fontSize'),\n        };\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.noteEnd = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let yPositions = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const lineSpace = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                yPositions = note.getYs();\n                for (let n = 0; n < yPositions.length; n++) {\n                    if (this.note === notes[i] || this.allVoices) {\n                        topY = Math.min(topY, yPositions[n]);\n                        botY = Math.max(botY, yPositions[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrowY = 0;\n        let textY = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = '\\ueb78' /*arrowheadBlackUp*/;\n                arrowY = topY;\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = '\\ueb7c' /*arrowheadBlackDown*/;\n                arrowY = botY + lineSpace;\n                topY -= lineSpace / 2;\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.xShift, topY, 1, botY - topY);\n        }\n        else {\n            // Select the wiggle glyph depending on the arrow direction\n            const lineGlyph = arrow === '\\ueb7c' /*arrowheadBlackDown*/ ? '\\ueaaa' /*wiggleArpeggiatoDown*/ : '\\ueaa9'; /*wiggleArpeggiatoUp*/\n            let txt = '';\n            const el = new Element();\n            // add glyphs until the required length is achieved\n            while (el.getWidth() < botY - topY) {\n                txt += lineGlyph;\n                el.setText(txt);\n                el.measureText();\n            }\n            if (this.type === Stroke.Type.RASQUEDO_DOWN ||\n                this.type === Stroke.Type.ROLL_DOWN ||\n                this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n                ctx.openRotation(90, x + this.xShift, topY);\n                el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = topY + el.getWidth() + 5;\n            }\n            else {\n                ctx.openRotation(-90, x + this.xShift, botY);\n                el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = botY - el.getWidth() - 5;\n            }\n        }\n        // Draw the arrow head\n        if (arrowY !== 0) {\n            const el = new Element();\n            el.setText(arrow);\n            el.measureText();\n            el.renderText(ctx, \n            // Center the arrow head substracting its width / 2\n            x + this.xShift - el.getWidth() / 2, arrowY);\n        }\n        // Draw the rasquedo \"R\"\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            const el = new Element('Stroke.text');\n            el.setText('R');\n            el.measureText();\n            el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASQUEDO_DOWN ? el.getHeight() : 0));\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Gregory Ristow (2015)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SVGContext_instances, _SVGContext_getShadowStyle;\nimport { Font, FontStyle, FontWeight } from './font';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n    constructor() {\n        // The cache is keyed first by the text string, then by the font attributes\n        // joined together.\n        this.cache = {};\n    }\n    lookup(text, svg, attributes) {\n        let entries = this.cache[text];\n        if (entries === undefined) {\n            entries = {};\n            this.cache[text] = entries;\n        }\n        const family = attributes['font-family'];\n        const size = attributes['font-size'];\n        const weight = attributes['font-weight'];\n        const style = attributes['font-style'];\n        const key = `${family}%${size}%${weight}%${style}`;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = this.measureImpl(text, svg, attributes);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n    measureImpl(text, svg, attributes) {\n        let txt = this.txt;\n        if (!txt) {\n            // Create the SVG text element that will be used to measure text in the event\n            // of a cache miss.\n            txt = document.createElementNS(SVG_NS, 'text');\n            this.txt = txt;\n        }\n        txt.textContent = text;\n        if (attributes['font-family'])\n            txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n        if (attributes['font-size'])\n            txt.setAttributeNS(null, 'font-size', `${attributes['font-size']}`);\n        if (attributes['font-style'])\n            txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n        if (attributes['font-weight'])\n            txt.setAttributeNS(null, 'font-weight', `${attributes['font-weight']}`);\n        svg.appendChild(txt);\n        const bbox = txt.getBBox();\n        svg.removeChild(txt);\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\n    }\n}\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        _SVGContext_instances.add(this);\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Font.SANS_SERIF,\n            'font-size': Font.SIZE + 'pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadowAttributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.stateStack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    openRotation(angleDegrees, x, y) {\n        this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);\n    }\n    closeRotation() {\n        this.closeGroup();\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadowAttributes.color = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.shadowAttributes.width = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBoxOrMinX, minY, width, height) {\n        if (typeof viewBoxOrMinX === 'string') {\n            this.svg.setAttribute('viewBox', viewBoxOrMinX);\n        }\n        else {\n            const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length === 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadowAttributes.width > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    // TODO: State should be deep-copied.\n    save() {\n        this.stateStack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadowAttributes: {\n                width: this.shadowAttributes.width,\n                color: this.shadowAttributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    // TODO: State should be deep-restored.\n    restore() {\n        const savedState = this.stateStack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadowAttributes.width = state.shadowAttributes.width;\n            this.shadowAttributes.color = state.shadowAttributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\n_SVGContext_instances = new WeakSet(), _SVGContext_getShadowStyle = function _SVGContext_getShadowStyle() {\n    const sa = this.shadowAttributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n};\nSVGContext.measureTextCache = new MeasureTextCache();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n        return this;\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n        return this;\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            topStave: this.partStaves[0],\n            bottomStave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ leftBar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const optionsDetails = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(optionsDetails);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(optionsDetails);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Fraction } from './fraction';\nimport { Glyphs } from './glyphs';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n// eslint-disable-next-line\nexport const CommonMetrics = {\n    fontFamily: 'Bravura',\n    fontSize: 30,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    Accidental: {\n        cautionary: {\n            fontSize: 20,\n        },\n        grace: {\n            fontSize: 25,\n        },\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    Annotation: {\n        fontSize: 10,\n    },\n    Bend: {\n        fontSize: 10,\n    },\n    ChordSymbol: {\n        fontSize: 12,\n        spacing: 0.05,\n        subscriptOffset: 0.2,\n        superscriptOffset: -0.4,\n        superSubRatio: 0.6,\n    },\n    FretHandFinger: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n    NoteHead: {\n        minPadding: 2,\n    },\n    PedalMarking: {\n        text: {\n            fontSize: 12,\n            fontStyle: 'italic',\n        },\n    },\n    Repetition: {\n        text: {\n            fontSize: 12,\n            fontWeight: 'bold',\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    Stave: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 8,\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    StaveConnector: {\n        text: {\n            fontSize: 16,\n        },\n    },\n    StaveLine: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 10,\n    },\n    StaveSection: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 10,\n        fontWeight: 'bold',\n    },\n    StaveTempo: {\n        fontSize: 14,\n        glyph: {\n            fontSize: 25,\n        },\n        name: {\n            fontWeight: 'bold',\n        },\n    },\n    StaveText: {\n        fontSize: 16,\n    },\n    StaveTie: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 10,\n    },\n    StringNumber: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 10,\n        fontWeight: 'bold',\n        verticalPadding: 8,\n        stemPadding: 2,\n        leftPadding: 5,\n        rightPadding: 6,\n    },\n    Stroke: {\n        text: {\n            fontSize: 10,\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n        },\n    },\n    TabNote: {\n        text: {\n            fontSize: 9,\n        },\n    },\n    TabSlide: {\n        fontFamily: 'Times New Roman, serif',\n        fontSize: 10,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    },\n    TabTie: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 10,\n    },\n    TextBracket: {\n        fontSize: 15,\n        fontStyle: 'italic',\n    },\n    TextNote: {\n        text: {\n            fontSize: 12,\n        },\n    },\n    Tremolo: {\n        spacing: 7,\n    },\n    Volta: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n};\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { accidental: 'b', num: 1 },\n    Dm: { accidental: 'b', num: 1 },\n    Bb: { accidental: 'b', num: 2 },\n    Gm: { accidental: 'b', num: 2 },\n    Eb: { accidental: 'b', num: 3 },\n    Cm: { accidental: 'b', num: 3 },\n    Ab: { accidental: 'b', num: 4 },\n    Fm: { accidental: 'b', num: 4 },\n    Db: { accidental: 'b', num: 5 },\n    Bbm: { accidental: 'b', num: 5 },\n    Gb: { accidental: 'b', num: 6 },\n    Ebm: { accidental: 'b', num: 6 },\n    Cb: { accidental: 'b', num: 7 },\n    Abm: { accidental: 'b', num: 7 },\n    G: { accidental: '#', num: 1 },\n    Em: { accidental: '#', num: 1 },\n    D: { accidental: '#', num: 2 },\n    Bm: { accidental: '#', num: 2 },\n    A: { accidental: '#', num: 3 },\n    'F#m': { accidental: '#', num: 3 },\n    E: { accidental: '#', num: 4 },\n    'C#m': { accidental: '#', num: 4 },\n    B: { accidental: '#', num: 5 },\n    'G#m': { accidental: '#', num: 5 },\n    'F#': { accidental: '#', num: 6 },\n    'D#m': { accidental: '#', num: 6 },\n    'C#': { accidental: '#', num: 7 },\n    'A#m': { accidental: '#', num: 7 },\n};\nconst clefs = {\n    treble: { lineShift: 0 },\n    bass: { lineShift: 6 },\n    tenor: { lineShift: 4 },\n    alto: { lineShift: 3 },\n    soprano: { lineShift: 1 },\n    percussion: { lineShift: 0 },\n    'mezzo-soprano': { lineShift: 2 },\n    'baritone-c': { lineShift: 5 },\n    'baritone-f': { lineShift: 5 },\n    subbass: { lineShift: 7 },\n    french: { lineShift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, intVal: 0 },\n    CN: { index: 0, intVal: 0 },\n    'C#': { index: 0, intVal: 1 },\n    'C##': { index: 0, intVal: 2 },\n    CB: { index: 0, intVal: 11 },\n    CBB: { index: 0, intVal: 10 },\n    D: { index: 1, intVal: 2 },\n    DN: { index: 1, intVal: 2 },\n    'D#': { index: 1, intVal: 3 },\n    'D##': { index: 1, intVal: 4 },\n    DB: { index: 1, intVal: 1 },\n    DBB: { index: 1, intVal: 0 },\n    E: { index: 2, intVal: 4 },\n    EN: { index: 2, intVal: 4 },\n    'E#': { index: 2, intVal: 5 },\n    'E##': { index: 2, intVal: 6 },\n    EB: { index: 2, intVal: 3 },\n    EBB: { index: 2, intVal: 2 },\n    F: { index: 3, intVal: 5 },\n    FN: { index: 3, intVal: 5 },\n    'F#': { index: 3, intVal: 6 },\n    'F##': { index: 3, intVal: 7 },\n    FB: { index: 3, intVal: 4 },\n    FBB: { index: 3, intVal: 3 },\n    G: { index: 4, intVal: 7 },\n    GN: { index: 4, intVal: 7 },\n    'G#': { index: 4, intVal: 8 },\n    'G##': { index: 4, intVal: 9 },\n    GB: { index: 4, intVal: 6 },\n    GBB: { index: 4, intVal: 5 },\n    A: { index: 5, intVal: 9 },\n    AN: { index: 5, intVal: 9 },\n    'A#': { index: 5, intVal: 10 },\n    'A##': { index: 5, intVal: 11 },\n    AB: { index: 5, intVal: 8 },\n    ABB: { index: 5, intVal: 7 },\n    B: { index: 6, intVal: 11 },\n    BN: { index: 6, intVal: 11 },\n    'B#': { index: 6, intVal: 12 },\n    'B##': { index: 6, intVal: 13 },\n    BB: { index: 6, intVal: 10 },\n    BBB: { index: 6, intVal: 9 },\n    R: { index: 6 },\n    X: { index: 6 },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': '\\ue262' /*accidentalSharp*/,\n    '##': '\\ue263' /*accidentalDoubleSharp*/,\n    b: '\\ue260' /*accidentalFlat*/,\n    bb: '\\ue264' /*accidentalDoubleFlat*/,\n    n: '\\ue261' /*accidentalNatural*/,\n    '{': '\\ue26a' /*accidentalParensLeft*/,\n    '}': '\\ue26b' /*accidentalParensRight*/,\n    db: '\\ue281' /*accidentalThreeQuarterTonesFlatZimmermann*/,\n    d: '\\ue280' /*accidentalQuarterToneFlatStein*/,\n    '++': '\\ue283' /*accidentalThreeQuarterTonesSharpStein*/,\n    '+': '\\ue282' /*accidentalQuarterToneSharpStein*/,\n    '+-': '\\ue446' /*accidentalKucukMucennebSharp*/,\n    bs: '\\ue442' /*accidentalBakiyeFlat*/,\n    bss: '\\ue440' /*accidentalBuyukMucennebFlat*/,\n    o: '\\ue461' /*accidentalSori*/,\n    k: '\\ue460' /*accidentalKoron*/,\n    bbs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    '++-': '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    ashs: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n    afhf: '\\ue447' /*accidentalBuyukMucennebSharp*/,\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        secondOnBottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spacedOutTetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spacedOutPentachord: [1, 2, 3, 2, 1],\n        verySpacedOutPentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spacedOutHexachord: [1, 3, 2, 1, 3, 2],\n        verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: '\\ue1e7' /*augmentationDot*/, betweenLines: true },\n    av: {\n        aboveCode: '\\ue4a6' /*articStaccatissimoAbove*/,\n        belowCode: '\\ue4a7' /*articStaccatissimoBelow*/,\n        betweenLines: true,\n    },\n    'a>': {\n        aboveCode: '\\ue4a0' /*articAccentAbove*/,\n        belowCode: '\\ue4a1' /*articAccentBelow*/,\n        betweenLines: true,\n    },\n    'a-': {\n        aboveCode: '\\ue4a4' /*articTenutoAbove*/,\n        belowCode: '\\ue4a5' /*articTenutoBelow*/,\n        betweenLines: true,\n    },\n    'a^': {\n        aboveCode: '\\ue4ac' /*articMarcatoAbove*/,\n        belowCode: '\\ue4ad' /*articMarcatoBelow*/,\n        betweenLines: false,\n    },\n    'a+': { code: '\\ue633' /*pluckedLeftHandPizzicato*/, betweenLines: false },\n    ao: {\n        aboveCode: '\\ue631' /*pluckedSnapPizzicatoAbove*/,\n        belowCode: '\\ue630' /*pluckedSnapPizzicatoBelow*/,\n        betweenLines: false,\n    },\n    ah: { code: '\\ue614' /*stringsHarmonic*/, betweenLines: false },\n    'a@': { aboveCode: '\\ue4c0' /*fermataAbove*/, belowCode: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@a': { code: '\\ue4c0' /*fermataAbove*/, betweenLines: false },\n    'a@u': { code: '\\ue4c1' /*fermataBelow*/, betweenLines: false },\n    'a@s': { aboveCode: '\\ue4c4' /*fermataShortAbove*/, belowCode: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@as': { code: '\\ue4c4' /*fermataShortAbove*/, betweenLines: false },\n    'a@us': { code: '\\ue4c5' /*fermataShortBelow*/, betweenLines: false },\n    'a@l': { aboveCode: '\\ue4c6' /*fermataLongAbove*/, belowCode: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@al': { code: '\\ue4c6' /*fermataLongAbove*/, betweenLines: false },\n    'a@ul': { code: '\\ue4c7' /*fermataLongBelow*/, betweenLines: false },\n    'a@vl': {\n        aboveCode: '\\ue4c8' /*fermataVeryLongAbove*/,\n        belowCode: '\\ue4c9' /*fermataVeryLongBelow*/,\n        betweenLines: false,\n    },\n    'a@avl': { code: '\\ue4c8' /*fermataVeryLongAbove*/, betweenLines: false },\n    'a@uvl': { code: '\\ue4c9' /*fermataVeryLongBelow*/, betweenLines: false },\n    'a|': { code: '\\ue612' /*stringsUpBow*/, betweenLines: false },\n    am: { code: '\\ue610' /*stringsDownBow*/, betweenLines: false },\n    'a,': { code: '\\ue805' /*pictChokeCymbal*/, betweenLines: false }, // Choked\n};\nconst ornaments = {\n    mordent: '\\ue56c' /*ornamentShortTrill*/,\n    mordentInverted: '\\ue56d' /*ornamentMordent*/,\n    turn: '\\ue567' /*ornamentTurn*/,\n    turnInverted: '\\ue569' /*ornamentTurnSlash*/,\n    tr: '\\ue566' /*ornamentTrill*/,\n    upprall: '\\ue5b5' /*ornamentPrecompSlideTrillDAnglebert*/,\n    downprall: '\\ue5c3' /*ornamentPrecompDoubleCadenceUpperPrefix*/,\n    prallup: '\\ue5bb' /*ornamentPrecompTrillSuffixDandrieu*/,\n    pralldown: '\\ue5c8' /*ornamentPrecompTrillLowerSuffix*/,\n    upmordent: '\\ue5b8' /*ornamentPrecompSlideTrillBach*/,\n    downmordent: '\\ue5c4' /*ornamentPrecompDoubleCadenceUpperPrefixTurn*/,\n    lineprall: '\\ue5b2' /*ornamentPrecompAppoggTrill*/,\n    prallprall: '\\ue56e' /*ornamentTremblement*/,\n    scoop: '\\ue5d0' /*brassScoop*/,\n    doit: '\\ue5d5' /*brassDoitMedium*/,\n    fall: '\\ue5d7' /*brassFallLipShort*/,\n    doitLong: '\\ue5d2' /*brassLiftMedium*/,\n    fallLong: '\\ue5de' /*brassFallRoughMedium*/,\n    bend: '\\ue5e3' /*brassBend*/,\n    plungerClosed: '\\ue5e5' /*brassMuteClosed*/,\n    plungerOpen: '\\ue5e7' /*brassMuteOpen*/,\n    flip: '\\ue5e1' /*brassFlip*/,\n    jazzTurn: '\\ue5e4' /*brassJazzTurn*/,\n    smear: '\\ue5e2' /*brassSmear*/,\n};\nexport class Tables {\n    /**\n     * @returns the `Font` object at the head of the music font stack.\n     */\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /** Use the provided key to look up a FontInfo in CommonMetrics. **/\n    static lookupMetricFontInfo(key) {\n        return {\n            family: Tables.lookupMetric(`${key}.fontFamily`),\n            size: Tables.lookupMetric(`${key}.fontSize`),\n            weight: Tables.lookupMetric(`${key}.fontWeight`),\n            style: Tables.lookupMetric(`${key}.fontStyle`),\n        };\n    }\n    /**\n     * Use the provided key to look up a value in CommonMetrics.\n     *\n     * @param key is a string separated by periods (e.g., `Stroke.text.fontFamily`).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     *\n     * For the key `Stroke.text.fontFamily`, check all of the following in order:\n     *   1) CommonMetrics.fontFamily\n     *   2) CommonMetrics.Stroke.fontFamily\n     *   3) CommonMetrics.Stroke.text.fontFamily\n     * Retrieve the value from the most specific key (i.e., prefer #3 over #2 over #1 in the above example).\n     */\n    // eslint-disable-next-line\n    static lookupMetric(key, defaultValue) {\n        var _a;\n        const keyParts = key.split('.');\n        const lastKeyPart = keyParts.pop(); // Use ! because keyParts is not empty, since ''.split('.') still returns [''].\n        // Start from root of CommonMetrics and go down as far as possible.\n        let curr = CommonMetrics;\n        let retVal = defaultValue;\n        while (curr) {\n            // Update retVal whenever we find a value assigned to a more specific key.\n            retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;\n            const keyPart = keyParts.shift();\n            if (keyPart) {\n                curr = curr[keyPart]; // Go down one level.\n            }\n            else {\n                break;\n            }\n        }\n        return retVal;\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octaveShift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {\n        let options = { octaveShift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        type = type.toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        let octave = parseInt(pieces[1], 10);\n        // .octaveShift is the shift to compensate for clef 8va/8vb.\n        octave += -1 * options.octaveShift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).lineShift;\n        // Integer value for note arithmetic.\n        const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        let code = '';\n        let glyphName = 'N';\n        if (pieces.length > 2 && pieces[2]) {\n            glyphName = pieces[2].toUpperCase();\n        }\n        else if (type !== 'N') {\n            glyphName = type;\n        }\n        else\n            glyphName = key;\n        code = this.codeNoteHead(glyphName, duration);\n        return {\n            key,\n            octave,\n            line,\n            intValue,\n            code,\n            displaced: false,\n        };\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(accidental) {\n        var _a;\n        return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;\n    }\n    static ornamentCodes(ornament) {\n        var _a;\n        return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.accidental) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.accidental];\n        const accList = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            accList.push({ type: keySpec.accidental, line });\n        }\n        return accList;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                return '\\ue0d8' /*noteheadDiamondWhole*/;\n            case 'D1':\n                return '\\ue0d9' /*noteheadDiamondHalf*/;\n            case 'D2':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'D3':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            /* Triangle */\n            case 'T0':\n                return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n            case 'T1':\n                return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n            case 'T2':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'T3':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            /* Cross */\n            case 'X0':\n                return '\\ue0a7' /*noteheadXWhole*/;\n            case 'X1':\n                return '\\ue0a8' /*noteheadXHalf*/;\n            case 'X2':\n                return '\\ue0a9' /*noteheadXBlack*/;\n            case 'X3':\n                return '\\ue0b3' /*noteheadCircleX*/;\n            /* Square */\n            case 'S1':\n                return '\\ue0b8' /*noteheadSquareWhite*/;\n            case 'S2':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            /* Rectangle */\n            case 'R1':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'R2':\n                return '\\ue0b8' /*noteheadSquareWhite*/; // no smufl code\n            case 'DO':\n                return '\\ue0be' /*noteheadTriangleUpBlack*/;\n            case 'RE':\n                return '\\ue0cb' /*noteheadMoonBlack*/;\n            case 'MI':\n                return '\\ue0db' /*noteheadDiamondBlack*/;\n            case 'FA':\n                return '\\ue0c0' /*noteheadTriangleLeftBlack*/;\n            case 'FAUP':\n                return '\\ue0c2' /*noteheadTriangleRightBlack*/;\n            case 'SO':\n                return '\\ue0a4' /*noteheadBlack*/;\n            case 'LA':\n                return '\\ue0b9' /*noteheadSquareBlack*/;\n            case 'TI':\n                return '\\ue0cd' /*noteheadTriangleRoundDownBlack*/;\n            case 'DI': // Diamond\n            case 'H': // Harmonics\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d7' /*noteheadDiamondDoubleWhole*/;\n                    case '1':\n                        return '\\ue0d8' /*noteheadDiamondWhole*/;\n                    case '2':\n                        return '\\ue0d9' /*noteheadDiamondHalf*/;\n                    default:\n                        return '\\ue0db' /*noteheadDiamondBlack*/;\n                }\n            case 'X':\n            case 'M': // Muted\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a6' /*noteheadXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a7' /*noteheadXWhole*/;\n                    case '2':\n                        return '\\ue0a8' /*noteheadXHalf*/;\n                    default:\n                        return '\\ue0a9' /*noteheadXBlack*/;\n                }\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0b0' /*noteheadCircleXDoubleWhole*/;\n                    case '1':\n                        return '\\ue0b1' /*noteheadCircleXWhole*/;\n                    case '2':\n                        return '\\ue0b2' /*noteheadCircleXHalf*/;\n                    default:\n                        return '\\ue0b3' /*noteheadCircleX*/;\n                }\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0e7' /*noteheadCircledDoubleWhole*/;\n                    case '1':\n                        return '\\ue0e6' /*noteheadCircledWhole*/;\n                    case '2':\n                        return '\\ue0e5' /*noteheadCircledHalf*/;\n                    default:\n                        return '\\ue0e4' /*noteheadCircledBlack*/;\n                }\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a1' /*noteheadDoubleWholeSquare*/;\n                    case '1':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    case '2':\n                        return '\\ue0b8' /*noteheadSquareWhite*/;\n                    default:\n                        return '\\ue0b9' /*noteheadSquareBlack*/;\n                }\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0ba' /*noteheadTriangleUpDoubleWhole*/;\n                    case '1':\n                        return '\\ue0bb' /*noteheadTriangleUpWhole*/;\n                    case '2':\n                        return '\\ue0bc' /*noteheadTriangleUpHalf*/;\n                    default:\n                        return '\\ue0be' /*noteheadTriangleUpBlack*/;\n                }\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0c3' /*noteheadTriangleDownDoubleWhole*/;\n                    case '1':\n                        return '\\ue0c4' /*noteheadTriangleDownWhole*/;\n                    case '2':\n                        return '\\ue0c5' /*noteheadTriangleDownHalf*/;\n                    default:\n                        return '\\ue0c7' /*noteheadTriangleDownBlack*/;\n                }\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d5' /*noteheadSlashedDoubleWhole1*/;\n                    case '1':\n                        return '\\ue0d3' /*noteheadSlashedWhole1*/;\n                    case '2':\n                        return '\\ue0d1' /*noteheadSlashedHalf1*/;\n                    default:\n                        return '\\ue0cf' /*noteheadSlashedBlack1*/;\n                }\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0d6' /*noteheadSlashedDoubleWhole2*/;\n                    case '1':\n                        return '\\ue0d4' /*noteheadSlashedWhole2*/;\n                    case '2':\n                        return '\\ue0d2' /*noteheadSlashedHalf2*/;\n                    default:\n                        return '\\ue0d0' /*noteheadSlashedBlack2*/;\n                }\n            case 'R':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue4e2' /*restDoubleWhole*/;\n                    case '1':\n                        return '\\ue4e3' /*restWhole*/;\n                    case '2':\n                        return '\\ue4e4' /*restHalf*/;\n                    case '4':\n                        return '\\ue4e5' /*restQuarter*/;\n                    case '8':\n                        return '\\ue4e6' /*rest8th*/;\n                    case '16':\n                        return '\\ue4e7' /*rest16th*/;\n                    case '32':\n                        return '\\ue4e8' /*rest32nd*/;\n                    case '64':\n                        return '\\ue4e9' /*rest64th*/;\n                    case '128':\n                        return '\\ue4ea' /*rest128th*/;\n                }\n                break;\n            case 'S':\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue10a' /*noteheadSlashWhiteDoubleWhole*/;\n                    case '1':\n                        return '\\ue102' /*noteheadSlashWhiteWhole*/;\n                    case '2':\n                        return '\\ue103' /*noteheadSlashWhiteHalf*/;\n                    default:\n                        return '\\ue100' /*noteheadSlashVerticalEnds*/;\n                }\n            default:\n                switch (duration) {\n                    case '1/2':\n                        return '\\ue0a0' /*noteheadDoubleWhole*/;\n                    case '1':\n                        return '\\ue0a2' /*noteheadWhole*/;\n                    case '2':\n                        return '\\ue0a3' /*noteheadHalf*/;\n                    default:\n                        return '\\ue0a4' /*noteheadBlack*/;\n                }\n        }\n        return Glyphs.null;\n    }\n}\nTables.UNISON = true;\nTables.SOFTMAX_FACTOR = 10;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nTables.durationCodes = {\n    '1/2': {\n        stem: false,\n    },\n    1: {\n        stem: false,\n    },\n    2: {\n        stem: true,\n    },\n    4: {\n        stem: true,\n    },\n    8: {\n        stem: true,\n        beamCount: 1,\n        stemBeamExtension: 0,\n        codeFlagUp: '\\ue240' /*flag8thUp*/,\n    },\n    16: {\n        beamCount: 2,\n        stemBeamExtension: 0,\n        stem: true,\n        codeFlagUp: '\\ue242' /*flag16thUp*/,\n    },\n    32: {\n        beamCount: 3,\n        stemBeamExtension: 7.5,\n        stem: true,\n        codeFlagUp: '\\ue244' /*flag32ndUp*/,\n    },\n    64: {\n        beamCount: 4,\n        stemBeamExtension: 15,\n        stem: true,\n        codeFlagUp: '\\ue246' /*flag64thUp*/,\n    },\n    128: {\n        beamCount: 5,\n        stemBeamExtension: 22.5,\n        stem: true,\n        codeFlagUp: '\\ue248' /*flag128thUp*/,\n    },\n};\n/**\n * Customize this by calling Flow.setMusicFont(...fontNames);\n */\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: '\\u266f',\n    // ♭ accidental flat\n    flat: '\\u266d',\n    // ♮ accidental natural\n    natural: '\\u266e',\n    // △ major seventh\n    triangle: '\\u25b3',\n    // ø half-diminished\n    'o-with-slash': '\\u00f8',\n    // ° diminished\n    degrees: '\\u00b0',\n    // ○ diminished\n    circle: '\\u25cb',\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    numBeats: 4,\n    beatValue: 4,\n    resolution: RESOLUTION,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Gets the unused strings grouped together if consecutive.\n * @param numLines The number of lines.\n * @param stringsUsed An array of numbers representing which strings have fret positions.\n * @returns\n */\nfunction getUnusedStringGroups(numLines, stringsUsed) {\n    const stemThrough = [];\n    let group = [];\n    for (let string = 1; string <= numLines; string++) {\n        const isUsed = stringsUsed.indexOf(string) > -1;\n        if (!isUsed) {\n            group.push(string);\n        }\n        else {\n            stemThrough.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stemThrough.push(group);\n    return stemThrough;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stemY - The `y` coordinate the stem is located on\n// * unusedStrings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stemDirection - The direction of the stem\nfunction getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {\n    const upStem = stemDirection !== 1;\n    const downStem = stemDirection !== -1;\n    const lineSpacing = stave.getSpacingBetweenLines();\n    const totalLines = stave.getNumLines();\n    const stemLines = [];\n    unusedStrings.forEach((strings) => {\n        const containsLastString = strings.indexOf(totalLines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((upStem && containsFirstString) || (downStem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const lineYs = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === totalLines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= lineSpacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += lineSpacing / 2 - 1;\n            }\n            // Store the y value\n            lineYs.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stemDirection === 1 && isTopBound) {\n                lineYs.push(stemY - 2);\n            }\n            else if (stemDirection === -1 && isBottomBound) {\n                lineYs.push(stemY + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stemLines.push(lineYs.sort((a, b) => a - b));\n    });\n    return stemLines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `drawStem` when rendering the note\n    constructor(noteStruct, drawStem = false) {\n        super(noteStruct);\n        this.fretElement = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // font size for note heads and rests\n            glyphFontScale: Tables.lookupMetric('TabNote.fontSize'), \n            // Flag to draw a stem\n            drawStem, \n            // Flag to draw dot modifiers\n            drawDots: drawStem, \n            // Flag to extend the main stem through the stave and fret positions\n            drawStemThroughStave: false, \n            // vertical shift from stave line\n            yShift: 0, \n            // normal glyph scale\n            scale: 1.0, \n            // default tablature font\n            font: Tables.lookupMetric('fontFamily') });\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stemDirection) {\n            this.setStemDirection(noteStruct.stemDirection);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.renderOptions.drawStem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;\n    }\n    static tabToElement(fret, scale = 1.0) {\n        let el;\n        if (fret.toUpperCase() === 'X') {\n            el = new Element('TabNote');\n            el.setText('\\ue263' /*accidentalDoubleSharp*/);\n            el.measureText();\n        }\n        else {\n            el = new Element('TabNote.text');\n            el.setText(fret);\n            el.measureText();\n            el.setYShift(el.getHeight() / 2);\n        }\n        return el;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.fretElement = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const el = TabNote.tabToElement(fret.toString(), this.renderOptions.scale);\n            this.fretElement.push(el);\n            this.width = Math.max(el.getWidth(), this.width);\n        }\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const noteGlyphWidth = this.width;\n            x = noteGlyphWidth / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const numLines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = numLines - 0.5;\n        const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyphProps, renderOptions: { drawStem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam === undefined && drawStem;\n        // Now it's the flag's turn.\n        if (glyphProps.codeFlagUp && shouldDrawFlag) {\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();\n            // Draw the Flag\n            this.applyStyle(context, this.flagStyle);\n            this.flag.renderText(context, flagX, flagY);\n            this.restoreStyle(context, this.flagStyle);\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.renderOptions.drawDots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.renderOptions.drawStem;\n        const stemThrough = this.renderOptions.drawStemThroughStave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.renderOptions.yShift;\n            const el = this.fretElement[i];\n            // Center the fret text beneath the stem\n            const tabX = x - el.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);\n            el.renderText(ctx, tabX, y);\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const renderStem = this.beam === undefined && this.renderOptions.drawStem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && renderStem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     * @param notes.firstNote the starting note of the slide\n     * @param notes.lastNote the ending note of the slide\n     * @param notes.firstIndexes specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.lastIndexes currently unused. we assume it's the same as firstIndexes.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let firstFret = notes.firstNote.getPositions()[0].fret;\n            if (typeof firstFret === 'string') {\n                firstFret = parseInt(firstFret, 10);\n            }\n            let lastFret = notes.lastNote.getPositions()[0].fret;\n            if (typeof lastFret === 'string') {\n                lastFret = parseInt(lastFret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(firstFret) || isNaN(lastFret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.renderOptions.cp1 = 11;\n        this.renderOptions.cp2 = 14;\n        this.renderOptions.yShift = 0.5;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const firstX = params.firstX; // pixel units\n        const firstYs = params.firstYs;\n        const lastX = params.lastX; // pixel units\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;\n            if (isNaN(slideY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(firstX, slideY + 3 * direction);\n            ctx.lineTo(lastX, slideY - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);\n        super(x, y, width, tabOptions);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.renderOptions.cp1 = 9;\n        this.renderOptions.cp2 = 11;\n        this.renderOptions.yShift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.textElement = new Element('TextBracket');\n        this.textElement.setText(text);\n        this.textElement.measureText();\n        this.superscriptElement = new Element('TextBracket');\n        this.superscriptElement.setText(superscript);\n        const smallerFontSize = Font.scaleSize(this.textFont.size, 0.714286);\n        this.superscriptElement.setFontSize(smallerFontSize);\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.renderOptions = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            lineWidth: 1,\n            showBracket: true,\n            bracketHeight: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underlineSuperscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        this.textElement.setFont(this.textFont);\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        const { family, size, weight, style } = this.textFont;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        this.superscriptElement.setFont(family, smallerFontSize, weight, style);\n        const options = this.renderOptions;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.lineWidth);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.renderOptions.dashed = dashed;\n        if (dash)\n            this.renderOptions.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracketHeight = this.renderOptions.bracketHeight * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        this.textElement.renderText(ctx, start.x, start.y);\n        // Get the width and height for the octave number\n        const mainWidth = this.textElement.getWidth();\n        const mainHeight = this.textElement.getHeight();\n        // Calculate the y position for the super script\n        const superY = start.y - mainHeight / 2.5;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);\n        // Determine width and height of the superscript\n        const superWidth = this.superscriptElement.getWidth();\n        const superHeight = this.superscriptElement.getHeight();\n        // Setup initial coordinates for the bracket line\n        let startX = start.x;\n        let lineY = superY;\n        const endX = stop.x + this.stop.getGlyphWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            startX += mainWidth + superWidth + 5;\n            lineY -= superHeight / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            lineY += superHeight / 2.7;\n            startX += mainWidth + 2;\n            if (!this.renderOptions.underlineSuperscript) {\n                startX += superWidth;\n            }\n        }\n        if (this.renderOptions.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);\n            // Ending Bracket\n            if (this.renderOptions.showBracket) {\n                Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(startX, lineY);\n            // Main line\n            ctx.lineTo(endX, lineY);\n            if (this.renderOptions.showBracket) {\n                // Ending bracket\n                ctx.lineTo(endX, lineY + bracketHeight);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            r: '\\uE523' /*dynamicRinforzando*/,\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.text = '';\n        this.renderOptions = Object.assign({ glyphFontSize: Tables.lookupMetric('fontSize') }, this.renderOptions);\n        this.textFont.size = defined(this.renderOptions.glyphFontSize) * this.renderOptions.glyphFontScale;\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.text = '';\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph = TextDynamics.GLYPHS[letter];\n            if (!glyph)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            // Add the glyph\n            this.text += glyph;\n        });\n        // Store the width of the text\n        this.measureText();\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        this.renderText(this.checkContext(), x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Note } from './note';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: '\\uE047' /*segno*/,\n            tr: '\\uE566' /*ornamentTrill*/,\n            mordent: '\\uE56D' /*ornamentMordent*/,\n            mordentUpper: '\\uE56C' /*ornamentShortTrill*/,\n            mordentLower: '\\uE56D' /*ornamentMordent*/,\n            f: '\\uE522' /*dynamicForte*/,\n            p: '\\uE520' /*dynamicPiano*/,\n            m: '\\uE521' /*dynamicMezzo*/,\n            s: '\\uE524' /*dynamicSforzando*/,\n            z: '\\uE525' /*dynamicZ*/,\n            coda: '\\uE048' /*coda*/,\n            pedalOpen: '\\uE650' /*keyboardPedalPed*/,\n            pedalClose: '\\uE655' /*keyboardPedalUp*/,\n            caesuraStraight: '\\uE4D1' /*caesura*/,\n            caesuraCurved: '\\uE4D4' /*caesuraCurved*/,\n            breath: '\\uE4CE' /*breathMarkComma*/,\n            tick: '\\uE4CF' /*breathMarkTick*/,\n            turn: '\\uE567' /*ornamentTurn*/,\n            turnInverted: '\\uE569' /*ornamentTurnSlash*/,\n        };\n    }\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';\n        if (noteStruct.glyph) {\n            this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;\n        }\n        if (noteStruct.font) {\n            this.setFont(noteStruct.font);\n        }\n        else if (noteStruct.glyph === undefined) {\n            this.setFont(Tables.lookupMetricFontInfo('TextNote.text.fontSize'));\n        }\n        else {\n            this.measureText();\n        }\n        // Scale the font size by 1/1.3.\n        const smallerFontSize = Font.convertSizeToPointValue(this.textFont.size) * 0.769231;\n        if (noteStruct.superscript) {\n            this.superscript = new Element('TexNote.subSuper');\n            this.superscript.setText(noteStruct.superscript);\n            this.superscript.setFontSize(smallerFontSize);\n        }\n        if (noteStruct.subscript) {\n            this.subscript = new Element('TexNote.subSuper');\n            this.subscript.setText(noteStruct.subscript);\n            this.subscript.setFontSize(smallerFontSize);\n        }\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignoreTicks = noteStruct.ignoreTicks || false;\n        this.justification = TextJustification.LEFT;\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        const y = stave.getYForLine(this.line + -3);\n        this.applyStyle(ctx);\n        this.renderText(ctx, x, y);\n        const height = this.getHeight();\n        if (this.superscript) {\n            this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);\n        }\n        if (this.subscript) {\n            this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);\n        }\n        this.restoreStyle(ctx);\n    }\n}\nTextNote.Justification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Tickable_preFormatted, _Tickable_postFormatted;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        _Tickable_preFormatted.set(this, false);\n        _Tickable_postFormatted.set(this, false);\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.alignCenter = false;\n        this.centerXShift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignoreTicks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\")) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.xShift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.centerXShift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.centerXShift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.alignCenter;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(alignCenter) {\n        this.alignCenter = alignCenter;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return a list of Tuplets. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet (if this is not provided, all tuplets are reset).\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\"))\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_preFormatted, value, \"f\");\n    }\n    get preFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_preFormatted, \"f\");\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_postFormatted, \"f\"))\n            return this;\n        __classPrivateFieldSet(this, _Tickable_postFormatted, true, \"f\");\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_postFormatted, value, \"f\");\n    }\n    get postFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_postFormatted, \"f\");\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n_Tickable_preFormatted = new WeakMap(), _Tickable_postFormatted = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignoreTicks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks === undefined) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        var _a;\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) === false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\n/**\n * A TimeSignature is a StaveModifier that can make its appropriate Glyphs directly from\n * a provided \"timeSpec\" such as \"4/4\", \"C|\" (cut time), or even something more advanced\n * such as \"3/4(6/8)\" or \"2/4+5/8\".\n */\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.isNumeric = true;\n        this.topStartX = 0;\n        this.botStartX = 0;\n        this.lineShift = 0;\n        this.topText = new Element();\n        this.botText = new Element();\n        this.validateArgs = validateArgs;\n        const padding = customPadding;\n        this.topLine = 1;\n        this.bottomLine = 3;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    static getTimeSigCode(key, smallSig = false) {\n        let code = Glyphs.null;\n        switch (key) {\n            case 'C':\n                code = Glyphs.timeSigCommon;\n                break;\n            case 'C|':\n                code = Glyphs.timeSigCutCommon;\n                break;\n            case '+':\n                code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;\n                break;\n            case '-':\n                code = Glyphs.timeSigMinus;\n                break;\n            case '(':\n                code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;\n                break;\n            case ')':\n                code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;\n                break;\n            default:\n                code = String.fromCodePoint(0xe080 + Number(key[0])) /* timeSigN = Glyphs.timeSig0 + N */;\n                break;\n        }\n        return code;\n    }\n    /**\n     * Returns a new TimeSignatureGlyph (a Glyph subclass that knows how to draw both\n     * top and bottom digits along with plus signs etc.)\n     */\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        // note that 'code' is ignored by TimeSignatureGlyph when rendering.\n        let txt = '';\n        let topWidth = 0;\n        let height = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);\n            txt += code;\n        }\n        this.topText.setText(txt);\n        this.topText.measureText();\n        topWidth = this.topText.getWidth();\n        height = this.topText.getHeight();\n        let botWidth = 0;\n        txt = '';\n        for (let i = 0; i < botDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(botDigits[i], true);\n            txt += code;\n        }\n        this.botText.setText(txt);\n        this.botText.measureText();\n        botWidth = this.botText.getWidth();\n        height = Math.max(height, this.botText.getHeight());\n        // If the height of the digits is more than two staff spaces (20), shift to the next line\n        // in order to center the digits on lines 1 and 5 rather than 2 and 4.\n        this.lineShift = height > 22 ? 1 : 0;\n        this.width = Math.max(topWidth, botWidth);\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n    }\n    /**\n     * Set a new time signature specification without changing customPadding, etc.\n     *\n     * The getter for this is `getTimeSpec` not `getTimeSig`.\n     */\n    setTimeSig(timeSpec) {\n        var _a, _b;\n        this.timeSpec = timeSpec;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const code = TimeSignature.getTimeSigCode(timeSpec);\n            this.line = 2;\n            this.text = code;\n            this.measureText();\n            this.isNumeric = false;\n        }\n        else {\n            if (this.validateArgs) {\n                assertIsValidTimeSig(timeSpec);\n            }\n            const parts = timeSpec.split('/');\n            this.line = 0;\n            this.isNumeric = true;\n            this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');\n        }\n        return this;\n    }\n    /**\n     * Return the timeSpec (such as '4/4' or 'C|' or even '2/4+3/8') of the TimeSignature\n     */\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    /**\n     * Return the staff line that the TimeSignature sits on.  Generally 0 for numerator/\n     * denominator time signatures such as 3/4 and 2 for cut/common.\n     */\n    getLine() {\n        return this.line;\n    }\n    /**\n     * Set the line number that the TimeSignature sits on.  Half-values are acceptable\n     * for spaces, etc. Can be altered, for instance, for signatures that sit above the\n     * staff in large orchestral scores.\n     */\n    setLine(line) {\n        this.line = line;\n    }\n    /**\n     * Return a boolean on whether this TimeSignature is drawn with one or more numbers\n     * (such as 4/4) or not (as in cut time).\n     */\n    getIsNumeric() {\n        return this.isNumeric;\n    }\n    /**\n     * Set whether this TimeSignature is drawn with one or more numbers.\n     */\n    setIsNumeric(isNumeric) {\n        this.isNumeric = isNumeric;\n    }\n    /**\n     * Draw the time signature on a Stave using its RenderContext.  Both setStave\n     * and setContext must already be run.\n     */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.drawAt(ctx, stave, this.x);\n    }\n    drawAt(ctx, stave, x) {\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        if (this.isNumeric) {\n            let startX = x + this.topStartX;\n            let y = 0;\n            if (this.botText.getText().length > 0)\n                y = stave.getYForLine(this.topLine - this.lineShift);\n            else\n                y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;\n            this.topText.renderText(ctx, startX, y);\n            startX = x + this.botStartX;\n            y = stave.getYForLine(this.bottomLine + this.lineShift);\n            this.botText.renderText(ctx, startX, y);\n        }\n        else {\n            this.renderText(ctx, x - this.x, stave.getYForLine(this.line));\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getWidth());\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { GraceNote } from './gracenote';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.text = '\\uE220' /*tremolo1*/;\n        this.measureText();\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const scale = isGraceNote(note) ? GraceNote.SCALE : 1;\n        const ySpacing = Tables.lookupMetric(`Tremolo.spacing`) * stemDirection * scale;\n        const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);\n        let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);\n        this.textFont.size = Tables.lookupMetric(`Tremolo.fontSize`) * scale;\n        for (let i = 0; i < this.num; ++i) {\n            this.renderText(ctx, x, y);\n            y += ySpacing;\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.numNotes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   numNotes: fit this many notes into...\n *   notesOccupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of numNotes : notesOccupied.\n *       numNotes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notesOccupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between numNotes and\n *     notesOccupied is greater than 1.\n *\n *   yOffset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    constructor(notes, options = {}) {\n        super();\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.numNotes = this.options.numNotes !== undefined ? this.options.numNotes : notes.length;\n        this.notesOccupied = this.options.notesOccupied || 2;\n        if (this.options.bracketed !== undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed !== undefined ? this.options.ratioed : Math.abs(this.notesOccupied - this.numNotes) > 1;\n        this.textElement = new Element('Tuplet');\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.numNotes;\n    }\n    getNotesOccupied() {\n        return this.notesOccupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notesOccupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        let numerator = '';\n        let denominator = '';\n        let n = this.numNotes;\n        while (n >= 1) {\n            numerator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + numerator;\n            n = Math.floor(n / 10);\n        }\n        if (this.ratioed) {\n            n = this.notesOccupied;\n            while (n >= 1) {\n                denominator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + denominator;\n                n = Math.floor(n / 10);\n            }\n            denominator = '\\uE88A' /* tupletColon */ + denominator;\n        }\n        this.textElement.setText(numerator + denominator);\n        this.textElement.measureText();\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const firstNote = this.notes[0];\n        let maxTupletCount = countTuplets(firstNote, location);\n        let minTupletCount = countTuplets(firstNote, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        var _a;\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual yOffset:\n        const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base yPosition\n        const firstNote = this.notes[0];\n        let yPosition;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().topTextLine);\n                }\n                const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;\n                if (note.hasStem() || note.isRest()) {\n                    const topY = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE\n                        : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;\n                    yPosition = Math.min(topY, yPosition);\n                    if (modLines > 0) {\n                        yPosition = Math.min(modY, yPosition);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = 4; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);\n                }\n            });\n            yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottomY = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE\n                        : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;\n                    if (bottomY > yPosition) {\n                        yPosition = bottomY;\n                    }\n                }\n            }\n        }\n        return yPosition + nestedTupletYOffset + yOffset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        let xPos = 0;\n        let yPos = 0;\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const firstNote = this.notes[0];\n        const lastNote = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            xPos = firstNote.getStemX();\n            this.width = lastNote.getStemX() - xPos;\n        }\n        else {\n            xPos = firstNote.getTieLeftX() - 5;\n            this.width = lastNote.getTieRightX() - xPos + 5;\n        }\n        // determine y value for tuplet\n        yPos = this.getYPosition();\n        const notationCenterX = xPos + this.width / 2;\n        const notationStartX = notationCenterX - this.textElement.getWidth() / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (lineWidth > 0) {\n                ctx.fillRect(xPos, yPos, lineWidth, 1);\n                ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);\n                ctx.fillRect(xPos, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(xPos + this.width, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw text\n        this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let midLine = b + (a - b) / 2;\n    if (midLine % 2 > 0) {\n        midLine = roundN(midLine * 10, 5) / 10;\n    }\n    return midLine;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * @param s\n * @returns `s` with the first letter capitalized.\n */\nexport function upperFirst(s = '') {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n/**\n * Return the sum of an array of numbers.\n */\nexport function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Utility methods used by the rest of the VexFlow codebase.\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\nexport class Vex {\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\n    //   arr.forEach(callbackFn);\n    // }\n    /**\n     * Take `arr` and return a new list consisting of the sorted, unique,\n     * contents of arr. Does not modify `arr`.\n     */\n    // eslint-disable-next-line\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    /** Check if array `arr` contains `obj`. */\n    // eslint-disable-next-line\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Get the 2D Canvas context from DOM element with id `canvasId`.\n    static getCanvasContext(canvasId) {\n        if (!canvasId) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasId);\n        }\n        const canvas = document.getElementById(canvasId);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n    // eslint-disable-next-line\n    static benchmark(s, f) {\n        const startTime = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - startTime;\n        log(s, elapsed + 'ms');\n    }\n    // Get stack trace.\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let textLine = state.topTextLine;\n        let width = 0;\n        let shift = state.rightShift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            textLine = textLine - (bendHeight + 1);\n        }\n        else {\n            state.topTextLine += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(textLine);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.rightShift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.renderOptions = {\n            code: 0xeab0,\n            width: 20,\n        };\n        this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.renderOptions.width = width;\n        this.text = String.fromCodePoint(this.renderOptions.code);\n        this.measureText();\n        const items = Math.round(this.renderOptions.width / this.getWidth());\n        for (let i = 1; i < items; i++) {\n            this.text += String.fromCodePoint(this.renderOptions.code);\n        }\n        this.measureText();\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.renderOptions.code = code;\n        return this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x;\n        const vy = note.getYForTopText(this.textLine) + 5;\n        this.renderText(ctx, vx, vy);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracketData) {\n        super();\n        this.vibrato = new Vibrato();\n        if (bracketData.start)\n            this.start = bracketData.start;\n        if (bracketData.stop)\n            this.stop = bracketData.stop;\n        this.line = 1;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.vibrato.setVibratoCode(code);\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.vibrato.setVibratoWidth(stopX - startX);\n        L('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);\n        this.vibrato.renderText(ctx, startX, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError, sumArray } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    numBeats: parseInt(match[1]),\n                    beatValue: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);\n        // until tickables are added, the smallestTickCount is the same as the stated totalTicks duration.\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode (Voice.Mode.SOFT, STRICT, or FULL) */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode` or Voice.Mode\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        // Reset the bounding box so we can reformat.\n        this.boundingBox = undefined;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        let boundingBox = undefined;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (!tickable.getStave() && this.stave)\n                tickable.setStave(this.stave);\n            const bb = tickable.getBoundingBox();\n            if (bb) {\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n            }\n        }\n        this.boundingBox = boundingBox;\n        return this.boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        this.expTicksUsed = 0; // reset\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.  (It is not the sum of the softmax(t) over all tickables)\n     *\n     * Note that the \"exp\" of \"expTicksUsed\" stands for \"expontential\" ticks used,\n     * not \"expected\" ticks used.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = sumArray(this.tickables.map(exp));\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        let boundingBox = undefined;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            const bb = tickable.getBoundingBox();\n            if (bb) {\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n            }\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n        this.boundingBox = boundingBox;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Accidental Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Beam } from '../src/beam';\nimport { Dot } from '../src/dot';\nimport { Formatter } from '../src/formatter';\nimport { Glyphs } from '../src/glyphs';\nimport { ModifierContext } from '../src/modifiercontext';\nimport { Note } from '../src/note';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { Stem } from '../src/stem';\nimport { TickContext } from '../src/tickcontext';\nimport { TimeSigNote } from '../src/timesignote';\nimport { isAccidental } from '../src/typeguard';\nimport { Voice } from '../src/voice';\nconst AccidentalTests = {\n    Start() {\n        QUnit.module('Accidental');\n        QUnit.test('Automatic Accidentals - Simple Tests', autoAccidentalWorking);\n        const run = VexFlowTests.runTests;\n        run('Accidental Padding', formatAccidentalSpaces);\n        run('Basic', basic);\n        run('Stem Down', basicStemDown);\n        run('Cautionary Accidental', cautionary);\n        run('Accidental Arrangement Special Cases', specialCases);\n        run('Multi Voice', multiVoice);\n        run('Microtonal', microtonal);\n        run('Microtonal (Iranian)', microtonalIranian);\n        run('Sagittal', sagittal);\n        run('Automatic Accidentals', automaticAccidentals0);\n        run('Automatic Accidentals - C major scale in Ab', automaticAccidentals1);\n        run('Automatic Accidentals - No Accidentals Necessary', automaticAccidentals2);\n        run('Automatic Accidentals - No Accidentals Necessary (EasyScore)', automaticAccidentals3);\n        run('Automatic Accidentals - Multi Voice Inline', automaticAccidentalsMultiVoiceInline);\n        run('Automatic Accidentals - Multi Voice Offset', automaticAccidentalsMultiVoiceOffset);\n        run('Automatic Accidentals - Key C, Single Octave', automaticAccidentalsCornerCases1);\n        run('Automatic Accidentals - Key C, Two Octaves', automaticAccidentalsCornerCases2);\n        run('Automatic Accidentals - Key C#, Single Octave', automaticAccidentalsCornerCases3);\n        run('Automatic Accidentals - Key C#, Two Octaves', automaticAccidentalsCornerCases4);\n        run('Factory API', factoryAPI);\n    },\n};\n// Check that at least one of the note's modifiers is an Accidental.\nfunction hasAccidental(note) {\n    return note.getModifiers().some((modifier) => isAccidental(modifier));\n}\n// Return a convenience function for building accidentals from a string.\nfunction makeNewAccid(factory) {\n    return (type) => factory.Accidental({ type });\n}\n/**\n *\n */\nfunction autoAccidentalWorking(assert) {\n    const createStaveNote = (noteStruct) => new StaveNote(noteStruct);\n    let notes = [\n        { keys: ['bb/4'], duration: '4' },\n        { keys: ['bb/4'], duration: '4' },\n        { keys: ['g#/4'], duration: '4' },\n        { keys: ['g/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['a#/4'], duration: '4' },\n        { keys: ['g#/4'], duration: '4' },\n    ].map(createStaveNote);\n    let voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    // F Major (Bb)\n    Accidental.applyAccidentals([voice], 'F');\n    assert.equal(hasAccidental(notes[0]), false, 'No flat because of key signature');\n    assert.equal(hasAccidental(notes[1]), false, 'No flat because of key signature');\n    assert.equal(hasAccidental(notes[2]), true, 'Added a sharp');\n    assert.equal(hasAccidental(notes[3]), true, 'Back to natural');\n    assert.equal(hasAccidental(notes[4]), true, 'Back to natural');\n    assert.equal(hasAccidental(notes[5]), false, 'Natural remembered');\n    assert.equal(hasAccidental(notes[6]), true, 'Added sharp');\n    assert.equal(hasAccidental(notes[7]), true, 'Added sharp');\n    notes = [\n        { keys: ['e#/4'], duration: '4' },\n        { keys: ['cb/4'], duration: '4' },\n        { keys: ['fb/4'], duration: '4' },\n        { keys: ['b#/4'], duration: '4' },\n        { keys: ['b#/4'], duration: '4' },\n        { keys: ['cb/5'], duration: '4' },\n        { keys: ['fb/5'], duration: '4' },\n        { keys: ['e#/4'], duration: '4' },\n    ].map(createStaveNote);\n    voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    // A Major (F#,G#,C#)\n    Accidental.applyAccidentals([voice], 'A');\n    assert.equal(hasAccidental(notes[0]), true, 'Added sharp');\n    assert.equal(hasAccidental(notes[1]), true, 'Added flat');\n    assert.equal(hasAccidental(notes[2]), true, 'Added flat');\n    assert.equal(hasAccidental(notes[3]), true, 'Added sharp');\n    assert.equal(hasAccidental(notes[4]), false, 'Sharp remembered');\n    assert.equal(hasAccidental(notes[5]), true, 'Added flat(different octave)');\n    assert.equal(hasAccidental(notes[6]), true, 'Added flat(different octave)');\n    assert.equal(hasAccidental(notes[7]), false, 'sharp remembered');\n    notes = [\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['cb/4'], duration: '4' },\n        { keys: ['cb/4'], duration: '4' },\n        { keys: ['c#/4'], duration: '4' },\n        { keys: ['c#/4'], duration: '4' },\n        { keys: ['cbb/4'], duration: '4' },\n        { keys: ['cbb/4'], duration: '4' },\n        { keys: ['c##/4'], duration: '4' },\n        { keys: ['c##/4'], duration: '4' },\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['c/4'], duration: '4' },\n    ].map(createStaveNote);\n    voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    // C Major (no sharps/flats)\n    Accidental.applyAccidentals([voice], 'C');\n    assert.equal(hasAccidental(notes[0]), false, 'No accidental');\n    assert.equal(hasAccidental(notes[1]), true, 'Added flat');\n    assert.equal(hasAccidental(notes[2]), false, 'Flat remembered');\n    assert.equal(hasAccidental(notes[3]), true, 'Sharp added');\n    assert.equal(hasAccidental(notes[4]), false, 'Sharp remembered');\n    assert.equal(hasAccidental(notes[5]), true, 'Added doubled flat');\n    assert.equal(hasAccidental(notes[6]), false, 'Double flat remembered');\n    assert.equal(hasAccidental(notes[7]), true, 'Added double sharp');\n    assert.equal(hasAccidental(notes[8]), false, 'Double sharp rememberd');\n    assert.equal(hasAccidental(notes[9]), true, 'Added natural');\n    assert.equal(hasAccidental(notes[10]), false, 'Natural remembered');\n}\n/**\n *\n */\nfunction formatAccidentalSpaces(options) {\n    const f = VexFlowTests.makeFactory(options, 750, 280);\n    const context = f.getContext();\n    const softmaxFactor = 100;\n    // Create the notes\n    const notes = [\n        new StaveNote({\n            keys: ['e##/5'],\n            duration: '8d',\n        }).addModifier(new Accidental('##'), 0),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16',\n        }).addModifier(new Accidental('b'), 0),\n        new StaveNote({\n            keys: ['f/3'],\n            duration: '8',\n        }),\n        new StaveNote({\n            keys: ['a/3'],\n            duration: '16',\n        }),\n        new StaveNote({\n            keys: ['e/4', 'g/4'],\n            duration: '16',\n        })\n            .addModifier(new Accidental('bb'), 0)\n            .addModifier(new Accidental('bb'), 1),\n        new StaveNote({\n            keys: ['d/4'],\n            duration: '16',\n        }),\n        new StaveNote({\n            keys: ['e/4', 'g/4'],\n            duration: '16',\n        })\n            .addModifier(new Accidental('#'), 0)\n            .addModifier(new Accidental('#'), 1),\n        new StaveNote({\n            keys: ['g/4'],\n            duration: '32',\n        }),\n        new StaveNote({\n            keys: ['a/4'],\n            duration: '32',\n        }),\n        new StaveNote({\n            keys: ['g/4'],\n            duration: '16',\n        }),\n        new StaveNote({\n            keys: ['d/4'],\n            duration: 'q',\n        }),\n    ];\n    Dot.buildAndAttach([notes[0]], { all: true });\n    const beams = Beam.generateBeams(notes);\n    const voice = new Voice({\n        numBeats: 4,\n        beatValue: 4,\n    });\n    voice.addTickables(notes);\n    const formatter = new Formatter({ softmaxFactor }).joinVoices([voice]);\n    const width = formatter.preCalculateMinTotalWidth([voice]);\n    const stave = new Stave(10, 40, width + 20);\n    stave.setContext(context).draw();\n    formatter.format([voice], width);\n    voice.draw(context, stave);\n    beams.forEach((b) => b.setContext(context).draw());\n    notes.forEach((note) => Note.plotMetrics(context, note, 30));\n    VexFlowTests.plotLegendForNoteWidth(context, 300, 150);\n    options.assert.ok(true);\n}\nfunction basic(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    f.Stave({ x: 10, y: 10, width: 550 });\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\n            .addModifier(accid('b'), 0)\n            .addModifier(accid('#'), 1),\n        // Notes keys out of alphabetic order\n        f\n            .StaveNote({ keys: ['e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5', 'd/4'], duration: '2' })\n            .addModifier(accid('##'), 6)\n            .addModifier(accid('n'), 0)\n            .addModifier(accid('bb'), 1)\n            .addModifier(accid('b'), 2)\n            .addModifier(accid('#'), 3)\n            .addModifier(accid('n'), 4)\n            .addModifier(accid('bb'), 5),\n        // Notes keys out of alphabetic order\n        f\n            .StaveNote({ keys: ['g/5', 'f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5'], duration: '16' })\n            .addModifier(accid('n'), 1)\n            .addModifier(accid('#'), 2)\n            .addModifier(accid('#'), 3)\n            .addModifier(accid('b'), 4)\n            .addModifier(accid('bb'), 5)\n            .addModifier(accid('##'), 6)\n            .addModifier(accid('#'), 0),\n        f\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('##').setAsCautionary(), 1)\n            .addModifier(accid('#').setAsCautionary(), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('bb').setAsCautionary(), 4)\n            .addModifier(accid('b').setAsCautionary(), 5),\n    ];\n    Formatter.SimpleFormat(notes, 10, { paddingBetween: 45 });\n    notes.forEach((note, index) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\n            options.assert.ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\n        });\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\n    options.assert.ok(true, 'Full Accidental');\n}\nfunction genAccidentals() {\n    const accs = ['#', '##', 'b', 'bb', 'n', '{', '}', 'db', 'd', '++', '+', '+-'];\n    accs.push('bs', 'bss', 'o', 'k', 'bbs', '++-', 'ashs', 'afhf');\n    // Standard accidentals (12-EDO)\n    for (let u = 0xe260; u <= 0xe269; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Gould arrow quartertone accidentals (24-EDO)\n    for (let u = 0xe270; u <= 0xe27b; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Stein-Zimmermann accidentals (24-EDO)\n    for (let u = 0xe280; u <= 0xe285; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Extended Stein-Zimmermann accidentals\n    for (let u = 0xe290; u <= 0xe29c; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Sims accidentals (72-EDO)\n    for (let u = 0xe2a0; u <= 0xe2a5; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Johnston accidentals (just intonation)\n    for (let u = 0xe2b0; u <= 0xe2b7; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Extended Helmholtz-Ellis accidentals (just intonation)\n    for (let u = 0xe2c0; u <= 0xe2fb; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Spartan Sagittal single-shaft accidentals\n    for (let u = 0xe300; u <= 0xe30f; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Spartan Sagittal multi-shaft accidentals\n    for (let u = 0xe310; u <= 0xe335; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Athenian Sagittal extension (medium precision) accidentals\n    for (let u = 0xe340; u <= 0xe367; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Trojan Sagittal extension (12-EDO relative) accidentals\n    for (let u = 0xe370; u <= 0xe387; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Promethean Sagittal extension (high precision) single-shaft accidentals\n    for (let u = 0xe390; u <= 0xe3ad; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Promethean Sagittal extension (high precision) multi-shaft accidentals\n    for (let u = 0xe3b0; u <= 0xe3ef; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Herculean Sagittal extension (very high precision) accidental diacritics\n    for (let u = 0xe3f0; u <= 0xe3f3; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Olympian Sagittal extension (extreme precision) accidental diacritics\n    for (let u = 0xe3f4; u <= 0xe3f7; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Wyschnegradsky accidentals (72-EDO)\n    for (let u = 0xe420; u <= 0xe435; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Arel-Ezgi-Uzdilek (AEU) accidentals\n    for (let u = 0xe440; u <= 0xe447; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Turkish folk music accidentals\n    for (let u = 0xe450; u <= 0xe457; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Persian accidentals\n    for (let u = 0xe460; u <= 0xe461; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    // Other accidentals\n    for (let u = 0xe470; u <= 0xe48f; u++) {\n        accs.push(String.fromCodePoint(u));\n    }\n    return accs;\n}\nconst accidentals = genAccidentals();\nfunction cautionary(options) {\n    const staveCount = 21;\n    const scale = 0.85;\n    const staveWidth = 840;\n    let i = 0;\n    let j = 0;\n    const f = VexFlowTests.makeFactory(options, staveWidth + 10, 175 * staveCount + 10);\n    f.getContext().scale(scale, scale);\n    const accids = Object.values(accidentals).filter((accid) => accid !== '{' && accid !== '}');\n    const mod = Math.round(accids.length / staveCount);\n    for (i = 0; i < staveCount; ++i) {\n        const stave = f.Stave({ x: 0, y: 10 + 100 * i, width: staveWidth / scale });\n        const score = f.EasyScore();\n        const rowMap = [];\n        for (j = 0; j < mod && j + i * staveCount < accids.length; ++j) {\n            rowMap.push(accids[j + i * staveCount]);\n        }\n        const notes = rowMap.map((accidType) => f\n            .StaveNote({ keys: ['a/4'], duration: '4', stemDirection: Stem.UP })\n            .addModifier(f.Accidental({ type: accidType }), 0));\n        const voice = score.voice(notes, { time: rowMap.length + '/4' });\n        voice.getTickables().forEach((tickable) => {\n            tickable\n                .getModifiers()\n                .filter((modifier) => modifier.getAttribute('type') === Accidental.CATEGORY)\n                .forEach((accid) => accid.setAsCautionary());\n        });\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        f.draw();\n    }\n    options.assert.ok(true, 'Must successfully render cautionary accidentals');\n}\nfunction specialCases(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    f.Stave({ x: 10, y: 10, width: 550 });\n    const notes = [\n        f\n            .StaveNote({ keys: ['f/4', 'd/5'], duration: '1' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('b'), 1),\n        f\n            .StaveNote({ keys: ['c/4', 'g/4'], duration: '2' })\n            .addModifier(accid('##'), 0)\n            .addModifier(accid('##'), 1),\n        f\n            .StaveNote({ keys: ['b/3', 'd/4', 'f/4'], duration: '16' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('#'), 1)\n            .addModifier(accid('##'), 2),\n        f\n            .StaveNote({ keys: ['g/4', 'a/4', 'c/5', 'e/5'], duration: '16' })\n            .addModifier(accid('b'), 0)\n            .addModifier(accid('b'), 1)\n            .addModifier(accid('n'), 3),\n        f\n            .StaveNote({ keys: ['e/4', 'g/4', 'b/4', 'c/5'], duration: '4' })\n            .addModifier(accid('b').setAsCautionary(), 0)\n            .addModifier(accid('b').setAsCautionary(), 1)\n            .addModifier(accid('bb'), 2)\n            .addModifier(accid('b'), 3),\n        f\n            .StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5', 'g/5'], duration: '8' })\n            .addModifier(accid('bb'), 0)\n            .addModifier(accid('b').setAsCautionary(), 1)\n            .addModifier(accid('n').setAsCautionary(), 2)\n            .addModifier(accid('#'), 3)\n            .addModifier(accid('n').setAsCautionary(), 4),\n    ];\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 20 });\n    notes.forEach((note, index) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\n            options.assert.ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\n        });\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\n    options.assert.ok(true, 'Full Accidental');\n}\nfunction basicStemDown(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    f.Stave({ x: 10, y: 10, width: 550 });\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w', stemDirection: -1 })\n            .addModifier(accid('b'), 0)\n            .addModifier(accid('#'), 1),\n        f\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2', stemDirection: -1 })\n            .addModifier(accid('##'), 0)\n            .addModifier(accid('n'), 1)\n            .addModifier(accid('bb'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('#'), 4)\n            .addModifier(accid('n'), 5)\n            .addModifier(accid('bb'), 6),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16', stemDirection: -1 })\n            .addModifier(accid('n'), 0)\n            .addModifier(accid('#'), 1)\n            .addModifier(accid('#'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('bb'), 4)\n            .addModifier(accid('##'), 5)\n            .addModifier(accid('#'), 6),\n    ];\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 30 });\n    notes.forEach((note, noteIndex) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + noteIndex + ' has accidentals');\n        note.getModifiersByType('Accidental').forEach((accid, accidIndex) => {\n            options.assert.ok(accid.getWidth() > 0, 'Accidental ' + accidIndex + ' has set width');\n        });\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\n    options.assert.ok(true, 'Full Accidental');\n}\nfunction multiVoice(options) {\n    // Helper function for visualizing\n    function showNotes(note1, note2, stave, ctx, x) {\n        const modifierContext = new ModifierContext();\n        note1.addToModifierContext(modifierContext);\n        note2.addToModifierContext(modifierContext);\n        new TickContext().addTickable(note1).addTickable(note2).preFormat().setX(x);\n        note1.setContext(ctx).draw();\n        note2.setContext(ctx).draw();\n        Note.plotMetrics(ctx, note1, 180);\n        Note.plotMetrics(ctx, note2, 15);\n    }\n    const f = VexFlowTests.makeFactory(options, 460, 250);\n    const accid = makeNewAccid(f);\n    const stave = f.Stave({ x: 10, y: 45, width: 420 });\n    const ctx = f.getContext();\n    stave.draw();\n    let note1 = f\n        .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '2', stemDirection: -1 })\n        .addModifier(accid('b'), 0)\n        .addModifier(accid('n'), 1)\n        .addModifier(accid('#'), 2)\n        .setStave(stave);\n    let note2 = f\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '2', stemDirection: 1 })\n        .addModifier(accid('b'), 0)\n        .addModifier(accid('bb'), 1)\n        .addModifier(accid('##'), 2)\n        .setStave(stave);\n    showNotes(note1, note2, stave, ctx, 60);\n    note1 = f\n        .StaveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: '2', stemDirection: -1 })\n        .addModifier(accid('b'), 0)\n        .addModifier(accid('n'), 1)\n        .addModifier(accid('#'), 2)\n        .setStave(stave);\n    note2 = f\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stemDirection: 1 })\n        .addModifier(accid('b'), 0)\n        .setStave(stave);\n    showNotes(note1, note2, stave, ctx, 150);\n    note1 = f\n        .StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '2', stemDirection: -1 })\n        .addModifier(accid('b'), 0)\n        .addModifier(accid('n'), 1)\n        .addModifier(accid('#'), 2)\n        .setStave(stave);\n    note2 = f\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stemDirection: 1 })\n        .addModifier(accid('b'), 0)\n        .setStave(stave);\n    showNotes(note1, note2, stave, ctx, 250);\n    VexFlowTests.plotLegendForNoteWidth(ctx, 350, 150);\n    options.assert.ok(true, 'Full Accidental');\n}\nfunction microtonal(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    const ctx = f.getContext();\n    f.Stave({ x: 10, y: 10, width: 650 });\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\n            .addModifier(accid('db'), 0)\n            .addModifier(accid('d'), 1),\n        f\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' })\n            .addModifier(accid('bbs'), 0)\n            .addModifier(accid('++'), 1)\n            .addModifier(accid('+'), 2)\n            .addModifier(accid('d'), 3)\n            .addModifier(accid('db'), 4)\n            .addModifier(accid('+'), 5)\n            .addModifier(accid('##'), 6),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\n            .addModifier(accid('++'), 0)\n            .addModifier(accid('bbs'), 1)\n            .addModifier(accid('+'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('db'), 4)\n            .addModifier(accid('##'), 5)\n            .addModifier(accid('#'), 6),\n        f\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('db').setAsCautionary(), 1)\n            .addModifier(accid('bbs').setAsCautionary(), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('++').setAsCautionary(), 4)\n            .addModifier(accid('d').setAsCautionary(), 5),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'd/5', 'g/5'], duration: '16' })\n            .addModifier(accid('++-'), 0)\n            .addModifier(accid('+-'), 1)\n            .addModifier(accid('bs'), 2)\n            .addModifier(accid('bss'), 3)\n            .addModifier(accid('afhf'), 4)\n            .addModifier(accid('ashs'), 5),\n    ];\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 35 });\n    notes.forEach((note, index) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\n            options.assert.ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\n        });\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\n    options.assert.ok(true, 'Microtonal Accidental');\n}\nfunction microtonalIranian(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    const ctx = f.getContext();\n    f.Stave({ x: 10, y: 10, width: 650 });\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\n            .addModifier(accid('k'), 0)\n            .addModifier(accid('o'), 1),\n        f\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' })\n            .addModifier(accid('b'), 0)\n            .addModifier(accid('k'), 1)\n            .addModifier(accid('n'), 2)\n            .addModifier(accid('o'), 3)\n            .addModifier(accid('#'), 4)\n            .addModifier(accid('bb'), 5)\n            .addModifier(accid('##'), 6),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\n            .addModifier(accid('o'), 0)\n            .addModifier(accid('k'), 1)\n            .addModifier(accid('n'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('bb'), 4)\n            .addModifier(accid('##'), 5)\n            .addModifier(accid('#'), 6),\n        f\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('o').setAsCautionary(), 1)\n            .addModifier(accid('n').setAsCautionary(), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('k').setAsCautionary(), 4),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: '16' })\n            .addModifier(accid('k'), 0)\n            .addModifier(accid('k'), 1)\n            .addModifier(accid('k'), 2)\n            .addModifier(accid('k'), 3),\n    ];\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 35 });\n    notes.forEach((note, index) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\n            options.assert.ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\n        });\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\n    options.assert.ok(true, 'Microtonal Accidental (Iranian)');\n}\nfunction sagittal(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    const accid = makeNewAccid(f);\n    const ctx = f.getContext();\n    f.Stave({ x: 10, y: 10, width: 650 });\n    // Use these SMUFL glyphs.\n    const { accSagittal11LargeDiesisDown, accSagittal11MediumDiesisUp, accSagittal35LargeDiesisDown, accSagittal5CommaDown, accSagittal7CommaDown, accSagittalFlat7CDown, } = Glyphs;\n    const notes = [\n        f\n            .StaveNote({ keys: ['d/4', 'f/4', 'b/4', 'b/4'], duration: '4' })\n            .addModifier(accid(accSagittal11MediumDiesisUp), 1)\n            .addModifier(accid(accSagittal5CommaDown), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid(accSagittal7CommaDown), 3),\n        f\n            .StaveNote({ keys: ['d/4', 'f/4', 'a/4', 'b/4'], duration: '4' })\n            .addModifier(accid(accSagittal35LargeDiesisDown), 2),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5'], duration: '8' }).addModifier(accid(accSagittal5CommaDown), 1),\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'b/4'], duration: '8' })\n            .addModifier(accid('b'), 1)\n            .addModifier(accid(accSagittal7CommaDown), 1)\n            .addModifier(accid(accSagittal11LargeDiesisDown), 3),\n        f\n            .StaveNote({ keys: ['d/4', 'f/4', 'b/4', 'b/4'], duration: '4' })\n            .addModifier(accid(accSagittal11MediumDiesisUp), 1)\n            .addModifier(accid(accSagittal5CommaDown), 2)\n            .addModifier(accid(accSagittalFlat7CDown), 3),\n        f\n            .StaveNote({ keys: ['d/4', 'f/4', 'a/4', 'b/4'], duration: '4' })\n            .addModifier(accid(accSagittal35LargeDiesisDown), 2),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5'], duration: '8' }).addModifier(accid(accSagittal5CommaDown), 1),\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'b/4'], duration: '8' })\n            .addModifier(accid(accSagittalFlat7CDown), 1)\n            .addModifier(accid(accSagittal11LargeDiesisDown), 3),\n    ];\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    });\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [3],\n        lastIndexes: [3],\n        options: {\n            direction: Stem.DOWN,\n        },\n    });\n    f.StaveTie({\n        from: notes[4],\n        to: notes[5],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    });\n    f.StaveTie({\n        from: notes[4],\n        to: notes[5],\n        firstIndexes: [3],\n        lastIndexes: [3],\n        options: {\n            direction: Stem.DOWN,\n        },\n    });\n    f.Beam({ notes: notes.slice(2, 4) });\n    f.Beam({ notes: notes.slice(6, 8) });\n    Formatter.SimpleFormat(notes);\n    notes.forEach((note, index) => {\n        Note.plotMetrics(f.getContext(), note, 140);\n        options.assert.ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\n    });\n    f.draw();\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\n    options.assert.ok(true, 'Sagittal');\n}\nfunction automaticAccidentals0(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 200);\n    const stave = f.Stave();\n    const notes = [\n        { keys: ['c/4', 'c/5'], duration: '4' },\n        { keys: ['c#/4', 'c#/5'], duration: '4' },\n        { keys: ['c#/4', 'c#/5'], duration: '4' },\n        { keys: ['c##/4', 'c##/5'], duration: '4' },\n        { keys: ['c##/4', 'c##/5'], duration: '4' },\n        { keys: ['c/4', 'c/5'], duration: '4' },\n        { keys: ['cn/4', 'cn/5'], duration: '4' },\n        { keys: ['cbb/4', 'cbb/5'], duration: '4' },\n        { keys: ['cbb/4', 'cbb/5'], duration: '4' },\n        { keys: ['cb/4', 'cb/5'], duration: '4' },\n        { keys: ['cb/4', 'cb/5'], duration: '4' },\n        { keys: ['c/4', 'c/5'], duration: '4' },\n    ].map(f.StaveNote.bind(f));\n    const gracenotes = [{ keys: ['d#/4'], duration: '16', slash: true }].map(f.GraceNote.bind(f));\n    notes[0].addModifier(f.GraceNoteGroup({ notes: gracenotes }).beamNotes(), 0);\n    const voice = f\n        .Voice()\n        .setMode(Voice.Mode.SOFT)\n        .addTickable(new TimeSigNote('12/4').setStave(stave))\n        .addTickables(notes);\n    Accidental.applyAccidentals([voice], 'C');\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentals1(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('Ab');\n    const notes = [\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['d/4'], duration: '4' },\n        { keys: ['e/4'], duration: '4' },\n        { keys: ['f/4'], duration: '4' },\n        { keys: ['g/4'], duration: '4' },\n        { keys: ['a/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['c/5'], duration: '4' },\n    ].map(f.StaveNote.bind(f));\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    Accidental.applyAccidentals([voice], 'Ab');\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentals2(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('A');\n    const notes = [\n        { keys: ['a/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['c#/5'], duration: '4' },\n        { keys: ['d/5'], duration: '4' },\n        { keys: ['e/5'], duration: '4' },\n        { keys: ['f#/5'], duration: '4' },\n        { keys: ['g#/5'], duration: '4' },\n        { keys: ['a/5'], duration: '4' },\n    ].map(f.StaveNote.bind(f));\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    Accidental.applyAccidentals([voice], 'A');\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentals3(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('A');\n    const score = f.EasyScore();\n    score.set({ time: '8/4' });\n    const notes = score.notes('A4/q, B4/q, C#5/q, D5/q, E5/q,F#5/q, G#5/q, A5/q', { stem: 'UP' });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    Accidental.applyAccidentals([voice], 'A');\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsMultiVoiceInline(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('Ab');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['d/4'], duration: '4', stemDirection: -1 },\n        { keys: ['e/4'], duration: '4', stemDirection: -1 },\n        { keys: ['f/4'], duration: '4', stemDirection: -1 },\n        { keys: ['g/4'], duration: '4', stemDirection: -1 },\n        { keys: ['a/4'], duration: '4', stemDirection: -1 },\n        { keys: ['b/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const notes1 = [\n        { keys: ['c/5'], duration: '4' },\n        { keys: ['d/5'], duration: '4' },\n        { keys: ['e/5'], duration: '4' },\n        { keys: ['f/5'], duration: '4' },\n        { keys: ['g/5'], duration: '4' },\n        { keys: ['a/5'], duration: '4' },\n        { keys: ['b/5'], duration: '4' },\n        { keys: ['c/6'], duration: '4' },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    const voice1 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\n    // Ab Major\n    Accidental.applyAccidentals([voice0, voice1], 'Ab');\n    options.assert.equal(hasAccidental(notes0[0]), false);\n    options.assert.equal(hasAccidental(notes0[1]), true);\n    options.assert.equal(hasAccidental(notes0[2]), true);\n    options.assert.equal(hasAccidental(notes0[3]), false);\n    options.assert.equal(hasAccidental(notes0[4]), false);\n    options.assert.equal(hasAccidental(notes0[5]), true);\n    options.assert.equal(hasAccidental(notes0[6]), true);\n    options.assert.equal(hasAccidental(notes0[7]), false);\n    options.assert.equal(hasAccidental(notes1[0]), false);\n    options.assert.equal(hasAccidental(notes1[1]), true);\n    options.assert.equal(hasAccidental(notes1[2]), true);\n    options.assert.equal(hasAccidental(notes1[3]), false);\n    options.assert.equal(hasAccidental(notes1[4]), false);\n    options.assert.equal(hasAccidental(notes1[5]), true);\n    options.assert.equal(hasAccidental(notes1[6]), true);\n    options.assert.equal(hasAccidental(notes1[7]), false);\n    new Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsMultiVoiceOffset(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('Cb');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['d/4'], duration: '4', stemDirection: -1 },\n        { keys: ['e/4'], duration: '4', stemDirection: -1 },\n        { keys: ['f/4'], duration: '4', stemDirection: -1 },\n        { keys: ['g/4'], duration: '4', stemDirection: -1 },\n        { keys: ['a/4'], duration: '4', stemDirection: -1 },\n        { keys: ['b/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const notes1 = [\n        { keys: ['c/5'], duration: '8' },\n        { keys: ['c/5'], duration: '4' },\n        { keys: ['d/5'], duration: '4' },\n        { keys: ['e/5'], duration: '4' },\n        { keys: ['f/5'], duration: '4' },\n        { keys: ['g/5'], duration: '4' },\n        { keys: ['a/5'], duration: '4' },\n        { keys: ['b/5'], duration: '4' },\n        { keys: ['c/6'], duration: '4' },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    const voice1 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\n    // Cb Major (All flats)\n    Accidental.applyAccidentals([voice0, voice1], 'Cb');\n    options.assert.equal(hasAccidental(notes0[0]), true);\n    options.assert.equal(hasAccidental(notes0[1]), true);\n    options.assert.equal(hasAccidental(notes0[2]), true);\n    options.assert.equal(hasAccidental(notes0[3]), true);\n    options.assert.equal(hasAccidental(notes0[4]), true);\n    options.assert.equal(hasAccidental(notes0[5]), true);\n    options.assert.equal(hasAccidental(notes0[6]), true);\n    options.assert.equal(hasAccidental(notes0[7]), false, 'Natural Remembered');\n    options.assert.equal(hasAccidental(notes1[0]), true);\n    options.assert.equal(hasAccidental(notes1[1]), false);\n    options.assert.equal(hasAccidental(notes1[2]), true);\n    options.assert.equal(hasAccidental(notes1[3]), true);\n    options.assert.equal(hasAccidental(notes1[4]), true);\n    options.assert.equal(hasAccidental(notes1[5]), true);\n    options.assert.equal(hasAccidental(notes1[6]), true);\n    options.assert.equal(hasAccidental(notes1[7]), true);\n    new Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsCornerCases1(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('C');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    Accidental.applyAccidentals([voice0], 'C');\n    options.assert.equal(hasAccidental(notes0[0]), false);\n    options.assert.equal(hasAccidental(notes0[1]), true);\n    options.assert.equal(hasAccidental(notes0[2]), false);\n    options.assert.equal(hasAccidental(notes0[3]), true);\n    options.assert.equal(hasAccidental(notes0[4]), false);\n    options.assert.equal(hasAccidental(notes0[5]), true);\n    options.assert.equal(hasAccidental(notes0[6]), false);\n    options.assert.equal(hasAccidental(notes0[7]), true);\n    options.assert.equal(hasAccidental(notes0[8]), false);\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsCornerCases2(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('C');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/5'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    Accidental.applyAccidentals([voice0], 'C');\n    options.assert.equal(hasAccidental(notes0[0]), false);\n    options.assert.equal(hasAccidental(notes0[2]), true);\n    options.assert.equal(hasAccidental(notes0[4]), false);\n    options.assert.equal(hasAccidental(notes0[6]), true);\n    options.assert.equal(hasAccidental(notes0[8]), false);\n    options.assert.equal(hasAccidental(notes0[10]), true);\n    options.assert.equal(hasAccidental(notes0[12]), false);\n    options.assert.equal(hasAccidental(notes0[14]), true);\n    options.assert.equal(hasAccidental(notes0[16]), false);\n    options.assert.equal(hasAccidental(notes0[1]), false);\n    options.assert.equal(hasAccidental(notes0[3]), true);\n    options.assert.equal(hasAccidental(notes0[5]), false);\n    options.assert.equal(hasAccidental(notes0[7]), true);\n    options.assert.equal(hasAccidental(notes0[9]), false);\n    options.assert.equal(hasAccidental(notes0[11]), true);\n    options.assert.equal(hasAccidental(notes0[13]), false);\n    options.assert.equal(hasAccidental(notes0[15]), true);\n    options.assert.equal(hasAccidental(notes0[17]), false);\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsCornerCases3(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('C#');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    Accidental.applyAccidentals([voice0], 'C#');\n    options.assert.equal(hasAccidental(notes0[0]), true);\n    options.assert.equal(hasAccidental(notes0[1]), true);\n    options.assert.equal(hasAccidental(notes0[2]), false);\n    options.assert.equal(hasAccidental(notes0[3]), true);\n    options.assert.equal(hasAccidental(notes0[4]), false);\n    options.assert.equal(hasAccidental(notes0[5]), true);\n    options.assert.equal(hasAccidental(notes0[6]), false);\n    options.assert.equal(hasAccidental(notes0[7]), true);\n    options.assert.equal(hasAccidental(notes0[8]), false);\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction automaticAccidentalsCornerCases4(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 150);\n    const stave = f.Stave().addKeySignature('C#');\n    const notes0 = [\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c#/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/5'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/4'], duration: '4', stemDirection: -1 },\n        { keys: ['cb/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n        { keys: ['c/4'], duration: '4', stemDirection: -1 },\n        { keys: ['c/5'], duration: '4', stemDirection: -1 },\n    ].map(f.StaveNote.bind(f));\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\n    Accidental.applyAccidentals([voice0], 'C#');\n    options.assert.equal(hasAccidental(notes0[0]), true);\n    options.assert.equal(hasAccidental(notes0[2]), true);\n    options.assert.equal(hasAccidental(notes0[4]), false);\n    options.assert.equal(hasAccidental(notes0[6]), true);\n    options.assert.equal(hasAccidental(notes0[8]), false);\n    options.assert.equal(hasAccidental(notes0[10]), true);\n    options.assert.equal(hasAccidental(notes0[12]), false);\n    options.assert.equal(hasAccidental(notes0[14]), true);\n    options.assert.equal(hasAccidental(notes0[16]), false);\n    options.assert.equal(hasAccidental(notes0[1]), true);\n    options.assert.equal(hasAccidental(notes0[3]), true);\n    options.assert.equal(hasAccidental(notes0[5]), false);\n    options.assert.equal(hasAccidental(notes0[7]), true);\n    options.assert.equal(hasAccidental(notes0[9]), false);\n    options.assert.equal(hasAccidental(notes0[11]), true);\n    options.assert.equal(hasAccidental(notes0[13]), false);\n    options.assert.equal(hasAccidental(notes0[15]), true);\n    options.assert.equal(hasAccidental(notes0[17]), false);\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction factoryAPI(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 240);\n    f.Stave({ x: 10, y: 10, width: 550 });\n    const accid = makeNewAccid(f);\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' })\n            .addModifier(accid('b'), 0)\n            .addModifier(accid('#'), 1),\n        f\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: 'h' })\n            .addModifier(accid('##'), 0)\n            .addModifier(accid('n'), 1)\n            .addModifier(accid('bb'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('#'), 4)\n            .addModifier(accid('n'), 5)\n            .addModifier(accid('bb'), 6),\n        f\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\n            .addModifier(accid('n'), 0)\n            .addModifier(accid('#'), 1)\n            .addModifier(accid('#'), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('bb'), 4)\n            .addModifier(accid('##'), 5)\n            .addModifier(accid('#'), 6),\n        f\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: 'w' })\n            .addModifier(accid('#'), 0)\n            .addModifier(accid('##').setAsCautionary(), 1)\n            .addModifier(accid('#').setAsCautionary(), 2)\n            .addModifier(accid('b'), 3)\n            .addModifier(accid('bb').setAsCautionary(), 4)\n            .addModifier(accid('b').setAsCautionary(), 5),\n    ];\n    Formatter.SimpleFormat(notes);\n    notes.forEach((n, i) => {\n        options.assert.ok(n.getModifiersByType('Accidental').length > 0, 'Note ' + i + ' has accidentals');\n    });\n    f.draw();\n    options.assert.ok(true, 'Factory API');\n}\nVexFlowTests.register(AccidentalTests);\nexport { AccidentalTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Annotation Tests\n// TODO: Formatter.FormatAndDraw(ctx, stave, notes, ???number???);\n//       Did a previous version of the API accept a number as the fourth argument?\n//       We removed the fourth argument from all of our test cases.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\nimport { Articulation } from '../src/articulation';\nimport { Beam } from '../src/beam';\nimport { Bend } from '../src/bend';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { ModifierPosition } from '../src/modifier';\nimport { Registry } from '../src/registry';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { Stem } from '../src/stem';\nimport { Tables } from '../src/tables';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { Vibrato } from '../src/vibrato';\nimport { Voice } from '../src/voice';\nconst AnnotationTests = {\n    Start() {\n        QUnit.module('Annotation');\n        const run = VexFlowTests.runTests;\n        run('Placement', placement);\n        run('Lyrics', lyrics);\n        run('Simple Annotation', simple);\n        run('Styled Annotation', styling);\n        run('Standard Notation Annotation', standard);\n        run('Harmonics', harmonic);\n        run('Fingerpicking', picking);\n        run('Bottom Annotation', bottom);\n        run('Bottom Annotations with Beams', bottomWithBeam);\n        run('Test Justification Annotation Stem Up', justificationStemUp);\n        run('Test Justification Annotation Stem Down', justificationStemDown);\n        run('TabNote Annotations', tabNotes);\n    },\n};\nconst FONT_SIZE = VexFlowTests.Font.size;\n// Helper functions to create TabNote and StaveNote objects.\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\nconst staveNote = (noteStruct) => new StaveNote(noteStruct);\n/**\n * Show lyrics using Annotation objects.\n */\nfunction lyrics(options) {\n    let fontSize = FONT_SIZE;\n    let x = 10;\n    let width = 170;\n    let ratio = 1;\n    const registry = new Registry();\n    Registry.enableDefaultRegistry(registry);\n    const f = VexFlowTests.makeFactory(options, 750, 260);\n    // Add three groups of staves. Each time we increase the fontSize by 2.\n    for (let i = 0; i < 3; ++i) {\n        const score = f.EasyScore();\n        score.set({ time: '3/4' });\n        const system = f.System({ width, x });\n        system.addStave({\n            voices: [\n                score.voice(score.notes('(C4 F4)/2[id=\"n0\"]').concat(score.beam(score.notes('(C4 A4)/8[id=\"n1\"], (C4 A4)/8[id=\"n2\"]')))),\n            ],\n        });\n        // Add lyrics under the first row.\n        ['hand,', 'and', 'me', 'pears', 'lead', 'the'].forEach((text, ix) => {\n            const verse = Math.floor(ix / 3);\n            const noteGroupID = 'n' + (ix % 3);\n            const noteGroup = registry.getElementById(noteGroupID);\n            const lyricsAnnotation = f.Annotation({ text }).setFontSize(fontSize);\n            lyricsAnnotation.setPosition(ModifierPosition.BELOW);\n            noteGroup.addModifier(lyricsAnnotation, verse);\n        });\n        // Second row doesn't have any lyrics.\n        system.addStave({\n            voices: [score.voice(score.notes('(F4 D5)/2').concat(score.beam(score.notes('(F4 F5)/8, (F4 F5)/8'))))],\n        });\n        f.draw();\n        ratio = (fontSize + 2) / fontSize;\n        width = width * ratio;\n        x = x + width;\n        fontSize = fontSize + 2;\n    }\n    options.assert.ok(true);\n}\nfunction simple(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = '10pt Arial, sans-serif';\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'h',\n        }).addModifier(new Annotation('T'), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'h',\n        }).addModifier(new Bend([{ type: Bend.UP, text: 'Full' }]).setTap('T'), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Simple Annotation');\n}\nfunction standard(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    const stave = new Stave(10, 10, 450).addClef('treble').setContext(ctx).draw();\n    const annotation = (text) => new Annotation(text).setFont(Tables.lookupMetric('Annotation.fontFamily'), FONT_SIZE, 'normal', 'italic');\n    const notes = [\n        staveNote({ keys: ['c/4', 'e/4'], duration: 'h' }).addModifier(annotation('quiet'), 0),\n        staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'h' }).addModifier(annotation('Allegro'), 2),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Standard Notation Annotation');\n}\nfunction styling(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    const stave = new Stave(10, 10, 450).addClef('treble').setContext(ctx).draw();\n    const annotation = (text, style) => new Annotation(text)\n        .setFont(Tables.lookupMetric('Annotation.fontFamily'), FONT_SIZE, 'normal', 'italic')\n        .setStyle(style);\n    const notes = [\n        staveNote({ keys: ['c/4', 'e/4'], duration: 'h' }).addModifier(annotation('quiet', { fillStyle: '#0F0' }), 0),\n        staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'h' }).addModifier(annotation('Allegro', { fillStyle: '#00F' }), 2),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Standard Notation Annotation');\n}\nfunction harmonic(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 450).addClef('tab').setContext(ctx).draw();\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 12 },\n                { str: 3, fret: 12 },\n            ],\n            duration: 'h',\n        }).addModifier(new Annotation('Harm.'), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 9 }],\n            duration: 'h',\n        })\n            .addModifier(new Annotation('(8va)').setFont(Tables.lookupMetric('Annotation.fontFamily'), FONT_SIZE, 'normal', 'italic'), 0)\n            .addModifier(new Annotation('A.H.'), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Simple Annotation');\n}\nfunction picking(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.setFont(Tables.lookupMetric('fontFamily'), FONT_SIZE);\n    const stave = new TabStave(10, 10, 450).addClef('tab').setContext(ctx).draw();\n    const annotation = (text) => new Annotation(text).setFont(Tables.lookupMetric('Annotation.fontFamily'), FONT_SIZE, 'normal', 'italic');\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 1, fret: 0 },\n                { str: 2, fret: 1 },\n                { str: 3, fret: 2 },\n                { str: 4, fret: 2 },\n                { str: 5, fret: 0 },\n            ],\n            duration: 'h',\n        }).addModifier(new Vibrato().setVibratoWidth(40), 0),\n        tabNote({\n            positions: [{ str: 6, fret: 9 }],\n            duration: '8',\n        }).addModifier(annotation('p').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\n        tabNote({\n            positions: [{ str: 3, fret: 9 }],\n            duration: '8',\n        }).addModifier(annotation('i').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 9 }],\n            duration: '8',\n        }).addModifier(annotation('m').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\n        tabNote({\n            positions: [{ str: 1, fret: 9 }],\n            duration: '8',\n        }).addModifier(annotation('a').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Fingerpicking');\n}\nfunction placement(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 750, 300);\n    const stave = new Stave(10, 50, 750).addClef('treble').setContext(ctx).draw();\n    const annotation = (text, fontSize, vj) => new Annotation(text).setFontSize(fontSize).setVerticalJustification(vj);\n    const notes = [\n        staveNote({ keys: ['e/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['b/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['c/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(annotation('v1', 14, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 14, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['f/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 11, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.TOP), 0)\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.TOP), 0),\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(annotation('v1', 12, AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(annotation('v2', 12, AnnotationVerticalJustify.BOTTOM), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\n        staveNote({ keys: ['f/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\n        staveNote({ keys: ['f/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\n        staveNote({ keys: ['f/5'], duration: 'w' })\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(annotation('v2', 16, AnnotationVerticalJustify.BOTTOM), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, ' Annotation Placement');\n}\nfunction bottom(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    const stave = new Stave(10, 10, 300).addClef('treble').setContext(ctx).draw();\n    const annotation = (text) => new Annotation(text).setFontSize(FONT_SIZE).setVerticalJustification(Annotation.VerticalJustify.BOTTOM);\n    const notes = [\n        staveNote({ keys: ['f/4'], duration: 'w' }).addModifier(annotation('F'), 0),\n        staveNote({ keys: ['a/4'], duration: 'w' }).addModifier(annotation('A'), 0),\n        staveNote({ keys: ['c/5'], duration: 'w' }).addModifier(annotation('C'), 0),\n        staveNote({ keys: ['e/5'], duration: 'w' }).addModifier(annotation('E'), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Bottom Annotation');\n}\nfunction bottomWithBeam(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    const stave = new Stave(10, 10, 300).addClef('treble').setContext(ctx).draw();\n    const notes = [\n        new StaveNote({ keys: ['a/3'], duration: '8' }).addModifier(new Annotation('good').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\n        new StaveNote({ keys: ['g/3'], duration: '8' }).addModifier(new Annotation('even').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\n        new StaveNote({ keys: ['c/4'], duration: '8' }).addModifier(new Annotation('under').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\n        new StaveNote({ keys: ['d/4'], duration: '8' }).addModifier(new Annotation('beam').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\n    ];\n    const beam = new Beam(notes.slice(1));\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    beam.setContext(ctx).draw();\n    options.assert.ok(true, 'Bottom Annotation with Beams');\n}\nfunction justificationStemUp(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 650, 950);\n    ctx.scale(1.5, 1.5);\n    const annotation = (text, hJustification, vJustification) => new Annotation(text)\n        .setFontSize(FONT_SIZE)\n        .setJustification(hJustification)\n        .setVerticalJustification(vJustification);\n    for (let v = 1; v <= 4; ++v) {\n        const stave = new Stave(10, (v - 1) * 150 + 40, 400).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            staveNote({ keys: ['c/3'], duration: 'q' }).addModifier(annotation('Text', 1, v), 0),\n            staveNote({ keys: ['c/4'], duration: 'q' }).addModifier(annotation('Text', 2, v), 0),\n            staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'q' }).addModifier(annotation('Text', 3, v), 0),\n            staveNote({ keys: ['c/6'], duration: 'q' }).addModifier(annotation('Text', 4, v), 0),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    options.assert.ok(true, 'Test Justification Annotation');\n}\nfunction justificationStemDown(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 650, 1000);\n    ctx.scale(1.5, 1.5);\n    const annotation = (text, hJustification, vJustification) => new Annotation(text)\n        .setFontSize(FONT_SIZE)\n        .setJustification(hJustification)\n        .setVerticalJustification(vJustification);\n    for (let v = 1; v <= 4; ++v) {\n        const stave = new Stave(10, (v - 1) * 150 + 40, 400).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            staveNote({ keys: ['c/3'], duration: 'q', stemDirection: -1 }).addModifier(annotation('Text', 1, v), 0),\n            staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'q', stemDirection: -1 }).addModifier(annotation('Text', 2, v), 0),\n            staveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }).addModifier(annotation('Text', 3, v), 0),\n            staveNote({ keys: ['c/6'], duration: 'q', stemDirection: -1 }).addModifier(annotation('Text', 4, v), 0),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    options.assert.ok(true, 'Test Justification Annotation');\n}\nfunction tabNotes(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt Arial, sans-serif';\n    const stave = new TabStave(10, 10, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 3, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 3, fret: 5 },\n            ],\n            duration: '8',\n        },\n    ];\n    const notes1 = specs.map((noteSpec) => {\n        const note = new TabNote(noteSpec);\n        note.renderOptions.drawStem = true;\n        return note;\n    });\n    const notes2 = specs.map((noteSpec) => {\n        const note = new TabNote(noteSpec);\n        note.renderOptions.drawStem = true;\n        note.setStemDirection(-1);\n        return note;\n    });\n    const notes3 = specs.map((noteSpec) => new TabNote(noteSpec));\n    notes1[0].addModifier(new Annotation('Text').setJustification(1).setVerticalJustification(1)); // U\n    notes1[1].addModifier(new Annotation('Text').setJustification(2).setVerticalJustification(2)); // D\n    notes1[2].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(3)); // U\n    notes1[3].addModifier(new Annotation('Text').setJustification(4).setVerticalJustification(4)); // D\n    notes2[0].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(1)); // U\n    notes2[1].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(2)); // D\n    notes2[2].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(3)); // U\n    notes2[3].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(4)); // D\n    notes3[0].addModifier(new Annotation('Text').setVerticalJustification(1)); // U\n    notes3[1].addModifier(new Annotation('Text').setVerticalJustification(2)); // D\n    notes3[2].addModifier(new Annotation('Text').setVerticalJustification(3)); // U\n    notes3[3].addModifier(new Annotation('Text').setVerticalJustification(4)); // D\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT);\n    voice.addTickables(notes1);\n    voice.addTickables(notes2);\n    voice.addTickables(notes3);\n    // Alternatively, you could add all the notes in one big array with spread syntax.\n    // voice.addTickables([...notes1, ...notes2, ...notes3]);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave });\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'TabNotes successfully drawn');\n}\nVexFlowTests.register(AnnotationTests);\nexport { AnnotationTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Articulation Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Articulation } from '../src/articulation';\nimport { Beam } from '../src/beam';\nimport { Flow } from '../src/flow';\nimport { Font } from '../src/font';\nimport { Formatter } from '../src/formatter';\nimport { ModifierPosition } from '../src/modifier';\nimport { Stave } from '../src/stave';\nimport { Barline } from '../src/stavebarline';\nimport { StaveNote } from '../src/stavenote';\nimport { Stem } from '../src/stem';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { Voice } from '../src/voice';\nconst ArticulationTests = {\n    Start() {\n        QUnit.module('Articulation');\n        const run = VexFlowTests.runTests;\n        run('Articulation - Vertical Placement', verticalPlacement);\n        run('Articulation - Vertical Placement (Glyph codes)', verticalPlacement2);\n        run('Articulation - Staccato/Staccatissimo', drawArticulations, { sym1: 'a.', sym2: 'av' });\n        run('Articulation - Accent/Tenuto', drawArticulations, { sym1: 'a>', sym2: 'a-' });\n        run('Articulation - Marcato/L.H. Pizzicato', drawArticulations, { sym1: 'a^', sym2: 'a+' });\n        run('Articulation - Snap Pizzicato/Fermata', drawArticulations, { sym1: 'ao', sym2: 'ao' });\n        run('Articulation - Up-stroke/Down-Stroke', drawArticulations, { sym1: 'a|', sym2: 'am' });\n        run('Articulation - Fermata Above/Below', drawFermata, { sym1: 'a@a', sym2: 'a@u' });\n        run('Articulation - Fermata Short Above/Below', drawFermata, { sym1: 'a@as', sym2: 'a@us' });\n        run('Articulation - Fermata Long Above/Below', drawFermata, { sym1: 'a@al', sym2: 'a@ul' });\n        run('Articulation - Fermata Very Long Above/Below', drawFermata, { sym1: 'a@avl', sym2: 'a@uvl' });\n        run('Articulation - Inline/Multiple', drawArticulations2, { sym1: 'a.', sym2: 'a.' });\n        run('TabNote Articulation', tabNotes, { sym1: 'a.', sym2: 'a.' });\n    },\n};\n// Helper function for creating StaveNotes.\nfunction drawArticulations(options) {\n    const sym1 = options.params.sym1;\n    const sym2 = options.params.sym2;\n    const width = 125 - Stave.defaultPadding;\n    const f = VexFlowTests.makeFactory(options, 675, 195);\n    const ctx = f.getContext();\n    options.assert.expect(0);\n    let x = 10;\n    const y = 30;\n    const score = f.EasyScore();\n    const formatAndDrawToWidth = (x, y, width, notes, barline) => {\n        const voices = [score.voice(notes, { time: '4/4' })];\n        const formatter = f.Formatter();\n        voices.forEach((v) => formatter.joinVoices([v]));\n        const nwidth = Math.max(formatter.preCalculateMinTotalWidth(voices), width);\n        formatter.format(voices, nwidth);\n        const stave = f\n            .Stave({ x, y, width: nwidth + Stave.defaultPadding })\n            .setEndBarType(barline)\n            .setContext(ctx)\n            .draw();\n        voices.forEach((voice) => voice.draw(ctx, stave));\n        return stave.getWidth();\n    };\n    // bar 1\n    const notesBar1 = [\n        f.StaveNote({ keys: ['a/3'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: 1 }),\n    ];\n    notesBar1[0].addModifier(new Articulation(sym1).setPosition(4), 0);\n    notesBar1[1].addModifier(new Articulation(sym1).setPosition(4), 0);\n    notesBar1[2].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar1[3].addModifier(new Articulation(sym1).setPosition(3), 0);\n    // Helper function to justify and draw a 4/4 voice\n    x += formatAndDrawToWidth(x, y, width, notesBar1, Barline.type.NONE);\n    // bar 2 - juxtaposing second bar next to first bar\n    const notesBar2 = [\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n    ];\n    notesBar2[0].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar2[1].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar2[2].addModifier(new Articulation(sym1).setPosition(4), 0);\n    notesBar2[3].addModifier(new Articulation(sym1).setPosition(4), 0);\n    // Helper function to justify and draw a 4/4 voice\n    x += formatAndDrawToWidth(x, y, width, notesBar2, Barline.type.DOUBLE);\n    // bar 3 - juxtaposing second bar next to first bar\n    const notesBar3 = [\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: 1 }),\n    ];\n    notesBar3[0].addModifier(new Articulation(sym2).setPosition(4), 0);\n    notesBar3[1].addModifier(new Articulation(sym2).setPosition(4), 0);\n    notesBar3[2].addModifier(new Articulation(sym2).setPosition(3), 0);\n    notesBar3[3].addModifier(new Articulation(sym2).setPosition(3), 0);\n    // Helper function to justify and draw a 4/4 voice\n    x += formatAndDrawToWidth(x, y, width, notesBar3, Barline.type.NONE);\n    // bar 4 - juxtaposing second bar next to first bar\n    const notesBar4 = [\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n    ];\n    notesBar4[0].addModifier(new Articulation(sym2).setPosition(3), 0);\n    notesBar4[1].addModifier(new Articulation(sym2).setPosition(3), 0);\n    notesBar4[2].addModifier(new Articulation(sym2).setPosition(4), 0);\n    notesBar4[3].addModifier(new Articulation(sym2).setPosition(4), 0);\n    // Helper function to justify and draw a 4/4 voice\n    formatAndDrawToWidth(x, y, width, notesBar4, Barline.type.END);\n}\nfunction drawFermata(options) {\n    const sym1 = options.params.sym1;\n    const sym2 = options.params.sym2;\n    const f = VexFlowTests.makeFactory(options, 400, 195);\n    const ctx = f.getContext();\n    const score = f.EasyScore();\n    const width = 150 - Stave.defaultPadding;\n    let x = 50;\n    const y = 30;\n    const formatAndDrawToWidth = (x, y, width, notes, barline) => {\n        const voices = [score.voice(notes, { time: '4/4' })];\n        const formatter = f.Formatter();\n        voices.forEach((v) => formatter.joinVoices([v]));\n        const nwidth = Math.max(formatter.preCalculateMinTotalWidth(voices), width);\n        formatter.format(voices, nwidth);\n        const stave = f\n            .Stave({ x, y, width: nwidth + Stave.defaultPadding })\n            .setEndBarType(barline)\n            .setContext(ctx)\n            .draw();\n        voices.forEach((voice) => voice.draw(ctx, stave));\n        return stave.getWidth();\n    };\n    options.assert.expect(0);\n    const notesBar1 = [\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stemDirection: -1 }),\n    ];\n    notesBar1[0].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar1[1].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar1[2].addModifier(new Articulation(sym2).setPosition(4), 0);\n    notesBar1[3].addModifier(new Articulation(sym2).setPosition(4), 0);\n    x += formatAndDrawToWidth(x, y, width, notesBar1, Barline.type.NONE);\n    // bar 2 - juxtaposing second bar next to first bar\n    const notesBar2 = [\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n    ];\n    notesBar2[0].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar2[1].addModifier(new Articulation(sym1).setPosition(3), 0);\n    notesBar2[2].addModifier(new Articulation(sym2).setPosition(4), 0);\n    notesBar2[3].addModifier(new Articulation(sym2).setPosition(4), 0);\n    // Helper function to justify and draw a 4/4 voice\n    formatAndDrawToWidth(x, y, width, notesBar2, Barline.type.DOUBLE);\n}\nfunction verticalPlacement(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 750, 300);\n    const staveNote = (noteStruct) => new StaveNote(noteStruct);\n    const stave = new Stave(10, 50, 750).addClef('treble').setContext(ctx).draw();\n    const notes = [\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['g/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['c/5'], duration: 'q' })\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['g/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['c/5'], duration: 'q' })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\n        staveNote({ keys: ['a/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\n        staveNote({ keys: ['b/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\n        staveNote({ keys: ['a/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\n        staveNote({ keys: ['b/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, ' Annotation Placement');\n}\nfunction verticalPlacement2(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 750, 300);\n    const staveNote = (noteStruct) => new StaveNote(noteStruct);\n    const stave = new Stave(10, 50, 750).addClef('treble').setContext(ctx).draw();\n    const notes = [\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(new Articulation('\\ue4c1' /*fermataBelow*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/), 0),\n        staveNote({ keys: ['g/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue4c5' /*fermataShortBelow*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/), 0),\n        staveNote({ keys: ['c/5'], duration: 'q' })\n            .addModifier(new Articulation('\\ue4c7' /*fermataLongBelow*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/), 0),\n        staveNote({ keys: ['f/4'], duration: 'q' })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/), 0)\n            .addModifier(new Articulation('\\ue4c3' /*fermataVeryShortBelow*/), 0),\n        staveNote({ keys: ['g/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/), 0)\n            .addModifier(new Articulation('\\ue4c9' /*fermataVeryLongBelow*/), 0),\n        staveNote({ keys: ['c/5'], duration: 'q' })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.BELOW).setBetweenLines(), 0)\n            .addModifier(new Articulation('\\ue4a5' /*articTenutoBelow*/).setBetweenLines(), 0)\n            .addModifier(new Articulation('\\ue4c1' /*fermataBelow*/), 0),\n        staveNote({ keys: ['a/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue4c0' /*fermataAbove*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(new Articulation('\\ue4c4' /*fermataShortAbove*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/), 0),\n        staveNote({ keys: ['b/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue4c6' /*fermataLongAbove*/), 0)\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/), 0),\n        staveNote({ keys: ['a/5'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/), 0)\n            .addModifier(new Articulation('\\ue4c2' /*fermataVeryShortAbove*/), 0),\n        staveNote({ keys: ['f/5'], duration: 'q' })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/), 0)\n            .addModifier(new Articulation('\\ue4c8' /*fermataVeryLongAbove*/), 0),\n        staveNote({ keys: ['b/4'], duration: 'q', stemDirection: Stem.DOWN })\n            .addModifier(new Articulation('\\ue1e7' /*augmentationDot*/).setPosition(ModifierPosition.ABOVE).setBetweenLines(), 0)\n            .addModifier(new Articulation('\\ue4a4' /*articTenutoAbove*/).setBetweenLines(), 0)\n            .addModifier(new Articulation('\\ue4c0' /*fermataAbove*/), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, ' Annotation Placement (Glyph codes)');\n}\nfunction drawArticulations2(options) {\n    options.assert.expect(0);\n    const scale = 0.8;\n    const f = VexFlowTests.makeFactory(options, 1500, 195);\n    // Get the rendering context\n    const ctx = f.getContext();\n    ctx.scale(scale, scale);\n    // bar 1\n    const stave1 = new Stave(10, 50, 500).setContext(ctx).draw();\n    const notesBar1 = [\n        f.StaveNote({ keys: ['c/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['d/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['e/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['g/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['b/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/5'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['d/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['e/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['g/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['b/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/6'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/6'], duration: '16', stemDirection: -1 }),\n    ];\n    let i;\n    for (i = 0; i < 16; i++) {\n        notesBar1[i].addModifier(new Articulation('a.').setPosition(4), 0);\n        notesBar1[i].addModifier(new Articulation('a>').setPosition(4), 0);\n        if (i === 15) {\n            notesBar1[i].addModifier(new Articulation('a@u').setPosition(4), 0);\n        }\n    }\n    const beam1 = new Beam(notesBar1.slice(0, 8));\n    const beam2 = new Beam(notesBar1.slice(8, 16));\n    Formatter.FormatAndDraw(ctx, stave1, notesBar1);\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    // bar 2 - juxtaposing second bar next to first bar\n    const stave2 = new Stave(510, 50, 500).setContext(ctx).draw();\n    const notesBar2 = [\n        f.StaveNote({ keys: ['f/3'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['g/3'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/3'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['b/3'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['c/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['d/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['e/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '16', stemDirection: 1 }),\n        f.StaveNote({ keys: ['g/4'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['b/4'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['e/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/5'], duration: '16', stemDirection: -1 }),\n        f.StaveNote({ keys: ['g/5'], duration: '16', stemDirection: -1 }),\n    ];\n    for (i = 0; i < 16; i++) {\n        notesBar2[i].addModifier(new Articulation('a-').setPosition(3), 0);\n        notesBar2[i].addModifier(new Articulation('a^').setPosition(3), 0);\n        if (i === 15) {\n            notesBar2[i].addModifier(new Articulation('a@u').setPosition(4), 0);\n        }\n    }\n    const beam3 = new Beam(notesBar2.slice(0, 8));\n    const beam4 = new Beam(notesBar2.slice(8, 16));\n    Formatter.FormatAndDraw(ctx, stave2, notesBar2);\n    beam3.setContext(ctx).draw();\n    beam4.setContext(ctx).draw();\n    // bar 3 - juxtaposing second bar next to first bar\n    const stave3 = new Stave(1010, 50, 100).setContext(ctx).draw();\n    const notesBar3 = [f.StaveNote({ keys: ['c/4'], duration: 'w', stemDirection: 1 })];\n    notesBar3[0].addModifier(new Articulation('a-').setPosition(3), 0);\n    notesBar3[0].addModifier(new Articulation('a>').setPosition(3), 0);\n    notesBar3[0].addModifier(new Articulation('a@a').setPosition(3), 0);\n    Formatter.FormatAndDraw(ctx, stave3, notesBar3);\n    // bar 4 - juxtaposing second bar next to first bar\n    const stave4 = new Stave(1110, 50, 250).setContext(ctx).draw();\n    const notesBar4 = [\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stemDirection: -1 }),\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stemDirection: -1 }),\n    ];\n    for (i = 0; i < 4; i++) {\n        let position1 = 3;\n        if (i > 1) {\n            position1 = 4;\n        }\n        notesBar4[i].addModifier(new Articulation('a-').setPosition(position1), 0);\n    }\n    Formatter.FormatAndDraw(ctx, stave4, notesBar4);\n}\nfunction tabNotes(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt ' + Font.SANS_SERIF;\n    const stave = new TabStave(10, 10, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 3, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 3, fret: 5 },\n            ],\n            duration: '8',\n        },\n    ];\n    const notes1 = specs.map((noteSpec) => {\n        const tabNote = new TabNote(noteSpec);\n        tabNote.renderOptions.drawStem = true;\n        return tabNote;\n    });\n    const notes2 = specs.map((noteSpec) => {\n        const tabNote = new TabNote(noteSpec);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.setStemDirection(-1);\n        return tabNote;\n    });\n    const notes3 = specs.map((noteSpec) => new TabNote(noteSpec));\n    notes1[0].addModifier(new Articulation('a>').setPosition(3), 0); // U\n    notes1[1].addModifier(new Articulation('a>').setPosition(4), 0); // D\n    notes1[2].addModifier(new Articulation('a.').setPosition(3), 0); // U\n    notes1[3].addModifier(new Articulation('a.').setPosition(4), 0); // D\n    notes2[0].addModifier(new Articulation('a>').setPosition(3), 0);\n    notes2[1].addModifier(new Articulation('a>').setPosition(4), 0);\n    notes2[2].addModifier(new Articulation('a.').setPosition(3), 0);\n    notes2[3].addModifier(new Articulation('a.').setPosition(4), 0);\n    notes3[0].addModifier(new Articulation('a>').setPosition(3), 0);\n    notes3[1].addModifier(new Articulation('a>').setPosition(4), 0);\n    notes3[2].addModifier(new Articulation('a.').setPosition(3), 0);\n    notes3[3].addModifier(new Articulation('a.').setPosition(4), 0);\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT);\n    voice.addTickables(notes1);\n    voice.addTickables(notes2);\n    voice.addTickables(notes3);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'TabNotes successfully drawn');\n}\nVexFlowTests.register(ArticulationTests);\nexport { ArticulationTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Auto Beaming Tests\n// TODO: Beam.generateBeams(voice.getTickables() as StemmableNote[], ...) requires a cast to StemmableNote[].\n//       Is there a cleaner way to handle this?\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\nimport { Beam } from '../src/beam';\nimport { Fraction } from '../src/fraction';\nimport { Stave } from '../src/stave';\nimport { Stem } from '../src/stem';\nconst AutoBeamFormattingTests = {\n    Start() {\n        QUnit.module('Auto-Beaming');\n        const run = VexFlowTests.runTests;\n        run('Simple Auto Beaming', simpleAuto);\n        run('Auto Beaming With Overflow Group', simpleAutoWithOverflowGroup);\n        run('Even Group Stem Directions', evenGroupStemDirections);\n        run('Odd Group Stem Directions', oddGroupStemDirections);\n        run('Odd Beam Groups Auto Beaming', oddBeamGroups);\n        run('More Simple Auto Beaming 0', moreSimple0);\n        run('More Simple Auto Beaming 1', moreSimple1);\n        run('Beam Across All Rests', beamAcrossAllRests);\n        run('Beam Across All Rests with Stemlets', beamAcrossAllRestsWithStemlets);\n        run('Break Beams on Middle Rests Only', beamAcrossMiddleRests);\n        run('Break Beams on Rest', breakBeamsOnRests);\n        run('Maintain Stem Directions', maintainStemDirections);\n        run('Maintain Stem Directions - Beam Over Rests', maintainStemDirectionsBeamAcrossRests);\n        run('Beat group with unbeamable note - 2/2', groupWithUnbeamableNote);\n        run('Offset beat grouping - 6/8 ', groupWithUnbeamableNote1);\n        run('Odd Time - Guessing Default Beam Groups', autoOddBeamGroups);\n        run('Custom Beam Groups', customBeamGroups);\n        run('Simple Tuplet Auto Beaming', simpleTuplets);\n        run('More Simple Tuplet Auto Beaming', moreSimpleTuplets);\n        run('More Automatic Beaming', moreBeaming);\n        run('Automatic Beaming 4/4 with  3, 3, 2 Pattern', beamingWithSeveralGroups1);\n        run('Automatic Beaming 4/4 with  3, 3, 2 Pattern and Overflow', beamingWithSeveralGroupsOverflow);\n        run('Automatic Beaming 8/4 with  3, 2, 3 Pattern and 2 Overflows', beamingWithSeveralGroupsOverflow2);\n        run('Automatic Beaming 8/4 with  3, 2, 3 Pattern and 3 Overflows', beamingWithSeveralGroupsOverflow3);\n        run('Duration-Based Secondary Beam Breaks', secondaryBreaks1);\n        run('Duration-Based Secondary Beam Breaks 2', secondaryBreaks2);\n        run('Flat Beams Up', flatBeamsUp);\n        run('Flat Beams Down', flatBeamsDown);\n        run('Flat Beams Mixed Direction', flatBeamsMixed);\n        run('Flat Beams Up (uniform)', flatBeamsUpUniform);\n        run('Flat Beams Down (uniform)', flatBeamsDownUniform);\n        run('Flat Beams Up Bounds', flatBeamsUpBounds);\n        run('Flat Beams Down Bounds', flatBeamsDownBounds);\n    },\n};\nfunction simpleAuto(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('f5/8, e5, d5, c5/16, c5, d5/8, e5, f5, f5/32, f5, f5, f5'), { time: '4/4' });\n    // Takes a voice and returns its auto beams.\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beaming Applicator Test');\n}\nfunction simpleAutoWithOverflowGroup(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    // Add a . after a note (e.g., f5/4.) to make it a dotted note.\n    const voice = score.voice(score.notes('f5/4., e5/8, d5/8, d5/16, c5/16, c5/16, c5/16, f5/16, f5/32, f5/32'), {\n        time: '4/4',\n    });\n    // Takes a voice and returns its auto beams.\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beaming Applicator Test');\n}\nfunction evenGroupStemDirections(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('a4/8, b4, g4, c5, f4, d5, e4, e5, b4, b4, g4, d5'), { time: '6/4' });\n    // Takes a voice and returns its auto beams.\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.equal(beams[0].getStemDirection(), Stem.UP);\n    options.assert.equal(beams[1].getStemDirection(), Stem.UP);\n    options.assert.equal(beams[2].getStemDirection(), Stem.UP);\n    options.assert.equal(beams[3].getStemDirection(), Stem.UP);\n    options.assert.equal(beams[4].getStemDirection(), Stem.DOWN);\n    options.assert.equal(beams[5].getStemDirection(), Stem.DOWN);\n    options.assert.ok(true, 'Auto Beaming Applicator Test');\n}\nfunction oddGroupStemDirections(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('g4/8, b4, d5, c5, f4, d5, e4, g5, g4, b4, g4, d5, a4, c5, a4'), {\n        time: '15/8',\n    });\n    const groups = [new Fraction(3, 8)];\n    const beams = Beam.applyAndGetBeams(voice, undefined, groups);\n    options.assert.equal(beams[0].getStemDirection(), Stem.DOWN, 'Notes are equidistant from middle line');\n    options.assert.equal(beams[1].getStemDirection(), Stem.DOWN);\n    options.assert.equal(beams[2].getStemDirection(), Stem.UP);\n    options.assert.equal(beams[3].getStemDirection(), Stem.DOWN, 'Notes are equidistant from middle line');\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beaming Applicator Test');\n}\nfunction oddBeamGroups(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('f5, e5, d5, c5, c5, d5, e5, f5, f5, f4, f3, f5/16, f5'), { time: '6/4' });\n    const groups = [new Fraction(2, 8), new Fraction(3, 8), new Fraction(1, 8)];\n    // Takes a voice and returns its auto beams.\n    const beams = Beam.applyAndGetBeams(voice, undefined, groups);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction moreSimple0(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/8, g4, c5, g5, a5, c4, d4, a5'), { time: '4/4' });\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction moreSimple1(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction breakBeamsOnRests(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: false,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamAcrossAllRestsWithStemlets(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: true,\n        showStemlets: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamAcrossAllRests(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamAcrossMiddleRests(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: true,\n        beamMiddleOnly: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction maintainStemDirections(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    // EasyScore.notes(line, ...) ignores whitespace in the line string.\n    const voice = score.voice(score.notes([\n        'b4/16,            b4,              b4[stem=\"down\"], b4/r',\n        'b4/r,             b4[stem=\"down\"], b4,              b4',\n        'b4[stem=\"down\"],  b4[stem=\"down\"], b4,              b4/r',\n        'b4/32,            b4[stem=\"down\"], b4[stem=\"down\"], b4, b4/16/r, b4',\n    ].join(', '), { stem: 'up' }), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: false,\n        maintainStemDirections: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction maintainStemDirectionsBeamAcrossRests(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes([\n        'b4/16,            b4,              b4[stem=\"down\"], b4/r',\n        'b4/r,             b4[stem=\"down\"], b4,              b4',\n        'b4[stem=\"down\"],  b4[stem=\"down\"], b4,              b4/r',\n        'b4/32,            b4[stem=\"down\"], b4[stem=\"down\"], b4, b4/16/r, b4',\n    ].join(', '), { stem: 'up' }), { time: '4/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        beamRests: true,\n        maintainStemDirections: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction groupWithUnbeamableNote(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave().addTimeSignature('2/4');\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('b4/16, b4, b4/4, b4/16, b4'), { time: '2/4' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        groups: [new Fraction(2, 2)],\n        beamRests: false,\n        maintainStemDirections: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction groupWithUnbeamableNote1(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave().addTimeSignature('6/8');\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('b4/4, b4/4, b4/8, b4/8'), { time: '6/8' });\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        groups: [new Fraction(3, 8)],\n        beamRests: false,\n        maintainStemDirections: true,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction autoOddBeamGroups(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 400);\n    const score = f.EasyScore();\n    const stave1 = f.Stave({ y: 10 }).addTimeSignature('5/4');\n    const voice1 = score.voice(score.notes('c5/8, g5, c5, b4, b4, c4, d4, a5, c4, g4'), { time: '5/4' });\n    const stave2 = f.Stave({ y: 150 }).addTimeSignature('5/8');\n    const voice2 = score.voice(score.notes('c5/8, g5, c5, b4, b4'), { time: '5/8' });\n    const stave3 = f.Stave({ y: 290 }).addTimeSignature('13/16');\n    const voice3 = score.voice(score.notes('c5/16, g5, c5, b4, b4, c5, g5, c5, b4, b4, c5, b4, b4'), {\n        time: '13/16',\n    });\n    // Flatten the arrays into a single Beam[].\n    const beams = [\n        ...Beam.applyAndGetBeams(voice1, undefined, Beam.getDefaultBeamGroups('5/4')),\n        ...Beam.applyAndGetBeams(voice2, undefined, Beam.getDefaultBeamGroups('5/8')),\n        ...Beam.applyAndGetBeams(voice3, undefined, Beam.getDefaultBeamGroups('13/16')),\n    ];\n    f.Formatter().formatToStave([voice1], stave1).formatToStave([voice2], stave2).formatToStave([voice3], stave3);\n    Stave.formatBegModifiers([stave1, stave2, stave3]);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction customBeamGroups(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 400);\n    const score = f.EasyScore();\n    const stave1 = f.Stave({ y: 10 }).addTimeSignature('5/4');\n    const voice1 = score.voice(score.notes('c5/8, g5, c5, b4, b4, c4, d4, a5, c4, g4'), { time: '5/4' });\n    const stave2 = f.Stave({ y: 150 }).addTimeSignature('5/8');\n    const voice2 = score.voice(score.notes('c5/8, g5, c5, b4, b4'), { time: '5/8' });\n    const stave3 = f.Stave({ y: 290 }).addTimeSignature('13/16');\n    const voice3 = score.voice(score.notes('c5/16, g5, c5, b4, b4, c5, g5, c5, b4, b4, c5, b4, b4'), { time: '13/16' });\n    const group1 = [new Fraction(5, 8)];\n    const group2 = [new Fraction(3, 8), new Fraction(2, 8)];\n    const group3 = [new Fraction(7, 16), new Fraction(2, 16), new Fraction(4, 16)];\n    // Flatten the three Beam[] into a single Beam[].\n    // Alternatively, you can use .reduce(concat) flatten arrays, where concat is defined as (a, b) => a.concat(b).\n    const beams = [\n        ...Beam.applyAndGetBeams(voice1, undefined, group1),\n        ...Beam.applyAndGetBeams(voice2, undefined, group2),\n        ...Beam.applyAndGetBeams(voice3, undefined, group3),\n    ];\n    f.Formatter().formatToStave([voice1], stave1).formatToStave([voice2], stave2).formatToStave([voice3], stave3);\n    Stave.formatBegModifiers([stave1, stave2, stave3]);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\n/**\n * Helper function which uses Function.prototype.bind() to create shortcut methods.\n * This can improve the readability of large blocks of EasyScore code.\n */\nfunction createShortcuts(score) {\n    return {\n        notes: score.notes.bind(score),\n        tuplet: score.tuplet.bind(score),\n    };\n}\nfunction simpleTuplets(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([\n        ...tuplet(notes('c4/8, g4, c5')),\n        ...notes('g5/8, a5'),\n        ...tuplet(notes('a5/16, (c5 e5), a5, d5, a5'), { ratioed: false, notesOccupied: 4 }),\n    ], { time: '3/4' });\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction moreSimpleTuplets(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([...tuplet(notes('d4/4, g4, c5')), ...notes('g5/16, a5, a5, (c5 e5)')], { time: '3/4' });\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction moreBeaming(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/8, g4/4, c5/8., g5/16, a5/4, a5/16, (c5 e5)/16, a5/8'), { time: '9/8' });\n    const beams = Beam.applyAndGetBeams(voice, undefined, Beam.getDefaultBeamGroups('9/8'));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamingWithSeveralGroups1(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/8, g4/4, c5/8, g5, a5, a5, f5'), { time: '4/4' });\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(3, 8), new Fraction(2, 8)]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamingWithSeveralGroupsOverflow(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/8, g4/4., c5/8, g5, a5, a5'), { time: '4/4' });\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(3, 8), new Fraction(2, 8)]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamingWithSeveralGroupsOverflow2(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/16, g4/2, f4/16, c5/8, a4/16, c4/16, g4/8, b4, c5, g5, f5, e5, c5, a4/4'), {\n        time: '8/4',\n    });\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(2, 8), new Fraction(3, 8)]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction beamingWithSeveralGroupsOverflow3(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c4/16, g4/1, f4/16, c5/8, g5, f5, e5, c5, a4/4'), { time: '8/4' });\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(2, 8), new Fraction(3, 8)]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Auto Beam Applicator Test');\n}\nfunction secondaryBreaks1(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes([\n        'f5/32, f5, f5, f5, f5/16., f5/32',\n        'f5/16, f5/8, f5/16',\n        'f5/32, f5/16., f5., f5/32',\n        'f5/16., f5/32, f5, f5/16.',\n    ].join(',')));\n    const beams = Beam.generateBeams(voice.getTickables(), { secondaryBreaks: '8' });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Duration-Based Secondary Breaks Test');\n}\nfunction secondaryBreaks2(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([\n        tuplet(notes('e5/16, f5, f5')),\n        tuplet(notes('f5/16, f5, c5')),\n        notes('a4/16., f4/32'),\n        tuplet(notes('d4/16, d4, d4')),\n        tuplet(notes('a5/8, (e5 g5), a5')),\n        tuplet(notes('f5/16, f5, f5')),\n        tuplet(notes('f5/16, f5, a4')),\n    ].reduce(concat));\n    const beams = Beam.generateBeams(voice.getTickables(), { secondaryBreaks: '8' });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Duration-Based Secondary Breaks Test');\n}\nfunction flatBeamsUp(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([\n        tuplet(notes('c4/8, g4, f5')),\n        notes('d5/8'),\n        tuplet(notes('c5/16, (c4 e4 g4), f4')),\n        notes('d5/8, e5, c4, f5/32, f5, f5, f5'),\n    ].reduce(concat));\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        stemDirection: 1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Up Test');\n}\nfunction flatBeamsDown(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/64, c5, c5, c5, c5, c5, c5, c5, a5/8, g5, (d4 f4 a4)/16, d4, d5/8, e5, g5, a6/32, a6, a6, g4/64, g4'));\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        stemDirection: -1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Down Test');\n}\nfunction flatBeamsMixed(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/64, d5, e5, c5, f5, c5, a5, c5, a5/8, g5, (d4 f4 a4)/16, d4, d5/8, e5, c4, a4/32, a4, a4, g4/64, g4'));\n    const beams = Beam.generateBeams(voice.getTickables(), { flatBeams: true });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Mixed Direction Test');\n}\nfunction flatBeamsUpUniform(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([\n        ...tuplet(notes('c4/8, g4, g5')),\n        ...notes('d5/8, c5/16, (c4 e4 g4), d5/8, e5, c4, f5/32, f5, f5, f5'),\n    ]);\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        flatBeamOffset: 50,\n        stemDirection: 1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Up (uniform) Test');\n}\nfunction flatBeamsDownUniform(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('c5/64, c5, c5, c5, c5, c5, c5, c5, a5/8, g5, (e4 g4 b4)/16, e5, d5/8, e5/8, g5/8, a6/32, a6, a6, g4/64, g4'));\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        flatBeamOffset: 155,\n        stemDirection: -1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Down (uniform) Test');\n}\nfunction flatBeamsUpBounds(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const { notes, tuplet } = createShortcuts(score);\n    const voice = score.voice([\n        ...tuplet(notes('c4/8, g4/8, g5/8')),\n        ...notes('d5/8, c5/16, (c4 e4 g4)/16, d5/8, e5/8, c4/8, f5/32, f5/32, f5/32, f5/32'),\n    ]);\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        flatBeamOffset: 60,\n        stemDirection: 1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Up (uniform) Test');\n}\nfunction flatBeamsDownBounds(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes([\n        'g5/8, a6/32, a6/32, a6/32, g4/64, g4/64',\n        'c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, a5/8',\n        'g5/8, (e4 g4 b4)/16, e5/16',\n        'd5/8, e5/8',\n    ].join(','), { stem: 'down' }));\n    const beams = Beam.generateBeams(voice.getTickables(), {\n        flatBeams: true,\n        flatBeamOffset: 145,\n        stemDirection: -1,\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'Flat Beams Down (uniform) Test');\n}\nVexFlowTests.register(AutoBeamFormattingTests);\nexport { AutoBeamFormattingTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Bach Demo\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\nimport { BarlineType, Registry } from '../src/index';\nconst BachDemoTests = {\n    Start() {\n        QUnit.module('Bach Demo');\n        VexFlowTests.runTests('Minuet 1', minuet1);\n    },\n};\nfunction minuet1(options) {\n    const registry = new Registry();\n    Registry.enableDefaultRegistry(registry);\n    // Retrieve the element from the registry and cast to StaveNote, so we can call .addModifier( ) later.\n    const id = (id) => registry.getElementById(id);\n    const f = VexFlowTests.makeFactory(options, 1100, 900);\n    const score = f.EasyScore({ throwOnError: true });\n    // Bind these three functions so the code looks cleaner.\n    // Instead of score.voice(...), just call voice(...).\n    const voice = score.voice.bind(score);\n    const notes = score.notes.bind(score);\n    const beam = score.beam.bind(score);\n    let x = 120;\n    let y = 80;\n    function appendSystem(width) {\n        const system = f.System({ x, y, width, spaceBetweenStaves: 10 });\n        x += width;\n        return system;\n    }\n    score.set({ time: '3/4' });\n    /*  Measure 1 */\n    let system = appendSystem(220);\n    system\n        .addStave({\n        voices: [\n            voice([notes('D5/q[id=\"m1a\"]'), beam(notes('G4/8, A4, B4, C5', { stem: 'up' }))].reduce(concat)),\n            voice([f.TextDynamics({ text: 'p', duration: 'h', dots: 1, line: 9 })]),\n        ],\n    })\n        .addClef('treble')\n        .addKeySignature('G')\n        .addTimeSignature('3/4')\n        .setTempo({ name: 'Allegretto', duration: 'h', dots: 1, bpm: 66 }, -30);\n    system\n        .addStave({ voices: [voice(notes('(G3 B3 D4)/h, A3/q', { clef: 'bass' }))] })\n        .addClef('bass')\n        .addKeySignature('G')\n        .addTimeSignature('3/4');\n    system.addConnector('brace');\n    system.addConnector('singleRight');\n    system.addConnector('singleLeft');\n    id('m1a').addModifier(f.Fingering({ number: '5' }), 0);\n    /*  Measure 2 */\n    system = appendSystem(150);\n    system.addStave({ voices: [voice(notes('D5/q[id=\"m2a\"], G4[id=\"m2b\"], G4[id=\"m2c\"]'))] });\n    system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m2a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\n    id('m2b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m2c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    f.Curve({\n        from: id('m1a'),\n        to: id('m2a'),\n        options: {\n            cps: [\n                { x: 0, y: 40 },\n                { x: 0, y: 40 },\n            ],\n        },\n    });\n    /*  Measure 3 */\n    system = appendSystem(150);\n    system.addStave({\n        voices: [voice([notes('E5/q[id=\"m3a\"]'), beam(notes('C5/8, D5, E5, F5', { stem: 'down' }))].reduce(concat))],\n    });\n    id('m3a').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\n    system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    /*  Measure 4 */\n    system = appendSystem(150);\n    system.addStave({ voices: [voice(notes('G5/q[id=\"m4a\"], G4[id=\"m4b\"], G4[id=\"m4c\"]'))] });\n    system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m4a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\n    id('m4b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m4c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    f.Curve({\n        from: id('m3a'),\n        to: id('m4a'),\n        options: {\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 20 },\n            ],\n        },\n    });\n    /*  Measure 5 */\n    system = appendSystem(150);\n    system.addStave({\n        voices: [voice([notes('C5/q[id=\"m5a\"]'), beam(notes('D5/8, C5, B4, A4', { stem: 'down' }))].reduce(concat))],\n    });\n    id('m5a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\n    system.addStave({ voices: [voice(notes('A3/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    /*  Measure 6 */\n    system = appendSystem(150);\n    system.addStave({\n        voices: [voice([notes('B4/q'), beam(notes('C5/8, B4, A4, G4[id=\"m6a\"]', { stem: 'up' }))].reduce(concat))],\n    });\n    system.addStave({ voices: [voice(notes('G3/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    f.Curve({\n        from: id('m5a'),\n        to: id('m6a'),\n        options: {\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 20 },\n            ],\n            invert: true,\n            positionEnd: 'nearTop',\n            yShift: 20,\n        },\n    });\n    /*  Measure 7 (New system) */\n    x = 20;\n    y += 230;\n    system = appendSystem(220);\n    system\n        .addStave({\n        voices: [\n            voice([notes('F4/q[id=\"m7a\"]'), beam(notes('G4/8[id=\"m7b\"], A4, B4, G4', { stem: 'up' }))].reduce(concat)),\n        ],\n    })\n        .addClef('treble')\n        .addKeySignature('G');\n    system\n        .addStave({ voices: [voice(notes('D4/q, B3[id=\"m7c\"], G3', { clef: 'bass' }))] })\n        .addClef('bass')\n        .addKeySignature('G');\n    system.addConnector('brace');\n    system.addConnector('singleRight');\n    system.addConnector('singleLeft');\n    id('m7a').addModifier(f.Fingering({ number: '2', position: 'below' }), 0);\n    id('m7b').addModifier(f.Fingering({ number: '1' }), 0);\n    id('m7c').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\n    /*  Measure 8 */\n    system = appendSystem(180);\n    const grace = f.GraceNote({ keys: ['d/3'], clef: 'bass', duration: '4', slash: false });\n    system.addStave({ voices: [voice(notes('A4/h.[id=\"m8c\"]'))] });\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'bass' })\n                .voice([notes('D4/q[id=\"m8a\"]'), beam(notes('D3/8, C4, B3[id=\"m8b\"], A3', { stem: 'down' }))].reduce(concat)),\n        ],\n    });\n    system.addConnector('singleRight');\n    id('m8b').addModifier(f.Fingering({ number: '1', position: 'above' }), 0);\n    id('m8c').addModifier(f.GraceNoteGroup({ notes: [grace] }), 0);\n    f.Curve({\n        from: id('m7a'),\n        to: id('m8c'),\n        options: {\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 20 },\n            ],\n            invert: true,\n            position: 'nearTop',\n            positionEnd: 'nearTop',\n        },\n    });\n    f.StaveTie({ from: grace, to: id('m8c') });\n    /*  Measure 9 */\n    system = appendSystem(180);\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('D5/q[id=\"m9a\"]'), beam(notes('G4/8, A4, B4, C5', { stem: 'up' }))].reduce(concat)),\n        ],\n    });\n    system.addStave({ voices: [voice(notes('B3/h, A3/q', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m9a').addModifier(f.Fingering({ number: '5' }), 0);\n    /*  Measure 10 */\n    system = appendSystem(170);\n    system.addStave({ voices: [voice(notes('D5/q[id=\"m10a\"], G4[id=\"m10b\"], G4[id=\"m10c\"]'))] });\n    system.addStave({ voices: [voice(notes('G3/q[id=\"m10d\"], B3, G3', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m10a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\n    id('m10b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m10c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m10d').addModifier(f.Fingering({ number: '4' }), 0);\n    f.Curve({\n        from: id('m9a'),\n        to: id('m10a'),\n        options: {\n            cps: [\n                { x: 0, y: 40 },\n                { x: 0, y: 40 },\n            ],\n        },\n    });\n    /*  Measure 11 */\n    system = appendSystem(150);\n    system.addStave({\n        voices: [voice([notes('E5/q[id=\"m11a\"]'), beam(notes('C5/8, D5, E5, F5', { stem: 'down' }))].reduce(concat))],\n    });\n    id('m11a').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\n    system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    /*  Measure 12 */\n    system = appendSystem(170);\n    system.addStave({ voices: [voice(notes('G5/q[id=\"m12a\"], G4[id=\"m12b\"], G4[id=\"m12c\"]'))] });\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'bass' })\n                .voice([notes('B3/q[id=\"m12d\"]'), beam(notes('C4/8, B3, A3, G3[id=\"m12e\"]', { stem: 'down' }))].reduce(concat)),\n        ],\n    });\n    system.addConnector('singleRight');\n    id('m12a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\n    id('m12b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m12c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\n    id('m12d').addModifier(f.Fingering({ number: '2', position: 'above' }), 0);\n    id('m12e').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\n    f.Curve({\n        from: id('m11a'),\n        to: id('m12a'),\n        options: {\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 20 },\n            ],\n        },\n    });\n    /*  Measure 13 (New system) */\n    x = 20;\n    y += 230;\n    system = appendSystem(220);\n    system\n        .addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('c5/q[id=\"m13a\"]'), beam(notes('d5/8, c5, b4, a4', { stem: 'down' }))].reduce(concat)),\n        ],\n    })\n        .addClef('treble')\n        .addKeySignature('G');\n    system\n        .addStave({ voices: [voice(notes('a3/h[id=\"m13b\"], f3/q[id=\"m13c\"]', { clef: 'bass' }))] })\n        .addClef('bass')\n        .addKeySignature('G');\n    system.addConnector('brace');\n    system.addConnector('singleRight');\n    system.addConnector('singleLeft');\n    id('m13a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\n    id('m13b').addModifier(f.Fingering({ number: '1' }), 0);\n    id('m13c').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\n    /*  Measure 14 */\n    system = appendSystem(180);\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('B4/q'), beam(notes('C5/8, b4, a4, g4', { stem: 'up' }))].reduce(concat)),\n        ],\n    });\n    system.addStave({ voices: [voice(notes('g3/h[id=\"m14a\"], b3/q[id=\"m14b\"]', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m14a').addModifier(f.Fingering({ number: '2' }), 0);\n    id('m14b').addModifier(f.Fingering({ number: '1' }), 0);\n    /*  Measure 15 */\n    system = appendSystem(180);\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('a4/q'), beam(notes('b4/8, a4, g4, f4[id=\"m15a\"]', { stem: 'up' }))].reduce(concat)),\n        ],\n    });\n    system.addStave({ voices: [voice(notes('c4/q[id=\"m15b\"], d4, d3', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m15a').addModifier(f.Fingering({ number: '2' }), 0);\n    id('m15b').addModifier(f.Fingering({ number: '2' }), 0);\n    /*  Measure 16 */\n    system = appendSystem(130);\n    system\n        .addStave({\n        voices: [score.set({ clef: 'treble' }).voice([notes('g4/h.[id=\"m16a\"]')].reduce(concat))],\n    })\n        .setEndBarType(BarlineType.REPEAT_END);\n    system\n        .addStave({ voices: [voice(notes('g3/h[id=\"m16b\"], g2/q', { clef: 'bass' }))] })\n        .setEndBarType(BarlineType.REPEAT_END);\n    system.addConnector('boldDoubleRight');\n    id('m16a').addModifier(f.Fingering({ number: '1' }), 0);\n    id('m16b').addModifier(f.Fingering({ number: '1' }), 0);\n    f.Curve({\n        from: id('m13a'),\n        to: id('m16a'),\n        options: {\n            cps: [\n                { x: 0, y: 50 },\n                { x: 0, y: 20 },\n            ],\n            invert: true,\n            positionEnd: 'nearTop',\n        },\n    });\n    /* Measure 17 */\n    system = appendSystem(180);\n    system\n        .addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('b5/q[id=\"m17a\"]'), beam(notes('g5/8, a5, b5, g5', { stem: 'down' }))].reduce(concat)),\n            voice([f.TextDynamics({ text: 'mf', duration: 'h', dots: 1, line: 10 })]),\n        ],\n    })\n        .setBegBarType(BarlineType.REPEAT_BEGIN);\n    system.addStave({ voices: [voice(notes('g3/h.', { clef: 'bass' }))] }).setBegBarType(BarlineType.REPEAT_BEGIN);\n    system.addConnector('boldDoubleLeft');\n    system.addConnector('singleRight');\n    id('m17a').addModifier(f.Fingering({ number: '5', position: 'above' }), 0);\n    /* Measure 18 */\n    system = appendSystem(180);\n    system.addStave({\n        voices: [\n            score\n                .set({ clef: 'treble' })\n                .voice([notes('a5/q[id=\"m18a\"]'), beam(notes('d5/8, e5, f5, d5[id=\"m18b\"]', { stem: 'down' }))].reduce(concat)),\n        ],\n    });\n    system.addStave({ voices: [voice(notes('f3/h.', { clef: 'bass' }))] });\n    system.addConnector('singleRight');\n    id('m18a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\n    f.Curve({\n        from: id('m17a'),\n        to: id('m18b'),\n        options: {\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 30 },\n            ],\n        },\n    });\n    /* Done */\n    f.draw();\n    Registry.disableDefaultRegistry();\n    options.assert.ok(true, 'Bach Minuet 1');\n}\nVexFlowTests.register(BachDemoTests);\nexport { BachDemoTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Barline Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Barline, BarlineType } from '../src/stavebarline';\nconst BarlineTests = {\n    Start() {\n        QUnit.module('Barline');\n        QUnit.test('Enums', enums);\n        const run = VexFlowTests.runTests;\n        run('Simple BarNotes', simple);\n        run('Style BarNotes', style);\n    },\n};\nfunction enums(assert) {\n    // VexFlow 4.0 renamed Barline.type => BarlineType.\n    // The old way still works, for backwards compatibility.\n    assert.equal(Barline.type, BarlineType);\n    const a = BarlineType['DOUBLE'];\n    const b = BarlineType.DOUBLE;\n    assert.equal(a, b);\n}\nfunction simple(options) {\n    const f = VexFlowTests.makeFactory(options, 380, 160);\n    const stave = f.Stave();\n    const notes = [\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: -1, duration: '2' }),\n        f.BarNote({ type: 'single' }),\n        f\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '2' })\n            .addModifier(f.Accidental({ type: 'n' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n    ];\n    const voice = f.Voice().addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Simple Test');\n}\nfunction style(options) {\n    const f = VexFlowTests.makeFactory(options, 380, 160);\n    const stave = f.Stave();\n    const notes = [\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: -1, duration: '2' }),\n        f.BarNote({ type: 'single' }),\n        f\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '2' })\n            .addModifier(f.Accidental({ type: 'n' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n    ];\n    notes[1].setStyle({ shadowBlur: 15, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\n    const voice = f.Voice().addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Style');\n}\nVexFlowTests.register(BarlineTests);\nexport { BarlineTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Beam Tests\n// TODO: Factory.Beam()'s 'notes' argument is a StemmableNote[], but we only have access to Tickable[].\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\nimport { AnnotationVerticalJustify, Beam, Dot, FontStyle, FontWeight, Stem, Voice, } from '../src/index';\nimport { Tables } from '../src/tables';\nconst BeamTests = {\n    Start() {\n        QUnit.module('Beam');\n        const run = VexFlowTests.runTests;\n        run('Simple Beam', simple);\n        run('Multi Beam', multi);\n        run('Sixteenth Beam', sixteenth);\n        run('Slopey Beam', slopey);\n        run('Auto-stemmed Beam', autoStem);\n        run('Mixed Beam 1', mixed);\n        run('Mixed Beam 2', mixed2);\n        run('Dotted Beam', dotted);\n        run('Partial Beam', partial);\n        run('Close Trade-offs Beam', tradeoffs);\n        run('Insane Beam', insane);\n        run('Lengthy Beam', lenghty);\n        run('Outlier Beam', outlier);\n        run('Break Secondary Beams', breakSecondaryBeams);\n        run('Partial Beam Direction', partialBeamDirection);\n        run('TabNote Beams Up', tabBeamsUp);\n        run('TabNote Beams Down', tabBeamsDown);\n        run('TabNote Auto Create Beams', autoTabBeams);\n        run('TabNote Beams Auto Stem', tabBeamsAutoStem);\n        run('Complex Beams with Annotations', complexWithAnnotation);\n        run('Complex Beams with Articulations', complexWithArticulation);\n        run('Complex Beams with Articulations two Staves', complexWithArticulation2);\n    },\n};\nfunction simple(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voice = score.voice([\n        notes('(cb4 e#4 a4)/2'),\n        beam(notes('(cb4 e#4 a4)/8, (d4 f4 a4), (ebb4 g##4 b4), (f4 a4 c5)', { stem: 'up' })),\n    ].reduce(concat), { time: '2/2' });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Simple Test');\n}\nfunction multi(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice.bind(score);\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voices = [\n        voice([beam(notes('f5/8, e5, d5, c5', { stem: 'up' })), beam(notes('c5, d5, e5, f5', { stem: 'up' }))].reduce(concat)),\n        voice([beam(notes('f4/8, e4, d4, c4', { stem: 'down' })), beam(notes('c4/8, d4, e4, f4', { stem: 'down' }))].reduce(concat)),\n    ];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Multi Test');\n}\nfunction sixteenth(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice.bind(score);\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voices = [\n        voice([\n            beam(notes('f5/16, f5, d5, c5', { stem: 'up' })),\n            beam(notes('c5/16, d5, f5, e5', { stem: 'up' })),\n            notes('f5/2', { stem: 'up' }),\n        ].reduce(concat)),\n        voice([\n            beam(notes('f4/16, e4/16, d4/16, c4/16', { stem: 'down' })),\n            beam(notes('c4/16, d4/16, f4/16, e4/16', { stem: 'down' })),\n            notes('f4/2', { stem: 'down' }),\n        ].reduce(concat)),\n    ];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Sixteenth Test');\n}\nfunction breakSecondaryBeams(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice.bind(score);\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voices = [\n        voice([\n            beam(notes('f5/16., f5/32, c5/16., d5/32, c5/16., d5/32', { stem: 'up' }), { secondaryBeamBreaks: [1, 3] }),\n            beam(notes('f5/16, e5, e5, e5, e5, e5', { stem: 'up' }), { secondaryBeamBreaks: [2] }),\n        ].reduce(concat), { time: '3/4' }),\n        voice([\n            beam(notes('f4/32, d4, e4, c4, d4, c4, f4, d4, e4, c4, c4, d4', { stem: 'down' }), {\n                secondaryBeamBreaks: [3, 7],\n            }),\n            beam(notes('d4/16, f4, d4, e4, e4, e4', { stem: 'down' }), { secondaryBeamBreaks: [3] }),\n        ].reduce(concat), { time: '3/4' }),\n    ];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Breaking Secondary Beams Test');\n}\nfunction partialBeamDirection(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice.bind(score);\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voices = [\n        voice([\n            // Default beaming:\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' })),\n            // Force first 16th beam right\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' }), { partialBeamDirections: { '1': 'R' } }),\n            // Force first 16th beam left\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' }), { partialBeamDirections: { '1': 'L' } }),\n        ].reduce(concat), { time: '9/8' }),\n    ];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Partial beam direction test');\n}\nfunction slopey(options) {\n    const f = VexFlowTests.makeFactory(options, 350, 140);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const beam = score.beam.bind(score);\n    const notes = score.notes.bind(score);\n    const voice = score.voice([\n        beam(notes('c4/8, f4/8, d5/8, g5/8', { stem: 'up' })),\n        beam(notes('d6/8, f5/8, d4/8, g3/8', { stem: 'up' })),\n    ].reduce(concat));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Slopey Test');\n}\nfunction autoStem(options) {\n    const f = VexFlowTests.makeFactory(options, 350, 140);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('a4/8, b4/8, g4/8, c5/8, f4/8, d5/8, e4/8, e5/8, b4/8, b4/8, g4/8, d5/8'), {\n        time: '6/4',\n    });\n    const notes = voice.getTickables();\n    const beams = [\n        f.Beam({ notes: notes.slice(0, 2), options: { autoStem: true } }),\n        f.Beam({ notes: notes.slice(2, 4), options: { autoStem: true } }),\n        f.Beam({ notes: notes.slice(4, 6), options: { autoStem: true } }),\n        f.Beam({ notes: notes.slice(6, 8), options: { autoStem: true } }),\n        f.Beam({ notes: notes.slice(8, 10), options: { autoStem: true } }),\n        f.Beam({ notes: notes.slice(10, 12), options: { autoStem: true } }),\n    ];\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    const UP = Stem.UP;\n    const DOWN = Stem.DOWN;\n    options.assert.equal(beams[0].getStemDirection(), UP);\n    options.assert.equal(beams[1].getStemDirection(), UP);\n    options.assert.equal(beams[2].getStemDirection(), UP);\n    options.assert.equal(beams[3].getStemDirection(), UP);\n    options.assert.equal(beams[4].getStemDirection(), DOWN);\n    options.assert.equal(beams[5].getStemDirection(), DOWN);\n    f.draw();\n    options.assert.ok(true, 'AutoStem Beam Test');\n}\nfunction mixed(options) {\n    const f = VexFlowTests.makeFactory(options, 350, 140);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice1 = score.voice(score.notes('f5/8, d5/16, c5/16, c5/16, d5/16, e5/8, f5/8, d5/16, c5/16, c5/16, d5/16, e5/8', { stem: 'up' }));\n    const voice2 = score.voice(score.notes('f4/16, e4/8, d4/16, c4/16, d4/8, f4/16, f4/16, e4/8, d4/16, c4/16, d4/8, f4/16', { stem: 'down' }));\n    [\n        [0, 4],\n        [4, 8],\n        [8, 12],\n    ].forEach((range) => f.Beam({ notes: voice1.getTickables().slice(range[0], range[1]) }));\n    [\n        [0, 4],\n        [4, 8],\n        [8, 12],\n    ].forEach((range) => f.Beam({ notes: voice2.getTickables().slice(range[0], range[1]) }));\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true, 'Multi Test');\n}\nfunction mixed2(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 180);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('f5/32, d5/16, c5/32, c5/64, d5/128, e5/8, f5/16, d5/32, c5/64, c5/32, d5/16, e5/128', {\n        stem: 'up',\n    }), { time: '31/64' });\n    const voice2 = score.voice(score.notes('f4/32, d4/16, c4/32, c4/64, d4/128, e4/8, f4/16, d4/32, c4/64, c4/32, d4/16, e4/128', {\n        stem: 'down',\n    }), { time: '31/64' });\n    f.Beam({ notes: voice.getTickables().slice(0, 12) });\n    f.Beam({ notes: voice2.getTickables().slice(0, 12) });\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\n    f.draw();\n    options.assert.ok(true, 'Multi Test');\n}\nfunction dotted(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('d4/8, b3/8., a3/16, a3/8, b3/8., c4/16, d4/8, b3/8, a3/8., a3/16, b3/8., c4/16', { stem: 'up' }), { time: '6/4' });\n    const notes = voice.getTickables();\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 8) });\n    f.Beam({ notes: notes.slice(8, 12) });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Dotted Test');\n}\nfunction partial(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('d4/8, b3/32, c4/16., d4/16., e4/8, c4/64, c4/32, a3/8., b3/32., c4/8, e4/64, b3/16., b3/64, f4/8, e4/8, g4/64, e4/8'), { time: '89/64' });\n    const notes = voice.getTickables();\n    f.Beam({ notes: notes.slice(0, 3) });\n    f.Beam({ notes: notes.slice(3, 9) });\n    f.Beam({ notes: notes.slice(9, 13) });\n    f.Beam({ notes: notes.slice(13, 17) });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Partial Test');\n}\nfunction tradeoffs(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('a4/8, b4/8, c4/8, d4/8, g4/8, a4/8, b4/8, c4/8', { stem: 'up' }));\n    const notes = voice.getTickables();\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 8) });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Close Trade-offs Test');\n}\nfunction insane(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 180);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes('g4/8, g5/8, c4/8, b5/8, g4/8[stem=\"down\"], a5[stem=\"down\"], b4[stem=\"down\"], c4/8', { stem: 'up' }));\n    const notes = voice.getTickables();\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 7) });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Insane Test');\n}\nfunction lenghty(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 180);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.beam(score.notes('g4/8, g4, g4, a4', { stem: 'up' })), { time: '2/4' });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Lengthy Test');\n}\nfunction outlier(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 180);\n    const stave = f.Stave({ y: 20 });\n    const score = f.EasyScore();\n    const voice = score.voice(score.notes([\n        'g4/8[stem=\"up\"],   f4[stem=\"up\"],   d5[stem=\"up\"],   e4[stem=\"up\"]',\n        'd5/8[stem=\"down\"], d5[stem=\"down\"], c5[stem=\"down\"], d5[stem=\"down\"]',\n    ].join()));\n    const notes = voice.getTickables();\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 8) });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\n    f.draw();\n    options.assert.ok(true, 'Outlier Test');\n}\nfunction tabBeamsUp(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const stave = f.TabStave({ y: 20 });\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '32',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '128',\n        },\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = f.TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        return tabNote;\n    });\n    f.Beam({ notes: notes.slice(1, 7) });\n    f.Beam({ notes: notes.slice(8, 11) });\n    f.Tuplet({ notes: notes.slice(8, 11), options: { ratioed: true } });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'All objects have been drawn');\n}\nfunction tabBeamsDown(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 250);\n    const stave = f.TabStave({ options: { numLines: 10 } });\n    const specs = [\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8dd',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '32',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            stemDirection: -1,\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '128',\n        },\n        { stemDirection: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 7, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 7, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 10, fret: 6 }], duration: '8' },\n        { stemDirection: -1, positions: [{ str: 10, fret: 6 }], duration: '8' },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = f.TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.renderOptions.drawDots = true;\n        return tabNote;\n    });\n    Dot.buildAndAttach([notes[1], notes[1]]);\n    f.Beam({ notes: notes.slice(1, 7) });\n    f.Beam({ notes: notes.slice(8, 11) });\n    f.Tuplet({ notes: notes.slice(8, 11), options: { location: -1 } });\n    f.Tuplet({ notes: notes.slice(11, 14), options: { location: -1 } });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'All objects have been drawn');\n}\nfunction autoTabBeams(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const stave = f.TabStave();\n    const specs = [\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\n        { positions: [{ str: 6, fret: 6 }], duration: '32' },\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = f.TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.renderOptions.drawDots = true;\n        return tabNote;\n    });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    const beams = Beam.applyAndGetBeams(voice, -1);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\n    options.assert.ok(true, 'All objects have been drawn');\n}\n// This tests makes sure the autoStem functionality is works.\n// TabNote stems within a beam group should end up normalized\nfunction tabBeamsAutoStem(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 300);\n    const stave = f.TabStave();\n    const specs = [\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n            stemDirection: -1,\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n            stemDirection: 1,\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n            stemDirection: -1,\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n            stemDirection: 1,\n        },\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stemDirection: 1 },\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stemDirection: -1 },\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stemDirection: -1 },\n        { positions: [{ str: 6, fret: 6 }], duration: '32', stemDirection: -1 },\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stemDirection: 1 },\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stemDirection: 1 },\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stemDirection: 1 },\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stemDirection: -1 },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = f.TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.renderOptions.drawDots = true;\n        return tabNote;\n    });\n    // Stems should format down\n    f.Beam({ notes: notes.slice(0, 8), options: { autoStem: true } });\n    // Stems should format up\n    f.Beam({ notes: notes.slice(8, 12), options: { autoStem: true } });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'All objects have been drawn');\n}\nfunction complexWithAnnotation(options) {\n    const factory = VexFlowTests.makeFactory(options, 500, 200);\n    const stave = factory.Stave({ y: 40 });\n    const s1 = [\n        { keys: ['e/4'], duration: '128', stemDirection: 1 },\n        { keys: ['d/4'], duration: '16', stemDirection: 1 },\n        { keys: ['e/4'], duration: '8', stemDirection: 1 },\n        { keys: ['c/4', 'g/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n    ];\n    const s2 = [\n        { keys: ['e/5'], duration: '128', stemDirection: -1 },\n        { keys: ['d/5'], duration: '16', stemDirection: -1 },\n        { keys: ['e/5'], duration: '8', stemDirection: -1 },\n        { keys: ['c/5', 'g/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n    ];\n    const font = {\n        family: Tables.lookupMetric('Annotation.fontFamily'),\n        size: 14,\n        weight: FontWeight.BOLD,\n        style: FontStyle.ITALIC,\n    };\n    const notes1 = s1.map((struct) => factory\n        .StaveNote(struct) //\n        .addModifier(factory.Annotation({ text: '1', vJustify: AnnotationVerticalJustify.TOP, font }), 0));\n    const notes2 = s2.map((struct) => factory\n        .StaveNote(struct) //\n        .addModifier(factory.Annotation({ text: '3', vJustify: AnnotationVerticalJustify.BOTTOM, font }), 0));\n    factory.Beam({ notes: notes1 });\n    factory.Beam({ notes: notes2 });\n    const voice = factory.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1).addTickables(notes2);\n    factory.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\n    factory.draw();\n    options.assert.ok(true, 'Complex beam annotations');\n}\nfunction complexWithArticulation(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 200);\n    const stave = f.Stave({ y: 40 });\n    const s1 = [\n        { keys: ['e/4'], duration: '128', stemDirection: 1 },\n        { keys: ['d/4'], duration: '16', stemDirection: 1 },\n        { keys: ['e/4'], duration: '8', stemDirection: 1 },\n        { keys: ['c/4', 'g/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n    ];\n    const s2 = [\n        { keys: ['e/5'], duration: '128', stemDirection: -1 },\n        { keys: ['d/5'], duration: '16', stemDirection: -1 },\n        { keys: ['e/5'], duration: '8', stemDirection: -1 },\n        { keys: ['c/5', 'g/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n    ];\n    const notes1 = s1.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'am', position: 'above' }), 0));\n    const notes2 = s2.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'a>', position: 'below' }), 0));\n    f.Beam({ notes: notes1 });\n    f.Beam({ notes: notes2 });\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1).addTickables(notes2);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\n    f.draw();\n    options.assert.ok(true, 'Complex beam articulations');\n}\nfunction complexWithArticulation2(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 300);\n    const system = f.System();\n    const s1 = [\n        { keys: ['e/4'], duration: '128', stemDirection: 1 },\n        { keys: ['d/4'], duration: '16', stemDirection: 1 },\n        { keys: ['e/4'], duration: '8', stemDirection: 1 },\n        { keys: ['c/4', 'g/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n        { keys: ['c/4'], duration: '32', stemDirection: 1 },\n    ];\n    const s2 = [\n        { keys: ['e/5'], duration: '128', stemDirection: -1 },\n        { keys: ['d/5'], duration: '16', stemDirection: -1 },\n        { keys: ['e/5'], duration: '8', stemDirection: -1 },\n        { keys: ['c/5', 'g/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n        { keys: ['c/5'], duration: '32', stemDirection: -1 },\n    ];\n    const notes1 = s1.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'am', position: 'above' }), 0));\n    const notes2 = s2.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'a>', position: 'below' }), 0));\n    const notes3 = s1.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'am', position: 'above' }), 0));\n    const notes4 = s2.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'a>', position: 'below' }), 0));\n    f.Beam({ notes: notes1 });\n    f.Beam({ notes: notes2 });\n    f.Beam({ notes: notes3 });\n    f.Beam({ notes: notes4 });\n    const voice1 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1).addTickables(notes2);\n    const voice2 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes3).addTickables(notes4);\n    system.addStave({ voices: [voice1] });\n    system.addStave({ voices: [voice2] });\n    f.draw();\n    options.assert.ok(true, 'Complex beam articulations two staves');\n}\nVexFlowTests.register(BeamTests);\nexport { BeamTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Bend Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Bend } from '../src/bend';\nimport { Formatter } from '../src/formatter';\nimport { ModifierContext } from '../src/modifiercontext';\nimport { Note } from '../src/note';\nimport { Tables } from '../src/tables';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { TickContext } from '../src/tickcontext';\nconst BendTests = {\n    Start() {\n        QUnit.module('Bend');\n        const run = VexFlowTests.runTests;\n        run('Double Bends', doubleBends);\n        run('Reverse Bends', reverseBends);\n        run('Bend Phrase', bendPhrase);\n        run('Double Bends With Release', doubleBendsWithRelease);\n        run('Whako Bend', whackoBends);\n        // TODO: Rename 'Whako Bend' => 'Whacko'\n    },\n};\n// Helper functions for creating TabNote and Bend objects.\nconst note = (noteStruct) => new TabNote(noteStruct);\nconst bendWithPhrase = (phrase) => new Bend(phrase);\n/**\n * Bend two strings at a time.\n */\nfunction doubleBends(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 450).addClef('tab').setContext(ctx).draw();\n    const notes = [\n        note({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: 'Full' }]), 0)\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/2' }]), 1),\n        note({\n            positions: [\n                { str: 2, fret: 5 },\n                { str: 3, fret: 5 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/4' }]), 0)\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/4' }]), 1),\n        // This note is not visible because it is pushed off to the right by the ctx.scale(1.5, 1.5) at the top.\n        note({\n            positions: [{ str: 4, fret: 7 }],\n            duration: 'h',\n        }),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 140));\n    options.assert.ok(true, 'Double Bends');\n}\nfunction doubleBendsWithRelease(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 550, 240);\n    ctx.scale(1.0, 1.0);\n    ctx.setBackgroundFillStyle('#FFF');\n    ctx.setFont('Arial', VexFlowTests.Font.size);\n    const stave = new TabStave(10, 10, 550).addClef('tab').setContext(ctx).draw();\n    const notes = [\n        note({\n            positions: [\n                { str: 1, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(bendWithPhrase([\n            { type: Bend.UP, text: '1/2' },\n            { type: Bend.DOWN, text: '' },\n        ]), 0)\n            .addModifier(bendWithPhrase([\n            { type: Bend.UP, text: 'Full' },\n            { type: Bend.DOWN, text: '' },\n        ]), 1),\n        note({\n            positions: [\n                { str: 2, fret: 5 },\n                { str: 3, fret: 5 },\n                { str: 4, fret: 5 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(bendWithPhrase([\n            { type: Bend.UP, text: '1/4' },\n            { type: Bend.DOWN, text: '' },\n        ]), 0)\n            .addModifier(bendWithPhrase([\n            { type: Bend.UP, text: 'Monstrous' },\n            { type: Bend.DOWN, text: '' },\n        ]), 1)\n            .addModifier(bendWithPhrase([\n            { type: Bend.UP, text: '1/4' },\n            { type: Bend.DOWN, text: '' },\n        ]), 2),\n        note({\n            positions: [{ str: 4, fret: 7 }],\n            duration: 'q',\n        }),\n        note({\n            positions: [{ str: 4, fret: 7 }],\n            duration: 'q',\n        }),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 140));\n    options.assert.ok(true, 'Bend Release');\n}\n/**\n * Add the bend for note 1 before adding the bend for note 0,\n * by swapping the two indexes in .addModifier(modifier, index).\n * As a result, the bend curves intersect.\n */\nfunction reverseBends(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.setFont('10pt Arial');\n    const stave = new TabStave(10, 10, 450).addClef('tab').setContext(ctx).draw();\n    const notes = [\n        note({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'w',\n        })\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: 'Full' }]), 1)\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/2' }]), 0),\n        note({\n            positions: [\n                { str: 2, fret: 5 },\n                { str: 3, fret: 5 },\n            ],\n            duration: 'w',\n        })\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/4' }]), 1)\n            .addModifier(bendWithPhrase([{ type: Bend.UP, text: '1/4' }]), 0),\n        note({\n            positions: [{ str: 4, fret: 7 }],\n            duration: 'w',\n        }),\n    ];\n    for (let i = 0; i < notes.length; ++i) {\n        const note = notes[i];\n        const mc = new ModifierContext();\n        note.addToModifierContext(mc);\n        const tickContext = new TickContext();\n        tickContext\n            .addTickable(note)\n            .preFormat()\n            .setX(75 * i);\n        note.setStave(stave).setContext(ctx).draw();\n        Note.plotMetrics(ctx, note, 140);\n        options.assert.ok(true, 'Bend ' + i);\n    }\n}\nfunction bendPhrase(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = Tables.lookupMetric('Bend.fontSize') + Tables.lookupMetric('Bend.fontFamily'); // Optionally use constants defined in Font.\n    const stave = new TabStave(10, 10, 450).addClef('tab').setContext(ctx).draw();\n    const phrase1 = [\n        { type: Bend.UP, text: 'Full' },\n        { type: Bend.DOWN, text: 'Monstrous' },\n        { type: Bend.UP, text: '1/2' },\n        { type: Bend.DOWN, text: '' },\n    ];\n    const bend1 = bendWithPhrase(phrase1).setContext(ctx);\n    const notes = [\n        note({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'w',\n        }).addModifier(bend1, 0),\n    ];\n    for (let i = 0; i < notes.length; ++i) {\n        const note = notes[i];\n        note.addToModifierContext(new ModifierContext());\n        const tickContext = new TickContext();\n        tickContext\n            .addTickable(note)\n            .preFormat()\n            .setX(75 * i);\n        note.setStave(stave).setContext(ctx).draw();\n        Note.plotMetrics(ctx, note, 140);\n        options.assert.ok(true, 'Bend ' + i);\n    }\n}\nfunction whackoBends(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 240);\n    ctx.scale(1.0, 1.0);\n    ctx.setBackgroundFillStyle('#FFF');\n    ctx.setFont('Arial', VexFlowTests.Font.size);\n    const stave = new TabStave(10, 10, 350).addClef('tab').setContext(ctx).draw();\n    const phrase1 = [\n        { type: Bend.UP, text: 'Full' },\n        { type: Bend.DOWN, text: '' },\n        { type: Bend.UP, text: '1/2' },\n        { type: Bend.DOWN, text: '' },\n    ];\n    const phrase2 = [\n        { type: Bend.UP, text: 'Full' },\n        { type: Bend.UP, text: 'Full' },\n        { type: Bend.UP, text: '1/2' },\n        { type: Bend.DOWN, text: '' },\n        { type: Bend.DOWN, text: 'Full' },\n        { type: Bend.DOWN, text: 'Full' },\n        { type: Bend.UP, text: '1/2' },\n        { type: Bend.DOWN, text: '' },\n    ];\n    const notes = [\n        note({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 3, fret: 9 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(bendWithPhrase(phrase1), 0)\n            .addModifier(bendWithPhrase(phrase2), 1),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    Note.plotMetrics(ctx, notes[0], 140);\n    options.assert.ok(true, 'Whacko Bend & Release');\n}\nVexFlowTests.register(BendTests);\nexport { BendTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Bounding Box Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { BoundingBox } from '../src/index';\nconst BoundingBoxTests = {\n    Start() {\n        QUnit.module('BoundingBox');\n        QUnit.test('Initialization Test', initialization);\n        QUnit.test('Merging Text', merging);\n    },\n};\nfunction initialization(assert) {\n    const bb = new BoundingBox(4, 5, 6, 7);\n    assert.equal(bb.getX(), 4, 'Bad X');\n    assert.equal(bb.getY(), 5, 'Bad Y');\n    assert.equal(bb.getW(), 6, 'Bad W');\n    assert.equal(bb.getH(), 7, 'Bad H');\n    bb.setX(5);\n    assert.equal(bb.getX(), 5, 'Bad X');\n}\nfunction merging(assert) {\n    const tests = [\n        {\n            type: 'Intersection',\n            bb1: new BoundingBox(10, 10, 10, 10),\n            bb2: new BoundingBox(15, 20, 10, 10),\n            merged: new BoundingBox(10, 10, 15, 20),\n        },\n        {\n            type: '1 contains 2',\n            bb1: new BoundingBox(10, 10, 30, 30),\n            bb2: new BoundingBox(15, 15, 10, 10),\n            merged: new BoundingBox(10, 10, 30, 30),\n        },\n        {\n            type: '2 contains 1',\n            bb1: new BoundingBox(15, 15, 10, 10),\n            bb2: new BoundingBox(10, 10, 30, 30),\n            merged: new BoundingBox(10, 10, 30, 30),\n        },\n    ];\n    tests.forEach((test) => {\n        const type = test.type;\n        const bb1 = test.bb1;\n        const bb2 = test.bb2;\n        const merged = test.merged;\n        bb1.mergeWith(bb2);\n        assert.equal(bb1.getX(), merged.getX(), type + ' - Bad X');\n        assert.equal(bb1.getY(), merged.getY(), type + ' - Bad Y');\n        assert.equal(bb1.getW(), merged.getW(), type + ' - Bad W');\n        assert.equal(bb1.getH(), merged.getH(), type + ' - Bad H');\n    });\n}\nVexFlowTests.register(BoundingBoxTests);\nexport { BoundingBoxTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ChordSymbol Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { ChordSymbol } from '../src/chordsymbol';\nimport { Element } from '../src/element';\nimport { Formatter } from '../src/formatter';\nimport { Ornament } from '../src/ornament';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nconst ChordSymbolTests = {\n    Start() {\n        QUnit.module('ChordSymbol');\n        const run = VexFlowTests.runTests;\n        run('Chord Symbol With Modifiers', withModifiers);\n        run('Chord Symbol Font Size Tests', fontSize);\n        run('Chord Symbol Kerning Tests', kern);\n        run('Top Chord Symbols', top);\n        run('Top Chord Symbols Justified', topJustify);\n        run('Bottom Chord Symbols', bottom);\n        run('Bottom Stem Down Chord Symbols', bottomStemDown);\n        run('Double Bottom Chord Symbols', doubleBottom);\n    },\n};\n// Options for customizing addGlyphOrText() or addGlyph().\nconst superscript = { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT };\nconst subscript = { symbolModifier: ChordSymbol.symbolModifiers.SUBSCRIPT };\n// Helper function for creating StaveNotes.\nconst note = (factory, keys, duration, chordSymbol) => factory.StaveNote({ keys, duration }).addModifier(chordSymbol, 0);\n/** Calculate the glyph's width in the current music font. */\nfunction getGlyphWidth(charCode) {\n    const el = new Element();\n    el.setText(String.fromCharCode(charCode));\n    el.measureText();\n    return el.getWidth();\n}\nfunction withModifiers(options) {\n    const f = VexFlowTests.makeFactory(options, 750, 580);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, y) {\n        const notes = [\n            note(f, ['c/4'], 'q', chords[0]).addModifier(new Ornament('doit')),\n            note(f, ['c/4'], 'q', chords[1]),\n            note(f, ['c/4'], 'q', chords[2]).addModifier(new Ornament('fall')),\n            note(f, ['c/4'], 'q', chords[3]),\n        ];\n        const score = f.EasyScore();\n        const voice = score.voice(notes, { time: '4/4' });\n        const formatter = f.Formatter();\n        formatter.joinVoices([voice]);\n        const voiceW = formatter.preCalculateMinTotalWidth([voice]);\n        const staffW = voiceW + Stave.defaultPadding + getGlyphWidth(0xe050 /*gClef*/);\n        formatter.format([voice], voiceW);\n        const staff = f.Stave({ x: 10, y, width: staffW }).addClef('treble').draw();\n        voice.draw(ctx, staff);\n    }\n    let chords = [];\n    chords.push(f\n        .ChordSymbol({ fontSize: 10 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('b9', superscript)\n        .addGlyphOrText('#11', subscript)\n        .addGlyph('rightParenTall'));\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('b9', superscript).addGlyphOrText('#11', subscript));\n    chords.push(f\n        .ChordSymbol({ fontSize: 14 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('add 3', superscript)\n        .addGlyphOrText('omit 9', subscript)\n        .addGlyph('rightParenTall'));\n    chords.push(f\n        .ChordSymbol({ fontSize: 16 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('b9', superscript)\n        .addGlyphOrText('#11', subscript)\n        .addGlyph('rightParenTall'));\n    draw(chords, 40);\n    chords = [];\n    chords.push(f\n        .ChordSymbol({ fontSize: 10 })\n        .setFontSize(10)\n        .addText('F7')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript));\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\n    chords.push(f.ChordSymbol({ fontSize: 14 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\n    chords.push(f\n        .ChordSymbol({ fontSize: 16 })\n        .setFontSize(16)\n        .addText('F7')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript));\n    draw(chords, 140);\n    chords = [\n        f.ChordSymbol({ fontSize: 10 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 14 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 16 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 18 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\n    ];\n    draw(chords, 240);\n    options.assert.ok(true, 'Font Size Chord Symbol');\n}\nfunction fontSize(options) {\n    const f = VexFlowTests.makeFactory(options, 750, 580);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, y) {\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble');\n        const notes = [\n            note(f, ['c/4'], 'q', chords[0]),\n            note(f, ['c/4'], 'q', chords[1]),\n            note(f, ['c/4'], 'q', chords[2]),\n            note(f, ['c/4'], 'q', chords[3]),\n        ];\n        const score = f.EasyScore();\n        const voice = score.voice(notes, { time: '4/4' });\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        f.draw();\n    }\n    let chords = [];\n    chords.push(f\n        .ChordSymbol({ fontSize: 10 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('b9', superscript)\n        .addGlyphOrText('#11', subscript)\n        .addGlyph('rightParenTall'));\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('b9', superscript).addGlyphOrText('#11', subscript));\n    chords.push(f\n        .ChordSymbol({ fontSize: 14 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('add 3', superscript)\n        .addGlyphOrText('omit 9', subscript)\n        .addGlyph('rightParenTall'));\n    chords.push(f\n        .ChordSymbol({ fontSize: 16 })\n        .addText('F7')\n        .addGlyph('leftParenTall')\n        .addGlyphOrText('b9', superscript)\n        .addGlyphOrText('#11', subscript)\n        .addGlyph('rightParenTall'));\n    draw(chords, 40);\n    chords = [];\n    chords.push(f\n        .ChordSymbol({ fontSize: 10 })\n        .setFontSize(10)\n        .addText('F7')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript));\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\n    chords.push(f.ChordSymbol({ fontSize: 14 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\n    chords.push(f\n        .ChordSymbol({ fontSize: 16 })\n        .setFontSize(16)\n        .addText('F7')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript));\n    draw(chords, 140);\n    chords = [\n        f.ChordSymbol({ fontSize: 10 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 14 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 16 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\n        f.ChordSymbol({ fontSize: 18 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\n    ];\n    draw(chords, 240);\n    options.assert.ok(true, 'Font Size Chord Symbol');\n}\nfunction kern(options) {\n    const f = VexFlowTests.makeFactory(options, 650 * 1.5, 650);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, y) {\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(f, ['C/4'], 'q', chords[0]),\n            note(f, ['C/4'], 'q', chords[1]),\n            note(f, ['C/4'], 'q', chords[2]),\n            note(f, ['C/4'], 'q', chords[3]),\n        ];\n        const score = f.EasyScore();\n        const voice = score.voice(notes, { time: '4/4' });\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        f.draw();\n    }\n    let chords = [\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim'),\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim'),\n        f.ChordSymbol({ hJustify: 'left' }).addText('C').addGlyph('halfDiminished', superscript),\n        f.ChordSymbol().addText('D').addGlyph('halfDiminished', superscript),\n    ];\n    draw(chords, 10);\n    chords = [\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim'),\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim'),\n        f.ChordSymbol().addText('A').addGlyphSuperscript('+').addTextSuperscript('5'),\n        f.ChordSymbol().addText('G').addGlyphSuperscript('+').addTextSuperscript('5'),\n    ];\n    draw(chords, 110);\n    chords = [\n        f.ChordSymbol().addText('A').addGlyph('-'),\n        f.ChordSymbol().addText('E').addGlyph('-'),\n        f.ChordSymbol().addText('A').addGlyphOrText('(#11)', superscript),\n        f.ChordSymbol().addText('E').addGlyphOrText('(#9)', superscript),\n    ];\n    draw(chords, 210);\n    chords = [\n        f.ChordSymbol().addGlyphOrText('F/B').addGlyphOrText('b', superscript),\n        f.ChordSymbol().addText('E').addGlyphOrText('V/V'),\n        f.ChordSymbol().addText('A').addGlyphOrText('(#11)', superscript),\n        f.ChordSymbol().addText('E').addGlyphOrText('(#9)', superscript),\n    ];\n    draw(chords, 310);\n    options.assert.ok(true, 'Chord Symbol Kerning Tests');\n}\nfunction top(options) {\n    const f = VexFlowTests.makeFactory(options, 650 * 1.5, 650);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    // Helper function for creating StaveNotes.\n    const note = (factory, keys, duration, chordSymbol, direction) => factory.StaveNote({ keys, duration, stemDirection: direction }).addModifier(chordSymbol, 0);\n    function draw(c1, c2, y) {\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(f, ['e/4', 'a/4', 'd/5'], 'h', c1, 1).addModifier(new Accidental('b'), 0),\n            note(f, ['c/5', 'e/5', 'c/6'], 'h', c2, -1),\n        ];\n        const score = f.EasyScore();\n        const voice = score.voice(notes, { time: '4/4' });\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        f.draw();\n    }\n    let chord1 = f.ChordSymbol().addText('F7').setHorizontal('left').addGlyphOrText('(#11b9)', superscript);\n    let chord2 = f.ChordSymbol().addText('C').setHorizontal('left').addGlyphSuperscript('majorSeventh');\n    draw(chord1, chord2, 40);\n    chord1 = f\n        .ChordSymbol()\n        .addText('F7')\n        .addTextSuperscript('(')\n        .addGlyphOrText('#11b9', superscript)\n        .addTextSuperscript(')');\n    chord2 = f.ChordSymbol().addText('C').setHorizontal('left').addTextSuperscript('Maj.');\n    draw(chord1, chord2, 140);\n    chord1 = f\n        .ChordSymbol()\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript);\n    chord2 = f.ChordSymbol().addText('C').addTextSuperscript('sus4');\n    draw(chord1, chord2, 240);\n    options.assert.ok(true, 'Top Chord Symbol');\n}\nfunction topJustify(options) {\n    const f = VexFlowTests.makeFactory(options, 500 * 1.5, 680);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chord1, chord2, y) {\n        const stave = new Stave(10, y, 450).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(f, ['e/4', 'a/4', 'd/5'], 'h', chord1).addModifier(new Accidental('b'), 0),\n            note(f, ['c/4', 'e/4', 'B/4'], 'h', chord2),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    let chord1 = f.ChordSymbol().addText('F7').setHorizontal('left').addGlyphOrText('(#11b9)', superscript);\n    let chord2 = f.ChordSymbol({ hJustify: 'left' }).addText('C').addGlyphSuperscript('majorSeventh');\n    draw(chord1, chord2, 40);\n    chord1 = f\n        .ChordSymbol({ hJustify: 'center' })\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('(#11b9)', superscript);\n    chord2 = f.ChordSymbol({ hJustify: 'center' }).addText('C').addTextSuperscript('Maj.');\n    draw(chord1, chord2, 140);\n    chord1 = f\n        .ChordSymbol({ hJustify: 'right' })\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript);\n    chord2 = f.ChordSymbol({ hJustify: 'right' }).addText('C').addTextSuperscript('Maj.');\n    draw(chord1, chord2, 240);\n    chord1 = f\n        .ChordSymbol({ hJustify: 'left' })\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('#11', superscript)\n        .addGlyphOrText('b9', subscript);\n    chord2 = f.ChordSymbol({ hJustify: 'centerStem' }).addText('C').addTextSuperscript('Maj.');\n    draw(chord1, chord2, 340);\n    options.assert.ok(true, 'Top Chord Justified');\n}\nfunction bottom(options) {\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 230);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, y) {\n        const stave = new Stave(10, y, 400).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(f, ['c/4', 'f/4', 'a/4'], 'q', chords[0]),\n            note(f, ['c/4', 'e/4', 'b/4'], 'q', chords[1]).addModifier(new Accidental('b'), 2),\n            note(f, ['c/4', 'e/4', 'g/4'], 'q', chords[2]),\n            note(f, ['c/4', 'f/4', 'a/4'], 'q', chords[3]).addModifier(new Accidental('#'), 1),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    const chords = [\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('I').addTextSuperscript('6').addTextSubscript('4'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(),\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V/V'),\n    ];\n    draw(chords, 10);\n    options.assert.ok(true, 'Bottom Chord Symbol');\n}\nfunction bottomStemDown(options) {\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 330);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, y) {\n        // Helper function to create a StaveNote with a ChordSymbol and the stem pointing down.\n        const note = (keys, duration, chordSymbol) => new StaveNote({ keys, duration, stemDirection: -1 }).addModifier(chordSymbol, 0);\n        const stave = new Stave(10, y, 400).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[0]),\n            note(['c/4', 'e/4', 'b/4'], 'q', chords[1]).addModifier(new Accidental('b'), 2),\n            note(['c/4', 'e/4', 'g/4'], 'q', chords[2]),\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[3]).addModifier(new Accidental('#'), 1),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    const chords = [\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('F'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('C7'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(),\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('A').addGlyphSuperscript('dim'),\n    ];\n    draw(chords, 10);\n    options.assert.ok(true, 'Bottom Stem Down Chord Symbol');\n}\nfunction doubleBottom(options) {\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 260);\n    const ctx = f.getContext();\n    ctx.scale(1.5, 1.5);\n    function draw(chords, chords2, y) {\n        // Helper function to create a StaveNote with two ChordSymbols attached.\n        const note = (keys, duration, chordSymbol1, chordSymbol2) => new StaveNote({ keys, duration }).addModifier(chordSymbol1, 0).addModifier(chordSymbol2, 0);\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[0], chords2[0]),\n            note(['c/4', 'e/4', 'b/4'], 'q', chords[1], chords2[1]).addModifier(f.Accidental({ type: 'b' }), 2),\n            note(['c/4', 'e/4', 'g/4'], 'q', chords[2], chords2[2]),\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[3], chords2[3]).addModifier(f.Accidental({ type: '#' }), 1),\n        ];\n        Formatter.FormatAndDraw(ctx, stave, notes);\n    }\n    const chords1 = [\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('I').addTextSuperscript('6').addTextSubscript('4'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(),\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V/V'),\n    ];\n    const chords2 = [\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('T'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('D'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('D'),\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('SD'),\n    ];\n    draw(chords1, chords2, 10);\n    options.assert.ok(true, '2 Bottom Chord Symbol');\n}\nVexFlowTests.register(ChordSymbolTests);\nexport { ChordSymbolTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Clef Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nconst ClefTests = {\n    Start() {\n        QUnit.module('Clef');\n        const run = VexFlowTests.runTests;\n        run('Clef Test', draw);\n        run('Clef End Test', drawEnd);\n        run('Small Clef Test', drawSmall);\n        run('Small Clef End Test', drawSmallEnd);\n        run('Clef Change Test', drawClefChange);\n    },\n};\nfunction draw(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 120);\n    f.Stave()\n        .addClef('treble')\n        .addClef('treble', 'default', '8va')\n        .addClef('treble', 'default', '8vb')\n        .addClef('alto')\n        .addClef('tenor')\n        .addClef('soprano')\n        .addClef('bass')\n        .addClef('bass', 'default', '8vb')\n        .addClef('mezzo-soprano')\n        .addClef('baritone-c')\n        .addClef('baritone-f')\n        .addClef('subbass')\n        .addClef('percussion')\n        .addClef('french')\n        .addEndClef('treble');\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawEnd(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 120);\n    f.Stave()\n        .addClef('bass')\n        .addEndClef('treble')\n        .addEndClef('treble', 'default', '8va')\n        .addEndClef('treble', 'default', '8vb')\n        .addEndClef('alto')\n        .addEndClef('tenor')\n        .addEndClef('soprano')\n        .addEndClef('bass')\n        .addEndClef('bass', 'default', '8vb')\n        .addEndClef('mezzo-soprano')\n        .addEndClef('baritone-c')\n        .addEndClef('baritone-f')\n        .addEndClef('subbass')\n        .addEndClef('percussion')\n        .addEndClef('french');\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawSmall(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 120);\n    f.Stave()\n        .addClef('treble', 'small')\n        .addClef('treble', 'small', '8va')\n        .addClef('treble', 'small', '8vb')\n        .addClef('alto', 'small')\n        .addClef('tenor', 'small')\n        .addClef('soprano', 'small')\n        .addClef('bass', 'small')\n        .addClef('bass', 'small', '8vb')\n        .addClef('mezzo-soprano', 'small')\n        .addClef('baritone-c', 'small')\n        .addClef('baritone-f', 'small')\n        .addClef('subbass', 'small')\n        .addClef('percussion', 'small')\n        .addClef('french', 'small')\n        .addEndClef('treble', 'small');\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawSmallEnd(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 120);\n    f.Stave()\n        .addClef('bass', 'small')\n        .addEndClef('treble', 'small')\n        .addEndClef('treble', 'small', '8va')\n        .addEndClef('treble', 'small', '8vb')\n        .addEndClef('alto', 'small')\n        .addEndClef('tenor', 'small')\n        .addEndClef('soprano', 'small')\n        .addEndClef('bass', 'small')\n        .addEndClef('bass', 'small', '8vb')\n        .addEndClef('mezzo-soprano', 'small')\n        .addEndClef('baritone-c', 'small')\n        .addEndClef('baritone-f', 'small')\n        .addEndClef('subbass', 'small')\n        .addEndClef('percussion', 'small')\n        .addEndClef('french', 'small');\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawClefChange(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 180);\n    const stave = f.Stave().addClef('treble');\n    const notes = [\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\n        f.ClefNote({ type: 'alto', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'alto' }),\n        f.ClefNote({ type: 'tenor', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'tenor' }),\n        f.ClefNote({ type: 'soprano', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'soprano' }),\n        f.ClefNote({ type: 'bass', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'bass' }),\n        f.ClefNote({ type: 'mezzo-soprano', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'mezzo-soprano' }),\n        f.ClefNote({ type: 'baritone-c', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'baritone-c' }),\n        f.ClefNote({ type: 'baritone-f', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'baritone-f' }),\n        f.ClefNote({ type: 'subbass', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'subbass' }),\n        f.ClefNote({ type: 'french', options: { size: 'small' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'french' }),\n        f.ClefNote({ type: 'treble', options: { size: 'small', annotation: '8vb' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble', octaveShift: -1 }),\n        f.ClefNote({ type: 'treble', options: { size: 'small', annotation: '8va' } }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble', octaveShift: 1 }),\n    ];\n    const voice = f.Voice({ time: '12/4' }).addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(ClefTests);\nexport { ClefTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Formatter Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Stave } from '../src/stave';\nconst CrossBeamTests = {\n    Start() {\n        QUnit.module('CrossBeam');\n        const run = VexFlowTests.runTests;\n        const crossStaveTests = [];\n        crossStaveTests.push({\n            title: 'Single clef mixed 1',\n            time: '3/4',\n            voices: [\n                {\n                    notes: [{ notestring: 'g4/16, f4/16, a6/16, g6/16, b4/4/r, g6/8, g4/8 ', clef: 'treble' }],\n                    stavemask: [0, 0, 0, 0, 0, 0, 0],\n                    beammask: [1, 1, -1, -1, 0, -1, 1],\n                    clef: 'treble',\n                },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Single clef mixed 2',\n            time: '3/4',\n            voices: [\n                {\n                    notes: [{ notestring: 'g4/16, f6/16, a4/16, g6/16, b4/4/r, g6/8, g4/8 ', clef: 'treble' }],\n                    stavemask: [0, 0, 0, 0, 0, 0, 0],\n                    beammask: [1, -1, 1, -1, 0, -1, 1],\n                    clef: 'treble',\n                },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Mixed clef voice middle',\n            time: '2/4',\n            voices: [\n                {\n                    notes: [{ notestring: 'e#5/4, b4/16/r, b4/16, d5/16., c5/32 ', clef: 'treble' }],\n                    stavemask: [0, 0, 0, 0, 0],\n                    beammask: [0, 0, 1, 1, 1],\n                    clef: 'treble',\n                },\n                {\n                    notes: [\n                        { notestring: 'C3/16, B3/16, C4/16', clef: 'bass' },\n                        { notestring: 'E#4/16', clef: 'treble' },\n                        { notestring: 'C4/4', clef: 'bass' },\n                    ],\n                    stavemask: [1, 1, 1, 0, 1],\n                    beammask: [1, 1, 1, -1, 0],\n                    clef: 'bass',\n                },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam up1)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 1, 1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam up2)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, 1, 1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam up3)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, 1, 1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam up4)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/8, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, 1, 1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam down1)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, -1, -1, -1, -1],\n                    stavemask: [0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam down2)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, -1, -1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam down3)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, -1, -1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam down4)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/8, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, -1, -1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam middle1)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, -1, -1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam middle2)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/8, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam middle3)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/16, B4/q, A4/8, E4/8', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.push({\n            title: 'Vertical alignment - cross stave (beam middle4)',\n            time: '4/4',\n            voices: [\n                {\n                    notes: [\n                        { notestring: 'C#5/q, C5/8, B4/q, A4/8, E4/16', clef: 'treble' },\n                        { notestring: 'C4/16, D4/8', clef: 'bass' },\n                    ],\n                    beammask: [0, 0, 0, -1, -1, 1, 1],\n                    stavemask: [0, 0, 0, 0, 0, 1, 1],\n                    clef: 'treble',\n                },\n                { notes: [{ notestring: '', clef: 'bass' }], beammask: [], stavemask: [], clef: 'bass' },\n            ],\n        });\n        crossStaveTests.forEach((cst) => {\n            run(cst.title, crossClef, cst);\n        });\n    },\n};\nfunction crossClef(options) {\n    const f = VexFlowTests.makeFactory(options, 400 + Stave.defaultPadding, 250);\n    f.getContext().scale(0.8, 0.8);\n    const score = f.EasyScore();\n    const system = f.System({\n        details: { softmaxFactor: 100 },\n        autoWidth: true,\n        debugFormatter: false,\n    });\n    const testdata = options.params;\n    const voicedata = testdata.voices;\n    const stavemap = [];\n    for (let i = 0; i < voicedata.length; ++i) {\n        const clef = voicedata[i].clef;\n        stavemap.push(system.addStave({ voices: [] }).addClef(clef).addTimeSignature(testdata.time));\n    }\n    for (let i = 0; i < voicedata.length; ++i) {\n        const stavemask = voicedata[i].stavemask;\n        let scoreNotes = [];\n        const voicenotes = voicedata[i].notes;\n        for (let k = 0; k < voicenotes.length; ++k) {\n            scoreNotes = scoreNotes.concat(score.notes(voicenotes[k].notestring, { clef: voicenotes[k].clef }));\n        }\n        const beammask = voicedata[i].beammask;\n        let curGroup = [];\n        const beamGroups = [];\n        for (let j = 0; j < scoreNotes.length; ++j) {\n            const note = scoreNotes[j];\n            note.setStave(stavemap[stavemask[j]]);\n            if (beammask[j] !== 0) {\n                note.setStemDirection(beammask[j]);\n                curGroup.push(note);\n            }\n            else {\n                if (curGroup.length) {\n                    beamGroups.push(curGroup);\n                    curGroup = [];\n                }\n            }\n        }\n        if (curGroup.length) {\n            beamGroups.push(curGroup);\n        }\n        beamGroups.forEach((bg) => {\n            score.beam(bg);\n        });\n        if (scoreNotes.length > 0) {\n            const voice = score.voice(scoreNotes, { time: testdata.time });\n            system.addVoices([voice]);\n        }\n    }\n    f.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(CrossBeamTests);\nexport { CrossBeamTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Curve Tests\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\nimport { CurvePosition } from '../src/curve';\nconst CurveTests = {\n    Start() {\n        QUnit.module('Curve');\n        const run = VexFlowTests.runTests;\n        run('Simple Curve', simple);\n        run('Rounded Curve', rounded);\n        run('Thick Thin Curves', thickThin);\n        run('Top Curve', top);\n    },\n};\n/**\n * Helper function. Each test case passes in a set of notes and\n * a setupCurves() callback which uses Factory.Curve(...) to build the curves.\n * Curves can be used to indicate slurs (legato articulation).\n */\nfunction createTest(noteGroup1, noteGroup2, setupCurves) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options, 350, 200);\n        const stave = factory.Stave({ y: 50 });\n        const score = factory.EasyScore();\n        // Use .reduce(concat) to flatten the two StaveNote[] into a single StaveNote[].\n        const staveNotes = [\n            score.beam(score.notes(...noteGroup1)),\n            score.beam(score.notes(...noteGroup2)), // group 2\n        ].reduce(concat);\n        setupCurves(factory, staveNotes);\n        const voices = [score.voice(staveNotes, { time: '4/4' })];\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\n        factory.draw();\n        options.assert.ok('Simple Curve');\n    };\n}\nconst simple = createTest(['c4/8, f5, d5, g5', { stem: 'up' }], // beamGroup1\n['d6/8, f5, d5, g5', { stem: 'down' }], // beamGroup2\n(f, notes) => {\n    f.Curve({\n        from: notes[0],\n        to: notes[3],\n        options: {\n            cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 50 },\n            ],\n        },\n    });\n    f.Curve({\n        from: notes[4],\n        to: notes[7],\n        options: {\n            cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 20 },\n            ],\n        },\n    });\n});\nconst rounded = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\n(f, notes) => {\n    f.Curve({\n        from: notes[0],\n        to: notes[3],\n        options: {\n            xShift: -10,\n            yShift: 30,\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 50 },\n            ],\n        },\n    });\n    f.Curve({\n        from: notes[4],\n        to: notes[7],\n        options: {\n            cps: [\n                { x: 0, y: 50 },\n                { x: 0, y: 50 },\n            ],\n        },\n    });\n});\nconst thickThin = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\n(f, notes) => {\n    f.Curve({\n        from: notes[0],\n        to: notes[3],\n        options: {\n            thickness: 10,\n            xShift: -10,\n            yShift: 30,\n            cps: [\n                { x: 0, y: 20 },\n                { x: 0, y: 50 },\n            ],\n        },\n    });\n    f.Curve({\n        from: notes[4],\n        to: notes[7],\n        options: {\n            thickness: 0,\n            cps: [\n                { x: 0, y: 50 },\n                { x: 0, y: 50 },\n            ],\n        },\n    });\n});\nconst top = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\n(f, notes) => {\n    f.Curve({\n        from: notes[0],\n        to: notes[7],\n        options: {\n            xShift: -3,\n            yShift: 10,\n            position: CurvePosition.NEAR_TOP,\n            positionEnd: CurvePosition.NEAR_HEAD,\n            cps: [\n                { x: 0, y: 20 },\n                { x: 40, y: 80 },\n            ],\n        },\n    });\n});\nVexFlowTests.register(CurveTests);\nexport { CurveTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Dot Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Beam } from '../src/beam';\nimport { Dot } from '../src/dot';\nimport { Formatter } from '../src/formatter';\nimport { ModifierContext } from '../src/modifiercontext';\nimport { Note } from '../src/note';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { TickContext } from '../src/tickcontext';\nimport { Voice } from '../src/voice';\nconst DotTests = {\n    Start() {\n        QUnit.module('Dot');\n        const run = VexFlowTests.runTests;\n        run('Basic', basic);\n        run('Multi Voice', multiVoice);\n    },\n};\n/**\n * Helper function for the basic test case below.\n */\nfunction showOneNote(note1, stave, ctx, x) {\n    const modifierContext = new ModifierContext();\n    note1.setStave(stave).addToModifierContext(modifierContext);\n    new TickContext().addTickable(note1).preFormat().setX(x);\n    note1.setContext(ctx).draw();\n    Note.plotMetrics(ctx, note1, 140);\n}\nfunction basic(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 1000, 240);\n    const stave = new Stave(10, 10, 975);\n    stave.setContext(ctx);\n    stave.draw();\n    const notes = [\n        new StaveNote({ keys: ['c/4', 'e/4', 'a/4', 'b/4'], duration: 'w' }),\n        new StaveNote({ keys: ['a/4', 'b/4', 'c/5'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['g/4', 'a/4', 'b/4'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['e/4', 'f/4', 'b/4', 'c/5'], duration: '4' }),\n        new StaveNote({\n            keys: ['g/4', 'a/4', 'd/5', 'e/5', 'g/5'],\n            duration: '4',\n            stemDirection: -1,\n        }),\n        new StaveNote({ keys: ['g/4', 'b/4', 'd/5', 'e/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['e/4', 'g/4', 'b/4', 'c/5'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' }),\n        new StaveNote({\n            keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'],\n            duration: '16',\n            stemDirection: -1,\n        }),\n        new StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16', stemDirection: 1 }),\n        new StaveNote({\n            keys: ['e/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'f/5'],\n            duration: '16',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['e/4', 'g/4', 'a/4', 'b/4', 'c/5'],\n            duration: '16',\n            stemDirection: 1,\n        }),\n        new StaveNote({ keys: ['e/4', 'a/4', 'b/4', 'c/5'], duration: '16', stemDirection: 1 }),\n    ];\n    Dot.buildAndAttach(notes, { all: true });\n    Dot.buildAndAttach([notes[7], notes[8], notes[9]], { all: true });\n    Dot.buildAndAttach([notes[8], notes[9]], { all: true });\n    const beam = new Beam(notes.slice(notes.length - 2));\n    for (let i = 0; i < notes.length; i++) {\n        showOneNote(notes[i], stave, ctx, 30 + i * 65);\n        const dots = notes[i].getModifiersByType('Dot');\n        options.assert.ok(dots.length > 0, 'Note ' + i + ' has dots');\n        for (let j = 0; j < dots.length; ++j) {\n            options.assert.ok(dots[j].getWidth() > 0, 'Dot ' + j + ' has width set');\n        }\n    }\n    beam.setContext(ctx).draw();\n    VexFlowTests.plotLegendForNoteWidth(ctx, 890, 140);\n    options.assert.ok(true, 'Full Dot');\n}\nfunction multiVoice(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 750, 300);\n    const stave = new Stave(30, 45, 700).setContext(ctx).draw();\n    const notes1 = [\n        new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '2', stemDirection: -1 }),\n        new StaveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: '2', stemDirection: -1 }),\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '2', stemDirection: -1 }),\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '8', stemDirection: -1 }),\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '8', stemDirection: -1 }),\n    ];\n    Dot.buildAndAttach([notes1[0], notes1[2], notes1[3], notes1[4]], { all: true });\n    Dot.buildAndAttach([notes1[0], notes1[2], notes1[3], notes1[4]], { all: true });\n    Dot.buildAndAttach([notes1[1]], { index: 0 });\n    Dot.buildAndAttach([notes1[1]], { index: 0 });\n    Dot.buildAndAttach([notes1[1]], { index: 1 });\n    Dot.buildAndAttach([notes1[1]], { index: 1 });\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\n    Dot.buildAndAttach([notes1[2], notes1[3], notes1[4]]);\n    const notes2 = [\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '2', stemDirection: 1 }),\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['d/5', 'g/5', 'a/5', 'b/5'], duration: '8', stemDirection: 1 }),\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '8', stemDirection: 1 }),\n    ];\n    Dot.buildAndAttach(notes2, { all: true });\n    Dot.buildAndAttach([notes2[1]], { all: true });\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes2);\n    const formatter = new Formatter().joinVoices([voice1, voice2]);\n    formatter.format([voice1, voice2], 700);\n    voice1.draw(ctx, stave);\n    voice2.draw(ctx, stave);\n    notes1.forEach((note) => Note.plotMetrics(ctx, note, 190));\n    notes2.forEach((note) => Note.plotMetrics(ctx, note, 20));\n    VexFlowTests.plotLegendForNoteWidth(ctx, 620, 220);\n    options.assert.ok(true, 'Full Dot');\n}\nVexFlowTests.register(DotTests);\nexport { DotTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// EasyScore Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Articulation } from '../src/articulation';\nimport { EasyScore } from '../src/easyscore';\nimport { FretHandFinger } from '../src/frethandfinger';\nimport { Modifier } from '../src/modifier';\nimport { Parenthesis } from '../src/parenthesis';\nimport { StaveConnector } from '../src/staveconnector';\nimport { Stem } from '../src/stem';\nimport { Tuplet } from '../src/tuplet';\nconst EasyScoreTests = {\n    Start() {\n        QUnit.module('EasyScore');\n        QUnit.test('Basic', basic);\n        QUnit.test('Accidentals', accidentals);\n        QUnit.test('Durations', durations);\n        QUnit.test('Chords', chords);\n        QUnit.test('Dots', dots);\n        QUnit.test('Types', types);\n        QUnit.test('Options', options);\n        const run = VexFlowTests.runTests;\n        run('Draw Basic', drawBasicTest);\n        run('Draw Different KeySignature', drawDiffKeysig);\n        run('Draw Basic Muted', drawBasicMutedTest);\n        run('Draw Basic Harmonic', drawBasicHarmonicTest);\n        run('Draw Basic Slash', drawBasicSlashTest);\n        run('Draw Ghostnote Basic', drawGhostBasicTest);\n        run('Draw Ghostnote Dotted', drawGhostDottedTest);\n        run('Draw Parenthesised', drawParenthesisedTest);\n        run('Draw Accidentals', drawAccidentalsTest);\n        run('Draw Beams', drawBeamsTest);\n        run('Draw Tuplets', drawTupletsTest);\n        run('Draw Dots', drawDotsTest);\n        run('Draw Options', drawOptionsTest);\n        run('Draw Fingerings', drawFingeringsTest);\n        run('Keys', keys);\n    },\n};\n/**\n * Use Function.prototype.bind() to create shortcut methods.\n * This can improve the readability of your EasyScore code.\n */\nfunction createShortcuts(score) {\n    return {\n        voice: score.voice.bind(score),\n        notes: score.notes.bind(score),\n        beam: score.beam.bind(score),\n        tuplet: score.tuplet.bind(score),\n    };\n}\n/**\n * Test case verifies:\n * - all strings in `mustPass` parse correctly\n * - all strings in `mustFail` fail to parse (i.e., Result.success is `false`).\n */\nfunction basic(assert) {\n    const score = new EasyScore();\n    const mustPass = ['c4', 'c#4', 'c4/r', 'c#5', 'c3/m', 'c3//m', 'c3//h', 'c3/s', 'c3//s', 'c3/g', 'c3//g'];\n    const mustFail = ['', '()', '7', '(c#4 e5 g6'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction accidentals(assert) {\n    const score = new EasyScore();\n    const mustPass = [\n        'c3',\n        'c##3, cb3',\n        'Cn3',\n        'f3//m',\n        '(c##3 cbb3 cn3), cb3',\n        'cbbs7',\n        'cbb7',\n        'cbss7',\n        'cbs7',\n        'cb7',\n        'cdb7',\n        'cd7',\n        'c##7',\n        'c#7',\n        'cn7',\n        'c++-7',\n        'c++7',\n        'c+-7',\n        'c+7',\n        '(cbs3 bbs3 dbs3), ebs3',\n        '(cd7 cbb3 cn3), cb3',\n        'co7',\n        'ck7',\n    ];\n    const mustFail = [\n        'ct3',\n        'cdbb7',\n        '(cq cbb3 cn3), cb3',\n        '(cdd7 cbb3 cn3), cb3',\n        'cbbbs7',\n        'cbbss7',\n        'cbsss7',\n        'csbs7',\n        'cddb7',\n        'cddbb7',\n        'cdd7',\n        'c##b7',\n        'c#bs7',\n        'cnb#7',\n        'c+#+b-d7',\n        'c+--7',\n        'c++--7',\n        'c+++7',\n        'cbk7',\n        'cok7',\n        'cko7',\n        'c#s7',\n    ];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction durations(assert) {\n    const score = new EasyScore();\n    const mustPass = ['c3/4', 'c##3/w, cb3', 'c##3/w, cb3/q', 'c##3/q, cb3/32', '(c##3 cbb3 cn3), cb3'];\n    const mustFail = ['Cn3/]', '/', '(cq cbb3 cn3), cb3', '(cdd7 cbb3 cn3), cb3'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction chords(assert) {\n    const score = new EasyScore();\n    const mustPass = [\n        '(c5)',\n        '(c3 e0 g9)',\n        '(c##4 cbb4 cn4)/w, (c#5 cb2 a3)/32',\n        '(d##4 cbb4 cn4)/w/r, (c#5 cb2 a3)',\n        '(c##4 cbb4 cn4)/4, (c#5 cb2 a3)',\n        '(c##4 cbb4 cn4)/m, (c#5 cb2 a3)',\n    ];\n    const mustFail = ['(c)'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction dots(assert) {\n    const score = new EasyScore();\n    const mustPass = [\n        'c3/4.',\n        'c##3/w.., cb3',\n        'f##3/s, cb3/q...',\n        'c##3/q, cb3/32',\n        '(c##3 cbb3 cn3)., cb3',\n        '(c5).',\n        '(c##4 cbb4 cn4)/w.., (c#5 cb2 a3)/32',\n    ];\n    const mustFail = ['.', 'c.#', 'c#4./4'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction types(assert) {\n    const score = new EasyScore();\n    const mustPass = ['c3/4/m.', 'c##3//r.., cb3', 'c##3/m.., cb3', 'c##3/r.., cb3', 'd##3/w/s, cb3/q...', 'Fb4'];\n    const mustFail = ['c4/q/U', '(c##4, cbb4 cn4)/w.., (c#5 cb2 a3)/32', 'z#3'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction options(assert) {\n    const score = new EasyScore();\n    const mustPass = [\n        'c3/4.[foo=\"bar\"]',\n        'c##3/w.., cb3[id=\"blah\"]',\n        'c##3/q, cb3/32',\n        '(c##3 cbb3 cn3).[blah=\"bod4o\"], cb3',\n        '(c5)[fooooo=\"booo\"]',\n        'c#5[id=\"foobar\"]',\n    ];\n    const mustFail = ['.[', 'f##3/w[], cb3/q...'];\n    mustPass.forEach((line) => assert.equal(score.parse(line).success, true, line));\n    mustFail.forEach((line) => assert.equal(score.parse(line).success, false, line));\n}\nfunction drawBasicTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\n            voice(notes('c#5/h., c5/q', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble');\n    system\n        .addStave({\n        voices: [voice(notes('c#3/q, cn3/q, bb3/q, d##3/q', { clef: 'bass' }))],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawDiffKeysig(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\n            voice(notes('c5/h., c5/q', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4')\n        .addKeySignature('D');\n    system\n        .addStave({\n        voices: [voice(notes('c#3/q, cn3/q, bb3/q, d##3/q', { clef: 'bass' }))],\n    })\n        .addClef('bass')\n        .addTimeSignature('4/4');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawBasicMutedTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(d4 e4 g4)/q/m, c4/q/m, c4/q/r, c4/q/m', { stem: 'down' })),\n            voice(notes('c#5/h/m., c5/q/m', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble');\n    system\n        .addStave({\n        voices: [voice(notes('c#3/q/m, cn3/q/m, bb3/q/m, d##3/q/m', { clef: 'bass' }))],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawBasicHarmonicTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(d4 e4 g4)/q/h, c4/q/h, c4/q/r, c4/q/h', { stem: 'down' })),\n            voice(notes('c#5/h/h., c5/q/h', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble');\n    system\n        .addStave({\n        voices: [voice(notes('c#3/q/h, cn3/q/h, bb3/q/h, d##3/q/h', { clef: 'bass' }))],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawBasicSlashTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(d4 e4 g4)/q/s, c4/q/s, c4/q/r, c4/q/s', { stem: 'down' })),\n            voice(notes('c#5/h/s., c5/q/s', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble');\n    system\n        .addStave({\n        voices: [voice(notes('c#3/q/s, cn3/q/s, bb3/q/s, d##3/q/s', { clef: 'bass' }))],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawGhostBasicTest(options) {\n    const f = VexFlowTests.makeFactory(options, 550);\n    const score = f.EasyScore();\n    const system = f.System();\n    system.addStave({\n        voices: [\n            score.voice([\n                ...score.notes('f#5/4, f5, db5, c5', { stem: 'up' }),\n                ...score.beam(score.notes('c5/8, d5, fn5, e5', { stem: 'up' })),\n                ...score.beam(score.notes('d5, c5', { stem: 'up' })),\n            ], { time: '7/4' }),\n            score.voice(score.notes('c4/h/g, f4/4, c4/4/g, e4/4, c4/8/g, d##4/8, c4/8, c4/8', { stem: 'down' }), {\n                time: '7/4',\n            }),\n        ],\n    });\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawGhostDottedTest(options) {\n    const f = VexFlowTests.makeFactory(options, 550);\n    const score = f.EasyScore();\n    const system = f.System();\n    system.addStave({\n        voices: [\n            score.voice([\n                ...score.notes('c4/4/g., fbb5/8, d5/4', { stem: 'up' }),\n                ...score.beam(score.notes('c5/8, c#5/16, d5/16', { stem: 'up' })),\n                ...score.notes('c4/2/g.., fn5/8', { stem: 'up' }),\n            ], { time: '8/4' }),\n            score.voice([\n                ...score.notes('f#4/4', { stem: 'down' }),\n                ...score.beam(score.notes('e4/8, d4/8', { stem: 'down' })),\n                ...score.notes('c4/4/g.., cb4/16, c#4/h, d4/4', { stem: 'down' }),\n                ...score.beam(score.notes('fn4/8, e4/8', { stem: 'down' })),\n            ], { time: '8/4' }),\n        ],\n    });\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawParenthesisedTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    const notes1 = notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' });\n    Parenthesis.buildAndAttach([notes1[0], notes1[3]]);\n    const notes2 = notes('c#5/h., c5/q', { stem: 'down' });\n    Parenthesis.buildAndAttach([notes2[0], notes2[1]]);\n    system\n        .addStave({\n        voices: [voice(notes1), voice(notes2)],\n    })\n        .addClef('treble');\n    const notes3 = notes('c#3/q, cn3/q, bb3/q, d##3/q', { stem: 'down' });\n    Parenthesis.buildAndAttach(notes3);\n    system\n        .addStave({\n        voices: [voice(notes3)],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawAccidentalsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 350);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(cbbs4 ebb4 gbss4)/q, cbs4/q, cdb4/q/r, cd4/q', { stem: 'down' })),\n            voice(notes('c++-5/h., c++5/q', { stem: 'up' })),\n        ],\n    })\n        .addClef('treble');\n    system\n        .addStave({\n        voices: [voice(notes('c+-3/q, c+3/q, bb3/q, d##3/q', { clef: 'bass' }))],\n    })\n        .addClef('bass');\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawBeamsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 250);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes, beam } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [\n            voice(notes('(c4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\n            voice([...notes('c#5/h.', { stem: 'up' }), ...beam(notes('c5/8, c5/8', { stem: 'up' }))]),\n        ],\n    })\n        .addClef('treble');\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawTupletsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 250);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes, tuplet, beam } = createShortcuts(score);\n    // Voice 1, with stems pointed down.\n    const v1Tuplet = tuplet(notes('(c4 e4 g4)/q, cbb4/q, c4/q', { stem: 'down' }), {\n        location: Tuplet.LOCATION_BOTTOM,\n    });\n    const v1HalfNote = notes('c4/h', { stem: 'down' });\n    const v1 = voice([...v1Tuplet, ...v1HalfNote]);\n    // Voice 2, with stems pointed up.\n    const v2HalfNote = notes('c#5/h.', { stem: 'up' });\n    const v2Tuplet = tuplet(beam(notes('cb5/8, cn5/8, c5/8', { stem: 'up' })));\n    const v2 = voice([...v2HalfNote, ...v2Tuplet]);\n    system.addStave({ voices: [v1, v2] }).addClef('treble');\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawDotsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 250);\n    const score = f.EasyScore();\n    const system = f.System();\n    const { voice, notes } = createShortcuts(score);\n    system\n        .addStave({\n        voices: [voice(notes('(c4 e4 g4)/8., (c4 e4 g4)/8.., (c4 e4 g4)/8..., (c4 e4 g4)/8...., (c4 e4 g4)/16...'))],\n    })\n        .addClef('treble');\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawOptionsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 200);\n    const score = f.EasyScore();\n    const system = f.System();\n    const notes = score.notes('B4/h[id=\"foobar\", class=\"red,bold\", stem=\"up\", articulations=\"staccato.below,tenuto\"], B4/q[articulations=\"accent.above\"], B4/q[stem=\"down\"]');\n    system.addStave({ voices: [score.voice(notes)] });\n    f.draw();\n    const note0 = notes[0];\n    const note1 = notes[1];\n    const note0Modifier0 = note0.getModifiers()[0];\n    const note0Modifier1 = note0.getModifiers()[1];\n    const note1Modifier0 = note1.getModifiers()[0];\n    options.assert.equal(note0.getAttribute('id'), 'foobar');\n    options.assert.ok(note0.hasClass('red'));\n    options.assert.ok(note0.hasClass('bold'));\n    options.assert.equal(note0Modifier0.getCategory(), Articulation.CATEGORY);\n    options.assert.equal(note0Modifier0.type, 'a.');\n    options.assert.equal(note0Modifier0.getPosition(), Modifier.Position.BELOW);\n    options.assert.equal(note0Modifier1.getCategory(), Articulation.CATEGORY);\n    options.assert.equal(note0Modifier1.type, 'a-');\n    options.assert.equal(note0Modifier1.getPosition(), Modifier.Position.ABOVE);\n    options.assert.equal(note0.getStemDirection(), Stem.UP);\n    options.assert.equal(note1Modifier0.getCategory(), Articulation.CATEGORY);\n    options.assert.equal(note1Modifier0.type, 'a>');\n    options.assert.equal(note1Modifier0.getPosition(), Modifier.Position.ABOVE);\n    options.assert.equal(notes[2].getStemDirection(), Stem.DOWN);\n}\nfunction drawFingeringsTest(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 200);\n    const score = f.EasyScore();\n    const system = f.System();\n    const notes = score.notes('C4/q[fingerings=\"1\"], E4[fingerings=\"3.above\"], G4[fingerings=\"5.below\"], (C4 E4 G4)[fingerings=\"1,3,5\"]');\n    system.addStave({ voices: [score.voice(notes)] });\n    f.draw();\n    const note0Modifier0 = notes[0].getModifiers()[0];\n    options.assert.equal(note0Modifier0.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note0Modifier0.getFretHandFinger(), '1');\n    options.assert.equal(note0Modifier0.getPosition(), Modifier.Position.LEFT);\n    const note1Modifier0 = notes[1].getModifiers()[0];\n    options.assert.equal(note1Modifier0.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note1Modifier0.getFretHandFinger(), '3');\n    options.assert.equal(note1Modifier0.getPosition(), Modifier.Position.ABOVE);\n    const note2Modifier0 = notes[2].getModifiers()[0];\n    options.assert.equal(note2Modifier0.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note2Modifier0.getFretHandFinger(), '5');\n    options.assert.equal(note2Modifier0.getPosition(), Modifier.Position.BELOW);\n    const note3Modifiers = notes[3].getModifiers();\n    const note3Modifier0 = note3Modifiers[0];\n    const note3Modifier1 = note3Modifiers[1];\n    const note3Modifier2 = note3Modifiers[2];\n    options.assert.equal(note3Modifier0.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note3Modifier0.getFretHandFinger(), '1');\n    options.assert.equal(note3Modifier0.getPosition(), Modifier.Position.LEFT);\n    options.assert.equal(note3Modifier1.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note3Modifier1.getFretHandFinger(), '3');\n    options.assert.equal(note3Modifier1.getPosition(), Modifier.Position.LEFT);\n    options.assert.equal(note3Modifier2.getCategory(), FretHandFinger.CATEGORY);\n    options.assert.equal(note3Modifier2.getFretHandFinger(), '5');\n    options.assert.equal(note3Modifier2.getPosition(), Modifier.Position.LEFT);\n}\nfunction keys(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 200);\n    const score = f.EasyScore();\n    const system = f.System();\n    const notes = score.notes('c#3/q, c##3, cb3, cbb3, cn3, c3, cbbs3, cbss3, cbs3, cdb3, cd3, c++-3, c++3, c+-3, c+3, co3, ck3', { clef: 'bass' });\n    system.addStave({ voices: [f.Voice().setStrict(false).addTickables(notes)] }).addClef('bass');\n    f.draw();\n    options.assert.equal(notes[0].keys, 'c#/3');\n    options.assert.equal(notes[1].keys, 'c##/3');\n    options.assert.equal(notes[2].keys, 'cb/3');\n    options.assert.equal(notes[3].keys, 'cbb/3');\n    options.assert.equal(notes[4].keys, 'cn/3');\n    for (let i = 5; i < notes.length; i++) {\n        options.assert.equal(notes[i].keys, 'c/3');\n    }\n}\nVexFlowTests.register(EasyScoreTests);\nexport { EasyScoreTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Factory Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Factory } from '../src/factory';\nimport { Barline } from '../src/stavebarline';\nconst FactoryTests = {\n    Start() {\n        QUnit.module('Factory');\n        QUnit.test('Defaults', defaults);\n        const run = VexFlowTests.runTests;\n        run('Draw', draw);\n        run('Draw Tab (repeat barlines must be aligned)', drawTab);\n    },\n};\nfunction defaults(assert) {\n    // Throws RuntimeError: 'HTML DOM element not set in Factory'\n    assert.throws(() => new Factory({ renderer: { elementId: '', width: 700, height: 500 } }), 'Empty string for elementId throws an exception.');\n    const factory = new Factory({\n        renderer: { elementId: null, width: 700, height: 500 },\n    });\n    // eslint-disable-next-line\n    // @ts-ignore access a protected member for testing purposes.\n    const options = factory.options;\n    assert.equal(options.renderer.width, 700);\n    assert.equal(options.renderer.height, 500);\n    assert.equal(options.renderer.elementId, null);\n    assert.equal(options.stave.space, 10);\n}\nfunction draw(options) {\n    const f = Factory.newFromElementId(options.elementId);\n    f.Stave().setClef('treble');\n    f.draw();\n    options.assert.expect(0);\n}\nfunction drawTab(options) {\n    const factory = VexFlowTests.makeFactory(options, 500, 400);\n    const system = factory.System({ width: 500 });\n    const stave = factory.Stave().setClef('treble').setKeySignature('C#').setBegBarType(Barline.type.REPEAT_BEGIN);\n    const voices = [factory.Voice().addTickables([factory.GhostNote({ duration: 'w' })])];\n    system.addStave({ stave, voices });\n    const tabStave = factory.TabStave().setClef('tab').setBegBarType(Barline.type.REPEAT_BEGIN);\n    const tabVoices = [factory.Voice().addTickables([factory.GhostNote({ duration: 'w' })])];\n    system.addStave({ stave: tabStave, voices: tabVoices });\n    factory.draw();\n    options.assert.equal(stave.getModifiers()[0].getX(), tabStave.getModifiers()[0].getX());\n    options.assert.expect(1);\n}\nVexFlowTests.register(FactoryTests);\nexport { FactoryTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Font Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Bend } from '../src/bend';\nimport { CanvasContext } from '../src/canvascontext';\nimport { Flow } from '../src/flow';\nimport { Font, FontStyle, FontWeight } from '../src/font';\nimport { PedalMarking } from '../src/pedalmarking';\nimport { StaveNote } from '../src/stavenote';\nimport { TextBracket } from '../src/textbracket';\nimport { TextNote } from '../src/textnote';\nimport { Voice } from '../src/voice';\nconst FontTests = {\n    Start() {\n        QUnit.module('Font');\n        QUnit.test('setFont', setFont);\n        QUnit.test('Parsing', fontParsing);\n        QUnit.test('Sizes', fontSizes);\n        const run = VexFlowTests.runTests;\n        run('Set Text Font to Georgia', setTextFontToGeorgia);\n        run('Set Music Font to Petaluma', setMusicFontToPetaluma);\n    },\n};\n/**\n * Test out the setFont method in various classes.\n */\nfunction setFont(assert) {\n    // Create a CanvasCntext and call setFont on it.\n    const canvas = document.createElement('canvas');\n    canvas.width = 800;\n    canvas.height = 400;\n    // Set the font and get the font to verify that it matches.\n    // NOTE: Safari has a bug where it does not return the font-weight!\n    // https://github.com/0xfe/vexflow/issues/1240#issuecomment-986504088\n    const ctx = new CanvasContext(canvas.getContext('2d'));\n    ctx.setFont('PetalumaScript', '100px', 'normal', 'italic');\n    assert.equal(ctx.font, 'italic 100px PetalumaScript');\n    const voice = new Voice();\n    voice.setFont('bold 32pt Arial');\n    const fontInfo = voice.fontInfo;\n    assert.equal(fontInfo === null || fontInfo === void 0 ? void 0 : fontInfo.size, '32pt');\n    const flat = new Accidental('b');\n    // Add italic to the default font as defined in Element.TEXT_FONT (since Accidental does not override TEXT_FONT).\n    flat.setFont(undefined, undefined, undefined, 'italic');\n    assert.equal(flat.getFont(), 'italic 30pt Bravura,Roboto Slab');\n    // Anything that is not set will be reset to the defaults.\n    flat.setFont(undefined, undefined, 'bold', undefined);\n    assert.equal(flat.getFont(), 'bold 30pt Bravura,Roboto Slab');\n    flat.setFont(undefined, undefined, 'bold', 'italic');\n    assert.equal(flat.getFont(), 'italic bold 30pt Bravura,Roboto Slab');\n    flat.setFont(undefined, undefined, 'bold', 'oblique');\n    assert.equal(flat.getFont(), 'oblique bold 30pt Bravura,Roboto Slab');\n    // '' is equivalent to 'normal'. Neither will be included in the CSS font string.\n    flat.setFont(undefined, undefined, 'normal', '');\n    assert.equal(flat.getFont(), '30pt Bravura,Roboto Slab');\n}\nfunction fontParsing(assert) {\n    const b = new Bend([\n        { type: Bend.UP, text: '1/2' },\n        { type: Bend.DOWN, text: '' },\n    ]);\n    const bFont = b.fontInfo;\n    // Check the default font.\n    assert.equal(bFont === null || bFont === void 0 ? void 0 : bFont.family, 'Bravura,Roboto Slab');\n    assert.equal(bFont === null || bFont === void 0 ? void 0 : bFont.size, Font.SIZE);\n    assert.equal(bFont === null || bFont === void 0 ? void 0 : bFont.weight, FontWeight.NORMAL);\n    assert.equal(bFont === null || bFont === void 0 ? void 0 : bFont.style, FontStyle.NORMAL);\n    const f1 = 'Roboto Slab, serif';\n    const t = new TextNote({ duration: '4', font: { family: f1 } });\n    assert.equal(f1, t.fontInfo.family);\n    const n1 = new StaveNote({ keys: ['e/5'], duration: '4' });\n    const n2 = new StaveNote({ keys: ['c/5'], duration: '4' });\n    const tb = new TextBracket({ start: n1, stop: n2 });\n    const f2 = tb.fontInfo;\n    assert.equal(f2 === null || f2 === void 0 ? void 0 : f2.size, 15);\n    assert.equal(f2 === null || f2 === void 0 ? void 0 : f2.style, FontStyle.ITALIC);\n    // The line-height /3 is currently ignored.\n    const f3 = Font.fromCSSString(`bold 1.5em/3 \"Lucida Sans Typewriter\", \"Lucida Console\", Consolas, monospace`);\n    const f3SizeInPx = Font.convertSizeToPixelValue(f3.size);\n    assert.equal(f3SizeInPx, 24);\n}\nfunction fontSizes(assert) {\n    {\n        const size = '17px';\n        const sizeInEm = Font.convertSizeToPixelValue(size) / Font.scaleToPxFrom.em;\n        assert.equal(sizeInEm, 1.0625);\n    }\n    {\n        const size = '2em';\n        const sizeInPx = Font.convertSizeToPixelValue(size);\n        assert.equal(sizeInPx, 32);\n    }\n    {\n        const pedal = new PedalMarking([]);\n        assert.equal(pedal.getFont(), '30pt Bravura,Roboto Slab');\n        assert.equal(pedal.fontSizeInPoints, 30);\n        assert.equal(pedal.fontSizeInPixels, 40);\n        const doubledSizePx = pedal.fontSizeInPixels * 2; // Double the font size.\n        assert.equal(doubledSizePx, 80);\n        const doubledSizePt = Font.scaleSize(pedal.fontSizeInPoints, 2); // Double the font size.\n        assert.equal(doubledSizePt, 60);\n        assert.equal(Font.scaleSize('1.5em', 3), '4.5em');\n    }\n}\nfunction setTextFontToGeorgia(options) {\n    const factory = VexFlowTests.makeFactory(options, 400, 200);\n    const stave = factory.Stave({ y: 40 });\n    const score = factory.EasyScore();\n    const voice1 = score.voice([\n        factory.StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: -1, duration: 'h' }),\n        factory.StaveNote({ keys: ['d/4', 'f/4'], stemDirection: -1, duration: 'q' }),\n        factory.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: 'q' }),\n    ]);\n    const georgiaFont = {\n        family: 'Georgia, Courier New, serif',\n        size: 14,\n        weight: 'bold',\n        style: 'italic',\n    };\n    const voice2 = score.voice([\n        factory\n            .TextNote({ text: 'Here are some fun lyrics...', duration: 'w' })\n            .setJustification(TextNote.Justification.LEFT)\n            .setFont(georgiaFont),\n    ]);\n    const formatter = factory.Formatter();\n    formatter.joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    factory.draw();\n    options.assert.ok(true);\n}\nfunction setMusicFontToPetaluma(options) {\n    Flow.setMusicFont('Petaluma');\n    const factory = VexFlowTests.makeFactory(options, 400, 200);\n    const stave = factory.Stave({ y: 40 });\n    const score = factory.EasyScore();\n    const voice = score.voice([\n        factory.StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: -1, duration: 'h' }),\n        factory.StaveNote({ keys: ['d/4', 'f/4'], stemDirection: -1, duration: 'q' }),\n        factory.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: 'q' }),\n    ]);\n    const formatter = factory.Formatter();\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\n    factory.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(FontTests);\nexport { FontTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Formatter Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\nimport { Articulation } from '../src/articulation';\nimport { Beam } from '../src/beam';\nimport { Bend } from '../src/bend';\nimport { Dot } from '../src/dot';\nimport { Element } from '../src/element';\nimport { Flow } from '../src/flow';\nimport { Font, FontWeight } from '../src/font';\nimport { Formatter } from '../src/formatter';\nimport { FretHandFinger } from '../src/frethandfinger';\nimport { ModifierPosition } from '../src/modifier';\nimport { Note } from '../src/note';\nimport { Registry } from '../src/registry';\nimport { Stave } from '../src/stave';\nimport { StaveConnector } from '../src/staveconnector';\nimport { StaveNote } from '../src/stavenote';\nimport { Stem } from '../src/stem';\nimport { StringNumber } from '../src/stringnumber';\nimport { Tuplet } from '../src/tuplet';\nimport { Voice } from '../src/voice';\nimport { MockTickable } from './mocks';\nconst FormatterTests = {\n    Start() {\n        QUnit.module('Formatter');\n        QUnit.test('TickContext Building', buildTickContexts);\n        const run = VexFlowTests.runTests;\n        run('Penultimate Note Padding', penultimateNote);\n        run('Whitespace and justify', rightJustify);\n        run('Notehead padding', noteHeadPadding);\n        run('Justification and alignment with accidentals', accidentalJustification);\n        run('Long measure taking full space', longMeasureProblems);\n        run('Vertical alignment - few unaligned beats', unalignedNoteDurations1);\n        run('Vertical alignment - many unaligned beats', unalignedNoteDurations2, { globalSoftmax: false });\n        run('Vertical alignment - many unaligned beats (global softmax)', unalignedNoteDurations2, { globalSoftmax: true });\n        run('Vertical alignment - many mixed elements', alignedMixedElements, { globalSoftmax: true });\n        run('StaveNote - Justification', justifyStaveNotes);\n        run('Notes with Tab', notesWithTab);\n        run('Multiple Staves - Justified', multiStaves, { debug: true });\n        run('Softmax', softMax);\n        run('Mixtime', mixTime);\n        run('Tight', tightNotes1);\n        run('Tight 2', tightNotes2);\n        run('Annotations', annotations);\n        run('Proportional Formatting - No Tuning', proportional, { debug: true, iterations: 0 });\n        run('Proportional Formatting - No Justification', proportional, { justify: false, debug: true, iterations: 0 });\n        run('Proportional Formatting (20 iterations)', proportional, { debug: true, iterations: 20, alpha: 0.5 });\n    },\n};\n/** Calculate the glyph's width in the current music font. */\nfunction getGlyphWidth(glyph) {\n    const el = new Element();\n    el.setText(glyph);\n    el.measureText();\n    return el.getWidth();\n}\nfunction buildTickContexts(assert) {\n    function createTickable(beat) {\n        return new MockTickable().setTicks(beat);\n    }\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\n    const tickables1 = [\n        createTickable(BEAT).setWidth(10),\n        createTickable(BEAT * 2).setWidth(20),\n        createTickable(BEAT).setWidth(30),\n    ];\n    const tickables2 = [\n        createTickable(BEAT * 2).setWidth(10),\n        createTickable(BEAT).setWidth(20),\n        createTickable(BEAT).setWidth(30),\n    ];\n    const voice1 = new Voice(Flow.TIME4_4);\n    const voice2 = new Voice(Flow.TIME4_4);\n    voice1.addTickables(tickables1);\n    voice2.addTickables(tickables2);\n    const formatter = new Formatter();\n    const tContexts = formatter.createTickContexts([voice1, voice2]);\n    assert.equal(tContexts.list.length, 4, 'Voices should have four tick contexts');\n    assert.throws(() => formatter.getMinTotalWidth(), /NoMinTotalWidth/, 'Expected to throw exception');\n    assert.ok(formatter.preCalculateMinTotalWidth([voice1, voice2]), 'Successfully runs preCalculateMinTotalWidth');\n    assert.equal(formatter.getMinTotalWidth(), 88, 'Get minimum total width without passing voices');\n    formatter.preFormat();\n    assert.equal(formatter.getMinTotalWidth(), 88, 'Minimum total width');\n    assert.equal(tickables1[0].getX(), tickables2[0].getX(), 'First notes of both voices have the same X');\n    assert.equal(tickables1[2].getX(), tickables2[2].getX(), 'Last notes of both voices have the same X');\n    assert.ok(tickables1[1].getX() < tickables2[1].getX(), 'Second note of voice 2 is to the right of the second note of voice 1');\n}\nfunction rightJustify(options) {\n    const f = VexFlowTests.makeFactory(options, 1200, 150);\n    const getTickables = (time, n, duration, duration2) => {\n        const tickar = [];\n        let i = 0;\n        for (i = 0; i < n; ++i) {\n            const dd = i === n - 1 ? duration2 : duration;\n            tickar.push(new StaveNote({ keys: ['f/4'], duration: dd }));\n        }\n        return new Voice(time).addTickables(tickar);\n    };\n    const renderTest = (time, n, duration, duration2, x, width) => {\n        const formatter = f.Formatter();\n        const stave = f.Stave({ x, y: 20, width });\n        // stave.addClef('treble').addTimeSignature('4/4');\n        const voice = getTickables(time, n, duration, duration2);\n        formatter.joinVoices([voice]).formatToStave([voice], stave);\n        stave.draw();\n        voice.draw(f.getContext(), stave);\n    };\n    renderTest({ numBeats: 4, beatValue: 4, resolution: 4 * 4096 }, 3, '4', '2', 10, 300);\n    renderTest({ numBeats: 4, beatValue: 4, resolution: 4 * 4096 }, 1, 'w', 'w', 310, 300);\n    renderTest({ numBeats: 3, beatValue: 4, resolution: 4 * 4096 }, 3, '4', '4', 610, 300);\n    renderTest({ numBeats: 3, beatValue: 4, resolution: 4 * 4096 }, 6, '8', '8', 910, 300);\n    options.assert.ok(true);\n}\nfunction penultimateNote(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 550);\n    const score = f.EasyScore();\n    const staffWidth = 310;\n    let system = undefined;\n    let voices = [];\n    let notes = [];\n    let note = undefined;\n    let stave = undefined;\n    let y = 10;\n    const draw = (softmax) => {\n        system = f.System({\n            width: staffWidth,\n            y,\n            formatOptions: { alignRests: true },\n            details: { softmaxFactor: softmax },\n        });\n        notes = [];\n        voices = [];\n        note = score.notes('C4/8/r', { clef: 'bass' })[0];\n        notes.push(note);\n        note = score.notes('A3/8', { stem: 'up', clef: 'bass' })[0];\n        notes.push(note);\n        note = score.notes('C4/4', { stem: 'up', clef: 'bass' })[0];\n        notes.push(note);\n        voices.push(score.voice(notes).setMode(2));\n        notes = [];\n        note = score.notes('( F3 A3 )/4', { stem: 'down', clef: 'bass' })[0];\n        notes.push(note);\n        note = score.notes('B4/4/r', {})[0];\n        notes.push(note);\n        voices.push(score.voice(notes).setMode(2));\n        notes = [];\n        stave = system.addStave({ voices: voices });\n        stave.addClef('bass');\n        stave.addTimeSignature('2/4');\n        voices = [];\n        f.draw();\n        f.getContext().fillText(`softmax: ${softmax.toString()}`, staffWidth + 20, y + 50);\n        y += 100;\n    };\n    draw(15);\n    draw(10);\n    draw(5);\n    draw(2);\n    draw(1);\n    options.assert.ok(true);\n}\nfunction noteHeadPadding(options) {\n    const registry = new Registry();\n    Registry.enableDefaultRegistry(registry);\n    const f = VexFlowTests.makeFactory(options, 600, 300);\n    const score = f.EasyScore();\n    score.set({ time: '9/8' });\n    const notes1 = score.notes('(d5 f5)/8,(c5 e5)/8,(d5 f5)/8,(c5 e5)/2.');\n    const beams = [new Beam(notes1.slice(0, 3), true)];\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT);\n    const notes2 = score.notes('(g4 an4)/2.,(g4 a4)/4.', { clef: 'treble' });\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT);\n    voice2.addTickables(notes2);\n    voice1.addTickables(notes1);\n    const formatter = f.Formatter().joinVoices([voice1]).joinVoices([voice2]);\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\n    formatter.format([voice1, voice2], width);\n    const staveWidth = width + Stave.defaultPadding;\n    const stave1 = f.Stave({ y: 50, width: staveWidth });\n    const stave2 = f.Stave({ y: 150, width: staveWidth });\n    stave1.draw();\n    stave2.draw();\n    voice1.draw(f.getContext(), stave1);\n    voice2.draw(f.getContext(), stave2);\n    beams.forEach((b) => b.setContext(f.getContext()).draw());\n    options.assert.ok(true);\n}\nfunction longMeasureProblems(options) {\n    const registry = new Registry();\n    Registry.enableDefaultRegistry(registry);\n    const f = VexFlowTests.makeFactory(options, 1500, 300);\n    const score = f.EasyScore();\n    score.set({ time: '4/4' });\n    const notes1 = score.notes('b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/2,b4/8,b4/8');\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT);\n    const notes2 = score.notes('d3/4,(ab3 f4)/2,d3/4,ab3/4,d3/2,ab3/4,d3/4,ab3/2,d3/4,ab3/4,d3/2,ab3/4,d3/4,ab3/2,d3/4,ab3/4,d3/2,ab3/4,d4/4,d4/2,d4/4', { clef: 'bass' });\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT);\n    voice2.addTickables(notes2);\n    voice1.addTickables(notes1);\n    const formatter = f.Formatter().joinVoices([voice1]).joinVoices([voice2]);\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\n    formatter.format([voice1, voice2], width);\n    const stave1 = f.Stave({ y: 50, width: width + Stave.defaultPadding });\n    const stave2 = f.Stave({ y: 200, width: width + Stave.defaultPadding });\n    stave1.draw();\n    stave2.draw();\n    voice1.draw(f.getContext(), stave1);\n    voice2.draw(f.getContext(), stave2);\n    options.assert.ok(true);\n}\nfunction accidentalJustification(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 300);\n    const score = f.EasyScore();\n    const notes11 = score.notes('a4/2, a4/4, a4/8, ab4/16, an4/16');\n    const voice11 = score.voice(notes11, { time: '4/4' });\n    const notes21 = score.notes('c4/2, d4/8, d4/8, e4/8, e4/8');\n    const voice21 = score.voice(notes21, { time: '4/4' });\n    let beams = Beam.generateBeams(notes11.slice(2));\n    beams = beams.concat(beams, Beam.generateBeams(notes21.slice(1, 3)));\n    beams = beams.concat(Beam.generateBeams(notes21.slice(3)));\n    const formatter = f.Formatter({}).joinVoices([voice11]).joinVoices([voice21]);\n    const width = formatter.preCalculateMinTotalWidth([voice11, voice21]);\n    const stave11 = f.Stave({ y: 20, width: width + Stave.defaultPadding });\n    const stave21 = f.Stave({ y: 130, width: width + Stave.defaultPadding });\n    formatter.format([voice11, voice21], width);\n    const ctx = f.getContext();\n    stave11.setContext(ctx).draw();\n    stave21.setContext(ctx).draw();\n    voice11.draw(ctx, stave11);\n    voice21.draw(ctx, stave21);\n    beams.forEach((b) => b.setContext(ctx).draw());\n    options.assert.ok(true);\n}\nfunction unalignedNoteDurations1(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 250);\n    const score = f.EasyScore();\n    const notes11 = [\n        new StaveNote({ keys: ['a/4'], duration: '8' }),\n        new StaveNote({ keys: ['b/4'], duration: '4' }),\n        new StaveNote({ keys: ['b/4'], duration: '8' }),\n    ];\n    const notes21 = [\n        new StaveNote({ keys: ['a/4'], duration: '16' }),\n        new StaveNote({ keys: ['b/4.'], duration: '4' }),\n        new StaveNote({ keys: ['a/4'], duration: '8d' }),\n    ];\n    Dot.buildAndAttach([notes21[2]], { all: true });\n    const ctx = f.getContext();\n    const voice11 = score.voice(notes11, { time: '2/4' }).setMode(Voice.Mode.SOFT);\n    const voice21 = score.voice(notes21, { time: '2/4' }).setMode(Voice.Mode.SOFT);\n    const beams21 = Beam.generateBeams(notes21);\n    const beams11 = Beam.generateBeams(notes11);\n    const formatter = new Formatter();\n    formatter.joinVoices([voice11]);\n    formatter.joinVoices([voice21]);\n    const width = formatter.preCalculateMinTotalWidth([voice11, voice21]);\n    const stave11 = f.Stave({ y: 20, width: width + Stave.defaultPadding });\n    const stave21 = f.Stave({ y: 130, width: width + Stave.defaultPadding });\n    formatter.format([voice11, voice21], width);\n    stave11.setContext(ctx).draw();\n    stave21.setContext(ctx).draw();\n    voice11.draw(ctx, stave11);\n    voice21.draw(ctx, stave21);\n    beams21.forEach((b) => b.setContext(ctx).draw());\n    beams11.forEach((b) => b.setContext(ctx).draw());\n    options.assert.ok(voice11.getTickables()[1].getX() > voice21.getTickables()[1].getX());\n}\nfunction unalignedNoteDurations2(options) {\n    const notes1 = [\n        new StaveNote({ keys: ['b/4'], duration: '8r' }),\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\n        new StaveNote({ keys: ['b/4'], duration: '8r' }),\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\n    ];\n    const notes2 = [\n        new StaveNote({ keys: ['a/4'], duration: '16r' }),\n        new StaveNote({ keys: ['e/4.'], duration: '8d' }),\n        new StaveNote({ keys: ['e/4'], duration: '4' }),\n        new StaveNote({ keys: ['a/4'], duration: '16r' }),\n        new StaveNote({ keys: ['e/4.'], duration: '8d' }),\n        new StaveNote({ keys: ['e/4'], duration: '4' }),\n    ];\n    const f = VexFlowTests.makeFactory(options, 750, 280);\n    const context = f.getContext();\n    const voice1 = new Voice({ numBeats: 4, beatValue: 4 });\n    voice1.addTickables(notes1);\n    const voice2 = new Voice({ numBeats: 4, beatValue: 4 });\n    voice2.addTickables(notes2);\n    const formatter = new Formatter({ globalSoftmax: options.params.globalSoftmax });\n    formatter.joinVoices([voice1]);\n    formatter.joinVoices([voice2]);\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\n    formatter.format([voice1, voice2], width);\n    const stave1 = new Stave(10, 40, width + Stave.defaultPadding);\n    const stave2 = new Stave(10, 100, width + Stave.defaultPadding);\n    stave1.setContext(context).draw();\n    stave2.setContext(context).draw();\n    voice1.draw(context, stave1);\n    voice2.draw(context, stave2);\n    options.assert.ok(voice1.getTickables()[1].getX() > voice2.getTickables()[1].getX());\n}\nfunction alignedMixedElements(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 500);\n    const context = f.getContext();\n    const stave = new Stave(10, 200, 400);\n    const stave2 = new Stave(410, 200, 400);\n    const notes = [\n        new StaveNote({ keys: ['c/5'], duration: '8' })\n            .addModifier(new Accidental('##'), 0)\n            .addModifier(new FretHandFinger('4').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a^').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.BOTTOM), 0)\n            .addModifier(new Annotation('xxxx').setVerticalJustification(AnnotationVerticalJustify.BOTTOM).setFont('sans-serif', 20), 0)\n            .addModifier(new Annotation('ttt').setVerticalJustification(AnnotationVerticalJustify.BOTTOM).setFont('sans-serif', 20), 0),\n        new StaveNote({ keys: ['c/5'], duration: '8', stemDirection: Stem.DOWN })\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.BELOW), 0),\n        new StaveNote({ keys: ['c/5'], duration: '8' }),\n    ];\n    const notes2 = [\n        new StaveNote({ keys: ['c/5'], duration: '8' })\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\n        new StaveNote({ keys: ['c/5'], duration: '8', stemDirection: Stem.DOWN })\n            .addModifier(new FretHandFinger('4').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a^').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.ABOVE), 0)\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.TOP), 0)\n            .addModifier(new Annotation('xxxx').setVerticalJustification(AnnotationVerticalJustify.TOP).setFont('sans-serif', 20), 0)\n            .addModifier(new Annotation('ttt').setVerticalJustification(AnnotationVerticalJustify.TOP).setFont('sans-serif', 20), 0),\n        new StaveNote({ keys: ['c/5'], duration: '8' }),\n    ];\n    const tuplet = new Tuplet(notes).setTupletLocation(-1);\n    const tuplet2 = new Tuplet(notes2).setTupletLocation(1);\n    Formatter.FormatAndDraw(context, stave, notes);\n    Formatter.FormatAndDraw(context, stave2, notes2);\n    stave.setContext(context).draw();\n    stave2.setContext(context).draw();\n    tuplet.setContext(context).draw();\n    tuplet2.setContext(context).draw();\n    options.assert.ok(true);\n}\nfunction justifyStaveNotes(options) {\n    const f = VexFlowTests.makeFactory(options, 520, 280);\n    const ctx = f.getContext();\n    const score = f.EasyScore();\n    let y = 30;\n    function justifyToWidth(width) {\n        f.Stave({ y: y }).addClef('treble');\n        const voices = [\n            score.voice(score.notes('(cbb4 en4 a4)/2, (d4 e4 f4)/8, (d4 f4 a4)/8, (cn4 f#4 a4)/4', { stem: 'down' })),\n            score.voice(score.notes('(bb4 e#5 a5)/4, (d5 e5 f5)/2, (c##5 fb5 a5)/4', { stem: 'up' })),\n        ];\n        f.Formatter()\n            .joinVoices(voices)\n            .format(voices, width - (Stave.defaultPadding + getGlyphWidth('\\uE050' /*gClef*/)));\n        // Show the the width of notes via a horizontal line with red, green, yellow, blue, gray indicators.\n        voices[0].getTickables().forEach((note) => Note.plotMetrics(ctx, note, y + 140)); // Bottom line.\n        voices[1].getTickables().forEach((note) => Note.plotMetrics(ctx, note, y - 20)); // Top Line\n        y += 210;\n    }\n    justifyToWidth(520);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction notesWithTab(options) {\n    const f = VexFlowTests.makeFactory(options, 420, 580);\n    const score = f.EasyScore();\n    let y = 10;\n    function justifyToWidth(width) {\n        const stave = f.Stave({ y: y }).addClef('treble');\n        const voice = score.voice(score.notes('d#4/2, (c4 d4)/8, d4/8, (c#4 e4 a4)/4', { stem: 'up' }));\n        y += 100;\n        f.TabStave({ y: y }).addTabGlyph().setNoteStartX(stave.getNoteStartX());\n        const tabVoice = score.voice([\n            f\n                .TabNote({ positions: [{ str: 3, fret: 6 }], duration: '2' })\n                .addModifier(new Bend([{ type: Bend.UP, text: 'Full' }]), 0),\n            f\n                .TabNote({\n                positions: [\n                    { str: 2, fret: 3 },\n                    { str: 3, fret: 5 },\n                ],\n                duration: '8',\n            })\n                .addModifier(new Bend([{ type: Bend.UP, text: 'Unison' }]), 1),\n            f.TabNote({ positions: [{ str: 3, fret: 7 }], duration: '8' }),\n            f.TabNote({\n                positions: [\n                    { str: 3, fret: 6 },\n                    { str: 4, fret: 7 },\n                    { str: 2, fret: 5 },\n                ],\n                duration: '4',\n            }),\n        ]);\n        f.Formatter().joinVoices([voice]).joinVoices([tabVoice]).format([voice, tabVoice], width);\n        y += 150;\n    }\n    justifyToWidth(0);\n    justifyToWidth(300);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction multiStaves(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 400);\n    const ctx = f.getContext();\n    const score = f.EasyScore();\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Draw 3 Staves (one measure each).\n    const notes11 = score.notes('f4/4, d4/8, g4/4, eb4/8');\n    const notes21 = score.notes('d4/8, d4, d4, d4, e4, eb4');\n    const notes31 = score.notes('a5/8, a5, a5, a5, a5, a5', { stem: 'down' });\n    let voices = [\n        score.voice(notes11, { time: '6/8' }),\n        score.voice(notes21, { time: '6/8' }),\n        score.voice(notes31, { time: '6/8' }),\n    ];\n    let formatter = f.Formatter();\n    voices.forEach((v) => formatter.joinVoices([v]));\n    let width = formatter.preCalculateMinTotalWidth(voices);\n    formatter.format(voices, width);\n    let beams = [\n        new Beam(notes21.slice(0, 3), true),\n        new Beam(notes21.slice(3, 6), true),\n        new Beam(notes31.slice(0, 3), true),\n        new Beam(notes31.slice(3, 6), true),\n    ];\n    const staveYs = [20, 130, 250];\n    let staveWidth = width + getGlyphWidth('\\uE050' /*gClef*/) + getGlyphWidth('\\uE088' /*timeSig8*/) + Stave.defaultPadding;\n    let staves = [\n        f.Stave({ y: staveYs[0], width: staveWidth }).addClef('treble').addTimeSignature('6/8'),\n        f.Stave({ y: staveYs[1], width: staveWidth }).addClef('treble').addTimeSignature('6/8'),\n        f.Stave({ y: staveYs[2], width: staveWidth }).addClef('bass').addTimeSignature('6/8'),\n    ];\n    f.StaveConnector({\n        topStave: staves[1],\n        bottomStave: staves[2],\n        type: 'brace',\n    });\n    for (let i = 0; i < staves.length; ++i) {\n        staves[i].setContext(ctx).draw();\n        voices[i].draw(ctx, staves[i]);\n    }\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Draw 3 more staves (one measure each).\n    // These are adjacent to the first set of staves, representing the second measure of each stave.\n    const notes12 = score.notes('ab4/4, bb4/8, (cb5 eb5)/4[stem=\"down\"], d5/8[stem=\"down\"]');\n    const notes22 = score.notes('(eb4 ab4)/4., (c4 eb4 ab4)/4, db5/8', { stem: 'up' });\n    const notes32 = score.notes('a5/8, a5, a5, a5, a5, a5', { stem: 'down' });\n    voices = [\n        score.voice(notes12, { time: '6/8' }),\n        score.voice(notes22, { time: '6/8' }),\n        score.voice(notes32, { time: '6/8' }),\n    ];\n    formatter = f.Formatter();\n    voices.forEach((v) => formatter.joinVoices([v]));\n    width = formatter.preCalculateMinTotalWidth(voices);\n    const staveX = staves[0].getX() + staves[0].getWidth();\n    staveWidth = width + Stave.defaultPadding;\n    staves = [\n        f.Stave({ x: staveX, y: staveYs[0], width: staveWidth }),\n        f.Stave({ x: staveX, y: staveYs[1], width: staveWidth }),\n        f.Stave({ x: staveX, y: staveYs[2], width: staveWidth }),\n    ];\n    formatter.format(voices, width);\n    beams = [\n        // Add beams to each group of 3 notes.\n        new Beam(notes32.slice(0, 3), true),\n        new Beam(notes32.slice(3, 6), true),\n    ];\n    for (let i = 0; i < staves.length; ++i) {\n        staves[i].setContext(ctx).draw();\n        voices[i].draw(ctx, staves[i]);\n        voices[i].getTickables().forEach((note) => Note.plotMetrics(ctx, note, staveYs[i] - 20));\n    }\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n    options.assert.ok(true);\n}\nfunction proportional(options) {\n    const debug = options.params.debug;\n    Registry.enableDefaultRegistry(new Registry());\n    const f = VexFlowTests.makeFactory(options, 775, 750);\n    const system = f.System({\n        x: 50,\n        autoWidth: true,\n        debugFormatter: debug,\n        noJustification: !(options.params.justify === undefined && true),\n        formatIterations: options.params.iterations,\n        details: { alpha: options.params.alpha },\n    });\n    const score = f.EasyScore();\n    const voices = [\n        score.notes('c5/8, c5'),\n        score.tuplet(score.notes('a4/8, a4, a4'), { notesOccupied: 2 }),\n        score.notes('c5/16, c5, c5, c5'),\n        score.tuplet(score.notes('a4/16, a4, a4, a4, a4'), { notesOccupied: 4 }),\n        score.tuplet(score.notes('a4/32, a4, a4, a4, a4, a4, a4'), { notesOccupied: 8 }),\n    ];\n    const createVoice = (notes) => score.voice(notes, { time: '1/4' });\n    const createStave = (voice) => system\n        .addStave({ voices: [voice], debugNoteMetrics: debug })\n        .addClef('treble')\n        .addTimeSignature('1/4');\n    voices.map(createVoice).forEach(createStave);\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    // Debugging: Show how many elements of each type we have added.\n    // const typeMap = Registry.getDefaultRegistry().index.type;\n    // const table = Object.keys(typeMap).map((typeName) => typeName + ': ' + Object.keys(typeMap[typeName]).length);\n    // console.log(table);\n    Registry.disableDefaultRegistry();\n    options.assert.ok(true);\n}\nfunction softMax(options) {\n    const f = VexFlowTests.makeFactory(options, 550, 500);\n    const textX = 450 / 0.8;\n    f.getContext().scale(0.8, 0.8);\n    function draw(y, factor) {\n        const score = f.EasyScore();\n        const system = f.System({\n            x: 100,\n            y,\n            details: { softmaxFactor: factor },\n            autoWidth: true,\n        });\n        system\n            .addStave({\n            voices: [\n                score.voice(score\n                    .notes('C#5/h, a4/q')\n                    .concat(score.beam(score.notes('Abb4/8, A4/8')))\n                    .concat(score.beam(score.notes('A4/16, A#4, A4, Ab4/32, A4'))), { time: '5/4' }),\n            ],\n        })\n            .addClef('treble')\n            .addTimeSignature('5/4');\n        f.draw();\n        f.getContext().fillText(`softmax: ${factor.toString()}`, textX, y + 50);\n        options.assert.ok(true);\n    }\n    draw(50, 1);\n    draw(150, 2);\n    draw(250, 5);\n    draw(350, 10);\n    draw(450, 15);\n}\nfunction mixTime(options) {\n    const f = VexFlowTests.makeFactory(options, 400 + Stave.defaultPadding, 250);\n    f.getContext().scale(0.8, 0.8);\n    const score = f.EasyScore();\n    const system = f.System({\n        details: {},\n        autoWidth: true,\n        debugFormatter: true,\n    });\n    system\n        .addStave({\n        voices: [score.voice(score.notes('C#5/q, B4').concat(score.beam(score.notes('A4/8, E4, C4, D4'))))],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    system\n        .addStave({\n        voices: [score.voice(score.notes('C#5/q, B4, B4').concat(score.tuplet(score.beam(score.notes('A4/8, E4, C4')))))],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    f.draw();\n    options.assert.ok(true);\n}\nfunction tightNotes1(options) {\n    const f = VexFlowTests.makeFactory(options, 440, 250);\n    f.getContext().scale(0.8, 0.8);\n    const score = f.EasyScore();\n    const system = f.System({\n        autoWidth: true,\n        debugFormatter: true,\n        details: { maxIterations: 10 },\n    });\n    system\n        .addStave({\n        voices: [\n            score.voice(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')).concat(score.notes('B4/q, B4'))),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    system\n        .addStave({\n        voices: [\n            score.voice(score.notes('B4/q, B4').concat(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')))),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    f.draw();\n    options.assert.ok(true);\n}\nfunction tightNotes2(options) {\n    const f = VexFlowTests.makeFactory(options, 440, 250);\n    f.getContext().scale(0.8, 0.8);\n    const score = f.EasyScore();\n    const system = f.System({\n        autoWidth: true,\n        debugFormatter: true,\n    });\n    system\n        .addStave({\n        voices: [\n            score.voice(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')).concat(score.notes('B4/q, B4'))),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    system\n        .addStave({\n        voices: [score.voice(score.notes('B4/w'))],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    f.draw();\n    options.assert.ok(true);\n}\nfunction annotations(options) {\n    const pageWidth = 916;\n    const pageHeight = 600;\n    const f = VexFlowTests.makeFactory(options, pageWidth, pageHeight);\n    const context = f.getContext();\n    const lyrics1 = ['ipso', 'ipso-', 'ipso', 'ipso', 'ipsoz', 'ipso-', 'ipso', 'ipso', 'ipso', 'ip', 'ipso'];\n    const lyrics2 = ['ipso', 'ipso-', 'ipsoz', 'ipso', 'ipso', 'ipso-', 'ipso', 'ipso', 'ipso', 'ip', 'ipso'];\n    const smar = [\n        {\n            sm: 5,\n            width: 550,\n            lyrics: lyrics1,\n            title: '550px,softMax:5',\n        },\n        {\n            sm: 5,\n            width: 550,\n            lyrics: lyrics2,\n            title: '550px,softmax:5,different word order',\n        },\n        {\n            sm: 10,\n            width: 550,\n            lyrics: lyrics2,\n            title: '550px,softmax:10',\n        },\n        {\n            sm: 15,\n            width: 550,\n            lyrics: lyrics2,\n            title: '550px,softmax:15',\n        },\n    ];\n    const rowSize = 140;\n    const beats = 12;\n    const beatsPer = 8;\n    const beamGroup = 3;\n    const durations = ['8d', '16', '8', '8d', '16', '8', '8d', '16', '8', '4', '8'];\n    const beams = [];\n    let y = 40;\n    smar.forEach((sm) => {\n        const stave = new Stave(10, y, sm.width);\n        const notes = [];\n        let iii = 0;\n        context.fillText(sm.title, 100, y);\n        y += rowSize;\n        durations.forEach((dd) => {\n            const note = new StaveNote({ keys: ['b/4'], duration: dd });\n            if (dd.indexOf('d') >= 0) {\n                Dot.buildAndAttach([note], { all: true });\n            }\n            if (sm.lyrics.length > iii) {\n                note.addModifier(new Annotation(sm.lyrics[iii])\n                    .setVerticalJustification(Annotation.VerticalJustify.BOTTOM)\n                    .setFont(Font.SERIF, 12, FontWeight.NORMAL));\n            }\n            notes.push(note);\n            iii += 1;\n        });\n        notes.forEach((note) => {\n            if (note.getDuration().indexOf('d') >= 0) {\n                Dot.buildAndAttach([note], { all: true });\n            }\n        });\n        // Don't beam the last group\n        let notesToBeam = [];\n        notes.forEach((note) => {\n            if (note.getIntrinsicTicks() < 4096) {\n                notesToBeam.push(note);\n                if (notesToBeam.length >= beamGroup) {\n                    beams.push(new Beam(notesToBeam));\n                    notesToBeam = [];\n                }\n            }\n            else {\n                notesToBeam = [];\n            }\n        });\n        const voice1 = new Voice({ numBeats: beats, beatValue: beatsPer }).setMode(Voice.Mode.SOFT).addTickables(notes);\n        const fmt = new Formatter({ softmaxFactor: sm.sm, maxIterations: 2 }).joinVoices([voice1]);\n        fmt.format([voice1], sm.width - 11);\n        stave.setContext(context).draw();\n        voice1.draw(context, stave);\n        beams.forEach((b) => b.setContext(context).draw());\n    });\n    options.assert.ok(true);\n}\nVexFlowTests.register(FormatterTests);\nexport { FormatterTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Fraction Tests\n/* eslint-disable camelcase */\n// Allow underscores in this file for representing fractional values inside variable names.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Fraction } from '../src/fraction';\nconst FractionTests = {\n    Start() {\n        QUnit.module('Fraction');\n        QUnit.test('Basic', basic);\n        QUnit.test('With Other Fractions', withOtherFractions);\n    },\n};\nfunction basic(assert) {\n    const f_1_2 = new Fraction(1, 2);\n    assert.ok(f_1_2.equals(0.5), 'Fraction: 1/2 equals 0.5');\n    assert.ok(f_1_2.equals(new Fraction(1, 2)), 'Fraction: 1/2 equals 1/2');\n    assert.ok(f_1_2.equals(new Fraction(2, 4)), 'Fraction: 1/2 equals 2/4');\n    assert.notOk(f_1_2.greaterThan(1), 'Fraction: ! 1/2 > 1');\n    assert.ok(f_1_2.greaterThan(0.2), 'Fraction: 1/2 > 0.2');\n    assert.ok(f_1_2.greaterThanEquals(0.2), 'Fraction: 1/2 >= 0.2');\n    assert.ok(f_1_2.greaterThanEquals(0.5), 'Fraction: 1/2 >= 0.5');\n    assert.notOk(f_1_2.greaterThanEquals(1), 'Fraction: ! 1/2 >= 1');\n    assert.notOk(f_1_2.lessThan(0.5), 'Fraction: ! 1/2 < 0.5');\n    assert.ok(f_1_2.lessThan(1), 'Fraction: 1/2 < 1');\n    assert.ok(f_1_2.lessThanEquals(0.6), 'Fraction: 1/2 <= 0.6');\n    assert.ok(f_1_2.lessThanEquals(0.5), 'Fraction: 1/2 <= 0.5');\n    assert.notOk(f_1_2.lessThanEquals(0.4), 'Fraction: ! 1/2 <= 0.4');\n    const f_0p5 = f_1_2.copy(0.5);\n    assert.strictEqual(f_0p5, f_1_2, 'Fraction: f_0p5 === f_1_2');\n    assert.strictEqual(f_0p5.toString(), '0.5/1', 'Fraction: f_0p5.toString() === \"0.5/1\"');\n    assert.strictEqual(f_0p5.toSimplifiedString(), '1/2', 'Fraction: f_0p5.toSimplifiedString() === \"1/2\"');\n    const tempFraction = f_0p5.clone();\n    assert.notStrictEqual(tempFraction, f_0p5, 'Fraction: tempFraction !== f_0p5');\n    assert.notEqual(tempFraction, f_0p5, 'Fraction: tempFraction != f_0p5');\n    assert.deepEqual(tempFraction, f_0p5, 'tempFraction deepEqual f_0p5');\n    assert.notDeepEqual(tempFraction, {}, 'tempFraction notDeepEqual {}');\n    tempFraction.subtract(-0.5);\n    assert.ok(tempFraction.equals(1), 'Fraction: 0.5 -(-0.5) equals 1');\n    tempFraction.add(1);\n    assert.ok(tempFraction.equals(2), 'Fraction: 1 + 1 equals 2');\n    tempFraction.multiply(2);\n    assert.ok(tempFraction.equals(4), 'Fraction: 2 * 2 equals 4');\n    tempFraction.divide(2);\n    assert.ok(tempFraction.equals(2), 'Fraction: 4 / 2 equals 2');\n    // Lowest common multiple.\n    assert.equal(Fraction.LCMM([]), 0);\n    assert.equal(Fraction.LCMM([17]), 17);\n    assert.equal(Fraction.LCMM([2, 5]), 10);\n    assert.equal(Fraction.LCMM([15, 3, 5]), 15);\n    assert.equal(Fraction.LCMM([2, 4, 6]), 12);\n    assert.equal(Fraction.LCMM([2, 3, 4, 5]), 60);\n    assert.equal(Fraction.LCMM([12, 15, 10, 75]), 300);\n    // Greatest common divisor.\n    assert.equal(Fraction.GCD(0, 0), 0);\n    assert.equal(Fraction.GCD(0, 99), 99);\n    assert.equal(Fraction.GCD(77, 0), 77);\n    assert.equal(Fraction.GCD(42, 14), 14);\n    assert.equal(Fraction.GCD(15, 10), 5);\n}\nfunction withOtherFractions(assert) {\n    const f_1_2 = new Fraction(1, 2);\n    const f_1_4 = new Fraction(1, 4);\n    const f_1_8 = new Fraction(1, 8);\n    const f_2 = new Fraction(2, 1);\n    // IMPORTANT NOTE: Fraction methods modify the existing Fraction object.\n    // They do not return new objects.\n    // Use clone() if you don't want to modify the original object.\n    const a = f_1_2.clone().multiply(f_1_2);\n    assert.ok(a.equals(f_1_4), '1/2 x 1/2 === 1/4');\n    const b = f_1_2.clone().divide(f_1_4);\n    assert.ok(b.equals(f_2), '1/2 / 1/4 === 2');\n    const c = f_2.clone().subtract(f_1_2).subtract(f_1_2).subtract(f_1_4); // 3/4\n    const d = f_1_8.clone().add(f_1_8).add(f_1_8).multiply(f_2);\n    assert.ok(c.equals(d), '2-1/2-1/2-1/4 === (1/8+1/8+1/8)*(2/1)');\n    assert.equal(c.value(), 0.75, '3/4 === 0.75');\n    const e = f_1_8.clone().add(f_1_4).add(f_1_8);\n    assert.ok(e.equals(f_1_2), '1/8 + 1/4 + 1/8 === 1/2');\n}\nVexFlowTests.register(FractionTests);\nexport { FractionTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// GhostNote Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nconst GhostNoteTests = {\n    Start() {\n        QUnit.module('GhostNote');\n        const run = VexFlowTests.runTests;\n        run('GhostNote Basic', basic);\n        run('GhostNote Dotted', dotted);\n    },\n};\n/**\n * Helper function to set up the stave, easyscore, voice, and to format & draw.\n */\nfunction createTest(addItems) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options, 550);\n        const stave = factory.Stave();\n        const score = factory.EasyScore();\n        addItems(factory, score);\n        const voices = factory.getVoices();\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\n        factory.draw();\n        options.assert.ok(true, 'all pass');\n    };\n}\nconst basic = createTest((f, score) => {\n    // Top Voice\n    const voiceTop = score.voice(score.notes('f#5/4, f5, db5, c5, c5/8, d5, fn5, e5, d5, c5', { stem: 'up' }), {\n        time: '7/4',\n    });\n    const notesTop = voiceTop.getTickables();\n    f.Beam({ notes: notesTop.slice(4, 8) });\n    f.Beam({ notes: notesTop.slice(8, 10) });\n    // Bottom Voice\n    score.voice([\n        f.GhostNote({ duration: '2' }),\n        f.StaveNote({ keys: ['f/4'], stemDirection: -1, duration: '4' }),\n        f.GhostNote({ duration: '4' }),\n        f.StaveNote({ keys: ['e/4'], stemDirection: -1, duration: '4' }),\n        f.GhostNote({ duration: '8' }),\n        f.StaveNote({ keys: ['d/4'], stemDirection: -1, duration: '8' }).addModifier(f.Accidental({ type: '##' }), 0),\n        f.StaveNote({ keys: ['c/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4'], stemDirection: -1, duration: '8' }),\n    ], { time: '7/4' });\n});\n/**\n * A ghost note is invisible, but takes up space on the stave corresponding to its duration.\n * '4d' is a dotted quarter note, equivalent to a quarter + eighth note.\n */\nconst dotted = createTest((f, score) => {\n    const voice1 = score.voice([\n        f.GhostNote({ duration: '4d' }),\n        f.StaveNote({ duration: '8', keys: ['f/5'], stemDirection: 1 }),\n        f.StaveNote({ duration: '4', keys: ['d/5'], stemDirection: 1 }),\n        f.StaveNote({ duration: '8', keys: ['c/5'], stemDirection: 1 }),\n        f.StaveNote({ duration: '16', keys: ['c/5'], stemDirection: 1 }),\n        f.StaveNote({ duration: '16', keys: ['d/5'], stemDirection: 1 }),\n        f.GhostNote({ duration: '2dd' }),\n        f.StaveNote({ duration: '8', keys: ['f/5'], stemDirection: 1 }),\n    ], { time: '8/4' });\n    const voice2 = score.voice([\n        f.StaveNote({ duration: '4', keys: ['f/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '8', keys: ['e/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '8', keys: ['d/4'], stemDirection: -1 }),\n        f.GhostNote({ duration: '4dd' }),\n        f.StaveNote({ duration: '16', keys: ['c/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '2', keys: ['c/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '4', keys: ['d/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '8', keys: ['f/4'], stemDirection: -1 }),\n        f.StaveNote({ duration: '8', keys: ['e/4'], stemDirection: -1 }),\n    ], { time: '8/4' });\n    const notes1 = voice1.getTickables();\n    const notes2 = voice2.getTickables();\n    const addAccidental = (note, type) => note.addModifier(f.Accidental({ type }), 0);\n    addAccidental(notes1[1], 'bb');\n    addAccidental(notes1[4], '#');\n    addAccidental(notes1[7], 'n');\n    addAccidental(notes2[0], '#');\n    addAccidental(notes2[4], 'b');\n    addAccidental(notes2[5], '#');\n    addAccidental(notes2[7], 'n');\n    f.Beam({ notes: notes1.slice(3, 6) });\n    f.Beam({ notes: notes2.slice(1, 3) });\n    f.Beam({ notes: notes2.slice(7, 9) });\n});\nVexFlowTests.register(GhostNoteTests);\nexport { GhostNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// GlyphNote Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { ChordSymbol } from '../src/chordsymbol';\nimport { Registry } from '../src/registry';\nimport { StaveConnector } from '../src/staveconnector';\nconst GlyphNoteTests = {\n    Start() {\n        QUnit.module('GlyphNote');\n        const run = VexFlowTests.runTests;\n        run('GlyphNote with ChordSymbols', chordChanges, { debug: false, noPadding: false });\n        run('GlyphNote Positioning', basic, { debug: false, noPadding: false });\n        run('GlyphNote No Stave Padding', basic, { debug: true, noPadding: true });\n        run('GlyphNote RepeatNote', repeatNote, { debug: false, noPadding: true });\n    },\n};\nfunction chordChanges(options) {\n    Registry.enableDefaultRegistry(new Registry());\n    const f = VexFlowTests.makeFactory(options, 300, 200);\n    const system = f.System({\n        x: 50,\n        width: 250,\n        debugFormatter: options.params.debug,\n        noPadding: options.params.noPadding,\n        details: { alpha: options.params.alpha },\n    });\n    const score = f.EasyScore();\n    const notes = [\n        f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: 'q' }),\n        f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: 'q' }),\n        f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: 'q' }),\n        f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: 'q' }),\n    ];\n    const chord1 = f\n        .ChordSymbol()\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('(#11b9)', { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT });\n    const chord2 = f\n        .ChordSymbol()\n        .addText('F7')\n        .setHorizontal('left')\n        .addGlyphOrText('#11', { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT })\n        .addGlyphOrText('b9', { symbolModifier: ChordSymbol.symbolModifiers.SUBSCRIPT });\n    notes[0].addModifier(chord1, 0);\n    notes[2].addModifier(chord2, 0);\n    const voice = score.voice(notes);\n    system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    Registry.disableDefaultRegistry();\n    options.assert.ok(true);\n}\nfunction basic(options) {\n    Registry.enableDefaultRegistry(new Registry());\n    const f = VexFlowTests.makeFactory(options, 300, 400);\n    const system = f.System({\n        x: 50,\n        width: 250,\n        debugFormatter: options.params.debug,\n        noPadding: options.params.noPadding,\n        details: { alpha: options.params.alpha },\n    });\n    const score = f.EasyScore();\n    const newVoice = (notes) => score.voice(notes, { time: '1/4' });\n    const newStave = (voice) => system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\n    const voices = [\n        [f.GlyphNote('\\uE500' /*repeat1Bar*/, { duration: 'q' }, { line: 4 })],\n        [f.GlyphNote('\\uE501' /*repeat2Bars*/, { duration: 'q', alignCenter: true })],\n        [\n            f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: '16' }),\n            f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: '16' }),\n            f.GlyphNote('\\uE502' /*repeat4Bars*/, { duration: '16' }),\n            f.GlyphNote('\\uE504' /*repeatBarSlash*/, { duration: '16' }),\n        ],\n    ];\n    voices.map(newVoice).forEach(newStave);\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    Registry.disableDefaultRegistry();\n    options.assert.ok(true);\n}\nfunction repeatNote(options) {\n    Registry.enableDefaultRegistry(new Registry());\n    const f = VexFlowTests.makeFactory(options, 300, 500);\n    const system = f.System({\n        x: 50,\n        width: 250,\n        debugFormatter: options.params.debug,\n        noPadding: options.params.noPadding,\n        details: { alpha: options.params.alpha },\n    });\n    const score = f.EasyScore();\n    const createVoice = (notes) => score.voice(notes, { time: '1/4' });\n    const addStaveWithVoice = (voice) => system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\n    const voices = [\n        [f.RepeatNote('1')],\n        [f.RepeatNote('2')],\n        [f.RepeatNote('4')],\n        [\n            f.RepeatNote('slash', { duration: '16' }),\n            f.RepeatNote('slash', { duration: '16' }),\n            f.RepeatNote('slash', { duration: '16' }),\n            f.RepeatNote('slash', { duration: '16' }),\n        ],\n    ];\n    voices.map(createVoice).forEach(addStaveWithVoice);\n    system.addConnector().setType(StaveConnector.type.BRACKET);\n    f.draw();\n    Registry.disableDefaultRegistry();\n    options.assert.ok(true);\n}\nVexFlowTests.register(GlyphNoteTests);\nexport { GlyphNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// GraceNote Tests\n// TODO: In the 'stem' test (aka Grace Note Stem › SVG + Petaluma in flow.html), the Petaluma note heads are not scaled down properly.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Annotation } from '../src/annotation';\nimport { Articulation } from '../src/articulation';\nimport { Dot } from '../src/dot';\nimport { Formatter } from '../src/formatter';\nconst GraceNoteTests = {\n    Start() {\n        QUnit.module('Grace Notes');\n        const run = VexFlowTests.runTests;\n        run('Grace Note Basic', basic);\n        run('With Articulation and Annotation on Parent Note', graceNoteModifiers);\n        run('Grace Note Basic with Slurs', basicSlurred);\n        run('Grace Note Stem', stem);\n        run('Grace Note Stem with Beams 1', stemWithBeamed, {\n            keys1: ['g/4'],\n            stemDirection1: 1,\n            keys2: ['d/5'],\n            stemDirection2: -1,\n        });\n        run('Grace Note Stem with Beams 2', stemWithBeamed, {\n            keys1: ['a/3'],\n            stemDirection1: 1,\n            keys2: ['a/5'],\n            stemDirection2: -1,\n        });\n        run('Grace Note Stem with Beams 3', stemWithBeamed, {\n            keys1: ['c/4'],\n            stemDirection1: 1,\n            keys2: ['c/6'],\n            stemDirection2: -1,\n        });\n        run('Grace Note Slash', slash);\n        run('Grace Note Slash with Beams', slashWithBeams);\n        run('Grace Notes Multiple Voices', multipleVoices);\n        run('Grace Notes Multiple Voices Multiple Draws', multipleVoicesMultipleDraws);\n    },\n};\nfunction basic(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    const gracenotes = [\n        { keys: ['e/4'], duration: '32' },\n        { keys: ['f/4'], duration: '32' },\n        { keys: ['g/4'], duration: '32' },\n        { keys: ['a/4'], duration: '32' },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes1 = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\n    const gracenotes2 = [{ keys: ['b/4'], duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes3 = [\n        { keys: ['e/4'], duration: '8' },\n        { keys: ['f/4'], duration: '16' },\n        { keys: ['e/4', 'g/4'], duration: '8' },\n        { keys: ['a/4'], duration: '32' },\n        { keys: ['b/4'], duration: '32' },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes4 = [\n        { keys: ['g/4'], duration: '8' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['g/4'], duration: '16' },\n    ].map(f.GraceNote.bind(f));\n    gracenotes[1].addModifier(f.Accidental({ type: '##' }), 0);\n    gracenotes3[3].addModifier(f.Accidental({ type: 'bb' }), 0);\n    Dot.buildAndAttach([gracenotes4[0]], { all: true });\n    const notes = [\n        f\n            .StaveNote({ keys: ['b/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.Accidental({ type: '#' }), 0)\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes1 }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['c/5', 'd/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['a/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['a/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0),\n    ];\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteBasic');\n}\nfunction graceNoteModifiers(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    const gracenotes = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\n            .addModifier(new Articulation('a-').setPosition(3), 0),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\n            .addModifier(new Articulation('a-').setPosition(3), 0)\n            .addModifier(new Accidental('#')),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\n            .addModifier(new Articulation('a-').setPosition(3), 0)\n            .addModifier(new Annotation('words')),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\n            .addModifier(new Articulation('a-').setPosition(3), 0)\n            .addModifier(new Articulation('a>').setPosition(3), 0),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\n            .addModifier(new Articulation('a-').setPosition(3), 0)\n            .addModifier(new Articulation('a>').setPosition(3), 0)\n            .addModifier(new Articulation('a@a').setPosition(3), 0),\n    ];\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteModifiers');\n}\nfunction basicSlurred(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    const gracenotes0 = [\n        { keys: ['e/4'], duration: '32' },\n        { keys: ['f/4'], duration: '32' },\n        { keys: ['g/4'], duration: '32' },\n        { keys: ['a/4'], duration: '32' },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes1 = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\n    const gracenotes2 = [{ keys: ['b/4'], duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes3 = [\n        { keys: ['e/4'], duration: '8' },\n        { keys: ['f/4'], duration: '16' },\n        { keys: ['e/4', 'g/4'], duration: '8' },\n        { keys: ['a/4'], duration: '32' },\n        { keys: ['b/4'], duration: '32' },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes4 = [\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n    ].map(f.GraceNote.bind(f));\n    gracenotes0[1].addModifier(f.Accidental({ type: '#' }), 0);\n    gracenotes3[3].addModifier(f.Accidental({ type: 'b' }), 0);\n    gracenotes3[2].addModifier(f.Accidental({ type: 'n' }), 0);\n    Dot.buildAndAttach([gracenotes4[0]], { all: true });\n    const notes = [\n        f\n            .StaveNote({ keys: ['b/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes0, slur: true }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', autoStem: true })\n            .addModifier(f.Accidental({ type: '#' }), 0)\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes1, slur: true }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['c/5', 'd/5'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes2, slur: true }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['a/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes3, slur: true }).beamNotes(), 0),\n        f\n            .StaveNote({ keys: ['a/4'], duration: '4', autoStem: true })\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes4, slur: true }).beamNotes(), 0),\n        f.StaveNote({ keys: ['a/4'], duration: '4', autoStem: true }),\n    ];\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteBasic');\n}\n/**\n * Helper function for three tests below: stem, stemWithBeamed, slash.\n */\nconst createNoteForStemTest = (duration, noteBuilder, keys, stemDirection, slash = false) => {\n    const struct = { duration, slash };\n    struct.stemDirection = stemDirection;\n    struct.keys = keys;\n    return noteBuilder(struct);\n};\n// Used in three tests below.\nconst durationsForStemTest = ['8', '16', '32', '64', '128'];\nfunction stem(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    function createNotes(noteBuilder, keys, stemDirection) {\n        return durationsForStemTest.map((duration) => createNoteForStemTest(duration, noteBuilder, keys, stemDirection));\n    }\n    function createNoteBlock(keys, stemDirection) {\n        const staveNotes = createNotes(f.StaveNote.bind(f), keys, stemDirection);\n        const gracenotes = createNotes(f.GraceNote.bind(f), keys, stemDirection);\n        // Add a bunch of GraceNotes in front of the first StaveNote.\n        staveNotes[0].addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0);\n        return staveNotes;\n    }\n    const voice = f.Voice().setStrict(false);\n    voice.addTickables(createNoteBlock(['g/4'], 1));\n    voice.addTickables(createNoteBlock(['d/5'], -1));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteStem');\n}\nfunction stemWithBeamed(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    function createBeamedNotes(noteBuilder, keys, stemDirection, beams, isGrace = false, notesToBeam) {\n        const ret = [];\n        durationsForStemTest.map((duration) => {\n            const n0 = createNoteForStemTest(duration, noteBuilder, keys, stemDirection);\n            const n1 = createNoteForStemTest(duration, noteBuilder, keys, stemDirection);\n            ret.push(n0);\n            ret.push(n1);\n            if (notesToBeam) {\n                notesToBeam.push([n0, n1]);\n            }\n            if (!isGrace) {\n                beams.push(f.Beam({ notes: [n0, n1] }));\n            }\n        });\n        return ret;\n    }\n    function createBeamedNoteBlock(keys, stemDirection, beams) {\n        const bnotes = createBeamedNotes(f.StaveNote.bind(f), keys, stemDirection, beams);\n        const notesToBeam = [];\n        const gracenotes = createBeamedNotes(f.GraceNote.bind(f), keys, stemDirection, beams, true, notesToBeam);\n        const graceNoteGroup = f.GraceNoteGroup({ notes: gracenotes });\n        notesToBeam.map(graceNoteGroup.beamNotes.bind(graceNoteGroup));\n        bnotes[0].addModifier(graceNoteGroup, 0);\n        return bnotes;\n    }\n    const beams = [];\n    const voice = f.Voice().setStrict(false);\n    voice.addTickables(createBeamedNoteBlock(options.params.keys1, options.params.stemDirection1, beams));\n    voice.addTickables(createBeamedNoteBlock(options.params.keys2, options.params.stemDirection2, beams));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteStem');\n}\nfunction slash(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\n    function createNotes(noteT, keys, stemDirection, slash) {\n        return durationsForStemTest.map((d) => createNoteForStemTest(d, noteT, keys, stemDirection, slash));\n    }\n    function createNoteBlock(keys, stemDirection) {\n        const notes = [f.StaveNote({ keys: ['f/4'], stemDirection, duration: '16' })];\n        let graceNotes = createNotes(f.GraceNote.bind(f), keys, stemDirection, true);\n        const duration = '8';\n        const gns = [\n            { keys: ['d/4', 'a/4'], stemDirection, duration, slash: true },\n            { keys: ['d/4', 'a/4'], stemDirection, duration, slash: true },\n            { keys: ['d/4', 'a/4'], stemDirection, duration, slash: true },\n            { keys: ['e/4', 'a/4'], stemDirection, duration, slash: true },\n            { keys: ['e/4', 'a/4'], stemDirection, duration, slash: true },\n            { keys: ['b/4', 'f/5'], stemDirection, duration, slash: true },\n            { keys: ['b/4', 'f/5'], stemDirection, duration, slash: true },\n            { keys: ['b/4', 'f/5'], stemDirection, duration, slash: true },\n            { keys: ['e/4', 'a/4'], stemDirection, duration, slash: true },\n        ].map(f.GraceNote.bind(f));\n        const notesToBeam = [];\n        notesToBeam.push([gns[0], gns[1], gns[2]]);\n        notesToBeam.push([gns[3], gns[4], gns[5]]);\n        notesToBeam.push([gns[6], gns[7], gns[8]]);\n        // Merge the two GraceNote[].\n        graceNotes = graceNotes.concat(gns);\n        const graceNoteGroup = f.GraceNoteGroup({ notes: graceNotes });\n        notesToBeam.forEach((notes) => graceNoteGroup.beamNotes(notes));\n        notes[0].addModifier(graceNoteGroup, 0);\n        return notes;\n    }\n    const voice = f.Voice().setStrict(false);\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], 1));\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], -1));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteSlash');\n}\nfunction slashWithBeams(options) {\n    const f = VexFlowTests.makeFactory(options, 800, 130);\n    const stave = f.Stave({ x: 10, y: 10, width: 750 });\n    function createNoteBlock(keys, stemDirection) {\n        const notes = [f.StaveNote({ keys: ['f/4'], stemDirection, duration: '16' })];\n        let allGraceNotes = [];\n        const graceNotesToBeam = [];\n        ['8', '16', '32', '64'].forEach(function (duration) {\n            const graceNotes = [\n                { keys: ['d/4', 'a/4'], stemDirection, duration, slash: true },\n                { keys: ['d/4', 'a/4'], stemDirection, duration, slash: false },\n                { keys: ['e/4', 'a/4'], stemDirection, duration, slash: true },\n                { keys: ['b/4', 'f/5'], stemDirection, duration, slash: false },\n                { keys: ['b/4', 'f/5'], stemDirection, duration, slash: true },\n                { keys: ['e/4', 'a/4'], stemDirection, duration, slash: false },\n            ].map(f.GraceNote.bind(f));\n            graceNotesToBeam.push([graceNotes[0], graceNotes[1]]);\n            graceNotesToBeam.push([graceNotes[2], graceNotes[3]]);\n            graceNotesToBeam.push([graceNotes[4], graceNotes[5]]);\n            allGraceNotes = allGraceNotes.concat(graceNotes);\n        });\n        const graceNoteGroup = f.GraceNoteGroup({ notes: allGraceNotes });\n        graceNotesToBeam.forEach((g) => graceNoteGroup.beamNotes(g));\n        notes[0].addModifier(graceNoteGroup, 0);\n        return notes;\n    }\n    const voice = f.Voice().setStrict(false);\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], 1));\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], -1));\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'GraceNoteSlashWithBeams');\n}\nfunction multipleVoices(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 140);\n    const stave = f.Stave({ x: 10, y: 10, width: 450 });\n    const notes = [\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['d/5'], stemDirection: 1, duration: '16' },\n        { keys: ['c/5'], stemDirection: 1, duration: '16' },\n        { keys: ['c/5'], stemDirection: 1, duration: '16' },\n        { keys: ['d/5'], stemDirection: 1, duration: '16' },\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['e/5'], stemDirection: 1, duration: '16' },\n    ].map(f.StaveNote.bind(f));\n    const notes2 = [\n        { keys: ['f/4'], stemDirection: -1, duration: '16' },\n        { keys: ['e/4'], stemDirection: -1, duration: '16' },\n        { keys: ['d/4'], stemDirection: -1, duration: '16' },\n        { keys: ['c/4'], stemDirection: -1, duration: '16' },\n        { keys: ['c/4'], stemDirection: -1, duration: '16' },\n        { keys: ['d/4'], stemDirection: -1, duration: '16' },\n        { keys: ['f/4'], stemDirection: -1, duration: '16' },\n        { keys: ['e/4'], stemDirection: -1, duration: '16' },\n    ].map(f.StaveNote.bind(f));\n    const gracenotes1 = [{ keys: ['b/4'], stemDirection: 1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes2 = [{ keys: ['f/4'], stemDirection: -1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes3 = [\n        { keys: ['f/4'], duration: '32', stemDirection: -1 },\n        { keys: ['e/4'], duration: '32', stemDirection: -1 },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes4 = [\n        { keys: ['f/5'], duration: '32', stemDirection: 1 },\n        { keys: ['e/5'], duration: '32', stemDirection: 1 },\n        { keys: ['e/5'], duration: '8', stemDirection: 1 },\n    ].map(f.GraceNote.bind(f));\n    gracenotes2[0].setStemDirection(-1);\n    gracenotes2[0].addModifier(f.Accidental({ type: '#' }), 0);\n    notes[1].addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0);\n    notes[3].addModifier(f.GraceNoteGroup({ notes: gracenotes1 }), 0);\n    notes2[1].addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0);\n    notes2[5].addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0);\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    const voice2 = f.Voice().setStrict(false).addTickables(notes2);\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 8) });\n    f.Beam({ notes: notes2.slice(0, 4) });\n    f.Beam({ notes: notes2.slice(4, 8) });\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\n    f.draw();\n    options.assert.ok(true, 'Sixteenth Test');\n}\nfunction multipleVoicesMultipleDraws(options) {\n    const f = VexFlowTests.makeFactory(options, 450, 140);\n    const stave = f.Stave({ x: 10, y: 10, width: 450 });\n    const notes = [\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['d/5'], stemDirection: 1, duration: '16' },\n        { keys: ['c/5'], stemDirection: 1, duration: '16' },\n        { keys: ['c/5'], stemDirection: 1, duration: '16' },\n        { keys: ['d/5'], stemDirection: 1, duration: '16' },\n        { keys: ['f/5'], stemDirection: 1, duration: '16' },\n        { keys: ['e/5'], stemDirection: 1, duration: '16' },\n    ].map(f.StaveNote.bind(f));\n    const notes2 = [\n        { keys: ['f/4'], stemDirection: -1, duration: '16' },\n        { keys: ['e/4'], stemDirection: -1, duration: '16' },\n        { keys: ['d/4'], stemDirection: -1, duration: '16' },\n        { keys: ['c/4'], stemDirection: -1, duration: '16' },\n        { keys: ['c/4'], stemDirection: -1, duration: '16' },\n        { keys: ['d/4'], stemDirection: -1, duration: '16' },\n        { keys: ['f/4'], stemDirection: -1, duration: '16' },\n        { keys: ['e/4'], stemDirection: -1, duration: '16' },\n    ].map(f.StaveNote.bind(f));\n    const gracenotes1 = [{ keys: ['b/4'], stemDirection: 1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes2 = [{ keys: ['f/4'], stemDirection: -1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\n    const gracenotes3 = [\n        { keys: ['f/4'], duration: '32', stemDirection: -1 },\n        { keys: ['e/4'], duration: '32', stemDirection: -1 },\n    ].map(f.GraceNote.bind(f));\n    const gracenotes4 = [\n        { keys: ['f/5'], duration: '32', stemDirection: 1 },\n        { keys: ['e/5'], duration: '32', stemDirection: 1 },\n        { keys: ['e/5'], duration: '8', stemDirection: 1 },\n    ].map(f.GraceNote.bind(f));\n    gracenotes2[0].setStemDirection(-1);\n    gracenotes2[0].addModifier(f.Accidental({ type: '#' }), 0);\n    notes[1].addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0);\n    notes[3].addModifier(f.GraceNoteGroup({ notes: gracenotes1 }), 0);\n    notes2[1].addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0);\n    notes2[5].addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0);\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    const voice2 = f.Voice().setStrict(false).addTickables(notes2);\n    f.Beam({ notes: notes.slice(0, 4) });\n    f.Beam({ notes: notes.slice(4, 8) });\n    f.Beam({ notes: notes2.slice(0, 4) });\n    f.Beam({ notes: notes2.slice(4, 8) });\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\n    f.draw();\n    f.draw();\n    options.assert.ok(true, 'Seventeenth Test');\n}\nVexFlowTests.register(GraceNoteTests);\nexport { GraceNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// GraceTabNote Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { GraceNoteGroup } from '../src/gracenotegroup';\nimport { GraceTabNote } from '../src/gracetabnote';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { Voice } from '../src/voice';\nconst GraceTabNoteTests = {\n    Start() {\n        QUnit.module('Grace Tab Notes');\n        // TODO: Rename tests below since it is redundant with the module name.\n        // Remove \"Grace Tab Note \"\n        const run = VexFlowTests.runTests;\n        run('Grace Tab Note Simple', simple);\n        run('Grace Tab Note Slurred', slurred);\n    },\n};\n// Helper functions to create TabNote and GraceTabNote objects.\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\nconst graceTabNote = (noteStruct) => new GraceTabNote(noteStruct);\n/**\n * Helper function to build a RenderContext and TabStave.\n */\nfunction setupContext(opts, ctxBuilder) {\n    const context = ctxBuilder(opts.elementId, 350, 140);\n    const stave = new TabStave(10, 10, 350).addTabGlyph().setContext(context).draw();\n    return { context, stave };\n}\nfunction simple(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder);\n    const note0 = tabNote({ positions: [{ str: 4, fret: 6 }], duration: '4' });\n    const note1 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: '4' });\n    const note2 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: '4' });\n    const note3 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: '4' });\n    const gracenoteGroup0 = [{ positions: [{ str: 4, fret: 'x' }], duration: '8' }];\n    const gracenoteGroup1 = [\n        { positions: [{ str: 4, fret: 9 }], duration: '16' },\n        { positions: [{ str: 4, fret: 10 }], duration: '16' },\n    ];\n    const gracenoteGroup2 = [{ positions: [{ str: 4, fret: 9 }], duration: '8' }];\n    const gracenoteGroup3 = [\n        { positions: [{ str: 5, fret: 10 }], duration: '8' },\n        { positions: [{ str: 4, fret: 9 }], duration: '8' },\n    ];\n    const gracenotes0 = gracenoteGroup0.map(graceTabNote);\n    const gracenotes1 = gracenoteGroup1.map(graceTabNote);\n    const gracenotes2 = gracenoteGroup2.map(graceTabNote);\n    gracenotes2[0].setGhost(true);\n    const gracenotes3 = gracenoteGroup3.map(graceTabNote);\n    note0.addModifier(new GraceNoteGroup(gracenotes0), 0);\n    note1.addModifier(new GraceNoteGroup(gracenotes1), 0);\n    note2.addModifier(new GraceNoteGroup(gracenotes2), 0);\n    note3.addModifier(new GraceNoteGroup(gracenotes3), 0);\n    const voice = new Voice(Flow.TIME4_4);\n    voice.addTickables([note0, note1, note2, note3]);\n    new Formatter().joinVoices([voice]).format([voice], 250);\n    voice.draw(context, stave);\n    options.assert.ok(true, 'Simple Test');\n}\nfunction slurred(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder);\n    const note0 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: 'h' });\n    const note1 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: 'h' });\n    const gracenoteGroup0 = [\n        { positions: [{ str: 4, fret: 9 }], duration: '8' },\n        { positions: [{ str: 4, fret: 10 }], duration: '8' },\n    ];\n    const gracenoteGroup1 = [\n        { positions: [{ str: 4, fret: 7 }], duration: '16' },\n        { positions: [{ str: 4, fret: 8 }], duration: '16' },\n        { positions: [{ str: 4, fret: 9 }], duration: '16' },\n    ];\n    const gracenotes0 = gracenoteGroup0.map(graceTabNote);\n    const gracenotes1 = gracenoteGroup1.map(graceTabNote);\n    note0.addModifier(new GraceNoteGroup(gracenotes0, true), 0);\n    note1.addModifier(new GraceNoteGroup(gracenotes1, true), 0);\n    const voice = new Voice(Flow.TIME4_4);\n    voice.addTickables([note0, note1]);\n    new Formatter().joinVoices([voice]).format([voice], 200);\n    voice.draw(context, stave);\n    options.assert.ok(true, 'Slurred Test');\n}\nVexFlowTests.register(GraceTabNoteTests);\nexport { GraceTabNoteTests };\n","// vexflow-debug-with-tests.ts includes this module via:\n//   export * from '../../tests';\n//\n// To add a new test module, add a new line:\n//   `export * from './xxxx_tests';`\n// to this file that points to the new file `xxxx_tests.ts`.\n//\n// The test module needs to call VexFlowTests.register(...).\n// For example, in annotation_tests.ts, the last two lines are:\n//   VexFlowTests.register(AnnotationTests);\n//   export { AnnotationTests };\n//\n// In vexflow_test_helpers.ts: VexFlowTests.run() will run all registered tests.\n//\n// To iterate faster during development, you can comment out most of this file\n// and focus on just testing the module(s) you are currently working on.\nexport * from './accidental_tests';\nexport * from './annotation_tests';\nexport * from './articulation_tests';\nexport * from './auto_beam_formatting_tests';\nexport * from './bach_tests';\nexport * from './barline_tests';\nexport * from './beam_tests';\nexport * from './bend_tests';\nexport * from './boundingbox_tests';\nexport * from './chordsymbol_tests';\nexport * from './clef_tests';\nexport * from './crossbeam_tests';\nexport * from './curve_tests';\nexport * from './dot_tests';\nexport * from './easyscore_tests';\nexport * from './factory_tests';\nexport * from './font_tests';\nexport * from './formatter_tests';\nexport * from './fraction_tests';\nexport * from './ghostnote_tests';\nexport * from './glyphnote_tests';\nexport * from './gracenote_tests';\nexport * from './gracetabnote_tests';\nexport * from './key_clef_tests';\nexport * from './keymanager_tests';\nexport * from './keysignature_tests';\nexport * from './modifier_tests';\nexport * from './multimeasurerest_tests';\nexport * from './music_tests';\nexport * from './notehead_tests';\nexport * from './notesubgroup_tests';\nexport * from './offscreencanvas_tests';\nexport * from './ornament_tests';\nexport * from './parser_tests';\nexport * from './pedalmarking_tests';\nexport * from './percussion_tests';\nexport * from './registry_tests';\nexport * from './renderer_tests';\nexport * from './rests_tests';\nexport * from './rhythm_tests';\nexport * from './stave_tests';\nexport * from './staveconnector_tests';\nexport * from './stavehairpin_tests';\nexport * from './staveline_tests';\nexport * from './stavemodifier_tests';\nexport * from './stavenote_tests';\nexport * from './stavetie_tests';\nexport * from './stringnumber_tests';\nexport * from './strokes_tests';\nexport * from './style_tests';\nexport * from './tabnote_tests';\nexport * from './tabslide_tests';\nexport * from './tabstave_tests';\nexport * from './tabtie_tests';\nexport * from './textbracket_tests';\nexport * from './textnote_tests';\nexport * from './threevoice_tests';\nexport * from './tickcontext_tests';\nexport * from './timesignature_tests';\nexport * from './tremolo_tests';\nexport * from './tuning_tests';\nexport * from './tuplet_tests';\nexport * from './typeguard_tests';\nexport * from './unison_tests';\nexport * from './vf_prefix_tests';\nexport * from './vibrato_tests';\nexport * from './vibratobracket_tests';\nexport * from './voice_tests';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Clef Key Signature Tests\n//\nimport { MAJOR_KEYS, MINOR_KEYS, VexFlowTests } from './vexflow_test_helpers';\nimport { Element } from '../src/element';\nimport { KeySignature } from '../src/keysignature';\nimport { Stave } from '../src/stave';\nconst ClefKeySignatureTests = {\n    Start() {\n        QUnit.module('Clef Keys');\n        // Removed an identical 'Key Parser Test'. See keysignature_tests.ts.\n        const run = VexFlowTests.runTests;\n        run('Major Key Clef Test', keys, { majorKeys: true });\n        run('Minor Key Clef Test', keys, { majorKeys: false });\n        run('Stave Helper', staveHelper);\n    },\n};\nfunction getWidth(code) {\n    const el = new Element();\n    el.setText(code);\n    el.measureText();\n    return el.getWidth();\n}\nconst fontWidths = () => {\n    const sharpWidth = getWidth('\\ue262' /*accidentalSharp*/) + 1;\n    const flatWidth = getWidth('\\ue260' /*accidentalFlat*/) + 1;\n    const ksPadding = 10; // hard-coded in keysignature.ts\n    const naturalWidth = getWidth('\\ue261' /*accidentalNatural*/) + 2;\n    const clefWidth = getWidth('\\ue050' /*gClef*/); // widest clef\n    return { sharpWidth, flatWidth, naturalWidth, clefWidth, ksPadding };\n};\nfunction keys(options, contextBuilder) {\n    const w = fontWidths();\n    const accidentalCount = 28; // total number in all the keys\n    const sharpTestWidth = accidentalCount * w.sharpWidth + w.clefWidth + Stave.defaultPadding + 6 * w.ksPadding;\n    const flatTestWidth = accidentalCount * w.flatWidth + w.clefWidth + Stave.defaultPadding + 6 * w.ksPadding;\n    const clefs = [\n        'treble',\n        'soprano',\n        'mezzo-soprano',\n        'alto',\n        'tenor',\n        'baritone-f',\n        'baritone-c',\n        'bass',\n        'french',\n        'subbass',\n        'percussion',\n    ];\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 20 + 80 * 2 * clefs.length);\n    const staves = [];\n    const keys = options.params.majorKeys ? MAJOR_KEYS : MINOR_KEYS;\n    let i;\n    let flat;\n    let sharp;\n    let keySig;\n    const yOffsetForFlatStaves = 10 + 80 * clefs.length;\n    for (i = 0; i < clefs.length; i++) {\n        // Render all the sharps first, then all the flats:\n        staves[i] = new Stave(10, 10 + 80 * i, flatTestWidth);\n        staves[i].addClef(clefs[i]);\n        staves[i + clefs.length] = new Stave(10, yOffsetForFlatStaves + 10 + 80 * i, sharpTestWidth);\n        staves[i + clefs.length].addClef(clefs[i]);\n        for (flat = 0; flat < 8; flat++) {\n            keySig = new KeySignature(keys[flat]);\n            keySig.addToStave(staves[i]);\n        }\n        for (sharp = 8; sharp < keys.length; sharp++) {\n            keySig = new KeySignature(keys[sharp]);\n            keySig.addToStave(staves[i + clefs.length]);\n        }\n    }\n    Stave.formatBegModifiers(staves);\n    for (i = 0; i < clefs.length; i++) {\n        staves[i].setContext(ctx);\n        staves[i].draw();\n        staves[i + clefs.length].setContext(ctx);\n        staves[i + clefs.length].draw();\n    }\n    options.assert.ok(true, 'all pass');\n}\nfunction staveHelper(options, contextBuilder) {\n    const w = fontWidths();\n    const accidentalCount = 28; // total number in all the keys\n    const sharpTestWidth = accidentalCount * w.sharpWidth + w.clefWidth + Stave.defaultPadding + 7 * w.ksPadding;\n    const flatTestWidth = accidentalCount * w.flatWidth + w.clefWidth + Stave.defaultPadding + 7 * w.ksPadding;\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 400);\n    const stave1 = new Stave(10, 10, flatTestWidth);\n    const stave2 = new Stave(10, 90, flatTestWidth);\n    const stave3 = new Stave(10, 170, sharpTestWidth);\n    const stave4 = new Stave(10, 260, sharpTestWidth);\n    const keys = MAJOR_KEYS;\n    stave1.addClef('treble');\n    stave2.addClef('bass');\n    stave3.addClef('alto');\n    stave4.addClef('tenor');\n    for (let n = 0; n < 8; ++n) {\n        stave1.addKeySignature(keys[n]);\n        stave2.addKeySignature(keys[n]);\n    }\n    for (let i = 8; i < keys.length; ++i) {\n        stave3.addKeySignature(keys[i]);\n        stave4.addKeySignature(keys[i]);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    stave3.setContext(ctx);\n    stave3.draw();\n    stave4.setContext(ctx);\n    stave4.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(ClefKeySignatureTests);\nexport { ClefKeySignatureTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Music Key Management Tests\n//\n// TODO: KeyManager.getAccidental(key) specifies that the return value's .accidental property is string | undefined.\n//       However, we check it against null.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { KeyManager } from '../src/index';\nconst KeyManagerTests = {\n    Start() {\n        QUnit.module('KeyManager');\n        QUnit.test('Valid Notes', works);\n        QUnit.test('Select Notes', selectNotes);\n    },\n};\nfunction works(assert) {\n    const manager = new KeyManager('g');\n    assert.equal(manager.getAccidental('f').accidental, '#');\n    manager.setKey('a');\n    assert.equal(manager.getAccidental('c').accidental, '#');\n    assert.equal(manager.getAccidental('a').accidental, null);\n    assert.equal(manager.getAccidental('f').accidental, '#');\n    manager.setKey('A');\n    assert.equal(manager.getAccidental('c').accidental, '#');\n    assert.equal(manager.getAccidental('a').accidental, null);\n    assert.equal(manager.getAccidental('f').accidental, '#');\n}\nfunction selectNotes(assert) {\n    const manager = new KeyManager('f');\n    assert.equal(manager.selectNote('bb').note, 'bb');\n    assert.equal(manager.selectNote('bb').accidental, 'b');\n    assert.equal(manager.selectNote('g').note, 'g');\n    assert.equal(manager.selectNote('g').accidental, null);\n    assert.equal(manager.selectNote('b').note, 'b');\n    assert.equal(manager.selectNote('b').accidental, null);\n    assert.equal(manager.selectNote('a#').note, 'bb');\n    assert.equal(manager.selectNote('g#').note, 'g#');\n    // Changes have no effect?\n    assert.equal(manager.selectNote('g#').note, 'g#');\n    assert.equal(manager.selectNote('bb').note, 'bb');\n    assert.equal(manager.selectNote('bb').accidental, 'b');\n    assert.equal(manager.selectNote('g').note, 'g');\n    assert.equal(manager.selectNote('g').accidental, null);\n    assert.equal(manager.selectNote('b').note, 'b');\n    assert.equal(manager.selectNote('b').accidental, null);\n    assert.equal(manager.selectNote('a#').note, 'bb');\n    assert.equal(manager.selectNote('g#').note, 'g#');\n    // Changes should propagate\n    manager.reset();\n    assert.equal(manager.selectNote('g#').change, true);\n    assert.equal(manager.selectNote('g#').change, false);\n    assert.equal(manager.selectNote('g').change, true);\n    assert.equal(manager.selectNote('g').change, false);\n    assert.equal(manager.selectNote('g#').change, true);\n    manager.reset();\n    let note = manager.selectNote('bb');\n    assert.equal(note.change, false);\n    assert.equal(note.accidental, 'b');\n    note = manager.selectNote('g');\n    assert.equal(note.change, false);\n    assert.equal(note.accidental, null);\n    note = manager.selectNote('g#');\n    assert.equal(note.change, true);\n    assert.equal(note.accidental, '#');\n    note = manager.selectNote('g');\n    assert.equal(note.change, true);\n    assert.equal(note.accidental, null);\n    note = manager.selectNote('g');\n    assert.equal(note.change, false);\n    assert.equal(note.accidental, null);\n    note = manager.selectNote('g#');\n    assert.equal(note.change, true);\n    assert.equal(note.accidental, '#');\n}\nVexFlowTests.register(KeyManagerTests);\nexport { KeyManagerTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Key Signature Tests\n//\nimport { MAJOR_KEYS, MINOR_KEYS, VexFlowTests } from './vexflow_test_helpers';\nimport { Element } from '../src/element';\nimport { Flow } from '../src/flow';\nimport { KeySignature } from '../src/keysignature';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nconst KeySignatureTests = {\n    Start() {\n        QUnit.module('KeySignature');\n        QUnit.test('Key Parser Test', parser);\n        const run = VexFlowTests.runTests;\n        run('Major Key Test', majorKeys);\n        run('Minor Key Test', minorKeys);\n        run('Stave Helper', staveHelper);\n        run('Cancelled key test', majorKeysCanceled);\n        run('Cancelled key (for each clef) test', keysCanceledForEachClef);\n        run('Altered key test', majorKeysAltered);\n        run('End key with clef test', endKeyWithClef);\n        run('Key Signature Change test', changeKey);\n    },\n};\nfunction getWidth(code) {\n    const el = new Element();\n    el.setText(code);\n    el.measureText();\n    return el.getWidth();\n}\nconst fontWidths = () => {\n    const sharpWidth = getWidth('\\ue262' /*accidentalSharp*/) + 1;\n    const flatWidth = getWidth('\\ue260' /*accidentalFlat*/) + 1;\n    const naturalWidth = getWidth('\\ue261' /*accidentalNatural*/) + 2;\n    const clefWidth = getWidth('\\ue050' /*gClef*/) * 2; // widest clef\n    return { sharpWidth, flatWidth, naturalWidth, clefWidth };\n};\nfunction parser(assert) {\n    assert.expect(11);\n    function catchError(spec) {\n        assert.throws(() => Flow.keySignature(spec), /BadKeySignature/);\n    }\n    catchError('asdf');\n    catchError('D!');\n    catchError('E#');\n    catchError('D#');\n    catchError('#');\n    catchError('b');\n    catchError('Kb');\n    catchError('Fb');\n    catchError('Dbm');\n    catchError('B#m');\n    Flow.keySignature('B');\n    Flow.keySignature('C');\n    Flow.keySignature('Fm');\n    Flow.keySignature('Ab');\n    Flow.keySignature('Abm');\n    Flow.keySignature('F#');\n    Flow.keySignature('G#m');\n    assert.ok(true, 'all pass');\n}\nfunction majorKeys(options, contextBuilder) {\n    const w = fontWidths();\n    const accidentalCount = 28; // total number in all the keys\n    const casePadding = 10; // hard-coded in staveModifier\n    const testCases = 7; // all keys, but includes key of C\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\n    const stave1 = new Stave(10, 10, flatTestWidth);\n    const stave2 = new Stave(10, 90, sharpTestWidth);\n    const keys = MAJOR_KEYS;\n    let keySig = null;\n    for (let i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.addToStave(stave1);\n    }\n    for (let n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.addToStave(stave2);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction majorKeysCanceled(options, contextBuilder) {\n    const scale = 0.9;\n    const w = fontWidths();\n    const flatPadding = 18;\n    const sharpPadding = 20;\n    const flatTestCases = 8;\n    const sharpTestCases = 7;\n    // magic numbers are the numbers of that symbol that appear in the test case\n    const sharpTestWidth = 28 * w.sharpWidth + 21 * w.naturalWidth + sharpPadding * sharpTestCases + Stave.defaultPadding + w.clefWidth;\n    const flatTestWidth = 28 * w.flatWidth + 28 * w.naturalWidth + flatPadding * flatTestCases + Stave.defaultPadding + w.clefWidth;\n    const eFlatTestWidth = 28 * w.flatWidth + 32 * w.naturalWidth + flatPadding * flatTestCases + Stave.defaultPadding + w.clefWidth;\n    const eSharpTestWidth = 28 * w.sharpWidth + 28 * w.naturalWidth + sharpPadding * sharpTestCases + Stave.defaultPadding + w.clefWidth;\n    const maxWidth = Math.max(Math.max(sharpTestWidth, flatTestWidth, Math.max(eSharpTestWidth, eFlatTestWidth)));\n    const ctx = contextBuilder(options.elementId, maxWidth + 100, 500);\n    ctx.scale(scale, scale);\n    const stave1 = new Stave(10, 10, flatTestWidth).addClef('treble');\n    const stave2 = new Stave(10, 90, sharpTestWidth).addClef('treble');\n    const stave3 = new Stave(10, 170, eFlatTestWidth).addClef('treble');\n    const stave4 = new Stave(10, 250, eSharpTestWidth).addClef('treble');\n    const keys = MAJOR_KEYS;\n    let keySig = null;\n    let i;\n    let n;\n    for (i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.cancelKey('Cb');\n        keySig.setPadding(flatPadding);\n        keySig.addToStave(stave1);\n    }\n    for (n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.cancelKey('C#');\n        keySig.setPadding(sharpPadding);\n        keySig.addToStave(stave2);\n    }\n    for (i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.cancelKey('E');\n        keySig.setPadding(flatPadding);\n        keySig.addToStave(stave3);\n    }\n    for (n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.cancelKey('Ab');\n        keySig.setPadding(sharpPadding);\n        keySig.addToStave(stave4);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    stave3.setContext(ctx);\n    stave3.draw();\n    stave4.setContext(ctx);\n    stave4.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction keysCanceledForEachClef(options, contextBuilder) {\n    const scale = 0.8;\n    const w = fontWidths();\n    const keyPadding = 10;\n    const keys = ['C#', 'Cb'];\n    const flatsKey = [7, 14];\n    const sharpsKey = [14, 7];\n    const natsKey = [7, 7];\n    const max = 21 * Math.max(w.sharpWidth, w.flatWidth) * 2 + keyPadding * 6 + Stave.defaultPadding + w.clefWidth;\n    const ctx = contextBuilder(options.elementId, max + 100, 380);\n    ctx.scale(scale, scale);\n    const x = 20;\n    let y = 20;\n    let tx = x;\n    ['bass', 'tenor', 'soprano', 'mezzo-soprano', 'baritone-f'].forEach(function (clef) {\n        keys.forEach((key, keyIx) => {\n            const cancelKey = keys[(keyIx + 1) % 2];\n            const width = flatsKey[keyIx] * w.flatWidth +\n                natsKey[keyIx] * w.naturalWidth +\n                sharpsKey[keyIx] * w.sharpWidth +\n                keyPadding * 3 +\n                w.clefWidth +\n                Stave.defaultPadding;\n            const stave = new Stave(tx, y, width);\n            stave.setClef(clef);\n            stave.addKeySignature(cancelKey);\n            stave.addKeySignature(key, cancelKey);\n            stave.addKeySignature(key);\n            stave.setContext(ctx).draw();\n            tx += width;\n        });\n        tx = x;\n        y += 80;\n    });\n    options.assert.ok(true, 'all pass');\n}\nfunction majorKeysAltered(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 780, 500);\n    ctx.scale(0.9, 0.9);\n    const stave1 = new Stave(10, 10, 750).addClef('treble');\n    const stave2 = new Stave(10, 90, 750).addClef('treble');\n    const stave3 = new Stave(10, 170, 750).addClef('treble');\n    const stave4 = new Stave(10, 250, 750).addClef('treble');\n    const keys = MAJOR_KEYS;\n    let keySig = null;\n    let i;\n    let n;\n    for (i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.alterKey(['bs', 'bs']);\n        keySig.setPadding(18);\n        keySig.addToStave(stave1);\n    }\n    for (n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.alterKey(['+', '+', '+']);\n        keySig.setPadding(20);\n        keySig.addToStave(stave2);\n    }\n    for (i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.alterKey(['n', 'bs', 'bb']);\n        keySig.setPadding(18);\n        keySig.addToStave(stave3);\n    }\n    for (n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.alterKey(['++', '+', 'n', '+']);\n        keySig.setPadding(20);\n        keySig.addToStave(stave4);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    stave3.setContext(ctx);\n    stave3.draw();\n    stave4.setContext(ctx);\n    stave4.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction minorKeys(options, contextBuilder) {\n    const accidentalCount = 28; // total number in all the keys\n    const w = fontWidths();\n    const casePadding = 10; // hard-coded in staveModifier\n    const testCases = 7; // all keys, but includes key of C\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\n    const stave1 = new Stave(10, 10, flatTestWidth);\n    const stave2 = new Stave(10, 90, sharpTestWidth);\n    const keys = MINOR_KEYS;\n    let keySig = null;\n    for (let i = 0; i < 8; ++i) {\n        keySig = new KeySignature(keys[i]);\n        keySig.addToStave(stave1);\n    }\n    for (let n = 8; n < keys.length; ++n) {\n        keySig = new KeySignature(keys[n]);\n        keySig.addToStave(stave2);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction endKeyWithClef(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 200);\n    ctx.scale(0.9, 0.9);\n    const stave1 = new Stave(10, 10, 350);\n    stave1\n        .setKeySignature('G')\n        .setBegBarType(BarlineType.REPEAT_BEGIN)\n        .setEndBarType(BarlineType.REPEAT_END)\n        .setClef('treble')\n        .addTimeSignature('4/4')\n        .setEndClef('bass')\n        .setEndKeySignature('Cb');\n    const stave2 = new Stave(10, 90, 350);\n    stave2.setKeySignature('Cb').setClef('bass').setEndClef('treble').setEndKeySignature('G');\n    stave1.setContext(ctx).draw();\n    stave2.setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction staveHelper(options, contextBuilder) {\n    const w = fontWidths();\n    const accidentalCount = 28; // total number in all the keys\n    const casePadding = 10; // hard-coded in staveModifier\n    const testCases = 7; // all keys, but includes key of C\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\n    const stave1 = new Stave(10, 10, flatTestWidth);\n    const stave2 = new Stave(10, 90, sharpTestWidth);\n    const keys = MAJOR_KEYS;\n    for (let i = 0; i < 8; ++i) {\n        stave1.addKeySignature(keys[i]);\n    }\n    for (let n = 8; n < keys.length; ++n) {\n        stave2.addKeySignature(keys[n]);\n    }\n    stave1.setContext(ctx);\n    stave1.draw();\n    stave2.setContext(ctx);\n    stave2.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction changeKey(options) {\n    const f = VexFlowTests.makeFactory(options, 900);\n    // The previous code was buggy: f.Stave(10, 10, 800), even though Factory.Stave() only accepts 1 argument.\n    const stave = f.Stave({ x: 10, y: 10, width: 800 }).addClef('treble').addTimeSignature('C|');\n    const voice = f\n        .Voice()\n        .setStrict(false)\n        .addTickables([\n        f.KeySigNote({ key: 'Bb' }),\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\n        f.BarNote(),\n        f.KeySigNote({ key: 'D', cancelKey: 'Bb' }),\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\n        f.BarNote(),\n        f.KeySigNote({ key: 'Bb' }),\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\n        f.BarNote(),\n        f.KeySigNote({ key: 'D', alterKey: ['b', 'n'] }),\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\n    ]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(KeySignatureTests);\nexport { KeySignatureTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TickContext Mocks\nimport { Fraction } from '../src/fraction';\nimport { Tickable } from '../src/tickable';\nclass MockTickable extends Tickable {\n    constructor() {\n        super(...arguments);\n        this.ticks = new Fraction(1, 1);\n        this.width = 0;\n        this.ignoreTicks = false;\n    }\n    init() {\n        // DO NOTHING.\n    }\n    getX() {\n        // eslint-disable-next-line\n        return this.tickContext.getX();\n    }\n    getIntrinsicTicks() {\n        return this.ticks.value();\n    }\n    getTicks() {\n        return this.ticks;\n    }\n    setTicks(t) {\n        this.ticks = new Fraction(t, 1);\n        return this;\n    }\n    // Called by TickContext.preFormat().\n    getMetrics() {\n        return {\n            width: 0,\n            glyphWidth: 0,\n            notePx: this.width,\n            modLeftPx: 0,\n            modRightPx: 0,\n            leftDisplacedHeadPx: 0,\n            rightDisplacedHeadPx: 0,\n            glyphPx: 0,\n        };\n    }\n    getWidth() {\n        return this.width;\n    }\n    setWidth(w) {\n        this.width = w;\n        return this;\n    }\n    setVoice(v) {\n        this.voice = v;\n        return this;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    setTickContext(tc) {\n        this.tickContext = tc;\n        return this;\n    }\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    preFormat() {\n        // DO NOTHING.\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\nexport { MockTickable };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ModifierContext Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Modifier, ModifierContext } from '../src/index';\nconst ModifierContextTests = {\n    Start() {\n        QUnit.module('ModifierContext');\n        QUnit.test('Modifier Width Test', width);\n        QUnit.test('Modifier Management', management);\n    },\n};\nfunction width(assert) {\n    const mc = new ModifierContext();\n    assert.equal(mc.getWidth(), 0, 'New modifier context has no width');\n}\nfunction management(assert) {\n    const mc = new ModifierContext();\n    const modifier1 = new Modifier();\n    const modifier2 = new Modifier();\n    mc.addMember(modifier1);\n    mc.addMember(modifier2);\n    const modifiers = mc.getMembers(Modifier.CATEGORY);\n    assert.equal(modifiers.length, 2, 'Added two modifiers');\n}\nVexFlowTests.register(ModifierContextTests);\nexport { ModifierContextTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// MultiMeasureRest Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Font } from '../src/font';\nconst MultiMeasureRestTests = {\n    Start() {\n        QUnit.module('MultiMeasureRest');\n        const run = VexFlowTests.runTests;\n        run('Simple Test', simple);\n        run('Stave with modifiers Test', staveWithModifiers);\n    },\n};\nfunction simple(options) {\n    const width = 910;\n    const f = VexFlowTests.makeFactory(options, width, 300);\n    const lineSpacing15px = { options: { spacingBetweenLinesPx: 15 } };\n    // Each item below is an array that contains:\n    //   item[0] => staveParams to adjust vertical spacing between lines\n    //   item[1] => multiMeasureRestParams\n    // eslint-disable-next-line\n    const params = [\n        [{}, { numberOfMeasures: 2, showNumber: false }],\n        [{}, { numberOfMeasures: 2 }],\n        [{}, { numberOfMeasures: 2, lineThickness: 8, serifThickness: 3 }],\n        [{}, { numberOfMeasures: 1, useSymbols: true }],\n        [{}, { numberOfMeasures: 2, useSymbols: true }],\n        [{}, { numberOfMeasures: 3, useSymbols: true }],\n        [{}, { numberOfMeasures: 4, useSymbols: true }],\n        [{}, { numberOfMeasures: 5, useSymbols: true }],\n        [{}, { numberOfMeasures: 6, useSymbols: true }],\n        [{}, { numberOfMeasures: 7, useSymbols: true }],\n        [{}, { numberOfMeasures: 8, useSymbols: true }],\n        [{}, { numberOfMeasures: 9, useSymbols: true }],\n        [{}, { numberOfMeasures: 10, useSymbols: true }],\n        [{}, { numberOfMeasures: 11, useSymbols: true }],\n        [{}, { numberOfMeasures: 11, useSymbols: false, paddingLeft: 20, paddingRight: 20 }],\n        [{}, { numberOfMeasures: 11, useSymbols: true, symbolSpacing: 5 }],\n        [{}, { numberOfMeasures: 11, useSymbols: false, line: 3, numberLine: 2 }],\n        [{}, { numberOfMeasures: 11, useSymbols: true, line: 3, numberLine: 2 }],\n        [lineSpacing15px, { numberOfMeasures: 12 }],\n        [lineSpacing15px, { numberOfMeasures: 9, useSymbols: true }],\n        [lineSpacing15px, { numberOfMeasures: 12, spacingBetweenLinesPx: 15, numberGlyphPoint: 40 * 1.5 }],\n        [\n            lineSpacing15px,\n            {\n                numberOfMeasures: 9,\n                spacingBetweenLinesPx: 15,\n                useSymbols: true,\n                numberGlyphPoint: 40 * 1.5,\n            },\n        ],\n        [\n            lineSpacing15px,\n            {\n                numberOfMeasures: 9,\n                spacingBetweenLinesPx: 15,\n                useSymbols: true,\n                numberGlyphPoint: 40 * 1.5,\n                semibreveRestGlyphScale: Flow.NOTATION_FONT_SCALE * 1.5,\n            },\n        ],\n    ];\n    const staveWidth = 100;\n    let x = 0;\n    let y = 0;\n    const mmRests = params.map((param) => {\n        if (x + staveWidth * 2 > width) {\n            x = 0;\n            y += 80;\n        }\n        const staveParams = param[0];\n        const mmRestParams = param[1];\n        staveParams.x = x;\n        staveParams.y = y;\n        staveParams.width = staveWidth;\n        x += staveWidth;\n        const stave = f.Stave(staveParams);\n        return f.MultiMeasureRest(mmRestParams).setStave(stave);\n    });\n    f.draw();\n    const xs = mmRests[0].getXs();\n    // eslint-disable-next-line\n    const strY = mmRests[0].getStave().getYForLine(-0.5);\n    const str = 'TACET';\n    const context = f.getContext();\n    context.save();\n    context.setFont(Font.SERIF, 16, 'bold');\n    const metrics = context.measureText(str);\n    context.fillText(str, xs.left + (xs.right - xs.left) * 0.5 - metrics.width * 0.5, strY);\n    context.restore();\n    options.assert.ok(true, 'Simple Test');\n}\nfunction staveWithModifiers(options) {\n    const width = 910;\n    const f = VexFlowTests.makeFactory(options, width, 200);\n    let x = 0;\n    let y = 0;\n    // eslint-disable-next-line\n    const params = [\n        [{ clef: 'treble', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', keySig: 'G', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', timeSig: '4/4', keySig: 'G', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', endClef: 'bass', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', endKeySig: 'F', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', endTimeSig: '2/4', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [{ clef: 'treble', endClef: 'bass', endTimeSig: '2/4', params: { width: 150 } }, { numberOfMeasures: 5 }],\n        [\n            { clef: 'treble', endClef: 'bass', endTimeSig: '2/4', params: { width: 150 } },\n            { numberOfMeasures: 5, useSymbols: true },\n        ],\n    ];\n    params.forEach((param) => {\n        const staveOptions = param[0];\n        // eslint-disable-next-line\n        const staveParams = staveOptions.params;\n        const mmrestParams = param[1];\n        if (x + staveParams.width > width) {\n            x = 0;\n            y += 80;\n        }\n        staveParams.x = x;\n        x += staveParams.width;\n        staveParams.y = y;\n        const stave = f.Stave(staveParams);\n        if (staveOptions.clef) {\n            stave.addClef(staveOptions.clef);\n        }\n        if (staveOptions.timeSig) {\n            stave.addTimeSignature(staveOptions.timeSig);\n        }\n        if (staveOptions.keySig) {\n            stave.addKeySignature(staveOptions.keySig);\n        }\n        if (staveOptions.endClef) {\n            stave.addEndClef(staveOptions.endClef);\n        }\n        if (staveOptions.endKeySig) {\n            stave.setEndKeySignature(staveOptions.endKeySig);\n        }\n        if (staveOptions.endTimeSig) {\n            stave.setEndTimeSignature(staveOptions.endTimeSig);\n        }\n        return f.MultiMeasureRest(mmrestParams).setStave(stave);\n    });\n    f.draw();\n    options.assert.ok(true, 'Stave with modifiers Test');\n}\nVexFlowTests.register(MultiMeasureRestTests);\nexport { MultiMeasureRestTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Music Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { KeyManager } from '../src/keymanager';\nimport { Music } from '../src/music';\nconst MusicTests = {\n    Start() {\n        QUnit.module('MusicTests');\n        QUnit.test('Valid Notes', validNotes);\n        QUnit.test('Valid Keys', validKeys);\n        QUnit.test('Note Values', noteValue);\n        QUnit.test('Interval Values', intervalValue);\n        QUnit.test('Relative Notes', relativeNotes);\n        QUnit.test('Relative Note Names', relativeNoteNames);\n        QUnit.test('Canonical Notes', canonicalNotes);\n        QUnit.test('Canonical Intervals', canonicalIntervals);\n        QUnit.test('Scale Tones', scaleTones);\n        QUnit.test('Scale Intervals', scaleIntervals);\n    },\n};\nfunction validNotes(assert) {\n    assert.expect(10);\n    const music = new Music();\n    let parts = music.getNoteParts('c');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, null);\n    // getNoteParts() converts its argument to lowercase.\n    parts = music.getNoteParts('C');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, null);\n    parts = music.getNoteParts('c#');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, '#');\n    parts = music.getNoteParts('c##');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, '##');\n    assert.throws(() => music.getNoteParts('r'), /BadArguments/, 'Invalid note: r');\n    assert.throws(() => music.getNoteParts(''), /BadArguments/, \"Invalid note: ''\");\n}\nfunction validKeys(assert) {\n    assert.expect(18);\n    const music = new Music();\n    let parts = music.getKeyParts('c');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, null);\n    assert.equal(parts.type, 'M');\n    parts = music.getKeyParts('d#');\n    assert.equal(parts.root, 'd');\n    assert.equal(parts.accidental, '#');\n    assert.equal(parts.type, 'M');\n    parts = music.getKeyParts('fbm');\n    assert.equal(parts.root, 'f');\n    assert.equal(parts.accidental, 'b');\n    assert.equal(parts.type, 'm');\n    parts = music.getKeyParts('c#mel');\n    assert.equal(parts.root, 'c');\n    assert.equal(parts.accidental, '#');\n    assert.equal(parts.type, 'mel');\n    parts = music.getKeyParts('g#harm');\n    assert.equal(parts.root, 'g');\n    assert.equal(parts.accidental, '#');\n    assert.equal(parts.type, 'harm');\n    assert.throws(() => music.getKeyParts('r'), /BadArguments/, 'Invalid key: r');\n    assert.throws(() => music.getKeyParts(''), /BadArguments/, `Invalid key: ''`);\n    assert.throws(() => music.getKeyParts('#m'), /BadArguments/, 'Invalid key: #m');\n}\nfunction noteValue(assert) {\n    assert.expect(3);\n    const music = new Music();\n    let note = music.getNoteValue('c');\n    assert.equal(note, 0);\n    assert.throws(() => music.getNoteValue('r'), /BadArguments/, 'Invalid note name');\n    note = music.getNoteValue('f#');\n    assert.equal(note, 6);\n}\nfunction intervalValue(assert) {\n    assert.expect(2);\n    const music = new Music();\n    const value = music.getIntervalValue('b2');\n    assert.equal(value, 1);\n    assert.throws(() => music.getIntervalValue('7'), /BadArguments/, 'Invalid interval name');\n}\nfunction relativeNotes(assert) {\n    assert.expect(8);\n    const music = new Music();\n    let value = music.getRelativeNoteValue(music.getNoteValue('c'), music.getIntervalValue('b5'));\n    assert.equal(value, 6);\n    assert.throws(() => music.getRelativeNoteValue(music.getNoteValue('bc'), music.getIntervalValue('b2')), /BadArguments/, 'Invalid note');\n    assert.throws(() => music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('p3')), /BadArguments/, 'Invalid interval');\n    // Direction\n    value = music.getRelativeNoteValue(music.getNoteValue('d'), music.getIntervalValue('2'), -1);\n    assert.equal(value, 0);\n    assert.throws(() => music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('p4'), 0), /BadArguments/, 'Invalid direction: 0');\n    // Rollover\n    value = music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('b5'));\n    assert.equal(value, 5);\n    // Reverse rollover\n    value = music.getRelativeNoteValue(music.getNoteValue('c'), music.getIntervalValue('b2'), -1);\n    assert.equal(value, 11);\n    // Practical tests\n    value = music.getRelativeNoteValue(music.getNoteValue('g'), music.getIntervalValue('p5'));\n    assert.equal(value, 2);\n}\nfunction relativeNoteNames(assert) {\n    assert.expect(9);\n    const music = new Music();\n    assert.equal(music.getRelativeNoteName('b', music.getNoteValue('c#')), 'b##');\n    assert.equal(music.getRelativeNoteName('c', music.getNoteValue('c')), 'c');\n    assert.equal(music.getRelativeNoteName('c', music.getNoteValue('db')), 'c#');\n    assert.equal(music.getRelativeNoteName('c', music.getNoteValue('b')), 'cb');\n    assert.equal(music.getRelativeNoteName('c#', music.getNoteValue('db')), 'c#');\n    assert.equal(music.getRelativeNoteName('e', music.getNoteValue('f#')), 'e##');\n    assert.equal(music.getRelativeNoteName('e', music.getNoteValue('d#')), 'eb');\n    assert.equal(music.getRelativeNoteName('e', music.getNoteValue('fb')), 'e');\n    assert.throws(() => music.getRelativeNoteName('e', music.getNoteValue('g#')), /BadArguments/, 'Too far away. Notes not related.');\n}\nfunction canonicalNotes(assert) {\n    assert.expect(3);\n    const music = new Music();\n    assert.equal(music.getCanonicalNoteName(0), 'c');\n    assert.equal(music.getCanonicalNoteName(2), 'd');\n    assert.throws(() => music.getCanonicalNoteName(-1), /BadArguments/, 'Invalid note value');\n}\nfunction canonicalIntervals(assert) {\n    assert.expect(3);\n    const music = new Music();\n    assert.equal(music.getCanonicalIntervalName(0), 'unison');\n    assert.equal(music.getCanonicalIntervalName(2), 'M2');\n    assert.throws(() => music.getCanonicalIntervalName(-1), /BadArguments/, 'Invalid interval value');\n}\nfunction scaleTones(assert) {\n    assert.expect(24);\n    // C Major\n    const music = new Music();\n    const manager = new KeyManager('CM');\n    const C_MAJOR = music.getScaleTones(music.getNoteValue('c'), Music.scales.major);\n    let values = ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    assert.equal(C_MAJOR.length, 7);\n    for (let i = 0; i < C_MAJOR.length; ++i) {\n        assert.equal(music.getCanonicalNoteName(C_MAJOR[i]), values[i]);\n    }\n    // Dorian\n    const C_DORIAN = music.getScaleTones(music.getNoteValue('c'), Music.scales.dorian);\n    values = ['c', 'd', 'eb', 'f', 'g', 'a', 'bb'];\n    let note = null;\n    assert.equal(C_DORIAN.length, 7);\n    for (let i = 0; i < C_DORIAN.length; ++i) {\n        note = music.getCanonicalNoteName(C_DORIAN[i]);\n        assert.equal(manager.selectNote(note).note, values[i]);\n    }\n    // Mixolydian\n    const C_MIXOLYDIAN = music.getScaleTones(music.getNoteValue('c'), Music.scales.mixolydian);\n    values = ['c', 'd', 'e', 'f', 'g', 'a', 'bb'];\n    assert.equal(C_MIXOLYDIAN.length, 7);\n    for (let i = 0; i < C_MIXOLYDIAN.length; ++i) {\n        note = music.getCanonicalNoteName(C_MIXOLYDIAN[i]);\n        assert.equal(manager.selectNote(note).note, values[i]);\n    }\n}\nfunction scaleIntervals(assert) {\n    assert.expect(6);\n    const m = new Music();\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('c'), m.getNoteValue('d'))), 'M2');\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('g'), m.getNoteValue('c'))), 'p4');\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('c'), m.getNoteValue('c'))), 'unison');\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('f'), m.getNoteValue('cb'))), 'dim5');\n    // Forwards and backwards\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('d'), m.getNoteValue('c'), 1)), 'b7');\n    assert.equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('d'), m.getNoteValue('c'), -1)), 'M2');\n}\nVexFlowTests.register(MusicTests);\nexport { MusicTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// NoteHead Tests\n// TODO: There is a bug in RenderContext.scale(). The CanvasContext works as expected.\n//       Each time you call scale(sx, sy), it multiplies the sx and sy by the currently stored scale.\n//       The SVGContext operates differently. It just sets the sx and sy as the new scale, instead of multiplying it.\n//       See: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { NoteHead } from '../src/notehead';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { TickContext } from '../src/tickcontext';\nimport { Voice } from '../src/voice';\nconst NoteHeadTests = {\n    Start() {\n        QUnit.module('NoteHead');\n        const run = VexFlowTests.runTests;\n        run('Basic', basic);\n        run('Various Note Heads 1', variousNoteHeads);\n        run('Various Note Heads 2', variousNoteHeads2);\n        run('Various Heads', variousHeads);\n        run('Drum Chord Heads', drumChordHeads);\n        run('Bounding Boxes', basicBoundingBoxes);\n    },\n};\nfunction setContextStyle(ctx) {\n    // The final scale should be 1.8.\n    ctx.scale(0.9, 0.9);\n    ctx.scale(2.0, 2.0);\n    //ctx.scale(1.8, 1.8);\n    ctx.font = '10pt Arial';\n}\nfunction basic(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 450, 250);\n    setContextStyle(ctx);\n    const stave = new Stave(10, 0, 250).addClef('treble');\n    stave.setContext(ctx).draw();\n    const formatter = new Formatter();\n    const voice = new Voice(Flow.TIME4_4).setStrict(false);\n    const noteHead1 = new NoteHead({ duration: '4', line: 3 });\n    const noteHead2 = new NoteHead({ duration: '1', line: 2.5 });\n    const noteHead3 = new NoteHead({ duration: '2', line: 0 });\n    voice.addTickables([noteHead1, noteHead2, noteHead3]);\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok('Basic NoteHead test');\n}\n/**\n * Used by the next two test cases to draw a note.\n */\nfunction showNote(noteStruct, stave, ctx, x) {\n    const note = new StaveNote(noteStruct).setStave(stave);\n    new TickContext().addTickable(note).preFormat().setX(x);\n    note.setContext(ctx).draw();\n    return note;\n}\nfunction variousHeads(options, contextBuilder) {\n    const notes = [\n        { keys: ['g/5/d0'], duration: '4' },\n        { keys: ['g/5/d1'], duration: '4' },\n        { keys: ['g/5/d2'], duration: '4' },\n        { keys: ['g/5/d3'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/t0'], duration: '1' },\n        { keys: ['g/5/t1'], duration: '4' },\n        { keys: ['g/5/t2'], duration: '4' },\n        { keys: ['g/5/t3'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/x0'], duration: '1' },\n        { keys: ['g/5/x1'], duration: '4' },\n        { keys: ['g/5/x2'], duration: '4' },\n        { keys: ['g/5/x3'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/s1'], duration: '4' },\n        { keys: ['g/5/s2'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/r1'], duration: '4' },\n        { keys: ['g/5/r2'], duration: '4' },\n    ];\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\n    // Draw two staves, one with up-stems and one with down-stems.\n    for (let staveNum = 0; staveNum < 2; ++staveNum) {\n        const stave = new Stave(10, 10 + staveNum * 120, notes.length * 25 + 75)\n            .addClef('percussion')\n            .setContext(ctx)\n            .draw();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            note.stemDirection = staveNum === 0 ? -1 : 1;\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\n            options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n            options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n        }\n    }\n}\nfunction variousNoteHeads(options, contextBuilder) {\n    const notes = [\n        { keys: ['g/5/d'], duration: '1/2' },\n        { keys: ['g/5/d'], duration: '1' },\n        { keys: ['g/5/d'], duration: '2' },\n        { keys: ['g/5/d'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/x'], duration: '1/2' },\n        { keys: ['g/5/x'], duration: '1' },\n        { keys: ['g/5/x'], duration: '2' },\n        { keys: ['g/5/x'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/cx'], duration: '1/2' },\n        { keys: ['g/5/cx'], duration: '1' },\n        { keys: ['g/5/cx'], duration: '2' },\n        { keys: ['g/5/cx'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/tu'], duration: '1/2' },\n        { keys: ['g/5/tu'], duration: '1' },\n        { keys: ['g/5/tu'], duration: '2' },\n        { keys: ['g/5/tu'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/td'], duration: '1/2' },\n        { keys: ['g/5/td'], duration: '1' },\n        { keys: ['g/5/td'], duration: '2' },\n        { keys: ['g/5/td'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/sf'], duration: '1/2' },\n        { keys: ['g/5/sf'], duration: '1' },\n        { keys: ['g/5/sf'], duration: '2' },\n        { keys: ['g/5/sf'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/sb'], duration: '1/2' },\n        { keys: ['g/5/sb'], duration: '1' },\n        { keys: ['g/5/sb'], duration: '2' },\n        { keys: ['g/5/sb'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/ci'], duration: '1/2' },\n        { keys: ['g/5/ci'], duration: '1' },\n        { keys: ['g/5/ci'], duration: '2' },\n        { keys: ['g/5/ci'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/sq'], duration: '1/2' },\n        { keys: ['g/5/sq'], duration: '1' },\n        { keys: ['g/5/sq'], duration: '2' },\n        { keys: ['g/5/sq'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n    ];\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\n    // Draw two staves, one with up-stems and one with down-stems.\n    for (let staveNum = 0; staveNum < 2; ++staveNum) {\n        const stave = new Stave(10, 10 + staveNum * 120, notes.length * 25 + 75)\n            .addClef('percussion')\n            .setContext(ctx)\n            .draw();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            note.stemDirection = staveNum === 0 ? -1 : 1;\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\n            options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n            options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n        }\n    }\n}\nfunction variousNoteHeads2(options, contextBuilder) {\n    const notes = [\n        { keys: ['g/5/do'], duration: '4', autoStem: true },\n        { keys: ['g/5/re'], duration: '4', autoStem: true },\n        { keys: ['g/5/mi'], duration: '4', autoStem: true },\n        { keys: ['g/5/fa'], duration: '4', autoStem: true },\n        { keys: ['e/4/faup'], duration: '4', autoStem: true },\n        { keys: ['g/5/so'], duration: '4', autoStem: true },\n        { keys: ['g/5/la'], duration: '4', autoStem: true },\n        { keys: ['g/5/ti'], duration: '4', autoStem: true },\n    ];\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\n    const stave = new Stave(10, 10, notes.length * 25 + 75).addClef('percussion').setContext(ctx).draw();\n    for (let i = 0; i < notes.length; ++i) {\n        const note = notes[i];\n        const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\n        options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drumChordHeads(options, contextBuilder) {\n    const notes = [\n        { keys: ['a/4/d0', 'g/5/x3'], duration: '4' },\n        { keys: ['a/4/x3', 'g/5/d0'], duration: '4' },\n        { keys: ['a/4/d1', 'g/5/x2'], duration: '4' },\n        { keys: ['a/4/x2', 'g/5/d1'], duration: '4' },\n        { keys: ['a/4/d2', 'g/5/x1'], duration: '4' },\n        { keys: ['a/4/x1', 'g/5/d2'], duration: '4' },\n        { keys: ['a/4/d3', 'g/5/x0'], duration: '4' },\n        { keys: ['a/4/x0', 'g/5/d3'], duration: '4' },\n        { keys: ['a/4', 'g/5/d0'], duration: '4' },\n        { keys: ['a/4/x3', 'g/5'], duration: '4' },\n        { keys: ['a/4/t0', 'g/5/s1'], duration: '4' },\n        { keys: ['a/4/s1', 'g/5/t0'], duration: '4' },\n        { keys: ['a/4/t1', 'g/5/s2'], duration: '4' },\n        { keys: ['a/4/s2', 'g/5/t1'], duration: '4' },\n        { keys: ['a/4/t2', 'g/5/r1'], duration: '4' },\n        { keys: ['a/4/r1', 'g/5/t2'], duration: '4' },\n        { keys: ['a/4/t3', 'g/5/r2'], duration: '4' },\n        { keys: ['a/4/r2', 'g/5/t3'], duration: '4' },\n    ];\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\n    // Draw two staves, one with up-stems and one with down-stems.\n    for (let h = 0; h < 2; ++h) {\n        const stave = new Stave(10, 10 + h * 120, notes.length * 25 + 75).addClef('percussion').setContext(ctx).draw();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            note.stemDirection = h === 0 ? -1 : 1;\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\n            options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n            options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n        }\n    }\n}\nfunction basicBoundingBoxes(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 450, 250);\n    setContextStyle(ctx);\n    // 250 is 450/1.8\n    const stave = new Stave(10, 0, 250).addClef('treble');\n    stave.setContext(ctx).draw();\n    const formatter = new Formatter();\n    const voice = new Voice(Flow.TIME4_4).setStrict(false);\n    const nh1 = new StaveNote({ keys: ['b/4'], duration: '4' });\n    const nh2 = new StaveNote({ keys: ['a/4'], duration: '2' });\n    const nh3 = new NoteHead({ duration: '1', line: 0 });\n    voice.addTickables([nh1, nh2, nh3]);\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    for (const bb of [nh1.noteHeads[0].getBoundingBox(), nh2.noteHeads[0].getBoundingBox(), nh3.getBoundingBox()]) {\n        ctx.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n    }\n    ctx.stroke();\n    options.assert.ok('NoteHead Bounding Boxes');\n}\nVexFlowTests.register(NoteHeadTests);\nexport { NoteHeadTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Taehoon Moon 2016\n//\n// NoteSubGroup Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { BarNote } from '../src/barnote';\nimport { Note } from '../src/note';\nimport { BarlineType } from '../src/stavebarline';\nconst NoteSubGroupTests = {\n    Start() {\n        QUnit.module('NoteSubGroup');\n        const run = VexFlowTests.runTests;\n        run('Basic - ClefNote, TimeSigNote and BarNote', basic);\n        run('Multi Voice', multiVoiceSingleDraw);\n        run('Multi Voice Multiple Draws', multiVoiceDoubleDraw);\n        run('Multi Staff', multiStaff);\n    },\n};\n// Return three helper functions for creating StaveNotes, and adding Accidental & NoteSubGroup to those StaveNotes.\nfunction createShortcuts(f) {\n    return {\n        createStaveNote: (noteStruct) => f.StaveNote(noteStruct),\n        addAccidental: (note, accid) => note.addModifier(f.Accidental({ type: accid }), 0),\n        addSubGroup: (note, subNotes) => note.addModifier(f.NoteSubGroup({ notes: subNotes }), 0),\n    };\n}\nfunction basic(options) {\n    const f = VexFlowTests.makeFactory(options, 750, 200);\n    const ctx = f.getContext();\n    const stave = f.Stave({ width: 600 }).addClef('treble');\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\n    const notes = [\n        { keys: ['f/5'], stemDirection: -1, duration: '4' },\n        { keys: ['d/4'], stemDirection: -1, duration: '4', clef: 'bass' },\n        { keys: ['g/4'], stemDirection: -1, duration: '4', clef: 'alto' },\n        { keys: ['a/4'], stemDirection: -1, duration: '4', clef: 'alto' },\n        { keys: ['c/4'], stemDirection: -1, duration: '4', clef: 'tenor' },\n        { keys: ['c/3'], stemDirection: +1, duration: '4', clef: 'tenor' },\n        { keys: ['d/4'], stemDirection: -1, duration: '4', clef: 'tenor' },\n        { keys: ['f/4'], stemDirection: -1, duration: '4', clef: 'tenor' },\n    ].map(createStaveNote);\n    addAccidental(notes[1], '#');\n    addAccidental(notes[2], 'n');\n    addSubGroup(notes[1], [f.ClefNote({ type: 'bass', options: { size: 'small' } })]);\n    addSubGroup(notes[2], [f.ClefNote({ type: 'alto', options: { size: 'small' } })]);\n    addSubGroup(notes[4], [f.ClefNote({ type: 'tenor', options: { size: 'small' } }), new BarNote()]);\n    addSubGroup(notes[5], [f.TimeSigNote({ time: '6/8' })]);\n    addSubGroup(notes[6], [new BarNote(BarlineType.REPEAT_BEGIN)]);\n    addAccidental(notes[4], 'b');\n    addAccidental(notes[6], 'bb');\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 150));\n    VexFlowTests.plotLegendForNoteWidth(ctx, 620, 120);\n    options.assert.ok(true, 'all pass');\n}\nfunction multiVoiceSingleDraw(options) {\n    multiVoiceHelper(options, 1);\n}\n/**\n * Call Factory.draw() twice. It should look identical to the multiVoice test case above.\n */\nfunction multiVoiceDoubleDraw(options) {\n    multiVoiceHelper(options, 2);\n}\n/**\n * Used by multiVoiceSingleDraw and multiVoiceDoubleDraw above.\n */\nfunction multiVoiceHelper(options, numDraws) {\n    const f = VexFlowTests.makeFactory(options, 550, 200);\n    const ctx = f.getContext();\n    const stave = f.Stave().addClef('treble');\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\n    const notes1 = [\n        { keys: ['f/5'], stemDirection: 1, duration: '4' },\n        { keys: ['d/4'], stemDirection: 1, duration: '4', clef: 'bass' },\n        { keys: ['c/5'], stemDirection: 1, duration: '4', clef: 'alto' },\n        { keys: ['c/5'], stemDirection: 1, duration: '4', clef: 'soprano' },\n    ].map(createStaveNote);\n    const notes2 = [\n        { keys: ['c/4'], stemDirection: -1, duration: '4' },\n        { keys: ['c/3'], stemDirection: -1, duration: '4', clef: 'bass' },\n        { keys: ['d/4'], stemDirection: -1, duration: '4', clef: 'alto' },\n        { keys: ['f/4'], stemDirection: -1, duration: '4', clef: 'soprano' },\n    ].map(createStaveNote);\n    addAccidental(notes1[1], '#');\n    addSubGroup(notes1[1], [\n        f.ClefNote({ type: 'bass', options: { size: 'small' } }),\n        new BarNote(BarlineType.REPEAT_BEGIN),\n        f.TimeSigNote({ time: '3/4' }),\n    ]);\n    addSubGroup(notes2[2], [\n        f.ClefNote({ type: 'alto', options: { size: 'small' } }),\n        f.TimeSigNote({ time: '9/8' }),\n        new BarNote(BarlineType.DOUBLE),\n    ]);\n    addSubGroup(notes1[3], [f.ClefNote({ type: 'soprano', options: { size: 'small' } })]);\n    addAccidental(notes1[2], 'b');\n    addAccidental(notes2[3], '#');\n    const voices = [f.Voice().addTickables(notes1), f.Voice().addTickables(notes2)];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    for (let i = 0; i < numDraws; i++) {\n        f.draw();\n    }\n    notes1.forEach((note) => Note.plotMetrics(ctx, note, 150));\n    options.assert.ok(true, 'all pass');\n}\nfunction multiStaff(options) {\n    const f = VexFlowTests.makeFactory(options, 550, 400);\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\n    const stave1 = f.Stave({ x: 15, y: 30, width: 500 }).setClef('treble');\n    const notes1 = [\n        { keys: ['f/5'], stemDirection: 1, duration: '4' },\n        { keys: ['d/4'], stemDirection: 1, duration: '4', clef: 'bass' },\n        { keys: ['c/5'], stemDirection: 1, duration: '4', clef: 'alto' },\n        { keys: ['c/5'], stemDirection: 1, duration: '4', clef: 'soprano' },\n    ].map(createStaveNote);\n    const notes2 = [\n        { keys: ['c/4'], stemDirection: -1, duration: '4' },\n        { keys: ['c/3'], stemDirection: -1, duration: '4', clef: 'bass' },\n        { keys: ['d/4'], stemDirection: -1, duration: '4', clef: 'alto' },\n        { keys: ['f/4'], stemDirection: -1, duration: '4', clef: 'soprano' },\n    ].map(createStaveNote);\n    const stave2 = f.Stave({ x: 15, y: 150, width: 500 }).setClef('bass');\n    const notes3 = [\n        { keys: ['e/3'], duration: '8', stemDirection: -1, clef: 'bass' },\n        { keys: ['g/4'], duration: '8', stemDirection: 1, clef: 'treble' },\n        { keys: ['d/4'], duration: '8', stemDirection: 1, clef: 'treble' },\n        { keys: ['f/4'], duration: '8', stemDirection: 1, clef: 'treble' },\n        { keys: ['c/4'], duration: '8', stemDirection: 1, clef: 'treble' },\n        { keys: ['g/3'], duration: '8', stemDirection: -1, clef: 'bass' },\n        { keys: ['d/3'], duration: '8', stemDirection: -1, clef: 'bass' },\n        { keys: ['f/3'], duration: '8', stemDirection: -1, clef: 'bass' },\n    ].map(createStaveNote);\n    f.StaveConnector({ topStave: stave1, bottomStave: stave2, type: 'brace' });\n    f.StaveConnector({ topStave: stave1, bottomStave: stave2, type: 'singleLeft' });\n    f.StaveConnector({ topStave: stave1, bottomStave: stave2, type: 'singleRight' });\n    f.Beam({ notes: notes3.slice(1, 4) });\n    f.Beam({ notes: notes3.slice(5) });\n    addAccidental(notes1[1], '#');\n    addSubGroup(notes1[1], [f.ClefNote({ type: 'bass', options: { size: 'small' } }), f.TimeSigNote({ time: '3/4' })]);\n    addSubGroup(notes2[2], [f.ClefNote({ type: 'alto', options: { size: 'small' } }), f.TimeSigNote({ time: '9/8' })]);\n    addSubGroup(notes1[3], [f.ClefNote({ type: 'soprano', options: { size: 'small' } })]);\n    addSubGroup(notes3[1], [f.ClefNote({ type: 'treble', options: { size: 'small' } })]);\n    addSubGroup(notes3[5], [f.ClefNote({ type: 'bass', options: { size: 'small' } })]);\n    addAccidental(notes3[0], '#');\n    addAccidental(notes3[3], 'b');\n    addAccidental(notes3[5], '#');\n    addAccidental(notes1[2], 'b');\n    addAccidental(notes2[3], '#');\n    const voice1 = f.Voice().addTickables(notes1);\n    const voice2 = f.Voice().addTickables(notes2);\n    const voice3 = f.Voice().addTickables(notes3);\n    f.Formatter().joinVoices([voice1, voice2]).joinVoices([voice3]).formatToStave([voice1, voice2, voice3], stave1);\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(NoteSubGroupTests);\nexport { NoteSubGroupTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// OffscreenCanvas Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { CanvasContext } from '../src/canvascontext';\nimport { Formatter } from '../src/formatter';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nimport { StaveNote } from '../src/stavenote';\nimport { globalObject } from '../src/util';\nconst OffscreenCanvasTests = {\n    Start() {\n        // At the time of writing, OffscreenCanvas is still an experimental technology.\n        if (globalObject().OffscreenCanvas === undefined) {\n            return;\n        }\n        QUnit.module('OffscreenCanvas');\n        QUnit.test('Simple Test', simpleTest);\n    },\n};\nfunction simpleTest(assert) {\n    // Create a CanvasContext from an OffscreenCanvas.\n    // eslint-disable-next-line\n    // @ts-ignore\n    const offscreenCanvas = new OffscreenCanvas(550, 200);\n    // eslint-disable-next-line\n    // @ts-ignore\n    const offscreenCtx = offscreenCanvas.getContext('2d');\n    if (offscreenCtx === null) {\n        throw new Error(\"Couldn't create offscreen context\");\n    }\n    const ctx = new CanvasContext(offscreenCtx);\n    // Render to the OffscreenCavans.\n    const stave = new Stave(10, 50, 200);\n    stave.setEndBarType(BarlineType.END);\n    stave.addClef('treble').setContext(ctx).draw();\n    const notes = [\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    // Copy the contents of the OffscreenCanvas to an HTMLCanvasElement.\n    const imgBmp = offscreenCanvas.transferToImageBitmap();\n    const canvas = document.createElement('canvas');\n    canvas.width = offscreenCanvas.width;\n    canvas.height = offscreenCanvas.height;\n    const canvasCtx = canvas.getContext('2d');\n    if (canvasCtx === null) {\n        throw new Error(\"Couldn't create canvas context\");\n    }\n    canvasCtx.drawImage(imgBmp, 0, 0);\n    document.body.appendChild(canvas);\n    assert.ok(true, 'all pass');\n}\nVexFlowTests.register(OffscreenCanvasTests);\nexport { OffscreenCanvasTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Cyril Silverman\n//\n// Ornament Tests\n// TODO: Formatting for Jazz Ornaments is incorrect. The last note + ornament bleeds into the next measure.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Beam } from '../src/beam';\nimport { Dot } from '../src/dot';\nimport { Element } from '../src/element';\nimport { Formatter } from '../src/formatter';\nimport { Ornament } from '../src/ornament';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { Voice, VoiceMode } from '../src/voice';\nconst OrnamentTests = {\n    Start() {\n        QUnit.module('Ornament');\n        const run = VexFlowTests.runTests;\n        run('Ornaments', drawOrnaments);\n        run('Ornaments Vertically Shifted', drawOrnamentsDisplaced);\n        run('Ornaments - Delayed turns', drawOrnamentsDelayed);\n        run('Ornaments - Delayed turns, Multiple Draws', drawOrnamentsDelayedMultipleDraws);\n        run('Stacked', drawOrnamentsStacked);\n        run('With Upper/Lower Accidentals', drawOrnamentsWithAccidentals);\n        run('Jazz Ornaments', jazzOrnaments);\n    },\n};\nfunction drawOrnaments(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 750, 195);\n    const stave = new Stave(10, 30, 700);\n    stave.setContext(ctx).draw();\n    const notes = [\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n    ];\n    notes[0].addModifier(new Ornament('mordent'), 0);\n    notes[1].addModifier(new Ornament('mordentInverted'), 0);\n    notes[2].addModifier(new Ornament('turn'), 0);\n    notes[3].addModifier(new Ornament('turnInverted'), 0);\n    notes[4].addModifier(new Ornament('tr'), 0);\n    notes[5].addModifier(new Ornament('upprall'), 0);\n    notes[6].addModifier(new Ornament('downprall'), 0);\n    notes[7].addModifier(new Ornament('prallup'), 0);\n    notes[8].addModifier(new Ornament('pralldown'), 0);\n    notes[9].addModifier(new Ornament('upmordent'), 0);\n    notes[10].addModifier(new Ornament('downmordent'), 0);\n    notes[11].addModifier(new Ornament('lineprall'), 0);\n    notes[12].addModifier(new Ornament('prallprall'), 0);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, stave, notes);\n}\nfunction drawOrnamentsDisplaced(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 750, 195);\n    const stave = new Stave(10, 30, 700);\n    stave.setContext(ctx).draw();\n    const notes = [\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/5'], duration: '4', stemDirection: -1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        new StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n    ];\n    notes[0].addModifier(new Ornament('mordent'), 0);\n    notes[1].addModifier(new Ornament('mordentInverted'), 0);\n    notes[1].addModifier(new Ornament('mordentInverted'), 0);\n    notes[2].addModifier(new Ornament('turn'), 0);\n    notes[3].addModifier(new Ornament('turnInverted'), 0);\n    notes[4].addModifier(new Ornament('tr'), 0);\n    notes[5].addModifier(new Ornament('upprall'), 0);\n    notes[6].addModifier(new Ornament('downprall'), 0);\n    notes[7].addModifier(new Ornament('prallup'), 0);\n    notes[8].addModifier(new Ornament('pralldown'), 0);\n    notes[9].addModifier(new Ornament('upmordent'), 0);\n    notes[10].addModifier(new Ornament('downmordent'), 0);\n    notes[11].addModifier(new Ornament('lineprall'), 0);\n    notes[12].addModifier(new Ornament('prallprall'), 0);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, stave, notes);\n}\n/**\n * Helper function for the next two tests: drawOrnamentsDelayed and drawOrnamentsDelayedMultipleDraws.\n * setDelayed(true) shifts the turn symbol to the right (after its note).\n */\nconst addDelayedTurns = (f) => {\n    // Get the rendering context\n    const context = f.getContext();\n    const stave = f.Stave({ x: 10, y: 30, width: 500 });\n    stave.setContext(context).draw();\n    const notes = [\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n    ];\n    notes[0].addModifier(f.Ornament('turn', { delayed: true }), 0);\n    notes[1].addModifier(f.Ornament('turnInverted', { delayed: true }), 0);\n    notes[2].addModifier(f.Ornament('turnInverted', { delayed: true }), 0);\n    notes[3].addModifier(f.Ornament('turn', { delayed: true }), 0);\n    return { context, stave, notes };\n};\nfunction drawOrnamentsDelayed(options) {\n    options.assert.expect(0);\n    const f = VexFlowTests.makeFactory(options, 550, 195);\n    const { context, stave, notes } = addDelayedTurns(f);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(context, stave, notes);\n}\nfunction drawOrnamentsDelayedMultipleDraws(options) {\n    options.assert.expect(0);\n    const f = VexFlowTests.makeFactory(options, 550, 195);\n    const { context, stave, notes } = addDelayedTurns(f);\n    // We can FormatAndDraw() two times, and it looks fine.\n    // However, if you inspect the SVG element, you will see duplicate paths.\n    Formatter.FormatAndDraw(context, stave, notes);\n    Formatter.FormatAndDraw(context, stave, notes);\n}\nfunction drawOrnamentsStacked(options) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const f = VexFlowTests.makeFactory(options, 550, 195);\n    const ctx = f.getContext();\n    const stave = f.Stave({ x: 10, y: 30, width: 500 });\n    stave.setContext(ctx).draw();\n    const notes = [\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['a/4'], duration: '4', stemDirection: 1 }),\n    ];\n    notes[0].addModifier(f.Ornament('mordent'), 0);\n    notes[1].addModifier(f.Ornament('turnInverted'), 0);\n    notes[2].addModifier(f.Ornament('turn'), 0);\n    notes[3].addModifier(f.Ornament('turnInverted'), 0);\n    notes[0].addModifier(f.Ornament('turn'), 0);\n    notes[1].addModifier(f.Ornament('prallup'), 0);\n    notes[2].addModifier(f.Ornament('upmordent'), 0);\n    notes[3].addModifier(f.Ornament('lineprall'), 0);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, stave, notes);\n}\nfunction drawOrnamentsWithAccidentals(options) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const f = VexFlowTests.makeFactory(options, 650, 250);\n    const ctx = f.getContext();\n    const stave = f.Stave({ x: 10, y: 60, width: 600 });\n    stave.setContext(ctx).draw();\n    const notes = [\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: 1 }),\n    ];\n    notes[0].addModifier(f.Ornament('mordent', { lowerAccidental: '#', upperAccidental: '#' }), 0);\n    notes[1].addModifier(f.Ornament('turnInverted', { lowerAccidental: 'b', upperAccidental: 'b' }), 0);\n    notes[2].addModifier(f.Ornament('turn', { upperAccidental: '##', lowerAccidental: '##' }), 0);\n    notes[3].addModifier(f.Ornament('mordentInverted', { lowerAccidental: 'db', upperAccidental: 'db' }), 0);\n    notes[4].addModifier(f.Ornament('turnInverted', { upperAccidental: '++', lowerAccidental: '++' }), 0);\n    notes[5].addModifier(f.Ornament('tr', { upperAccidental: 'n', lowerAccidental: 'n' }), 0);\n    notes[6].addModifier(f.Ornament('prallup', { upperAccidental: 'd', lowerAccidental: 'd' }), 0);\n    notes[7].addModifier(f.Ornament('lineprall', { upperAccidental: 'db', lowerAccidental: 'db' }), 0);\n    notes[8].addModifier(f.Ornament('upmordent', { upperAccidental: 'bbs', lowerAccidental: 'bbs' }), 0);\n    notes[9].addModifier(f.Ornament('prallprall', { upperAccidental: 'bb', lowerAccidental: 'bb' }), 0);\n    notes[10].addModifier(f.Ornament('turnInverted', { upperAccidental: '+', lowerAccidental: '+' }), 0);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, stave, notes);\n}\nfunction jazzOrnaments(options) {\n    const el = new Element();\n    el.setText('\\ue050' /* gClef */); // widest clef\n    el.measureText();\n    const clefWidth = el.getWidth();\n    // Helper function.\n    function draw(modifiers, keys, x, width, y, stemDirection) {\n        // Helper function to create a StaveNote.\n        const note = (keys, duration, modifier, stemDirection) => {\n            const n = new StaveNote({ keys, duration, stemDirection })\n                .addModifier(modifier, 0)\n                .addModifier(new Accidental('b'), 0);\n            const dot = duration.indexOf('d') >= 0;\n            if (dot) {\n                Dot.buildAndAttach([n], { all: true });\n            }\n            return n;\n        };\n        const stave = new Stave(x, y, width).addClef('treble').setContext(ctx).draw();\n        const notes = [\n            note(keys, '4d', modifiers[0], stemDirection),\n            note(keys, '8', modifiers[1], stemDirection),\n            note(keys, '4d', modifiers[2], stemDirection),\n            note(keys, '8', modifiers[3], stemDirection),\n        ];\n        if (modifiers.length > 4) {\n            notes[3].addModifier(modifiers[4], 0);\n        }\n        Beam.generateBeams(notes);\n        const voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n        }).setMode(VoiceMode.SOFT);\n        voice.addTickables(notes);\n        const formatter = new Formatter().joinVoices([voice]);\n        formatter.format([voice], width - Stave.defaultPadding - clefWidth);\n        stave.setContext(ctx).draw();\n        voice.draw(ctx, stave);\n    }\n    options.assert.expect(0);\n    const f = VexFlowTests.makeFactory(options, 950, 400);\n    const ctx = f.getContext();\n    ctx.scale(1, 1);\n    const xStart = 10;\n    const width = 300;\n    const yStart = 50;\n    const staffHeight = 70;\n    let curX = xStart;\n    let curY = yStart;\n    let mods = [\n        // measure 1\n        f.Ornament('scoop'),\n        f.Ornament('doit'),\n        f.Ornament('fall'),\n        f.Ornament('doitLong'),\n    ];\n    draw(mods, ['a/5'], curX, width, curY, -1);\n    curX += width;\n    mods = [\n        // measure 2\n        f.Ornament('fallLong'),\n        f.Ornament('bend'),\n        f.Ornament('plungerClosed'),\n        f.Ornament('plungerOpen'),\n        f.Ornament('bend'),\n    ];\n    draw(mods, ['a/5'], curX, width, curY, -1);\n    curX += width;\n    mods = [\n        // measure 3\n        f.Ornament('flip'),\n        f.Ornament('jazzTurn'),\n        f.Ornament('smear'),\n        f.Ornament('doit'),\n    ];\n    draw(mods, ['a/5'], curX, width, curY, 1);\n    // second line\n    curX = xStart;\n    curY += staffHeight;\n    mods = [\n        // measure 4\n        f.Ornament('scoop'),\n        f.Ornament('doit'),\n        f.Ornament('fall'),\n        f.Ornament('doitLong'),\n    ];\n    draw(mods, ['e/5'], curX, width, curY);\n    curX += width;\n    mods = [\n        // measure 5\n        f.Ornament('fallLong'),\n        f.Ornament('bend'),\n        f.Ornament('plungerClosed'),\n        f.Ornament('plungerOpen'),\n        f.Ornament('bend'),\n    ];\n    draw(mods, ['e/5'], curX, width, curY);\n    curX += width;\n    mods = [\n        // measure 6\n        f.Ornament('flip'),\n        f.Ornament('jazzTurn'),\n        f.Ornament('smear'),\n        f.Ornament('doit'),\n    ];\n    draw(mods, ['e/5'], curX, width, curY);\n    // third line\n    curX = xStart;\n    curY += staffHeight;\n    mods = [\n        // measure 7\n        f.Ornament('scoop'),\n        f.Ornament('doit'),\n        f.Ornament('fall'),\n        f.Ornament('doitLong'),\n    ];\n    draw(mods, ['e/4'], curX, width, curY);\n    curX += width;\n    mods = [\n        // measure 8\n        f.Ornament('fallLong'),\n        f.Ornament('bend'),\n        f.Ornament('plungerClosed'),\n        f.Ornament('plungerOpen'),\n        f.Ornament('bend'),\n    ];\n    draw(mods, ['e/4'], curX, width, curY);\n    curX += width;\n    mods = [\n        // measure 9\n        f.Ornament('flip'),\n        f.Ornament('jazzTurn'),\n        f.Ornament('smear'),\n        f.Ornament('doit'),\n    ];\n    draw(mods, ['e/4'], curX, width, curY);\n}\nVexFlowTests.register(OrnamentTests);\nexport { OrnamentTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Parser Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Parser } from '../src/parser';\nconst ParserTests = {\n    Start() {\n        QUnit.module('Parser');\n        QUnit.test('Basic', basic);\n        QUnit.test('Advanced', advanced);\n        QUnit.test('Mixed', mixed);\n        QUnit.test('Micro Score', microscore);\n    },\n};\n/**\n * Grammar used in the first three test cases: basic, advanced, mixed.\n */\nclass TestGrammar {\n    // The begin() function is the only requirement when implementing the Grammar interface.\n    begin() {\n        return () => ({ expect: this.expect });\n    }\n    BIGORLITTLE() {\n        return { expect: [this.BIGLINE, this.LITTLELINE], or: true };\n    }\n    BIGLINE() {\n        return { expect: [this.LBRACE, this.WORD, this.WORDS, this.MAYBEEXCLAIM, this.RBRACE] };\n    }\n    LITTLELINE() {\n        return { expect: [this.WORD, this.WORDS] };\n    }\n    WORDS() {\n        return { expect: [this.COMMA, this.WORD], zeroOrMore: true };\n    }\n    MAYBEEXCLAIM() {\n        return { expect: [this.EXCLAIM], maybe: true };\n    }\n    LBRACE() {\n        return { token: '[{]' };\n    }\n    RBRACE() {\n        return { token: '[}]' };\n    }\n    WORD() {\n        return { token: '[a-zA-Z]+' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    EXCLAIM() {\n        return { token: '[!]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\n/**\n * Grammar used in the microscore test case.\n * It represents a series of piano key numbers (Middle C == 40) separated by whitespace.\n *   C Major Scale => 40 42 44 45 47 49 51 52\n * A chord is 2 or more piano key numbers surrounded by BRACKETS and separated by PERIODS\n *   C Major == [40.44.47]\n *   C-major F-major G-major A-minor chord progression => [40.44.47] [45.49.52] [47.51.54] [49.52.56]\n */\nclass MicroScoreGrammar {\n    constructor() {\n        this.ITEM = () => ({ expect: [this.PIANO_KEY_NUMBER, this.CHORD], or: true });\n        this.MAYBE_MORE_ITEMS = () => ({ expect: [this.ITEM], zeroOrMore: true });\n        this.PIANO_KEY_NUMBER = () => ({ expect: [this.NUM], oneOrMore: true });\n        this.CHORD = () => ({ expect: [this.LEFT_BRACKET, this.PIANO_KEY_NUMBER, this.MORE_CHORD_PARTS, this.RIGHT_BRACKET] });\n        this.MORE_CHORD_PARTS = () => ({ expect: [this.PERIOD, this.PIANO_KEY_NUMBER], oneOrMore: true });\n        this.NUM = () => ({ token: '\\\\d+' });\n        this.WHITESPACE = () => ({ token: '\\\\s+' });\n        this.PERIOD = () => ({ token: '\\\\.' });\n        this.LEFT_BRACKET = () => ({ token: '\\\\[' });\n        this.RIGHT_BRACKET = () => ({ token: '\\\\]' });\n        this.EOL = () => ({ token: '$' });\n    }\n    begin() {\n        return () => ({ expect: [this.ITEM, this.MAYBE_MORE_ITEMS, this.EOL] });\n    }\n}\n/**\n * Check that the result is a parse failure, and verify the error position.\n */\nfunction fails(assert, result, expectedErrorPos, msg) {\n    assert.notOk(result.success, msg);\n    assert.equal(result.errorPos, expectedErrorPos, msg);\n}\nfunction basic(assert) {\n    const grammar = new TestGrammar();\n    grammar.expect = [grammar.LITTLELINE, grammar.EOL];\n    const parser = new Parser(grammar);\n    // Each of these strings will parse correctly.\n    const mustPass = ['first, second', 'first,second', 'first', 'first,second, third'];\n    mustPass.forEach((line) => assert.equal(parser.parse(line).success, true, line));\n    fails(assert, parser.parse(''), 0);\n    fails(assert, parser.parse('first second'), 6);\n    fails(assert, parser.parse('first,,'), 5);\n    fails(assert, parser.parse('first,'), 5);\n    fails(assert, parser.parse(',,'), 0);\n}\nfunction advanced(assert) {\n    const grammar = new TestGrammar();\n    grammar.expect = [grammar.BIGLINE, grammar.EOL];\n    const parser = new Parser(grammar);\n    const mustPass = ['{first}', '{first!}', '{first,second}', '{first,second!}', '{first,second,third!}'];\n    mustPass.forEach((line) => assert.equal(parser.parse(line).success, true, line));\n    fails(assert, parser.parse('{first,second,third,}'), 19);\n    fails(assert, parser.parse('first,second,third'), 0);\n    fails(assert, parser.parse('{first,second,third'), 19);\n    fails(assert, parser.parse('{!}'), 1);\n}\nfunction mixed(assert) {\n    const grammar = new TestGrammar();\n    grammar.expect = [grammar.BIGORLITTLE, grammar.EOL];\n    const parser = new Parser(grammar);\n    const mustPass = ['{first,second,third!}', 'first, second'];\n    mustPass.forEach((line) => assert.equal(parser.parse(line).success, true, line));\n    fails(assert, parser.parse('first second'), 6);\n}\nfunction microscore(assert) {\n    const grammar = new MicroScoreGrammar();\n    const parser = new Parser(grammar);\n    const mustPass = [\n        '40 42 44 45 47 49 51 52',\n        '[40.44.47] [45.49.52] [47.51.54] [49.52.56]',\n        '40 [40.44.47] 45 47 [44.47.51]', // Mixed Notes and Chords: C4 [Cmajor] F4 G4 [Eminor]\n    ];\n    mustPass.forEach((line) => {\n        var _a;\n        const result = parser.parse(line);\n        assert.equal(result.success, true, line);\n        assert.equal((_a = result.matches) === null || _a === void 0 ? void 0 : _a.length, 3, line);\n    });\n    fails(assert, parser.parse('40 42 44 45 47 49 5A 52'), 19);\n    fails(assert, parser.parse('40.44.47] [45.49.52] [47.51.54] [49.52.56]'), 2);\n    fails(assert, parser.parse('40 [40] 45 47 [44.47.51]'), 3); // A chord with a single note is not allowed.\n}\nVexFlowTests.register(ParserTests);\nexport { ParserTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// PedalMarking Tests\n// TODO: Fix Error => Type 'Tickable' is not assignable to type 'StaveNote'.\nimport { VexFlowTests } from './vexflow_test_helpers';\nconst PedalMarkingTests = {\n    Start() {\n        QUnit.module('PedalMarking');\n        const run = VexFlowTests.runTests;\n        run('Simple Pedal 1', simple1);\n        run('Simple Pedal 2', simple2);\n        run('Simple Pedal 3', simple3);\n        run('Release and Depress on Same Note 1', releaseDepress1);\n        run('Release and Depress on Same Note 2', releaseDepress2);\n        run('Custom Text 1', customTest1);\n        run('Custom Text 2', customTest2);\n    },\n};\n/**\n * Every test below uses this to set up the score and two staves/voices.\n */\nfunction createTest(makePedal) {\n    return (options) => {\n        const f = VexFlowTests.makeFactory(options, 550, 200);\n        const score = f.EasyScore();\n        const stave0 = f.Stave({ width: 250 }).addClef('treble');\n        const voice0 = score.voice(score.notes('b4/4, b4, b4, b4[stem=\"down\"]', { stem: 'up' }));\n        f.Formatter().joinVoices([voice0]).formatToStave([voice0], stave0);\n        const stave1 = f.Stave({ width: 260, x: 250 });\n        const voice1 = score.voice(score.notes('c4/4, c4, c4, c4', { stem: 'up' }));\n        f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n        makePedal(f, voice0.getTickables(), voice1.getTickables());\n        f.draw();\n        options.assert.ok(true, 'Must render');\n    };\n}\nfunction withSimplePedal(style) {\n    return (factory, notes0, notes1) => factory.PedalMarking({\n        notes: [notes0[0], notes0[2], notes0[3], notes1[3]],\n        options: { style },\n    });\n}\nfunction withReleaseAndDepressedPedal(style) {\n    return (factory, notes0, notes1) => factory.PedalMarking({\n        notes: [notes0[0], notes0[3], notes0[3], notes1[1], notes1[1], notes1[3]],\n        options: { style },\n    });\n}\nconst simple1 = createTest(withSimplePedal('text'));\nconst simple2 = createTest(withSimplePedal('bracket'));\nconst simple3 = createTest(withSimplePedal('mixed'));\nconst releaseDepress1 = createTest(withReleaseAndDepressedPedal('bracket'));\nconst releaseDepress2 = createTest(withReleaseAndDepressedPedal('mixed'));\nconst customTest1 = createTest((factory, notes0, notes1) => {\n    const pedal = factory.PedalMarking({\n        notes: [notes0[0], notes1[3]],\n        options: { style: 'text' },\n    });\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n});\nconst customTest2 = createTest((factory, notes0, notes1) => {\n    const pedal = factory.PedalMarking({\n        notes: [notes0[0], notes1[3]],\n        options: { style: 'mixed' },\n    });\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n});\nVexFlowTests.register(PedalMarkingTests);\nexport { PedalMarkingTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mike Corrigan 2012 <corrigan@gmail.com>\n//\n// Percussion Tests\n// TODO: Type 'Tickable[]' is not assignable to type 'StemmableNote[]'.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Dot, Font, FontStyle, FontWeight, Stave, StaveNote, TickContext, Tremolo, } from '../src/index';\nconst PercussionTests = {\n    Start() {\n        QUnit.module('Percussion');\n        const run = VexFlowTests.runTests;\n        run('Percussion Clef', draw);\n        run('Percussion Notes', drawNotes);\n        run('Percussion Basic0', basic0);\n        run('Percussion Basic1', basic1);\n        run('Percussion Basic2', basic2);\n        run('Percussion Snare0', snare0);\n        run('Percussion Snare1', snare1);\n        run('Percussion Snare2', snare2);\n        run('Percussion Snare3', snare3);\n    },\n};\nfunction draw(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300).addClef('percussion').setContext(ctx).draw();\n    options.assert.ok(true);\n}\n/**\n * Helper function used by the drawNotes() test case below.\n */\nfunction showNote(struct, stave, ctx, x) {\n    const staveNote = new StaveNote(struct).setStave(stave);\n    new TickContext().addTickable(staveNote).preFormat().setX(x);\n    staveNote.setContext(ctx).draw();\n    return staveNote;\n}\nfunction drawNotes(options, contextBuilder) {\n    const notes = [\n        { keys: ['g/5/d0'], duration: '4' },\n        { keys: ['g/5/d1'], duration: '4' },\n        { keys: ['g/5/d2'], duration: '4' },\n        { keys: ['g/5/d3'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/t0'], duration: '1' },\n        { keys: ['g/5/t1'], duration: '4' },\n        { keys: ['g/5/t2'], duration: '4' },\n        { keys: ['g/5/t3'], duration: '4' },\n        { keys: ['x/'], duration: '1' },\n        { keys: ['g/5/x0'], duration: '1' },\n        { keys: ['g/5/x1'], duration: '4' },\n        { keys: ['g/5/x2'], duration: '4' },\n        { keys: ['g/5/x3'], duration: '4' },\n    ];\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\n    // Draw two staves, one with up-stems and one with down-stems.\n    for (let h = 0; h < 2; ++h) {\n        const stave = new Stave(10, 10 + h * 120, notes.length * 25 + 75).addClef('percussion').setContext(ctx).draw();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            note.stemDirection = h === 0 ? -1 : 1;\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\n            options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n            options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n        }\n    }\n}\n/**\n * Helper function for the seven test cases below.\n * Adds a percussion clef (two short vertical bars, like a pause sign) to the stave.\n */\nfunction createSingleMeasureTest(setup) {\n    return (options) => {\n        const f = VexFlowTests.makeFactory(options, 500);\n        const stave = f.Stave().addClef('percussion').setTimeSignature('4/4');\n        setup(f);\n        f.Formatter().joinVoices(f.getVoices()).formatToStave(f.getVoices(), stave);\n        f.draw();\n        options.assert.ok(true);\n    };\n}\nconst basic0 = createSingleMeasureTest((f) => {\n    const voice0 = f\n        .Voice()\n        .addTickables([\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n    ]);\n    const voice1 = f\n        .Voice()\n        .addTickables([\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stemDirection: -1 }),\n    ]);\n    f.Beam({ notes: voice0.getTickables() });\n    f.Beam({ notes: voice1.getTickables().slice(0, 2) });\n    f.Beam({ notes: voice1.getTickables().slice(3, 5) });\n});\nconst basic1 = createSingleMeasureTest((f) => {\n    f.Voice().addTickables([\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\n    ]);\n    f.Voice().addTickables([\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stemDirection: -1 }),\n    ]);\n});\nconst basic2 = createSingleMeasureTest((f) => {\n    const voice0 = f\n        .Voice()\n        .addTickables([\n        f.StaveNote({ keys: ['a/5/x3'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5'], duration: '8' }),\n        f.StaveNote({ keys: ['g/4/n', 'g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\n    ]);\n    f.Beam({ notes: voice0.getTickables().slice(1, 8) });\n    const notes1 = [\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '8', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['f/4'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '8d', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/5'], duration: '16', stemDirection: -1 }),\n    ];\n    Dot.buildAndAttach([notes1[4]], { all: true });\n    const voice1 = f.Voice().addTickables(notes1);\n    f.Beam({ notes: voice1.getTickables().slice(0, 2) });\n    f.Beam({ notes: voice1.getTickables().slice(4, 6) });\n});\nconst snare0 = createSingleMeasureTest((f) => {\n    const font = {\n        family: Font.SERIF,\n        size: 14,\n        weight: FontWeight.BOLD,\n        style: FontStyle.ITALIC,\n    };\n    f.Voice().addTickables([\n        f\n            .StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 })\n            .addModifier(f.Articulation({ type: 'a>' }), 0)\n            .addModifier(f.Annotation({ text: 'L', font }), 0),\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(f.Annotation({ text: 'R', font }), 0),\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(f.Annotation({ text: 'L', font }), 0),\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(f.Annotation({ text: 'L', font }), 0),\n    ]);\n});\nconst snare1 = createSingleMeasureTest((f) => {\n    f.Voice().addTickables([\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stemDirection: -1 }).addModifier(f.Articulation({ type: 'ah' }), 0),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stemDirection: -1 }),\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stemDirection: -1 }).addModifier(f.Articulation({ type: 'ah' }), 0),\n        f.StaveNote({ keys: ['a/5/x3'], duration: '4', stemDirection: -1 }).addModifier(f.Articulation({ type: 'a,' }), 0),\n    ]);\n});\nconst snare2 = createSingleMeasureTest((f) => {\n    f.Voice().addTickables([\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(new Tremolo(1), 0),\n        f.GraceNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(new Tremolo(1), 0),\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(new Tremolo(3), 0),\n        f.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: -1 }).addModifier(new Tremolo(4), 0),\n    ]);\n});\nconst snare3 = createSingleMeasureTest((factory) => {\n    factory\n        .Voice()\n        .addTickables([\n        factory.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: 1 }).addModifier(new Tremolo(2), 0),\n        factory.GraceNote({ keys: ['c/5'], duration: '4', stemDirection: 1 }).addModifier(new Tremolo(2), 0),\n        factory.GraceNote({ keys: ['c/5'], duration: '4', stemDirection: 1 }).addModifier(new Tremolo(3), 0),\n        factory.StaveNote({ keys: ['c/5'], duration: '4', stemDirection: 1 }).addModifier(new Tremolo(4), 0),\n    ]);\n});\nVexFlowTests.register(PercussionTests);\nexport { PercussionTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Registry Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { EasyScore, Factory, Registry, StaveNote } from '../src/index';\nconst RegistryTests = {\n    Start() {\n        QUnit.module('Registry');\n        QUnit.test('Register and Clear', registerAndClear);\n        QUnit.test('Default Registry', defaultRegistry);\n        QUnit.test('Multiple Classes', classes);\n    },\n};\nfunction registerAndClear(assert) {\n    const registry = new Registry();\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\n    registry.register(score.notes('C4')[0], 'foobar');\n    const foobar = registry.getElementById('foobar');\n    assert.ok(foobar);\n    assert.equal(foobar.getAttribute('id'), 'foobar');\n    registry.clear();\n    assert.notOk(registry.getElementById('foobar'));\n    // eslint-disable-next-line\n    // @ts-ignore: intentional type mismatch to trigger an error.\n    assert.throws(() => registry.register(score.notes('C4')));\n    registry.clear();\n    assert.ok(registry.register(score.notes('C4[id=\"boobar\"]')[0]).getElementById('boobar'));\n}\nfunction defaultRegistry(assert) {\n    const registry = new Registry();\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\n    Registry.enableDefaultRegistry(registry);\n    score.notes('C4[id=\"foobar\"]');\n    const note = registry.getElementById('foobar');\n    assert.ok(note);\n    note.setAttribute('id', 'boobar');\n    assert.ok(registry.getElementById('boobar'));\n    assert.notOk(registry.getElementById('foobar'));\n    registry.clear();\n    assert.equal(registry.getElementsByType(StaveNote.CATEGORY).length, 0);\n    score.notes('C5');\n    const elements = registry.getElementsByType(StaveNote.CATEGORY);\n    assert.equal(elements.length, 1);\n}\nfunction classes(assert) {\n    const registry = new Registry();\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\n    Registry.enableDefaultRegistry(registry);\n    score.notes('C4[id=\"foobar\"]');\n    const note = registry.getElementById('foobar');\n    note.addClass('foo');\n    assert.ok(note.hasClass('foo'));\n    assert.notOk(note.hasClass('boo'));\n    assert.equal(registry.getElementsByClass('foo').length, 1);\n    assert.equal(registry.getElementsByClass('boo').length, 0);\n    note.addClass('boo');\n    assert.ok(note.hasClass('foo'));\n    assert.ok(note.hasClass('boo'));\n    assert.equal(registry.getElementsByClass('foo').length, 1);\n    assert.equal(registry.getElementsByClass('boo').length, 1);\n    note.removeClass('boo');\n    note.removeClass('foo');\n    assert.notOk(note.hasClass('foo'));\n    assert.notOk(note.hasClass('boo'));\n    assert.equal(registry.getElementsByClass('foo').length, 0);\n    assert.equal(registry.getElementsByClass('boo').length, 0);\n}\nVexFlowTests.register(RegistryTests);\nexport { RegistryTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Renderer Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { CanvasContext, Factory, Formatter, isHTMLCanvas, Renderer, RuntimeError, Stave, StaveNote, SVGContext, } from '../src/index';\n// TODO: Should FactoryOptions.renderer.elementId also accept a canvas | div?\nconst STAVE_WIDTH = 700;\nconst STAVE_HEIGHT = 100;\n// FactoryOptions.stave.space defaults to 10.\n// We subtract 10 to make the useRendererAPI() output look identical to useFactoryAPI().\nconst STAVE_RIGHT_MARGIN = 10;\nconst USE_RENDERER = { useRendererAPI: true };\nconst USE_FACTORY = { useRendererAPI: false };\nconst RendererTests = {\n    Start() {\n        QUnit.module('Renderer');\n        const run = VexFlowTests.runTests;\n        // Randomly choose one of four setup paths. See below for a description.\n        // Refresh `flow.html` to see the test change each time.\n        // We can manually check that they look identical\n        // by opening `flow.html` in multiple tabs & quickly switching between tabs.\n        run('Random', random);\n        // These are the four setup paths. They should all produce the same output.\n        //   Use the:  Renderer API       OR  Factory API\n        //   Pass in:  element ID string  OR  canvas/div element.\n        run('Renderer API with element ID string', stringElementId, USE_RENDERER);\n        run('Renderer API with canvas or div', canvasOrDivElement, USE_RENDERER);\n        run('Renderer API with context', passRenderContext);\n        run('Factory API with element ID string', stringElementId, USE_FACTORY);\n        run('Factory API with canvas or div', canvasOrDivElement, USE_FACTORY);\n    },\n};\n/**\n * Helper function to add three notes to a stave.\n */\nfunction drawStave(stave, context) {\n    stave.addClef('bass').addTimeSignature('3/4').draw();\n    Formatter.FormatAndDraw(context, stave, [\n        new StaveNote({ keys: ['C/4'], duration: '4' }),\n        new StaveNote({ keys: ['E/4'], duration: '4' }),\n        new StaveNote({ keys: ['G/4'], duration: '4' }),\n    ]);\n}\n/**\n * Randomize the test upon each refresh (for verifying that the output is identical).\n * Draw a colored outline to indicate which of the four options is shown.\n * - blue = element is a SVG or Canvas element\n * - gray = element ID is a string\n * - solid outline = use the Renderer API directly\n * - dashed outline = use the Factory API\n */\nfunction random(options) {\n    const useElementIDString = Math.random() > 0.5;\n    const useRendererAPI = Math.random() > 0.5;\n    options.params = { useRendererAPI };\n    if (useElementIDString) {\n        stringElementId(options);\n    }\n    else {\n        canvasOrDivElement(options);\n    }\n    // eslint-disable-next-line\n    const element = document.getElementById(options.elementId);\n    const colorForElementType = useElementIDString ? '#CCCCCC' /* light gray */ : '#0074d9'; /* blue */\n    const lineStyleForWhichAPI = useRendererAPI ? 'solid' : 'dashed';\n    const borderStyle = `3px ${lineStyleForWhichAPI} ${colorForElementType}`;\n    let elementType;\n    if (options.backend === Renderer.Backends.CANVAS) {\n        // If the backend is canvas, we draw a border around the canvas directly.\n        element.style.border = borderStyle;\n        elementType = '&lt;canvas&gt; element object';\n    }\n    else {\n        // If the backend is SVG, we draw a border around the SVG child of the DIV.\n        element.children[0].style.border = borderStyle;\n        elementType = '&lt;svg&gt; element object';\n    }\n    if (useElementIDString) {\n        elementType = 'elementID string';\n    }\n    const whichAPI = useRendererAPI ? 'Renderer API' : 'Factory API';\n    element.parentElement.insertAdjacentHTML('beforeend', `<div style='position:relative; bottom: 100px; font-size: 12pt;'>` +\n        `<span style=\"border-bottom: ${borderStyle}; padding-bottom: 3px; ${lineStyleForWhichAPI}\">${whichAPI}</span>` +\n        ` with ` +\n        `<span style=\"background-color:${colorForElementType}; padding: 3px; color:white;\">${elementType}</span>` +\n        `</div><br>`);\n}\nfunction useRendererAPI(e, backend) {\n    const renderer = new Renderer(e, backend);\n    renderer.resize(STAVE_WIDTH, STAVE_HEIGHT);\n    const context = renderer.getContext();\n    drawStave(new Stave(0, 0, STAVE_WIDTH - STAVE_RIGHT_MARGIN).setContext(context), context);\n}\n/**\n * Alternatively, use the Factory API!\n * The Factory API declares elementId to be string | null.\n * However, if we pass in a canvas or div element, it will still work.\n * This is because Factory calls new Renderer(elementId, ...) via Renderer.buildContext().\n */\nfunction useFactoryAPI(e, backend) {\n    const opts = {\n        renderer: { elementId: e, width: STAVE_WIDTH, height: STAVE_HEIGHT, backend },\n    };\n    const factory = new Factory(opts);\n    drawStave(factory.Stave(), factory.getContext());\n}\n/**\n * Pass in a elementId string. Renderer will call document.getElementById().\n */\nfunction stringElementId(options) {\n    const elementId = options.elementId;\n    if (options.params.useRendererAPI) {\n        useRendererAPI(elementId, options.backend);\n    }\n    else {\n        useFactoryAPI(elementId, options.backend);\n    }\n    options.assert.ok(true);\n}\n/**\n * Pass a canvas or div element directly to the Renderer constructor.\n */\nfunction canvasOrDivElement(options) {\n    const element = document.getElementById(options.elementId);\n    if (options.params.useRendererAPI) {\n        useRendererAPI(element, options.backend);\n    }\n    else {\n        useFactoryAPI(element, options.backend);\n    }\n    options.assert.ok(true);\n}\n/**\n * Pass the render context directly to the Renderer constructor.\n */\nfunction passRenderContext(options) {\n    let context;\n    const element = document.getElementById(options.elementId);\n    if (isHTMLCanvas(element)) {\n        const ctx = element.getContext('2d');\n        if (!ctx) {\n            throw new RuntimeError(`Couldn't get context from element \"${options.elementId}\"`);\n        }\n        context = new CanvasContext(ctx);\n    }\n    else {\n        context = new SVGContext(element);\n    }\n    const renderer = new Renderer(context);\n    renderer.resize(STAVE_WIDTH, STAVE_HEIGHT);\n    drawStave(new Stave(0, 0, STAVE_WIDTH - STAVE_RIGHT_MARGIN).setContext(context), context);\n    options.assert.ok(true);\n}\nVexFlowTests.register(RendererTests);\nexport { RendererTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Rests Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Beam } from '../src/beam';\nimport { Dot } from '../src/dot';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { Tuplet } from '../src/tuplet';\nimport { Voice } from '../src/voice';\nconst RestsTests = {\n    Start() {\n        QUnit.module('Rests');\n        const run = VexFlowTests.runTests;\n        run('Outside Stave', ledgerRest);\n        run('Dotted', basic);\n        run('Auto Align - Beamed Notes Stems Up', beamsUp);\n        run('Auto Align - Beamed Notes Stems Down', beamsDown);\n        run('Auto Align - Tuplets Stems Up', tupletsUp);\n        run('Auto Align - Tuplets Stems Down', tupletsDown);\n        run('Auto Align - Single Voice (Default)', singleVoiceDefaultAlignment);\n        run('Auto Align - Single Voice (Align All)', singleVoiceAlignAll);\n        run('Auto Align - Multi Voice', multiVoice);\n    },\n};\n/**\n * Helper function to create a context and stave.\n *\n * @param options\n * @param contextBuilder static function in renderer.ts (Renderer.getSVGContext or Renderer.getCanvasContext).\n * @param width\n * @param height\n * @returns object with .context and .stave properties\n */\nfunction setupContext(options, contextBuilder, width = 350, height = 150) {\n    // context is SVGContext or CanvasRenderingContext2D (native) or CanvasContext (only if Renderer.USE_CANVAS_PROXY is true).\n    const context = contextBuilder(options.elementId, width, height);\n    context.scale(0.9, 0.9);\n    context.font = '10pt Arial';\n    const stave = new Stave(10, 30, width).addClef('treble').addTimeSignature('4/4').setContext(context).draw();\n    return { context, stave };\n}\n/**\n * Dotted rests (whole to 128th).\n * The rest duration is specified as 'wr', 'hr', ..., '128r'.\n */\nfunction basic(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 700);\n    const notes = [\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: 'wr' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: 'hr' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '4r' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '8r' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '16r' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '32r' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '64r' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: '128r' }),\n    ];\n    Dot.buildAndAttach(notes, { all: true });\n    Formatter.FormatAndDraw(context, stave, notes);\n    options.assert.ok(true, 'Dotted Rest Test');\n}\n/**\n * Use the ledger glyph if the whole or half rest is above/below the staff\n */\nfunction ledgerRest(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 700);\n    const notes = [\n        new StaveNote({ keys: ['a/5'], stemDirection: 1, duration: 'wr' }),\n        new StaveNote({ keys: ['c/6'], stemDirection: 1, duration: 'hr' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: 'hr' }),\n        new StaveNote({ keys: ['a/3'], stemDirection: 1, duration: 'wr' }),\n        new StaveNote({ keys: ['f/3'], stemDirection: 1, duration: 'hr' }),\n        new StaveNote({ keys: ['b/4'], stemDirection: 1, duration: 'wr' }),\n    ];\n    Formatter.FormatAndDraw(context, stave, notes);\n    options.assert.ok(true, 'Leger/Ledger Rest Test');\n}\n// Optional: Use a helper function to make your code more concise.\nconst note = (noteStruct) => new StaveNote(noteStruct);\n/**\n * Rests are intermixed within beamed notes (with the stems and beams at the top).\n */\nfunction beamsUp(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['e/5'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '8r' }),\n        note({ keys: ['b/5'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['c/5'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4', 'd/5', 'a/5'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '8r' }),\n        note({ keys: ['c/4'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4', 'd/5', 'a/5'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '8r' }),\n        note({ keys: ['c/4'], stemDirection: 1, duration: '8' }),\n    ];\n    const beam1 = new Beam(notes.slice(0, 4));\n    const beam2 = new Beam(notes.slice(4, 8));\n    const beam3 = new Beam(notes.slice(8, 12));\n    Formatter.FormatAndDraw(context, stave, notes);\n    beam1.setContext(context).draw();\n    beam2.setContext(context).draw();\n    beam3.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Beams Up Test');\n}\n/**\n * Rests are intermixed within beamed notes (with the stems and beams at the bottom).\n */\nfunction beamsDown(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['c/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4', 'd/5', 'a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['e/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4', 'd/5', 'a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['e/4'], stemDirection: -1, duration: '8' }),\n    ];\n    const beam1 = new Beam(notes.slice(0, 4));\n    const beam2 = new Beam(notes.slice(4, 8));\n    const beam3 = new Beam(notes.slice(8, 12));\n    Formatter.FormatAndDraw(context, stave, notes);\n    beam1.setContext(context).draw();\n    beam2.setContext(context).draw();\n    beam3.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Beams Down Test');\n}\n/**\n * Call setTupletLocation(Tuplet.LOCATION_TOP) to place the tuplet indicator (bracket and number) at the\n * top of the group of notes. Tuplet.LOCATION_TOP is the default, so this is optional.\n */\nfunction tupletsUp(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['g/5'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['b/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['g/5'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4r' }),\n    ];\n    const tuplet1 = new Tuplet(notes.slice(0, 3)).setTupletLocation(Tuplet.LOCATION_TOP);\n    const tuplet2 = new Tuplet(notes.slice(3, 6)).setTupletLocation(Tuplet.LOCATION_TOP);\n    const tuplet3 = new Tuplet(notes.slice(6, 9)).setTupletLocation(Tuplet.LOCATION_TOP);\n    const tuplet4 = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\n    Formatter.FormatAndDraw(context, stave, notes);\n    tuplet1.setContext(context).draw();\n    tuplet2.setContext(context).draw();\n    tuplet3.setContext(context).draw();\n    tuplet4.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Tuplets Stem Up Test');\n}\n/**\n * Call setTupletLocation(Tuplet.LOCATION_BOTTOM) to place the tuplet indicator (bracket and number) at the\n * bottom of the group of notes.\n */\nfunction tupletsDown(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n    ];\n    const beam1 = new Beam(notes.slice(0, 3));\n    const beam2 = new Beam(notes.slice(3, 6));\n    const beam3 = new Beam(notes.slice(6, 9));\n    const beam4 = new Beam(notes.slice(9, 12));\n    const tuplet1 = new Tuplet(notes.slice(0, 3)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\n    const tuplet2 = new Tuplet(notes.slice(3, 6)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\n    const tuplet3 = new Tuplet(notes.slice(6, 9)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\n    const tuplet4 = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\n    Formatter.FormatAndDraw(context, stave, notes);\n    tuplet1.setContext(context).draw();\n    tuplet2.setContext(context).draw();\n    tuplet3.setContext(context).draw();\n    tuplet4.setContext(context).draw();\n    beam1.setContext(context).draw();\n    beam2.setContext(context).draw();\n    beam3.setContext(context).draw();\n    beam4.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Tuplets Stem Down Test');\n}\n/**\n * By default rests are centered vertically within the stave, except\n * when they are inside a group of beamed notes (in which case they are\n * centered vertically within that group).\n */\nfunction singleVoiceDefaultAlignment(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['f/4'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['e/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['e/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['b/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['d/5'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n    ];\n    const beam = new Beam(notes.slice(5, 9));\n    const tuplet = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\n    Formatter.FormatAndDraw(context, stave, notes);\n    tuplet.setContext(context).draw();\n    beam.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Default Test');\n}\n/**\n * The only difference between staveRestsAll() and staveRests() is that this test case\n * passes { alignRests: true } to Formatter.FormatAndDraw(...).\n */\nfunction singleVoiceAlignAll(options, contextBuilder) {\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\n    const notes = [\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['f/4'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['e/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['a/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['e/5'], stemDirection: -1, duration: '8' }),\n        note({ keys: ['a/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: 1, duration: '4r' }),\n        note({ keys: ['b/5'], stemDirection: 1, duration: '4' }),\n        note({ keys: ['d/5'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['g/5'], stemDirection: -1, duration: '4' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n        note({ keys: ['b/4'], stemDirection: -1, duration: '4r' }),\n    ];\n    const beam = new Beam(notes.slice(5, 9));\n    const tuplet = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\n    // Set { alignRests: true } to align rests (vertically) with nearby notes in each voice.\n    Formatter.FormatAndDraw(context, stave, notes, { alignRests: true });\n    tuplet.setContext(context).draw();\n    beam.setContext(context).draw();\n    options.assert.ok(true, 'Auto Align Rests - Align All Test');\n}\n/**\n * Multi Voice\n * The top voice shows quarter-note chords alternating with quarter rests.\n * The bottom voice shows two groups of beamed eighth notes, with eighth rests.\n */\nfunction multiVoice(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    const stave = new Stave(50, 10, 500).addClef('treble').setContext(ctx).addTimeSignature('4/4').draw();\n    const noteOnStave = (noteStruct) => new StaveNote(noteStruct).setStave(stave);\n    const notes1 = [\n        noteOnStave({ keys: ['c/4', 'e/4', 'g/4'], duration: '4' }),\n        noteOnStave({ keys: ['b/4'], duration: '4r' }),\n        noteOnStave({ keys: ['c/4', 'd/4', 'a/4'], duration: '4' }),\n        noteOnStave({ keys: ['b/4'], duration: '4r' }),\n    ];\n    const notes2 = [\n        noteOnStave({ keys: ['e/3'], stemDirection: -1, duration: '8' }),\n        noteOnStave({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        noteOnStave({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        noteOnStave({ keys: ['e/3'], stemDirection: -1, duration: '8' }),\n        noteOnStave({ keys: ['e/3'], stemDirection: -1, duration: '8' }),\n        noteOnStave({ keys: ['b/4'], stemDirection: -1, duration: '8r' }),\n        noteOnStave({ keys: ['e/3'], stemDirection: -1, duration: '8' }),\n        noteOnStave({ keys: ['e/3'], stemDirection: -1, duration: '8' }),\n    ];\n    const voice1 = new Voice(Flow.TIME4_4).addTickables(notes1);\n    const voice2 = new Voice(Flow.TIME4_4).addTickables(notes2);\n    // Set { alignRests: true } to align rests (vertically) with nearby notes in each voice.\n    new Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave, { alignRests: true });\n    /* eslint-disable camelcase*/\n    const beam2_1 = new Beam(notes2.slice(0, 4));\n    const beam2_2 = new Beam(notes2.slice(4, 8));\n    // Important Note: we need to draw voice2 first, since voice2 generates ledger lines.\n    // Otherwise, the ledger lines will be drawn on top of middle C notes in voice1.\n    voice2.draw(ctx);\n    voice1.draw(ctx);\n    beam2_1.setContext(ctx).draw();\n    beam2_2.setContext(ctx).draw();\n    options.assert.ok(true, 'Strokes Test Multi Voice');\n}\nVexFlowTests.register(RestsTests);\nexport { RestsTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Rhythm Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Annotation } from '../src/annotation';\nimport { Beam } from '../src/beam';\nimport { Formatter } from '../src/formatter';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nimport { StaveNote } from '../src/stavenote';\nconst RhythmTests = {\n    Start() {\n        QUnit.module('Rhythm');\n        const run = VexFlowTests.runTests;\n        // TODO: Simplify test names by removing 'Rhythm Draw - '.\n        run('Rhythm Draw - slash notes', drawBasic);\n        run('Rhythm Draw - beamed slash notes', drawBeamedSlashNotes);\n        run('Rhythm Draw - beamed slash notes, some rests', drawSlashAndBeamAndRests);\n        run('Rhythm Draw - 16th note rhythm with scratches', drawSixtenthWithScratches);\n        run('Rhythm Draw - 32nd note rhythm with scratches', drawThirtySecondWithScratches);\n    },\n};\n// CURRENTLY UNUSED. Draws 7 different slash notes without beams.\n/*\nfunction drawSlash(options: TestOptions, contextBuilder: ContextBuilder): void {\n  const ctx = contextBuilder(options.elementId, 350, 180);\n  const stave = new Stave(10, 10, 350);\n  stave.setContext(ctx);\n  stave.draw();\n\n  const notes: StaveNoteStruct[] = [\n    { keys: ['b/4'], duration: 'ws', stemDirection: -1 },\n    { keys: ['b/4'], duration: 'hs', stemDirection: -1 },\n    { keys: ['b/4'], duration: 'qs', stemDirection: -1 },\n    { keys: ['b/4'], duration: '8s', stemDirection: -1 },\n    { keys: ['b/4'], duration: '16s', stemDirection: -1 },\n    { keys: ['b/4'], duration: '32s', stemDirection: -1 },\n    { keys: ['b/4'], duration: '64s', stemDirection: -1 },\n  ];\n  options.assert.expect(notes.length * 2);\n\n  for (let i = 0; i < notes.length; ++i) {\n    const staveNote = new StaveNote(notes[i]).setStave(stave);\n    new TickContext()\n      .addTickable(staveNote)\n      .preFormat()\n      .setX((i + 1) * 25);\n    staveNote.setContext(ctx).draw();\n\n    options.assert.ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\n    options.assert.ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n  }\n}\n*/\nfunction drawBasic(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    // bar 1\n    const staveBar1 = new Stave(10, 30, 150);\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\n    staveBar1.setEndBarType(BarlineType.SINGLE);\n    staveBar1.addClef('treble');\n    staveBar1.addTimeSignature('4/4');\n    staveBar1.addKeySignature('C');\n    staveBar1.setContext(ctx).draw();\n    const notesBar1 = [new StaveNote({ keys: ['b/4'], duration: '1s', stemDirection: -1 })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\n    // bar 2 - juxtaposing second bar next to first bar\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 120);\n    staveBar2.setBegBarType(BarlineType.SINGLE);\n    staveBar2.setEndBarType(BarlineType.SINGLE);\n    staveBar2.setContext(ctx).draw();\n    // bar 2\n    const notesBar2 = [\n        new StaveNote({ keys: ['b/4'], duration: '2s', stemDirection: -1 }),\n        new StaveNote({ keys: ['b/4'], duration: '2s', stemDirection: -1 }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\n    // bar 3 - juxtaposing second bar next to first bar\n    const staveBar3 = new Stave(staveBar2.getWidth() + staveBar2.getX(), staveBar2.getY(), 170);\n    staveBar3.setContext(ctx).draw();\n    // bar 3\n    const notesBar3 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '4s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '4s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '4s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '4s',\n            stemDirection: -1,\n        }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar3, notesBar3);\n    // bar 4 - juxtaposing second bar next to first bar\n    const staveBar4 = new Stave(staveBar3.getWidth() + staveBar3.getX(), staveBar3.getY(), 200);\n    staveBar4.setContext(ctx).draw();\n    // bar 4\n    const notesBar4 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar4, notesBar4);\n    options.assert.expect(0);\n}\nfunction drawBeamedSlashNotes(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    // bar 1\n    const staveBar1 = new Stave(10, 30, 300);\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\n    staveBar1.setEndBarType(BarlineType.SINGLE);\n    staveBar1.addClef('treble');\n    staveBar1.addTimeSignature('4/4');\n    staveBar1.addKeySignature('C');\n    staveBar1.setContext(ctx).draw();\n    // bar 4\n    const notesBar1Part1 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n    ];\n    const notesBar1Part2 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n    ];\n    // create the beams for 8th notes in 2nd measure\n    const beam1 = new Beam(notesBar1Part1);\n    const beam2 = new Beam(notesBar1Part2);\n    const notesBar1 = notesBar1Part1.concat(notesBar1Part2);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\n    // Render beams\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    options.assert.expect(0);\n}\nfunction drawSlashAndBeamAndRests(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    // bar 1\n    const staveBar1 = new Stave(10, 30, 300);\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\n    staveBar1.setEndBarType(BarlineType.SINGLE);\n    staveBar1.addClef('treble');\n    staveBar1.addTimeSignature('4/4');\n    staveBar1.addKeySignature('F');\n    staveBar1.setContext(ctx).draw();\n    // bar 1\n    const notesBar1Part1 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({ keys: ['b/4'], duration: '8s', stemDirection: -1 }),\n    ];\n    notesBar1Part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 2), 0);\n    const notesBar1Part2 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8r',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8r',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8r',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '8s',\n            stemDirection: -1,\n        }),\n    ];\n    // create the beams for 8th notes in 2nd measure\n    const beam1 = new Beam(notesBar1Part1);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1Part1.concat(notesBar1Part2));\n    // Render beams\n    beam1.setContext(ctx).draw();\n    // bar 2 - juxtaposing second bar next to first bar\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 220);\n    staveBar2.setContext(ctx).draw();\n    const notesBar2 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '1s',\n            stemDirection: -1,\n        }),\n    ];\n    notesBar2[0].addModifier(new Annotation('F').setFont('Times', VexFlowTests.Font.size + 2), 0);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\n    options.assert.expect(0);\n}\nfunction drawSixtenthWithScratches(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    // bar 1\n    const staveBar1 = new Stave(10, 30, 300);\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\n    staveBar1.setEndBarType(BarlineType.SINGLE);\n    staveBar1.addClef('treble');\n    staveBar1.addTimeSignature('4/4');\n    staveBar1.addKeySignature('F');\n    staveBar1.setContext(ctx).draw();\n    // bar 1\n    const notesBar1Part1 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16m',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16s',\n            stemDirection: -1,\n        }),\n    ];\n    const notesBar1Part2 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16m',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16s',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16r',\n            stemDirection: -1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '16s',\n            stemDirection: -1,\n        }),\n    ];\n    notesBar1Part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 3), 0);\n    // create the beams for 8th notes in 2nd measure\n    const beam1 = new Beam(notesBar1Part1);\n    const beam2 = new Beam(notesBar1Part2);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1Part1.concat(notesBar1Part2));\n    // Render beams\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    options.assert.expect(0);\n}\nfunction drawThirtySecondWithScratches(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    // bar 1\n    const staveBar1 = new Stave(10, 30, 300);\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\n    staveBar1.setEndBarType(BarlineType.SINGLE);\n    staveBar1.addClef('treble');\n    staveBar1.addTimeSignature('4/4');\n    staveBar1.addKeySignature('F');\n    staveBar1.setContext(ctx).draw();\n    // bar 1\n    const notesBar1Part1 = [\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32s',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32s',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32m',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32s',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32m',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32s',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32r',\n            stemDirection: 1,\n        }),\n        new StaveNote({\n            keys: ['b/4'],\n            duration: '32s',\n            stemDirection: 1,\n        }),\n    ];\n    notesBar1Part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 3), 0);\n    // Create the beams for 8th notes in 2nd measure.\n    const beam1 = new Beam(notesBar1Part1);\n    // Helper function to justify and draw a 4/4 voice.\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1Part1);\n    // Render beams\n    beam1.setContext(ctx).draw();\n    options.assert.expect(0);\n}\nVexFlowTests.register(RhythmTests);\nexport { RhythmTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Basic Stave Tests\n// TODO: Like Stave.setTempo(t: StaveTempoOptions, ...), Stave.setText(...) could declare an interface called StaveTextOptions.\n//       This helps developers because they can use the named type in their code for type checking.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Beam } from '../src/beam';\nimport { Clef } from '../src/clef';\nimport { Formatter } from '../src/formatter';\nimport { KeySignature } from '../src/keysignature';\nimport { Modifier } from '../src/modifier';\nimport { Stave } from '../src/stave';\nimport { Barline, BarlineType } from '../src/stavebarline';\nimport { StaveNote } from '../src/stavenote';\nimport { Repetition } from '../src/staverepetition';\nimport { VoltaType } from '../src/stavevolta';\nimport { TextJustification } from '../src/textnote';\nimport { TimeSignature } from '../src/timesignature';\nconst StaveTests = {\n    Start() {\n        QUnit.module('Stave');\n        QUnit.test('StaveModifiers SortByCategory', sortByCategory);\n        const run = VexFlowTests.runTests;\n        run('Stave Draw Test', draw);\n        run('Open Stave Draw Test', drawOpenStave);\n        run('Multiple Stave Barline Test', drawMultipleMeasures);\n        run('Multiple Stave Barline Test (14pt Section)', drawMultipleMeasures, { fontSize: 14 });\n        run('Multiple Stave Repeats Test', drawRepeats);\n        run('Stave End Modifiers Test', drawEndModifiers);\n        run('Stave Repetition (CODA) Positioning', drawStaveRepetition, { yShift: 0 });\n        run('Stave Repetition (CODA) Positioning (-20)', drawStaveRepetition, { yShift: -20 });\n        run('Stave Repetition (CODA) Positioning (+10)', drawStaveRepetition, { yShift: +10 });\n        run('Multiple Staves Volta Test', drawVolta);\n        run('Volta + Modifier Measure Test', drawVoltaModifier);\n        run('Tempo Test', drawTempo);\n        run('Single Line Configuration Test', configureSingleLine);\n        run('Batch Line Configuration Test', configureAllLines);\n        run('Stave Text Test', drawStaveText);\n        run('Multiple Line Stave Text Test', drawStaveTextMultiLine);\n        run('Factory API', factoryAPI);\n    },\n};\nfunction sortByCategory(assert) {\n    const stave = new Stave(0, 0, 300);\n    const clef0 = new Clef('treble');\n    const clef1 = new Clef('alto');\n    const clef2 = new Clef('bass');\n    const time0 = new TimeSignature('C');\n    const time1 = new TimeSignature('C|');\n    const time2 = new TimeSignature('9/8');\n    const key0 = new KeySignature('G');\n    const key1 = new KeySignature('F');\n    const key2 = new KeySignature('D');\n    const bar0 = new Barline(BarlineType.SINGLE);\n    const bar1 = new Barline(BarlineType.DOUBLE);\n    const bar2 = new Barline(BarlineType.NONE);\n    // const order0 = { barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3 };\n    // const order1 = { timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3 };\n    const order0 = { Barline: 0, Clef: 1, KeySignature: 2, TimeSignature: 3 };\n    const order1 = { TimeSignature: 0, KeySignature: 1, Barline: 2, Clef: 3 };\n    const sortAndCompare = (title, a, b, order) => {\n        stave.sortByCategory(a, order);\n        // Verify that the two arrays are identical.\n        let isSame = true;\n        if (a.length !== b.length)\n            isSame = false;\n        for (let i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i])\n                isSame = false;\n        }\n        assert.ok(isSame, title);\n    };\n    sortAndCompare('Keep the original order 1', [bar0, bar1, clef0, clef1, key0, key1, time0, time1], [bar0, bar1, clef0, clef1, key0, key1, time0, time1], order0);\n    sortAndCompare('Keep the original order 2', [time0, time1, key0, key1, bar0, bar1, clef0, clef1], [time0, time1, key0, key1, bar0, bar1, clef0, clef1], order1);\n    sortAndCompare('Sort and keep 1', [bar0, bar1, clef0, clef1, key0, key1, time0, time1], [time0, time1, key0, key1, bar0, bar1, clef0, clef1], order1);\n    sortAndCompare('Sort and keep 2', [bar0, clef0, key0, time0, key1, time1, clef1, bar1, time2, clef2, bar2, key2], [bar0, bar1, bar2, clef0, clef1, clef2, key0, key1, key2, time0, time1, time2], order0);\n    sortAndCompare('Sort and keep 3', [bar2, clef2, key2, time0, key0, time2, clef1, bar1, time1, clef0, bar0, key1], [time0, time2, time1, key2, key0, key1, bar2, bar1, bar0, clef2, clef1, clef0], order1);\n}\nfunction draw(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 150);\n    const stave = new Stave(10, 10, 300);\n    stave.setContext(ctx);\n    stave.draw();\n    options.assert.equal(stave.getYForNote(0), 100, 'getYForNote(0)');\n    options.assert.equal(stave.getYForLine(5), 100, 'getYForLine(5)');\n    options.assert.equal(stave.getYForLine(0), 50, 'getYForLine(0) - Top Line');\n    options.assert.equal(stave.getYForLine(4), 90, 'getYForLine(4) - Bottom Line');\n    options.assert.ok(true, 'all pass');\n}\nfunction drawOpenStave(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 350);\n    let stave = new Stave(10, 10, 300, { leftBar: false });\n    stave.setContext(ctx);\n    stave.draw();\n    stave = new Stave(10, 150, 300, { rightBar: false });\n    stave.setContext(ctx);\n    stave.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawMultipleMeasures(options, contextBuilder) {\n    var _a, _b;\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 550, 200);\n    // bar 1\n    const staveBar1 = new Stave(10, 50, 200);\n    staveBar1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    staveBar1.setEndBarType(BarlineType.DOUBLE);\n    staveBar1.setSection('A', 0, 0, (_a = options.params) === null || _a === void 0 ? void 0 : _a.fontSize, false);\n    staveBar1.addClef('treble').setContext(ctx).draw();\n    const notesBar1 = [\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\n    // bar 2 - juxtaposing second bar next to first bar\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 300);\n    staveBar2.setSection('B', 0, 0, (_b = options.params) === null || _b === void 0 ? void 0 : _b.fontSize);\n    staveBar2.setEndBarType(BarlineType.END);\n    staveBar2.setContext(ctx).draw();\n    const notesBar2Part1 = [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ];\n    const notesBar2Part2 = [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ];\n    // create the beams for 8th notes in 2nd measure\n    const beam1 = new Beam(notesBar2Part1);\n    const beam2 = new Beam(notesBar2Part2);\n    const notesBar2 = notesBar2Part1.concat(notesBar2Part2);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\n    // Render beams\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n}\nfunction drawRepeats(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 750, 120);\n    // bar 1\n    const staveBar1 = new Stave(10, 0, 250);\n    staveBar1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    staveBar1.setEndBarType(BarlineType.REPEAT_END);\n    staveBar1.addClef('treble');\n    staveBar1.addKeySignature('A');\n    staveBar1.setContext(ctx).draw();\n    const notesBar1 = [\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\n    // bar 2 - juxtaposing second bar next to first bar\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 250);\n    staveBar2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    staveBar2.setEndBarType(BarlineType.REPEAT_END);\n    staveBar2.setContext(ctx).draw();\n    const notesBar2Part1 = [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ];\n    const notesBar2Part2 = [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ];\n    notesBar2Part2[0].addModifier(new Accidental('#'), 0);\n    notesBar2Part2[1].addModifier(new Accidental('#'), 0);\n    notesBar2Part2[3].addModifier(new Accidental('b'), 0);\n    // create the beams for 8th notes in 2nd measure\n    const beam1 = new Beam(notesBar2Part1);\n    const beam2 = new Beam(notesBar2Part2);\n    const notesBar2 = notesBar2Part1.concat(notesBar2Part2);\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\n    // Render beams\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    // bar 3 - juxtaposing third bar next to second bar\n    const staveBar3 = new Stave(staveBar2.getWidth() + staveBar2.getX(), staveBar2.getY(), 50);\n    staveBar3.setContext(ctx).draw();\n    const notesBar3 = [new StaveNote({ keys: ['d/5'], duration: 'wr' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar3, notesBar3);\n    // bar 4 - juxtaposing third bar next to third bar\n    const staveBar4 = new Stave(staveBar3.getWidth() + staveBar3.getX(), staveBar3.getY(), 250 - staveBar1.getModifierXShift());\n    staveBar4.setBegBarType(BarlineType.REPEAT_BEGIN);\n    staveBar4.setEndBarType(BarlineType.REPEAT_END);\n    staveBar4.setContext(ctx).draw();\n    const notesBar4 = [\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, staveBar4, notesBar4);\n}\nfunction drawEndModifiers(options, contextBuilder) {\n    options.assert.expect(0);\n    const staveWidth = 230;\n    const blockHeight = 80;\n    let x = 10;\n    let y = 0;\n    const ctx = contextBuilder(options.elementId, 800, 700);\n    function drawStavesInTwoLines(endBarLine) {\n        // Draw a stave with one measure. Change the ending modifiers.\n        // eslint-disable-next-line\n        function drawStave(x, y, width, begMods, endMods) {\n            const staveBar = new Stave(x, y, width - 10);\n            if (begMods) {\n                if (begMods.barLine !== undefined) {\n                    staveBar.setBegBarType(begMods.barLine);\n                }\n                if (begMods.clef !== undefined) {\n                    staveBar.addClef(begMods.clef);\n                }\n                if (begMods.keySig !== undefined) {\n                    staveBar.addKeySignature(begMods.keySig);\n                }\n                if (begMods.timeSig !== undefined) {\n                    staveBar.setTimeSignature(begMods.timeSig);\n                }\n            }\n            if (endMods) {\n                if (endMods.barLine !== undefined) {\n                    staveBar.setEndBarType(endMods.barLine);\n                }\n                if (endMods.clef !== undefined) {\n                    staveBar.addEndClef(endMods.clef);\n                }\n                if (endMods.keySig !== undefined) {\n                    staveBar.setEndKeySignature(endMods.keySig);\n                }\n                if (endMods.timeSig !== undefined) {\n                    staveBar.setEndTimeSignature(endMods.timeSig);\n                }\n            }\n            staveBar.setContext(ctx).draw();\n            const notesBar = [\n                new StaveNote({ keys: ['c/4'], duration: 'q' }),\n                new StaveNote({ keys: ['d/4'], duration: 'q' }),\n                new StaveNote({ keys: ['b/4'], duration: 'qr' }),\n                new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\n            ];\n            Formatter.FormatAndDraw(ctx, staveBar, notesBar);\n        }\n        drawStave(x, y, staveWidth + 50, { barLine: BarlineType.REPEAT_BEGIN, clef: 'treble', keySig: 'A' }, { barLine: endBarLine, clef: 'bass' });\n        x += staveWidth + 50;\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, keySig: 'E' });\n        x += staveWidth;\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, timeSig: '2/4' });\n        x += staveWidth;\n        x = 10;\n        y += blockHeight;\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'bass', timeSig: '2/4' });\n        x += staveWidth;\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'treble', keySig: 'Ab' });\n        x += staveWidth;\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'bass', keySig: 'Ab', timeSig: '2/4' });\n        x += staveWidth;\n    }\n    y = 0;\n    x = 10;\n    // First pair of staves.\n    drawStavesInTwoLines(BarlineType.SINGLE);\n    y += blockHeight + 10;\n    x = 10;\n    // Second pair of staves, with double barlines.\n    drawStavesInTwoLines(BarlineType.DOUBLE);\n    y += blockHeight + 10;\n    x = 10;\n    // Third pair of staves, with \"two dot\" repeat barlines.\n    drawStavesInTwoLines(BarlineType.REPEAT_END);\n    y += blockHeight + 10;\n    x = 10;\n    // Fourth pair of staves, with \"two dots\" on each side of the barlines.\n    drawStavesInTwoLines(BarlineType.REPEAT_BOTH);\n}\nfunction drawStaveRepetition(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 725, 200);\n    // bar 1\n    const mm1 = new Stave(10, 50, 150);\n    mm1.addClef('treble');\n    mm1.setRepetitionType(Repetition.type.DS_AL_FINE, options.params.yShift);\n    mm1.setMeasure(1);\n    mm1.setContext(ctx).draw();\n    const notesmm1 = [\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\n    // bar 2 - juxtapose second measure\n    const mm2 = new Stave(mm1.getWidth() + mm1.getX(), mm1.getY(), 150);\n    mm2.setRepetitionType(Repetition.type.TO_CODA, options.params.yShift);\n    mm2.setMeasure(2);\n    mm2.setContext(ctx).draw();\n    const notesmm2 = [\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\n    // bar 3 - juxtapose third measure\n    const mm3 = new Stave(mm2.getWidth() + mm2.getX(), mm1.getY(), 150);\n    mm3.setRepetitionType(Repetition.type.DS_AL_CODA, options.params.yShift);\n    mm3.setMeasure(3);\n    mm3.setContext(ctx).draw();\n    const notesmm3 = [\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\n    // bar 4 - juxtapose fourth measure\n    const mm4 = new Stave(mm3.getWidth() + mm3.getX(), mm1.getY(), 150);\n    mm4.setRepetitionType(Repetition.type.CODA_LEFT, options.params.yShift);\n    mm4.setMeasure(4);\n    mm4.setContext(ctx).draw();\n    const notesmm4 = [\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\n    ];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\n}\nfunction drawVolta(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 725, 200);\n    // bar 1\n    const mm1 = new Stave(10, 50, 125);\n    mm1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    mm1.setRepetitionType(Repetition.type.SEGNO_LEFT);\n    mm1.addClef('treble');\n    mm1.addKeySignature('A');\n    mm1.setMeasure(1);\n    mm1.setSection('A', 0);\n    mm1.setContext(ctx).draw();\n    const notesmm1 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\n    // bar 2 - juxtapose second measure\n    const mm2 = new Stave(mm1.getWidth() + mm1.getX(), mm1.getY(), 60);\n    mm2.setRepetitionType(Repetition.type.CODA_RIGHT);\n    mm2.setMeasure(2);\n    mm2.setContext(ctx).draw();\n    const notesmm2 = [new StaveNote({ keys: ['d/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\n    // bar 3 - juxtapose third measure\n    const mm3 = new Stave(mm2.getWidth() + mm2.getX(), mm1.getY(), 60);\n    mm3.setVoltaType(VoltaType.BEGIN, '1.', -5);\n    mm3.setMeasure(3);\n    mm3.setContext(ctx).draw();\n    const notesmm3 = [new StaveNote({ keys: ['e/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\n    // bar 4 - juxtapose fourth measure\n    const mm4 = new Stave(mm3.getWidth() + mm3.getX(), mm1.getY(), 60);\n    mm4.setVoltaType(VoltaType.MID, '', -5);\n    mm4.setMeasure(4);\n    mm4.setContext(ctx).draw();\n    const notesmm4 = [new StaveNote({ keys: ['f/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\n    // bar 5 - juxtapose fifth measure\n    const mm5 = new Stave(mm4.getWidth() + mm4.getX(), mm1.getY(), 60);\n    mm5.setEndBarType(BarlineType.REPEAT_END);\n    mm5.setVoltaType(VoltaType.END, '', -5);\n    mm5.setMeasure(5);\n    mm5.setContext(ctx).draw();\n    const notesmm5 = [new StaveNote({ keys: ['g/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm5, notesmm5);\n    // bar 6 - juxtapose sixth measure\n    const mm6 = new Stave(mm5.getWidth() + mm5.getX(), mm1.getY(), 60);\n    mm6.setVoltaType(VoltaType.BEGIN_END, '2.', -5);\n    mm6.setEndBarType(BarlineType.DOUBLE);\n    mm6.setMeasure(6);\n    mm6.setContext(ctx).draw();\n    const notesmm6 = [new StaveNote({ keys: ['a/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm6, notesmm6);\n    // bar 7 - juxtapose seventh measure\n    const mm7 = new Stave(mm6.getWidth() + mm6.getX(), mm1.getY(), 60);\n    mm7.setMeasure(7);\n    mm7.setSection('B', 0);\n    mm7.setContext(ctx).draw();\n    const notesmm7 = [new StaveNote({ keys: ['b/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm7, notesmm7);\n    // bar 8 - juxtapose eighth measure\n    const mm8 = new Stave(mm7.getWidth() + mm7.getX(), mm1.getY(), 60);\n    mm8.setEndBarType(BarlineType.DOUBLE);\n    mm8.setRepetitionType(Repetition.type.DS_AL_CODA);\n    mm8.setMeasure(8);\n    mm8.setContext(ctx).draw();\n    const notesmm8 = [new StaveNote({ keys: ['c/5'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm8, notesmm8);\n    // bar 9 - juxtapose ninth measure\n    const mm9 = new Stave(mm8.getWidth() + mm8.getX() + 20, mm1.getY(), 125);\n    mm9.setEndBarType(BarlineType.END);\n    mm9.setRepetitionType(Repetition.type.CODA_LEFT);\n    mm9.addClef('treble');\n    mm9.addKeySignature('A');\n    mm9.setMeasure(9);\n    mm9.setContext(ctx).draw();\n    const notesmm9 = [new StaveNote({ keys: ['d/5'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm9, notesmm9);\n}\nfunction drawVoltaModifier(options, contextBuilder) {\n    options.assert.expect(0);\n    // Get the rendering context\n    const ctx = contextBuilder(options.elementId, 1100, 200);\n    // bar 1: volta begin, with modifiers (clef, keysignature)\n    const mm1 = new Stave(10, 50, 175);\n    mm1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    mm1.setVoltaType(VoltaType.BEGIN_END, '1.', -5);\n    mm1.addClef('treble');\n    mm1.addKeySignature('A');\n    mm1.setMeasure(1);\n    mm1.setSection('A', 0);\n    mm1.setContext(ctx).draw();\n    const notesmm1 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    // Helper function to justify and draw a 4/4 voice\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\n    // bar 2: volta beginMid, with modifiers (clef, keysignature)\n    const mm2 = new Stave(mm1.getX() + mm1.getWidth(), mm1.getY(), 175);\n    mm2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    mm2.setRepetitionType(Repetition.type.DS);\n    mm2.setVoltaType(VoltaType.BEGIN, '2.', -5);\n    mm2.addClef('treble');\n    mm2.addKeySignature('A');\n    mm2.setMeasure(2);\n    mm2.setContext(ctx).draw();\n    const notesmm2 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\n    // bar 3: volta mid, with modifiers (clef, keysignature)\n    const mm3 = new Stave(mm2.getX() + mm2.getWidth(), mm2.getY(), 175);\n    mm3.setVoltaType(VoltaType.MID, '', -5);\n    mm3.setRepetitionType(Repetition.type.DS);\n    mm3.addClef('treble');\n    mm3.addKeySignature('B');\n    mm3.setMeasure(3);\n    mm3.setSection('B', 0);\n    mm3.setContext(ctx).draw();\n    const notesmm3 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\n    // bar 4: volta end, with modifiers (clef, keysignature)\n    const mm4 = new Stave(mm3.getX() + mm3.getWidth(), mm3.getY(), 175);\n    mm4.setVoltaType(VoltaType.END, '1.', -5);\n    mm4.setRepetitionType(Repetition.type.DS);\n    mm4.addClef('treble');\n    mm4.addKeySignature('A');\n    mm4.setMeasure(4);\n    mm4.setSection('C', 0);\n    mm4.setContext(ctx).draw();\n    const notesmm4 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\n    // bar 5: d.s. shift (similar potential x-shift concern)\n    const mm5 = new Stave(mm4.getX() + mm4.getWidth(), mm4.getY(), 175);\n    // mm5.addModifier(new Repetition(Repetition.type.DS, mm4.getX() + mm4.getWidth(), 50), StaveModifierPosition.RIGHT);\n    mm5.setEndBarType(BarlineType.DOUBLE);\n    mm5.setRepetitionType(Repetition.type.DS);\n    mm5.addClef('treble');\n    mm5.addKeySignature('A');\n    mm5.setMeasure(5);\n    mm5.setSection('D', 0);\n    mm5.setContext(ctx).draw();\n    const notesmm5 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    Formatter.FormatAndDraw(ctx, mm5, notesmm5);\n    // bar 6: d.s. without modifiers\n    const mm6 = new Stave(mm5.getX() + mm5.getWidth(), mm5.getY(), 175);\n    // mm5.addModifier(new Repetition(Repetition.type.DS, mm4.getX() + mm4.getWidth(), 50), StaveModifierPosition.RIGHT);\n    mm6.setRepetitionType(Repetition.type.DS);\n    mm6.setMeasure(6);\n    mm6.setSection('E', 0);\n    mm6.setContext(ctx).draw();\n    const notesmm6 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\n    Formatter.FormatAndDraw(ctx, mm6, notesmm6);\n}\nfunction drawTempo(options, contextBuilder) {\n    options.assert.expect(0);\n    const ctx = contextBuilder(options.elementId, 725, 350);\n    const padding = 10;\n    let x = 0;\n    let y = 50;\n    function drawTempoStaveBar(width, tempo, tempoY, notes) {\n        const staveBar = new Stave(padding + x, y, width);\n        if (x === 0)\n            staveBar.addClef('treble');\n        staveBar.setTempo(tempo, tempoY);\n        staveBar.setContext(ctx).draw();\n        const notesBar = notes || [\n            new StaveNote({ keys: ['c/4'], duration: 'q' }),\n            new StaveNote({ keys: ['d/4'], duration: 'q' }),\n            new StaveNote({ keys: ['b/4'], duration: 'q' }),\n            new StaveNote({ keys: ['c/4'], duration: 'q' }),\n        ];\n        Formatter.FormatAndDraw(ctx, staveBar, notesBar);\n        x += width;\n    }\n    drawTempoStaveBar(120, { duration: 'q', dots: 1, bpm: 80 }, 0);\n    drawTempoStaveBar(100, { duration: '8', dots: 2, bpm: 90 }, 0);\n    drawTempoStaveBar(100, { duration: '16', dots: 1, bpm: 96 }, 0);\n    drawTempoStaveBar(100, { duration: '32', bpm: 70 }, 0);\n    drawTempoStaveBar(250, { name: 'Andante', bpm: 120 }, -20, [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/5'], duration: '8' }),\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ]);\n    x = 0;\n    y += 150;\n    drawTempoStaveBar(120, { duration: 'w', bpm: 80 }, 0);\n    drawTempoStaveBar(100, { duration: 'h', bpm: 90 }, 0);\n    drawTempoStaveBar(100, { duration: 'q', bpm: 96 }, 0);\n    drawTempoStaveBar(100, { duration: '8', bpm: 70 }, 0);\n    drawTempoStaveBar(250, { name: 'Andante grazioso' }, 0, [\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\n    ]);\n}\nfunction configureSingleLine(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    const stave = new Stave(10, 10, 300);\n    stave\n        .setConfigForLine(0, { visible: true })\n        .setConfigForLine(1, { visible: false })\n        .setConfigForLine(2, { visible: true })\n        .setConfigForLine(3, { visible: false })\n        .setConfigForLine(4, { visible: true });\n    stave.setContext(ctx).draw();\n    const config = stave.getConfigForLines();\n    options.assert.equal(config[0].visible, true, 'getLinesConfiguration() - Line 0');\n    options.assert.equal(config[1].visible, false, 'getLinesConfiguration() - Line 1');\n    options.assert.equal(config[2].visible, true, 'getLinesConfiguration() - Line 2');\n    options.assert.equal(config[3].visible, false, 'getLinesConfiguration() - Line 3');\n    options.assert.equal(config[4].visible, true, 'getLinesConfiguration() - Line 4');\n    options.assert.ok(true, 'all pass');\n}\nfunction configureAllLines(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    const stave = new Stave(10, 10, 300);\n    stave\n        .setConfigForLines([{ visible: false }, {}, { visible: false }, { visible: true }, { visible: false }])\n        .setContext(ctx)\n        .draw();\n    const config = stave.getConfigForLines();\n    options.assert.equal(config[0].visible, false, 'getLinesConfiguration() - Line 0');\n    options.assert.equal(config[1].visible, true, 'getLinesConfiguration() - Line 1');\n    options.assert.equal(config[2].visible, false, 'getLinesConfiguration() - Line 2');\n    options.assert.equal(config[3].visible, true, 'getLinesConfiguration() - Line 3');\n    options.assert.equal(config[4].visible, false, 'getLinesConfiguration() - Line 4');\n    options.assert.ok(true, 'all pass');\n}\nfunction drawStaveText(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 900, 140);\n    const stave = new Stave(300, 10, 300);\n    stave.setStaveText('Violin', Modifier.Position.LEFT);\n    stave.setStaveText('Right Text', Modifier.Position.RIGHT);\n    stave.setStaveText('Above Text', Modifier.Position.ABOVE);\n    stave.setStaveText('Below Text', Modifier.Position.BELOW);\n    stave.setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawStaveTextMultiLine(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 900, 200);\n    const stave = new Stave(300, 40, 300);\n    stave.setStaveText('Violin', Modifier.Position.LEFT, { shiftY: -10 });\n    stave.setStaveText('2nd line', Modifier.Position.LEFT, { shiftY: 10 });\n    stave.setStaveText('Right Text', Modifier.Position.RIGHT, { shiftY: -10 });\n    stave.setStaveText('2nd line', Modifier.Position.RIGHT, { shiftY: 10 });\n    stave.setStaveText('Above Text', Modifier.Position.ABOVE, { shiftY: -10 });\n    stave.setStaveText('2nd line', Modifier.Position.ABOVE, { shiftY: 10 });\n    stave.setStaveText('Left Below Text', Modifier.Position.BELOW, {\n        shiftY: -10,\n        justification: TextJustification.LEFT,\n    });\n    stave.setStaveText('Right Below Text', Modifier.Position.BELOW, {\n        shiftY: 10,\n        justification: TextJustification.RIGHT,\n    });\n    stave.setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction factoryAPI(options) {\n    const f = VexFlowTests.makeFactory(options, 900, 200);\n    const stave = f.Stave({ x: 300, y: 40, width: 300 });\n    stave.setStaveText('Violin', Modifier.Position.LEFT, { shiftY: -10 });\n    stave.setStaveText('2nd line', Modifier.Position.LEFT, { shiftY: 10 });\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(StaveTests);\nexport { StaveTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StaveConnector Tests\n// TODO: Should we change StaveConnector.type => StaveConnectorType? We are inconsistent with this.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Modifier } from '../src/modifier';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nimport { StaveConnector } from '../src/staveconnector';\nconst StaveConnectorTests = {\n    Start() {\n        QUnit.module('StaveConnector');\n        const run = VexFlowTests.runTests;\n        run('Single Draw Test', drawSingle);\n        run('Single Draw Test, 4px Stave Line Thickness', drawSingle4pxStaveLines);\n        run('Single Both Sides Test', drawSingleBoth);\n        run('Double Draw Test', drawDouble);\n        run('Bold Double Line Left Draw Test', drawRepeatBegin);\n        run('Bold Double Line Right Draw Test', drawRepeatEnd);\n        run('Thin Double Line Right Draw Test', drawThinDouble);\n        run('Bold Double Lines Overlapping Draw Test', drawRepeatAdjacent);\n        run('Bold Double Lines Offset Draw Test', drawRepeatOffset);\n        run('Bold Double Lines Offset Draw Test 2', drawRepeatOffset2);\n        run('Brace Draw Test', drawBrace);\n        run('Brace Wide Draw Test', drawBraceWide);\n        run('Bracket Draw Test', drawBracket);\n        run('Combined Draw Test', drawCombined);\n    },\n};\nfunction drawSingle(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawSingle4pxStaveLines(options, contextBuilder) {\n    const oldThickness = Flow.STAVE_LINE_THICKNESS;\n    Flow.STAVE_LINE_THICKNESS = 4;\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    Flow.STAVE_LINE_THICKNESS = oldThickness;\n    options.assert.ok(true, 'all pass');\n}\nfunction drawSingleBoth(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector1 = new StaveConnector(stave1, stave2);\n    connector1.setType(StaveConnector.type.SINGLE_LEFT);\n    connector1.setContext(ctx);\n    const connector2 = new StaveConnector(stave1, stave2);\n    connector2.setType(StaveConnector.type.SINGLE_RIGHT);\n    connector2.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector1.draw();\n    connector2.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawDouble(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    const line = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.DOUBLE);\n    connector.setContext(ctx);\n    line.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawBrace(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 450, 300);\n    const stave1 = new Stave(100, 10, 300);\n    const stave2 = new Stave(100, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    const line = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.BRACE);\n    connector.setContext(ctx);\n    connector.setText('Piano');\n    line.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawBraceWide(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, -20, 300);\n    const stave2 = new Stave(25, 200, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    const line = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.BRACE);\n    connector.setContext(ctx);\n    line.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawBracket(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    const connector = new StaveConnector(stave1, stave2);\n    const line = new StaveConnector(stave1, stave2);\n    connector.setType(StaveConnector.type.BRACKET);\n    connector.setContext(ctx);\n    line.setType(StaveConnector.type.SINGLE);\n    connector.setContext(ctx);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    connector.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawRepeatBegin(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    const line = new StaveConnector(stave1, stave2);\n    line.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawRepeatEnd(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave1.setEndBarType(BarlineType.REPEAT_END);\n    stave2.setEndBarType(BarlineType.REPEAT_END);\n    const line = new StaveConnector(stave1, stave2);\n    line.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawThinDouble(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 300);\n    const stave2 = new Stave(25, 120, 300);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave1.setEndBarType(BarlineType.DOUBLE);\n    stave2.setEndBarType(BarlineType.DOUBLE);\n    const line = new StaveConnector(stave1, stave2);\n    line.setType(StaveConnector.type.THIN_DOUBLE);\n    line.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    line.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawRepeatAdjacent(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 150);\n    const stave2 = new Stave(25, 120, 150);\n    const stave3 = new Stave(175, 10, 150);\n    const stave4 = new Stave(175, 120, 150);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave3.setContext(ctx);\n    stave4.setContext(ctx);\n    stave1.setEndBarType(BarlineType.REPEAT_END);\n    stave2.setEndBarType(BarlineType.REPEAT_END);\n    stave3.setEndBarType(BarlineType.END);\n    stave4.setEndBarType(BarlineType.END);\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\n    const connector1 = new StaveConnector(stave1, stave2);\n    const connector2 = new StaveConnector(stave1, stave2);\n    const connector3 = new StaveConnector(stave3, stave4);\n    const connector4 = new StaveConnector(stave3, stave4);\n    connector1.setContext(ctx);\n    connector2.setContext(ctx);\n    connector3.setContext(ctx);\n    connector4.setContext(ctx);\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    stave1.draw();\n    stave2.draw();\n    stave3.draw();\n    stave4.draw();\n    connector1.draw();\n    connector2.draw();\n    connector3.draw();\n    connector4.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawRepeatOffset2(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 150);\n    const stave2 = new Stave(25, 120, 150);\n    const stave3 = new Stave(175, 10, 150);\n    const stave4 = new Stave(175, 120, 150);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave3.setContext(ctx);\n    stave4.setContext(ctx);\n    stave1.addClef('treble');\n    stave2.addClef('bass');\n    stave3.addClef('alto');\n    stave4.addClef('treble');\n    stave1.addTimeSignature('4/4');\n    stave2.addTimeSignature('4/4');\n    stave3.addTimeSignature('6/8');\n    stave4.addTimeSignature('6/8');\n    stave1.setEndBarType(BarlineType.REPEAT_END);\n    stave2.setEndBarType(BarlineType.REPEAT_END);\n    stave3.setEndBarType(BarlineType.END);\n    stave4.setEndBarType(BarlineType.END);\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\n    const connector1 = new StaveConnector(stave1, stave2);\n    const connector2 = new StaveConnector(stave1, stave2);\n    const connector3 = new StaveConnector(stave3, stave4);\n    const connector4 = new StaveConnector(stave3, stave4);\n    const connector5 = new StaveConnector(stave3, stave4);\n    connector1.setContext(ctx);\n    connector2.setContext(ctx);\n    connector3.setContext(ctx);\n    connector4.setContext(ctx);\n    connector5.setContext(ctx);\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    connector5.setType(StaveConnector.type.SINGLE_LEFT);\n    connector1.setXShift(stave1.getModifierXShift());\n    connector3.setXShift(stave3.getModifierXShift());\n    stave1.draw();\n    stave2.draw();\n    stave3.draw();\n    stave4.draw();\n    connector1.draw();\n    connector2.draw();\n    connector3.draw();\n    connector4.draw();\n    connector5.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawRepeatOffset(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 300);\n    const stave1 = new Stave(25, 10, 150);\n    const stave2 = new Stave(25, 120, 150);\n    const stave3 = new Stave(185, 10, 150);\n    const stave4 = new Stave(185, 120, 150);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave3.setContext(ctx);\n    stave4.setContext(ctx);\n    stave1.addClef('bass');\n    stave2.addClef('alto');\n    stave3.addClef('treble');\n    stave4.addClef('tenor');\n    stave3.addKeySignature('Ab');\n    stave4.addKeySignature('Ab');\n    stave1.addTimeSignature('4/4');\n    stave2.addTimeSignature('4/4');\n    stave3.addTimeSignature('6/8');\n    stave4.addTimeSignature('6/8');\n    stave1.setEndBarType(BarlineType.REPEAT_END);\n    stave2.setEndBarType(BarlineType.REPEAT_END);\n    stave3.setEndBarType(BarlineType.END);\n    stave4.setEndBarType(BarlineType.END);\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\n    const connector1 = new StaveConnector(stave1, stave2);\n    const connector2 = new StaveConnector(stave1, stave2);\n    const connector3 = new StaveConnector(stave3, stave4);\n    const connector4 = new StaveConnector(stave3, stave4);\n    const connector5 = new StaveConnector(stave3, stave4);\n    connector1.setContext(ctx);\n    connector2.setContext(ctx);\n    connector3.setContext(ctx);\n    connector4.setContext(ctx);\n    connector5.setContext(ctx);\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\n    connector5.setType(StaveConnector.type.SINGLE_LEFT);\n    connector1.setXShift(stave1.getModifierXShift());\n    connector3.setXShift(stave3.getModifierXShift());\n    stave1.draw();\n    stave2.draw();\n    stave3.draw();\n    stave4.draw();\n    connector1.draw();\n    connector2.draw();\n    connector3.draw();\n    connector4.draw();\n    connector5.draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction drawCombined(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 550, 700);\n    const stave1 = new Stave(150, 10, 300);\n    const stave2 = new Stave(150, 100, 300);\n    const stave3 = new Stave(150, 190, 300);\n    const stave4 = new Stave(150, 280, 300);\n    const stave5 = new Stave(150, 370, 300);\n    const stave6 = new Stave(150, 460, 300);\n    const stave7 = new Stave(150, 560, 300);\n    stave1.setStaveText('Violin', Modifier.Position.LEFT);\n    stave1.setContext(ctx);\n    stave2.setContext(ctx);\n    stave3.setContext(ctx);\n    stave4.setContext(ctx);\n    stave5.setContext(ctx);\n    stave6.setContext(ctx);\n    stave7.setContext(ctx);\n    const connSingle = new StaveConnector(stave1, stave7);\n    const connDouble = new StaveConnector(stave2, stave3);\n    const connBracket = new StaveConnector(stave4, stave7);\n    const connNone = new StaveConnector(stave4, stave5);\n    const connBrace = new StaveConnector(stave6, stave7);\n    connSingle.setType(StaveConnector.type.SINGLE);\n    connDouble.setType(StaveConnector.type.DOUBLE);\n    connBracket.setType(StaveConnector.type.BRACKET);\n    connBrace.setType(StaveConnector.type.BRACE);\n    connBrace.setXShift(-5);\n    connDouble.setText('Piano');\n    connNone.setText('Multiple', { shiftY: -15 });\n    connNone.setText('Line Text', { shiftY: 15 });\n    connBrace.setText('Harpsichord');\n    connSingle.setContext(ctx);\n    connDouble.setContext(ctx);\n    connBracket.setContext(ctx);\n    connNone.setContext(ctx);\n    connBrace.setContext(ctx);\n    stave1.draw();\n    stave2.draw();\n    stave3.draw();\n    stave4.draw();\n    stave5.draw();\n    stave6.draw();\n    stave7.draw();\n    connSingle.draw();\n    connDouble.draw();\n    connBracket.draw();\n    connNone.draw();\n    connBrace.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(StaveConnectorTests);\nexport { StaveConnectorTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Raffaele Viglianti, 2012\n//\n// StaveHairpin Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { StaveHairpin } from '../src/stavehairpin';\nconst StaveHairpinTests = {\n    Start() {\n        QUnit.module('StaveHairpin');\n        const run = VexFlowTests.runTests;\n        run('Simple StaveHairpin', simple);\n        run('Horizontal Offset StaveHairpin', horizontal);\n        run('Vertical Offset StaveHairpin', vertical);\n        run('Height StaveHairpin', height);\n    },\n};\n/**\n * Helper function to draw a single hairpin (either crescendo or decrescendo).\n * @param type is StaveHairpin.type.CRESC or StaveHairpin.type.DECRESC.\n * @param position is Modifier.Position.ABOVE or Modifier.Position.BELOW.\n */\nfunction drawHairpin(firstNote, lastNote, ctx, type, position, options) {\n    const hairpin = new StaveHairpin({ firstNote, lastNote }, type);\n    hairpin.setContext(ctx);\n    hairpin.setPosition(position);\n    if (options) {\n        hairpin.setRenderOptions(options);\n    }\n    hairpin.draw();\n}\n/**\n * Helper function\n */\nfunction createTest(drawTwoHairpins) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options);\n        const ctx = factory.getContext();\n        const stave = factory.Stave();\n        const notes = [\n            factory\n                .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: 1, duration: '4' })\n                .addModifier(factory.Accidental({ type: 'b' }), 0)\n                .addModifier(factory.Accidental({ type: '#' }), 1),\n            factory.StaveNote({ keys: ['d/4'], stemDirection: 1, duration: '4' }),\n            factory.StaveNote({ keys: ['e/4'], stemDirection: 1, duration: '4' }),\n            factory.StaveNote({ keys: ['f/4'], stemDirection: 1, duration: '4' }),\n        ];\n        const voice = factory.Voice().addTickables(notes);\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        factory.draw();\n        drawTwoHairpins(ctx, notes);\n        options.assert.ok(true, 'Simple Test');\n    };\n}\nconst simple = createTest((ctx, notes) => {\n    drawHairpin(notes[0], notes[2], ctx, 1, 4);\n    drawHairpin(notes[1], notes[3], ctx, 2, 3);\n});\nconst horizontal = createTest((ctx, notes) => {\n    drawHairpin(notes[0], notes[2], ctx, 1, 3, {\n        height: 10,\n        yShift: 0,\n        leftShiftPx: 0,\n        rightShiftPx: 0, // right horizontal offset\n    });\n    drawHairpin(notes[3], notes[3], ctx, 2, 4, {\n        height: 10,\n        yShift: 0,\n        leftShiftPx: 0,\n        rightShiftPx: 120, // right horizontal offset\n    });\n});\nconst vertical = createTest((ctx, notes) => {\n    drawHairpin(notes[0], notes[2], ctx, 1, 4, {\n        height: 10,\n        yShift: 0,\n        leftShiftPx: 0,\n        rightShiftPx: 0, // right horizontal offset\n    });\n    drawHairpin(notes[2], notes[3], ctx, 2, 4, {\n        height: 10,\n        yShift: -15,\n        leftShiftPx: 2,\n        rightShiftPx: 0, // right horizontal offset\n    });\n});\nconst height = createTest((ctx, notes) => {\n    drawHairpin(notes[0], notes[2], ctx, 1, 4, {\n        height: 10,\n        yShift: 0,\n        leftShiftPx: 0,\n        rightShiftPx: 0, // right horizontal offset\n    });\n    drawHairpin(notes[2], notes[3], ctx, 2, 4, {\n        height: 15,\n        yShift: 0,\n        leftShiftPx: 2,\n        rightShiftPx: 0, // right horizontal offset\n    });\n});\nVexFlowTests.register(StaveHairpinTests);\nexport { StaveHairpinTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StaveLine Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Dot } from '../src/dot';\nimport { Font, FontStyle } from '../src/font';\nconst StaveLineTests = {\n    Start() {\n        QUnit.module('StaveLine');\n        const run = VexFlowTests.runTests;\n        run('Simple StaveLine', simple0);\n        run('StaveLine Arrow Options', simple1);\n    },\n};\nfunction simple0(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave().addClef('treble');\n    const notes = [\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\n        f.StaveNote({ keys: ['c/5'], duration: '4', clef: 'treble' }),\n        f.StaveNote({ keys: ['c/4', 'g/4', 'b/4'], duration: '4', clef: 'treble' }),\n        f.StaveNote({ keys: ['f/4', 'a/4', 'f/5'], duration: '4', clef: 'treble' }),\n    ];\n    const voice = f.Voice().addTickables(notes);\n    f.StaveLine({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0],\n        lastIndexes: [0],\n        options: {\n            font: { family: Font.SERIF, size: 12, style: FontStyle.ITALIC },\n            text: 'gliss.',\n        },\n    });\n    const staveLine2 = f.StaveLine({\n        from: notes[2],\n        to: notes[3],\n        firstIndexes: [2, 1, 0],\n        lastIndexes: [0, 1, 2],\n    });\n    staveLine2.renderOptions.lineDash = [10, 10];\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction simple1(options) {\n    const f = VexFlowTests.makeFactory(options, 770);\n    const stave = f.Stave().addClef('treble');\n    const notes = [\n        f.StaveNote({ keys: ['c#/5', 'd/5'], duration: '4', clef: 'treble', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }).addModifier(f.Accidental({ type: '#' }), 0),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '4', clef: 'treble' }),\n        f\n            .StaveNote({ keys: ['f/4', 'a/4', 'c/5'], duration: '4', clef: 'treble' })\n            .addModifier(f.Accidental({ type: '#' }), 2),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }).addModifier(f.Accidental({ type: '#' }), 0),\n        f.StaveNote({ keys: ['c#/5', 'd/5'], duration: '4', clef: 'treble', stemDirection: -1 }),\n        f.StaveNote({ keys: ['c/4', 'd/4', 'g/4'], duration: '4', clef: 'treble' }),\n        f\n            .StaveNote({ keys: ['f/4', 'a/4', 'c/5'], duration: '4', clef: 'treble' })\n            .addModifier(f.Accidental({ type: '#' }), 2),\n    ];\n    Dot.buildAndAttach([notes[0]], { all: true });\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    const staveLine0 = f.StaveLine({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0],\n        lastIndexes: [0],\n        options: { text: 'Left' },\n    });\n    const staveLine4 = f.StaveLine({\n        from: notes[2],\n        to: notes[3],\n        firstIndexes: [1],\n        lastIndexes: [1],\n        options: { text: 'Right' },\n    });\n    const staveLine1 = f.StaveLine({\n        from: notes[4],\n        to: notes[5],\n        firstIndexes: [0],\n        lastIndexes: [0],\n        options: { text: 'Center' },\n    });\n    const staveLine2 = f.StaveLine({\n        from: notes[6],\n        to: notes[7],\n        firstIndexes: [1],\n        lastIndexes: [0],\n    });\n    const staveLine3 = f.StaveLine({\n        from: notes[6],\n        to: notes[7],\n        firstIndexes: [2],\n        lastIndexes: [2],\n        options: { text: 'Top' },\n    });\n    staveLine0.renderOptions.drawEndArrow = true;\n    staveLine0.renderOptions.textJustification = 1;\n    staveLine0.renderOptions.textPositionVertical = 2;\n    staveLine1.renderOptions.drawEndArrow = true;\n    staveLine1.renderOptions.arrowheadLength = 30;\n    staveLine1.renderOptions.lineWidth = 5;\n    staveLine1.renderOptions.textJustification = 2;\n    staveLine1.renderOptions.textPositionVertical = 2;\n    staveLine4.renderOptions.lineWidth = 2;\n    staveLine4.renderOptions.drawEndArrow = true;\n    staveLine4.renderOptions.drawStartArrow = true;\n    staveLine4.renderOptions.arrowheadAngle = 0.5;\n    staveLine4.renderOptions.arrowheadLength = 20;\n    staveLine4.renderOptions.textJustification = 3;\n    staveLine4.renderOptions.textPositionVertical = 2;\n    staveLine2.renderOptions.drawStartArrow = true;\n    staveLine2.renderOptions.lineDash = [5, 4];\n    staveLine3.renderOptions.drawEndArrow = true;\n    staveLine3.renderOptions.drawStartArrow = true;\n    staveLine3.renderOptions.color = 'red';\n    staveLine3.renderOptions.textPositionVertical = 1;\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(StaveLineTests);\nexport { StaveLineTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StaveModifier Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nimport { StaveModifierPosition } from '../src/stavemodifier';\nconst StaveModifierTests = {\n    Start() {\n        QUnit.module('StaveModifier');\n        const run = VexFlowTests.runTests;\n        run('Stave Draw Test', draw);\n        run('Begin & End StaveModifier Test', drawBeginAndEnd);\n    },\n};\nfunction draw(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    const stave = new Stave(10, 10, 300);\n    stave.setContext(ctx);\n    stave.draw();\n    options.assert.equal(stave.getYForNote(0), 100, 'getYForNote(0)');\n    options.assert.equal(stave.getYForLine(5), 100, 'getYForLine(5)');\n    options.assert.equal(stave.getYForLine(0), 50, 'getYForLine(0) - Top Line');\n    options.assert.equal(stave.getYForLine(4), 90, 'getYForLine(4) - Bottom Line');\n    options.assert.ok(true, 'all pass');\n}\nfunction drawBeginAndEnd(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    const stave = new Stave(10, 10, 400);\n    stave.setContext(ctx);\n    stave.setTimeSignature('C|');\n    stave.setKeySignature('Db');\n    stave.setClef('treble');\n    stave.setBegBarType(BarlineType.REPEAT_BEGIN);\n    stave.setEndClef('alto');\n    stave.setEndTimeSignature('9/8');\n    stave.setEndKeySignature('G', 'C#');\n    stave.setEndBarType(BarlineType.DOUBLE);\n    stave.draw();\n    // change\n    const END = StaveModifierPosition.END;\n    stave.setY(100);\n    stave.setTimeSignature('3/4');\n    stave.setKeySignature('G', 'C#');\n    stave.setClef('bass');\n    stave.setBegBarType(BarlineType.SINGLE);\n    stave.setClef('treble', undefined, undefined, END);\n    stave.setTimeSignature('C', undefined, END);\n    stave.setKeySignature('F', undefined, END);\n    stave.setEndBarType(BarlineType.SINGLE);\n    stave.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(StaveModifierTests);\nexport { StaveModifierTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StaveNote Tests\n// TODO: In StaveNote.preFormat() line 929, should noteHeadPadding default to StaveNote.minNoteheadPadding?\n//       The bounding box of a note changes slightly when we add a ModifierContext (even if we add zero modifiers).\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental } from '../src/accidental';\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\nimport { Articulation } from '../src/articulation';\nimport { Beam } from '../src/beam';\nimport { Dot } from '../src/dot';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { Fraction } from '../src/fraction';\nimport { FretHandFinger } from '../src/frethandfinger';\nimport { Modifier } from '../src/modifier';\nimport { ModifierContext } from '../src/modifiercontext';\nimport { Stave } from '../src/stave';\nimport { StaveNote } from '../src/stavenote';\nimport { Stem } from '../src/stem';\nimport { StringNumber } from '../src/stringnumber';\nimport { Stroke } from '../src/strokes';\nimport { TickContext } from '../src/tickcontext';\nconst StaveNoteTests = {\n    Start() {\n        QUnit.module('StaveNote');\n        QUnit.test('Tick', ticks);\n        QUnit.test('Tick - New API', ticksNewAPI);\n        QUnit.test('Stem', stem);\n        QUnit.test('Automatic Stem Direction', autoStem);\n        QUnit.test('Stem Extension Pitch', stemExtensionPitch);\n        QUnit.test('Displacement after calling setStemDirection', setStemDirectionDisplacement);\n        QUnit.test('StaveLine', staveLine);\n        QUnit.test('Width', width);\n        QUnit.test('TickContext', tickContext);\n        const run = VexFlowTests.runTests;\n        run('StaveNote Draw - Treble', drawBasic, { clef: 'treble', octaveShift: 0, restKey: 'r/4' });\n        run('StaveNote BoundingBoxes - Treble', drawBoundingBoxes, { clef: 'treble', octaveShift: 0, restKey: 'r/4' });\n        run('StaveNote Draw - Alto', drawBasic, { clef: 'alto', octaveShift: -1, restKey: 'r/4' });\n        run('StaveNote Draw - Tenor', drawBasic, { clef: 'tenor', octaveShift: -1, restKey: 'r/3' });\n        run('StaveNote Draw - Bass', drawBasic, { clef: 'bass', octaveShift: -2, restKey: 'r/3' });\n        run('StaveNote Draw - Harmonic And Muted', drawHarmonicAndMuted);\n        run('StaveNote Draw - Slash', drawSlash);\n        run('Displacements', displacements);\n        run('StaveNote Draw - Bass 2', drawBass);\n        run('StaveNote Draw - Key Styles', drawKeyStyles);\n        run('StaveNote Draw - StaveNote Stem Styles', drawNoteStemStyles);\n        run('StaveNote Draw - StaveNote Stem Lengths', drawNoteStemLengths);\n        run('StaveNote Draw - StaveNote Flag Styles', drawNoteStylesWithFlag);\n        run('StaveNote Draw - StaveNote Styles', drawNoteStyles);\n        run('Stave, Ledger Line, Beam, Stem and Flag Styles', drawBeamStyles);\n        run('Flag and Dot Placement - Stem Up', dotsAndFlagsStemUp);\n        run('Flag and Dots Placement - Stem Down', dotsAndFlagsStemDown);\n        run('Beam and Dot Placement - Stem Up', dotsAndBeamsUp);\n        run('Beam and Dot Placement - Stem Down', dotsAndBeamsDown);\n        run('No Padding', noPadding);\n        run('Note Heads Placement - Simple', noteHeadsSimple);\n        run('Note Heads Placement - Hidden Notes', noteHeadsHidden);\n        run('Center Aligned Note', centerAlignedRest);\n        run('Center Aligned Note with Articulation', centerAlignedRestFermata);\n        run('Center Aligned Note with Annotation', centerAlignedRestAnnotation);\n        run('Center Aligned Note - Multi Voice', centerAlignedMultiVoice);\n        run('Center Aligned Note with Multiple Modifiers', centerAlignedNoteMultiModifiers);\n        // This interactivity test currently only works with the SVG backend.\n        VexFlowTests.runSVGTest('Interactive Mouseover StaveNote', drawBasic, {\n            clef: 'treble',\n            octaveShift: 0,\n            restKey: 'r/4',\n            ui: true,\n        });\n    },\n};\n// Helper function to create StaveNotes.\nconst staveNote = (struct) => new StaveNote(struct);\n/**\n * Helper function to draw a note with an optional bounding box.\n */\nfunction draw(note, stave, context, x, drawBoundingBox = false, addModifierContext = true) {\n    // Associate the note with the stave.\n    note.setStave(stave);\n    // A ModifierContext is required for dots and other modifiers to be drawn properly.\n    // If added, it changes the bounding box of a note, even if there are no modifiers to draw.\n    // See StaveNote.minNoteheadPadding in stavenote.ts.\n    if (addModifierContext) {\n        note.addToModifierContext(new ModifierContext());\n    }\n    new TickContext().addTickable(note).preFormat().setX(x);\n    note.setContext(context).draw();\n    if (drawBoundingBox) {\n        const bb = note.getBoundingBox();\n        context.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n        context.stroke();\n    }\n    return note;\n}\nfunction ticks(assert) {\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\n    // Key value pairs of `testName: [durationString, expectedBeats, expectedNoteType]`\n    const tickTests = {\n        'Breve note': ['1/2', 8.0, 'n'],\n        'Whole note': ['w', 4.0, 'n'],\n        'Quarter note': ['q', 1.0, 'n'],\n        'Dotted half note': ['hd', 3.0, 'n'],\n        'Doubled-dotted half note': ['hdd', 3.5, 'n'],\n        'Triple-dotted half note': ['hddd', 3.75, 'n'],\n        'Dotted half rest': ['hdr', 3.0, 'r'],\n        'Double-dotted half rest': ['hddr', 3.5, 'r'],\n        'Triple-dotted half rest': ['hdddr', 3.75, 'r'],\n        'Dotted harmonic quarter note': ['qdh', 1.5, 'h'],\n        'Double-dotted harmonic quarter note': ['qddh', 1.75, 'h'],\n        'Triple-dotted harmonic quarter note': ['qdddh', 1.875, 'h'],\n        'Dotted muted 8th note': ['8dm', 0.75, 'm'],\n        'Double-dotted muted 8th note': ['8ddm', 0.875, 'm'],\n        'Triple-dotted muted 8th note': ['8dddm', 0.9375, 'm'],\n    };\n    Object.keys(tickTests).forEach((testName) => {\n        const testData = tickTests[testName];\n        const durationString = testData[0];\n        const expectedBeats = testData[1];\n        const expectedNoteType = testData[2];\n        const note = new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: durationString });\n        assert.equal(note.getTicks().value(), BEAT * expectedBeats, testName + ' must have ' + expectedBeats + ' beats');\n        assert.equal(note.getNoteType(), expectedNoteType, 'Note type must be ' + expectedNoteType);\n    });\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '8.7dddm' }), /BadArguments/, \"Invalid note duration '8.7' throws BadArguments exception\");\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2Z' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2dddZ' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\n}\nfunction ticksNewAPI(assert) {\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\n    // Key value pairs of `testName: [noteData, expectedBeats, expectedNoteType]`\n    const tickTests = {\n        'Breve note': [{ duration: '1/2' }, 8.0, 'n'],\n        'Whole note': [{ duration: 'w' }, 4.0, 'n'],\n        'Quarter note': [{ duration: 'q' }, 1.0, 'n'],\n        'Dotted half note': [{ duration: 'h', dots: 1 }, 3.0, 'n'],\n        'Doubled-dotted half note': [{ duration: 'h', dots: 2 }, 3.5, 'n'],\n        'Triple-dotted half note': [{ duration: 'h', dots: 3 }, 3.75, 'n'],\n        'Dotted half rest': [{ duration: 'h', dots: 1, type: 'r' }, 3.0, 'r'],\n        'Double-dotted half rest': [{ duration: 'h', dots: 2, type: 'r' }, 3.5, 'r'],\n        'Triple-dotted half rest': [{ duration: 'h', dots: 3, type: 'r' }, 3.75, 'r'],\n        'Dotted harmonic quarter note': [{ duration: 'q', dots: 1, type: 'h' }, 1.5, 'h'],\n        'Double-dotted harmonic quarter note': [{ duration: 'q', dots: 2, type: 'h' }, 1.75, 'h'],\n        'Triple-dotted harmonic quarter note': [{ duration: 'q', dots: 3, type: 'h' }, 1.875, 'h'],\n        'Dotted muted 8th note': [{ duration: '8', dots: 1, type: 'm' }, 0.75, 'm'],\n        'Double-dotted muted 8th note': [{ duration: '8', dots: 2, type: 'm' }, 0.875, 'm'],\n        'Triple-dotted muted 8th note': [{ duration: '8', dots: 3, type: 'm' }, 0.9375, 'm'],\n    };\n    Object.keys(tickTests).forEach(function (testName) {\n        const testData = tickTests[testName];\n        const noteData = testData[0];\n        const expectedBeats = testData[1];\n        const expectedNoteType = testData[2];\n        noteData.keys = ['c/4', 'e/4', 'g/4'];\n        const note = new StaveNote(noteData);\n        assert.equal(note.getTicks().value(), BEAT * expectedBeats, testName + ' must have ' + expectedBeats + ' beats');\n        assert.equal(note.getNoteType(), expectedNoteType, 'Note type must be ' + expectedNoteType);\n    });\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '8.7dddm' }), /BadArguments/, \"Invalid note duration '8.7' throws BadArguments exception\");\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2Z' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\n    assert.throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2dddZ' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\n}\nfunction stem(assert) {\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'w' });\n    assert.equal(note.getStemDirection(), Stem.UP, 'Default note has UP stem');\n}\nfunction autoStem(assert) {\n    const testData = [\n        [['c/5', 'e/5', 'g/5'], Stem.DOWN],\n        [['e/4', 'g/4', 'c/5'], Stem.UP],\n        [['c/5'], Stem.DOWN],\n        [['a/4', 'e/5', 'g/5'], Stem.DOWN],\n        [['b/4'], Stem.DOWN],\n    ];\n    testData.forEach((td) => {\n        const keys = td[0];\n        const expectedStemDirection = td[1];\n        const note = new StaveNote({ keys: keys, autoStem: true, duration: '8' });\n        assert.equal(note.getStemDirection(), expectedStemDirection, 'Stem must be ' + (expectedStemDirection === Stem.UP ? 'up' : 'down'));\n    });\n}\nfunction stemExtensionPitch(assert) {\n    // [keys, expectedStemExtension, override stem direction]\n    const testData = [\n        [['c/5', 'e/5', 'g/5'], 0, 0],\n        [['e/4', 'g/4', 'c/5'], 0, 0],\n        [['c/5'], 0, 0],\n        [['f/3'], 15, 0],\n        [['f/3'], 15, Stem.UP],\n        [['f/3'], 0, Stem.DOWN],\n        [['f/3', 'e/5'], 0, 0],\n        [['g/6'], 25, 0],\n        [['g/6'], 25, Stem.DOWN],\n        [['g/6'], 0, Stem.UP],\n    ];\n    testData.forEach((td) => {\n        const keys = td[0];\n        const expectedStemExtension = td[1];\n        const overrideStemDirection = td[2];\n        let note;\n        if (overrideStemDirection === 0) {\n            note = new StaveNote({ keys: keys, autoStem: true, duration: '4' });\n        }\n        else {\n            note = new StaveNote({ keys: keys, duration: '4', stemDirection: overrideStemDirection });\n        }\n        assert.equal(note.getStemExtension(), expectedStemExtension, 'For ' + keys.toString() + ' StemExtension must be ' + expectedStemExtension);\n        // set to weird Stave\n        const stave = new Stave(10, 10, 300, { spacingBetweenLinesPx: 20 });\n        note.setStave(stave);\n        assert.equal(note.getStemExtension(), expectedStemExtension * 2, 'For wide staff ' + keys.toString() + ' StemExtension must be ' + expectedStemExtension * 2);\n        //    const wholeNote = new StaveNote({ keys: keys, duration: 'w' });\n        //    assert.equal(\n        //      wholeNote.getStemExtension(),\n        //      -1 * Flow.STEM_HEIGHT,\n        //      'For ' + keys.toString() + ' wholeNote StemExtension must always be -1 * Flow.STEM_HEIGHT'\n        //    );\n    });\n}\nfunction setStemDirectionDisplacement(assert) {\n    function getDisplacements(note) {\n        return note.noteHeads.map((noteHead) => noteHead.isDisplaced());\n    }\n    const stemUpDisplacements = [false, true, false];\n    const stemDownDisplacements = [true, false, false];\n    const note = new StaveNote({ keys: ['c/5', 'd/5', 'g/5'], stemDirection: Stem.UP, duration: '4' });\n    assert.deepEqual(getDisplacements(note), stemUpDisplacements);\n    note.setStemDirection(Stem.DOWN);\n    assert.deepEqual(getDisplacements(note), stemDownDisplacements);\n    note.setStemDirection(Stem.UP);\n    assert.deepEqual(getDisplacements(note), stemUpDisplacements);\n}\nfunction staveLine(assert) {\n    const stave = new Stave(10, 10, 300);\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' });\n    note.setStave(stave);\n    const props = note.getKeyProps();\n    assert.equal(props[0].line, 0, 'C/4 on line 0');\n    assert.equal(props[1].line, 1, 'E/4 on line 1');\n    assert.equal(props[2].line, 2.5, 'A/4 on line 2.5');\n    const ys = note.getYs();\n    assert.equal(ys.length, 3, 'Chord should be rendered on three lines');\n    assert.equal(ys[0], 100, 'Line for C/4');\n    assert.equal(ys[1], 90, 'Line for E/4');\n    assert.equal(ys[2], 75, 'Line for A/4');\n}\nfunction width(assert) {\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' });\n    assert.throws(() => note.getWidth(), /UnformattedNote/, 'Unformatted note should have no width');\n}\nfunction tickContext(assert) {\n    const stave = new Stave(10, 10, 400);\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' }).setStave(stave);\n    new TickContext().addTickable(note).preFormat().setX(10).setPadding(0);\n    assert.expect(0);\n}\nfunction drawBasic(options, contextBuilder) {\n    const clef = options.params.clef;\n    const octaveShift = options.params.octaveShift;\n    const restKey = options.params.restKey;\n    const ctx = contextBuilder(options.elementId, 700, 180);\n    const stave = new Stave(10, 30, 750);\n    stave.setContext(ctx);\n    stave.addClef(clef);\n    stave.draw();\n    const lowerKeys = ['c/', 'e/', 'a/'];\n    const higherKeys = ['c/', 'e/', 'a/'];\n    for (let k = 0; k < lowerKeys.length; k++) {\n        lowerKeys[k] = lowerKeys[k] + (4 + octaveShift);\n        higherKeys[k] = higherKeys[k] + (5 + octaveShift);\n    }\n    const restKeys = [restKey];\n    const noteStructs = [\n        { clef: clef, keys: higherKeys, duration: '1/2' },\n        { clef: clef, keys: lowerKeys, duration: 'w' },\n        { clef: clef, keys: higherKeys, duration: 'h' },\n        { clef: clef, keys: lowerKeys, duration: 'q' },\n        { clef: clef, keys: higherKeys, duration: '8' },\n        { clef: clef, keys: lowerKeys, duration: '16' },\n        { clef: clef, keys: higherKeys, duration: '32' },\n        { clef: clef, keys: higherKeys, duration: '64' },\n        { clef: clef, keys: higherKeys, duration: '128' },\n        { clef: clef, keys: lowerKeys, duration: '1/2', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'w', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'h', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'q', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '8', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '16', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '32', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '64', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '128', stemDirection: Stem.DOWN },\n        { clef: clef, keys: restKeys, duration: '1/2r' },\n        { clef: clef, keys: restKeys, duration: 'wr' },\n        { clef: clef, keys: restKeys, duration: 'hr' },\n        { clef: clef, keys: restKeys, duration: 'qr' },\n        { clef: clef, keys: restKeys, duration: '8r' },\n        { clef: clef, keys: restKeys, duration: '16r' },\n        { clef: clef, keys: restKeys, duration: '32r' },\n        { clef: clef, keys: restKeys, duration: '64r' },\n        { clef: clef, keys: restKeys, duration: '128r' },\n        { keys: ['x/4'], duration: 'h' },\n    ];\n    options.assert.expect(noteStructs.length * 2);\n    const colorDescendants = (parentItem, color) => () => parentItem.querySelectorAll('*').forEach((child) => {\n        child.setAttribute('fill', color);\n        child.setAttribute('stroke', color);\n    });\n    for (let i = 0; i < noteStructs.length; ++i) {\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25);\n        // If this is an interactivity test (ui: true), then attach mouseover & mouseout handlers to the notes.\n        if (options.params.ui) {\n            const item = note.getSVGElement();\n            if (item) {\n                item.addEventListener('mouseover', colorDescendants(item, 'green'), false);\n                item.addEventListener('mouseout', colorDescendants(item, 'black'), false);\n            }\n        }\n        options.assert.ok(note.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drawBoundingBoxes(options, contextBuilder) {\n    const clef = options.params.clef;\n    const octaveShift = options.params.octaveShift;\n    const restKey = options.params.restKey;\n    const ctx = contextBuilder(options.elementId, 700, 180);\n    const stave = new Stave(10, 30, 750);\n    stave.setContext(ctx);\n    stave.addClef(clef);\n    stave.draw();\n    const lowerKeys = ['c/', 'e/', 'a/'];\n    const higherKeys = ['c/', 'e/', 'a/'];\n    for (let k = 0; k < lowerKeys.length; k++) {\n        lowerKeys[k] = lowerKeys[k] + (4 + octaveShift);\n        higherKeys[k] = higherKeys[k] + (5 + octaveShift);\n    }\n    const restKeys = [restKey];\n    const noteStructs = [\n        { clef: clef, keys: higherKeys, duration: '1/2' },\n        { clef: clef, keys: lowerKeys, duration: 'w' },\n        { clef: clef, keys: higherKeys, duration: 'h' },\n        { clef: clef, keys: lowerKeys, duration: 'q' },\n        { clef: clef, keys: higherKeys, duration: '8' },\n        { clef: clef, keys: lowerKeys, duration: '16' },\n        { clef: clef, keys: higherKeys, duration: '32' },\n        { clef: clef, keys: higherKeys, duration: '64' },\n        { clef: clef, keys: higherKeys, duration: '128' },\n        { clef: clef, keys: lowerKeys, duration: '1/2', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'w', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'h', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: 'q', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '8', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '16', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '32', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '64', stemDirection: Stem.DOWN },\n        { clef: clef, keys: lowerKeys, duration: '128' },\n        { clef: clef, keys: restKeys, duration: '1/2r' },\n        { clef: clef, keys: restKeys, duration: 'wr' },\n        { clef: clef, keys: restKeys, duration: 'hr' },\n        { clef: clef, keys: restKeys, duration: 'qr' },\n        { clef: clef, keys: restKeys, duration: '8r' },\n        { clef: clef, keys: restKeys, duration: '16r' },\n        { clef: clef, keys: restKeys, duration: '32r' },\n        { clef: clef, keys: restKeys, duration: '64r' },\n        { clef: clef, keys: restKeys, duration: '128r' },\n        { keys: ['x/4'], duration: 'h' },\n    ];\n    options.assert.expect(noteStructs.length * 2);\n    for (let i = 0; i < noteStructs.length; ++i) {\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25, true /* drawBoundingBox */, false /* addModifierContext */);\n        options.assert.ok(note.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drawBass(options, contextBuilder) {\n    options.assert.expect(40);\n    const ctx = contextBuilder(options.elementId, 600, 280);\n    const stave = new Stave(10, 10, 650);\n    stave.setContext(ctx);\n    stave.addClef('bass');\n    stave.draw();\n    const noteStructs = [\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '1/2' },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'w' },\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: 'h' },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'q' },\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '8' },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '16' },\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '32' },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'h', stemDirection: Stem.DOWN },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'q', stemDirection: Stem.DOWN },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '8', stemDirection: Stem.DOWN },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '16', stemDirection: Stem.DOWN },\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '32', stemDirection: Stem.DOWN },\n        { keys: ['r/4'], duration: '1/2r' },\n        { keys: ['r/4'], duration: 'wr' },\n        { keys: ['r/4'], duration: 'hr' },\n        { keys: ['r/4'], duration: 'qr' },\n        { keys: ['r/4'], duration: '8r' },\n        { keys: ['r/4'], duration: '16r' },\n        { keys: ['r/4'], duration: '32r' },\n        { keys: ['x/4'], duration: 'h' },\n    ];\n    for (let i = 0; i < noteStructs.length; ++i) {\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25);\n        options.assert.ok(note.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction displacements(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 700, 155);\n    ctx.scale(0.9, 0.9);\n    const stave = new Stave(10, 10, 675);\n    stave.setContext(ctx);\n    stave.draw();\n    const noteStructs = [\n        { keys: ['g/3', 'a/3', 'c/4', 'd/4', 'e/4'], duration: '1/2' },\n        { keys: ['g/3', 'a/3', 'c/4', 'd/4', 'e/4'], duration: 'w' },\n        { keys: ['d/4', 'e/4', 'f/4'], duration: 'h' },\n        { keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: 'q' },\n        { keys: ['e/3', 'b/3', 'c/4', 'e/4', 'f/4', 'g/5', 'a/5'], duration: '8' },\n        { keys: ['a/3', 'c/4', 'e/4', 'g/4', 'a/4', 'b/4'], duration: '16' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32' },\n        { keys: ['c/4', 'e/4', 'a/4', 'a/4'], duration: '64' },\n        { keys: ['g/3', 'c/4', 'd/4', 'e/4'], duration: 'h', stemDirection: Stem.DOWN },\n        { keys: ['d/4', 'e/4', 'f/4'], duration: 'q', stemDirection: Stem.DOWN },\n        { keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: '8', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'd/4', 'e/4', 'f/4', 'g/4', 'a/4'], duration: '16', stemDirection: Stem.DOWN },\n        { keys: ['b/3', 'c/4', 'e/4', 'a/4', 'b/5', 'c/6', 'e/6'], duration: '32', stemDirection: Stem.DOWN },\n        {\n            keys: ['b/3', 'c/4', 'e/4', 'a/4', 'b/5', 'c/6', 'e/6', 'e/6'],\n            duration: '64',\n            stemDirection: Stem.DOWN,\n        },\n    ];\n    options.assert.expect(noteStructs.length * 2);\n    for (let i = 0; i < noteStructs.length; ++i) {\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 45);\n        options.assert.ok(note.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drawHarmonicAndMuted(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 1000, 180);\n    const stave = new Stave(10, 10, 950);\n    stave.setContext(ctx);\n    stave.draw();\n    const noteStructs = [\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wh' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hh' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qh' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128h' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wh', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hh', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qh', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128h', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wm' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hm' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qm' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128m' },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2m', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wm', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hm', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qm', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8m', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16m', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32m', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64m', stemDirection: Stem.DOWN },\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128m', stemDirection: Stem.DOWN },\n    ];\n    options.assert.expect(noteStructs.length * 2);\n    for (let i = 0; i < noteStructs.length; ++i) {\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, i * 25 + 5);\n        options.assert.ok(note.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drawSlash(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 700, 180);\n    const stave = new Stave(10, 10, 650);\n    stave.setContext(ctx);\n    stave.draw();\n    const notes = [\n        { keys: ['b/4'], duration: '1/2s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: 'ws', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: 'hs', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: 'qs', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '16s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '32s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '64s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '128s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '1/2s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: 'ws', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: 'hs', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: 'qs', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '16s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '32s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '64s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '128s', stemDirection: Stem.UP },\n        // Beam\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '8s', stemDirection: Stem.UP },\n    ];\n    const staveNotes = notes.map((struct) => new StaveNote(struct));\n    const beam1 = new Beam([staveNotes[16], staveNotes[17]]);\n    const beam2 = new Beam([staveNotes[18], staveNotes[19]]);\n    Formatter.FormatAndDraw(ctx, stave, staveNotes, false);\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    options.assert.ok('Slash Note Heads');\n}\nfunction drawKeyStyles(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 300, 280);\n    ctx.scale(3, 3);\n    const stave = new Stave(10, 0, 100);\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: 'q' })\n        .setStave(stave)\n        .addModifier(new Accidental('b'), 1)\n        .setKeyStyle(1, { shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue' });\n    new TickContext().addTickable(note).preFormat().setX(25);\n    stave.setContext(ctx).draw();\n    note.setContext(ctx).draw();\n    options.assert.ok(note.getX() > 0, 'Note has X value');\n    options.assert.ok(note.getYs().length > 0, 'Note has Y values');\n}\nfunction drawNoteStyles(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 300, 280);\n    const stave = new Stave(10, 0, 100);\n    ctx.scale(3, 3);\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: '8' })\n        .setStave(stave)\n        .addModifier(new Accidental('b'), 1);\n    note.setStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\n    new TickContext().addTickable(note).preFormat().setX(25);\n    stave.setContext(ctx).draw();\n    note.setContext(ctx).draw();\n    options.assert.ok(note.getX() > 0, 'Note has X value');\n    options.assert.ok(note.getYs().length > 0, 'Note has Y values');\n}\nfunction drawNoteStemStyles(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 300, 280);\n    const stave = new Stave(10, 0, 100);\n    ctx.scale(3, 3);\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: 'q' })\n        .setStave(stave)\n        .addModifier(new Accidental('b'), 1);\n    note.setStemStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\n    new TickContext().addTickable(note).preFormat().setX(25);\n    stave.setContext(ctx).draw();\n    note.setContext(ctx).draw();\n    options.assert.ok('Note Stem Style');\n}\nfunction drawNoteStemLengths(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 975, 150);\n    const stave = new Stave(10, 10, 975);\n    stave.setContext(ctx).draw();\n    const keys = [\n        'e/3',\n        'f/3',\n        'g/3',\n        'a/3',\n        'b/3',\n        'c/4',\n        'd/4',\n        'e/4',\n        'f/4',\n        'g/4',\n        'f/5',\n        'g/5',\n        'a/5',\n        'b/5',\n        'c/6',\n        'd/6',\n        'e/6',\n        'f/6',\n        'g/6',\n        'a/6',\n    ];\n    const notes = [];\n    let note;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n        let duration = 'q';\n        if (i % 2 === 1) {\n            duration = '8';\n        }\n        note = new StaveNote({ keys: [keys[i]], duration, autoStem: true }).setStave(stave);\n        new TickContext().addTickable(note);\n        note.setContext(ctx);\n        notes.push(note);\n    }\n    const wholeKeys = ['e/3', 'a/3', 'f/5', 'a/5', 'd/6', 'a/6'];\n    for (i = 0; i < wholeKeys.length; i++) {\n        note = new StaveNote({ keys: [wholeKeys[i]], duration: 'w' }).setStave(stave);\n        new TickContext().addTickable(note);\n        note.setContext(ctx);\n        notes.push(note);\n    }\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok('Note Stem Length');\n}\nfunction drawNoteStylesWithFlag(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 300, 280);\n    const stave = new Stave(10, 0, 100);\n    ctx.scale(3, 3);\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: '8' })\n        .setStave(stave)\n        .addModifier(new Accidental('b'), 1);\n    note.setFlagStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\n    new TickContext().addTickable(note).preFormat().setX(25);\n    stave.setContext(ctx).draw();\n    note.setContext(ctx).draw();\n    options.assert.ok(note.getX() > 0, 'Note has X value');\n    options.assert.ok(note.getYs().length > 0, 'Note has Y values');\n}\nfunction drawBeamStyles(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 160);\n    const stave = new Stave(10, 10, 380);\n    stave.setStyle({ strokeStyle: '#EEAAEE', lineWidth: 3 });\n    stave.setContext(ctx);\n    stave.draw();\n    const notes = [\n        // beam1\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.DOWN },\n        // should be unstyled...\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.DOWN },\n        // beam2 should also be unstyled\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.DOWN },\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.DOWN },\n        // beam3\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.UP },\n        { keys: ['b/4'], duration: '8', stemDirection: Stem.UP },\n        // beam4\n        { keys: ['d/6'], duration: '8', stemDirection: Stem.DOWN },\n        { keys: ['c/6', 'd/6'], duration: '8', stemDirection: Stem.DOWN },\n        // unbeamed\n        { keys: ['d/6', 'e/6'], duration: '8', stemDirection: Stem.DOWN },\n        // unbeamed, unstyled\n        { keys: ['e/6', 'f/6'], duration: '8', stemDirection: Stem.DOWN },\n    ];\n    const staveNotes = notes.map((note) => new StaveNote(note));\n    const beam1 = new Beam(staveNotes.slice(0, 2));\n    const beam2 = new Beam(staveNotes.slice(3, 5));\n    const beam3 = new Beam(staveNotes.slice(5, 7));\n    const beam4 = new Beam(staveNotes.slice(7, 9));\n    // stem, key, ledger, flag; beam.setStyle\n    beam1.setStyle({ fillStyle: 'blue', strokeStyle: 'blue' });\n    staveNotes[0].setKeyStyle(0, { fillStyle: 'purple' });\n    staveNotes[0].setStemStyle({ strokeStyle: 'green' });\n    staveNotes[1].setStemStyle({ strokeStyle: 'orange' });\n    staveNotes[1].setKeyStyle(0, { fillStyle: 'darkturquoise' });\n    staveNotes[5].setStyle({ fillStyle: 'tomato', strokeStyle: 'tomato' });\n    beam3.setStyle({ shadowBlur: 4, shadowColor: 'blue' });\n    staveNotes[9].setLedgerLineStyle({ fillStyle: 'lawngreen', strokeStyle: 'lawngreen', lineWidth: 1 });\n    staveNotes[9].setFlagStyle({ fillStyle: 'orange', strokeStyle: 'orange' });\n    Formatter.FormatAndDraw(ctx, stave, staveNotes, false);\n    beam1.setContext(ctx).draw();\n    beam2.setContext(ctx).draw();\n    beam3.setContext(ctx).draw();\n    beam4.setContext(ctx).draw();\n    options.assert.ok('draw beam styles');\n}\nfunction dotsAndFlagsStemUp(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    ctx.scale(1.0, 1.0);\n    const stave = new Stave(10, 10, 975);\n    const notes = [\n        staveNote({ keys: ['f/4'], duration: '4', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '8', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '16', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '32', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '64', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '128', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '4', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '8', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '16', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '32' }),\n        staveNote({ keys: ['g/4'], duration: '64', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '128', stemDirection: Stem.UP }),\n    ];\n    Dot.buildAndAttach(notes, { all: true });\n    Dot.buildAndAttach([notes[5], notes[11]], { all: true });\n    stave.setContext(ctx).draw();\n    for (let i = 0; i < notes.length; ++i) {\n        draw(notes[i], stave, ctx, i * 65);\n    }\n    options.assert.ok(true, 'Full Dot');\n}\nfunction dotsAndFlagsStemDown(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 160);\n    ctx.scale(1.0, 1.0);\n    const stave = new Stave(10, 10, 975);\n    const staveNotes = [\n        staveNote({ keys: ['e/5'], duration: '4', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '8', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '16', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '32', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '64', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '128', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '4', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '8', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '16', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '32', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '64', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '128', stemDirection: Stem.DOWN }),\n    ];\n    Dot.buildAndAttach(staveNotes, { all: true });\n    stave.setContext(ctx).draw();\n    for (let i = 0; i < staveNotes.length; ++i) {\n        draw(staveNotes[i], stave, ctx, i * 65);\n    }\n    options.assert.ok(true, 'Full Dot');\n}\nfunction dotsAndBeamsUp(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 150);\n    ctx.scale(1.0, 1.0);\n    const stave = new Stave(10, 10, 975);\n    const staveNotes = [\n        staveNote({ keys: ['f/4'], duration: '8', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '16', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '32', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '64', stemDirection: Stem.UP }),\n        staveNote({ keys: ['f/4'], duration: '128', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '8', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '16', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '32' }),\n        staveNote({ keys: ['g/4'], duration: '64', stemDirection: Stem.UP }),\n        staveNote({ keys: ['g/4'], duration: '128', stemDirection: Stem.UP }),\n    ];\n    Dot.buildAndAttach(staveNotes, { all: true });\n    Dot.buildAndAttach([staveNotes[4], staveNotes[9]], { all: true });\n    const beam = new Beam(staveNotes);\n    stave.setContext(ctx).draw();\n    for (let i = 0; i < staveNotes.length; ++i) {\n        draw(staveNotes[i], stave, ctx, i * 65);\n    }\n    beam.setContext(ctx).draw();\n    options.assert.ok(true, 'Full Dot');\n}\nfunction dotsAndBeamsDown(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 800, 160);\n    ctx.scale(1.0, 1.0);\n    const stave = new Stave(10, 10, 975);\n    const staveNotes = [\n        staveNote({ keys: ['e/5'], duration: '8', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '16', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '32', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '64', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['e/5'], duration: '128', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '8', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '16', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '32', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '64', stemDirection: Stem.DOWN }),\n        staveNote({ keys: ['d/5'], duration: '128', stemDirection: Stem.DOWN }),\n    ];\n    Dot.buildAndAttach(staveNotes, { all: true });\n    const beam = new Beam(staveNotes);\n    stave.setContext(ctx).draw();\n    for (let i = 0; i < staveNotes.length; ++i) {\n        draw(staveNotes[i], stave, ctx, i * 65);\n    }\n    beam.setContext(ctx).draw();\n    options.assert.ok(true, 'Full Dot');\n}\nfunction noteHeadsSimple(options) {\n    const vf = VexFlowTests.makeFactory(options, 800, 250);\n    const score = vf.EasyScore();\n    const system1 = vf.System({ y: 100, x: 50, width: 200 });\n    system1\n        .addStave({\n        voices: [\n            score.voice([...score.beam(score.notes('a4/8, b4/8', { stem: 'up' })), ...score.notes('a4/q/r, a4/h/r')]),\n            score.voice(score.notes('g4/w')),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    const system2 = vf.System({ y: 100, x: 250, width: 150 });\n    system2.addStave({\n        voices: [score.voice(score.notes('b4/h, b4/h/r')), score.voice(score.notes('b4/w'))],\n    });\n    const system3 = vf.System({ y: 100, x: 400, width: 150 });\n    system3.addStave({\n        voices: [score.voice(score.notes('d5/h, d5/h/r')), score.voice(score.notes('e4/w'))],\n    });\n    const system4 = vf.System({ y: 100, x: 550, width: 150 });\n    system4.addStave({\n        voices: [\n            score.voice(score.notes('e4/q, e4/q/r, e4/h/r')),\n            score.voice(score.notes('e4/8, e4/8/r, e4/q/r, e4/h/r')),\n        ],\n    });\n    vf.draw();\n    options.assert.expect(0);\n}\nfunction noPadding(options) {\n    const vf = VexFlowTests.makeFactory(options, 800, 500);\n    const score = vf.EasyScore();\n    function newStave(y, noPadding) {\n        let system = vf.System({ y, x: 50, width: 200, noPadding });\n        system\n            .addStave({\n            voices: [\n                score.voice([...score.beam(score.notes('a4/8, b4/8', { stem: 'up' })), ...score.notes('a4/q, a4/h')]),\n                score.voice(score.notes('g4/w')),\n            ],\n        })\n            .addClef('treble')\n            .addTimeSignature('4/4');\n        system = vf.System({ y, x: 250, width: 150, noPadding });\n        system.addStave({\n            voices: [score.voice(score.notes('b4/h, b4/h')), score.voice(score.notes('b4/w'))],\n        });\n        system = vf.System({ y, x: 400, width: 150, noPadding });\n        system.addStave({\n            voices: [score.voice(score.notes('d5/h, d5/h')), score.voice(score.notes('e4/w'))],\n        });\n        system = vf.System({ y, x: 550, width: 150, noPadding });\n        system.addStave({\n            voices: [score.voice(score.notes('e4/q, e4/q, e4/h')), score.voice(score.notes('e4/8, e4/8, e4/q, e4/h'))],\n        });\n    }\n    newStave(100, true);\n    newStave(200, false);\n    vf.draw();\n    options.assert.expect(0);\n}\nfunction noteHeadsHidden(options) {\n    const vf = VexFlowTests.makeFactory(options, 800, 250);\n    const score = vf.EasyScore();\n    const system1 = vf.System({ y: 100, x: 50, width: 200 });\n    const notes1 = score.notes('g4/w');\n    notes1[0].renderOptions.draw = false;\n    system1\n        .addStave({\n        voices: [\n            score.voice([...score.beam(score.notes('a4/8, b4/8', { stem: 'up' })), ...score.notes('a4/q/r, a4/h/r')]),\n            score.voice(notes1),\n        ],\n    })\n        .addClef('treble')\n        .addTimeSignature('4/4');\n    const system2 = vf.System({ y: 100, x: 250, width: 150 });\n    const notes2 = score.notes('b4/w');\n    notes2[0].renderOptions.draw = false;\n    system2.addStave({\n        voices: [score.voice(score.notes('b4/h, b4/h/r')), score.voice(notes2)],\n    });\n    const system3 = vf.System({ y: 100, x: 400, width: 150 });\n    system3.addStave({\n        voices: [score.voice(score.notes('d5/h, d5/h/r')), score.voice(score.notes('e4/w'))],\n    });\n    const system4 = vf.System({ y: 100, x: 550, width: 150 });\n    const notes4 = score.notes('e4/q, e4/q/r, e4/h/r');\n    notes4[0].renderOptions.draw = false;\n    notes4[2].renderOptions.draw = false;\n    system4.addStave({\n        voices: [score.voice(notes4), score.voice(score.notes('e4/8, e4/8/r, e4/q/r, e4/h/r'))],\n    });\n    vf.draw();\n    options.assert.expect(0);\n}\nfunction centerAlignedRest(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 160);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\n    const note = f.StaveNote({ keys: ['b/4'], duration: '1r', alignCenter: true });\n    const voice = f.Voice().setStrict(false).addTickables([note]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction centerAlignedRestFermata(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 160);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\n    const note = f\n        .StaveNote({ keys: ['b/4'], duration: '1r', alignCenter: true })\n        .addModifier(new Articulation('a@a').setPosition(3), 0);\n    const voice = f.Voice().setStrict(false).addTickables([note]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction centerAlignedRestAnnotation(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 160);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\n    const note = f\n        .StaveNote({ keys: ['b/4'], duration: '1r', alignCenter: true })\n        .addModifier(new Annotation('Whole measure rest').setVerticalJustification(AnnotationVerticalJustify.TOP), 0);\n    const voice = f.Voice().setStrict(false).addTickables([note]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction centerAlignedNoteMultiModifiers(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 160);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\n    function newFinger(num, pos) {\n        return new FretHandFinger(num).setPosition(pos);\n    }\n    const note = f\n        .StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '4', alignCenter: true })\n        .addModifier(new Annotation('Test').setPosition(3), 0)\n        .addStroke(0, new Stroke(2))\n        .addModifier(new Accidental('#'), 1)\n        .addModifier(newFinger('3', Modifier.Position.LEFT), 0)\n        .addModifier(newFinger('2', Modifier.Position.LEFT), 2)\n        .addModifier(newFinger('1', Modifier.Position.RIGHT), 1)\n        .addModifier(new StringNumber('4').setPosition(Modifier.Position.BELOW), 2);\n    Dot.buildAndAttach([note], { all: true });\n    const voice = f.Voice().setStrict(false).addTickables([note]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction centerAlignedMultiVoice(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 160);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('3/8');\n    // Set a custom duration of 3 / 8.\n    const customDuration = new Fraction(3, 8);\n    // TODO: Should the whole rest draw a ledger line that is visible to the left/right of the rest?\n    const notes0 = [\n        f.StaveNote({\n            keys: ['c/4'],\n            duration: '1r',\n            alignCenter: true,\n            durationOverride: customDuration,\n        }),\n    ];\n    const createStaveNote = (struct) => f.StaveNote(struct);\n    const notes1 = [\n        { keys: ['b/4'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n    ].map(createStaveNote);\n    notes1[1].addModifier(f.Accidental({ type: '#' }), 0);\n    f.Beam({ notes: notes1 });\n    const voice0 = f.Voice({ time: '3/8' }).setStrict(false).addTickables(notes0);\n    const voice1 = f.Voice({ time: '3/8' }).setStrict(false).addTickables(notes1);\n    f.Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(StaveNoteTests);\nexport { StaveNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StaveTie Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Stem } from '../src/stem';\nconst StaveTieTests = {\n    Start() {\n        QUnit.module('StaveTie');\n        const run = VexFlowTests.runTests;\n        run('Simple StaveTie', simple);\n        run('Chord StaveTie', chord);\n        run('Stem Up StaveTie', stemUp);\n        run('No End Note With Clef', noEndNote1);\n        run('No End Note', noEndNote2);\n        run('No Start Note With Clef', noStartNote1);\n        run('No Start Note', noStartNote2);\n        run('Set Direction Down', setDirectionDown);\n        run('Set Direction Up', setDirectionUp);\n    },\n};\n/**\n * Used by the 7 tests below to set up the stave, easyscore, notes, voice, and to format & draw.\n */\nfunction createTest(notesData, setupTies) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options, 300);\n        const stave = factory.Stave();\n        const score = factory.EasyScore();\n        const notes = score.notes(notesData[0], notesData[1]);\n        const voice = score.voice(notes);\n        // const tickables = voice.getTickables(); // same as the notes that we passed in.\n        setupTies(factory, notes, stave);\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        factory.draw();\n        options.assert.ok(true);\n    };\n}\nconst simple = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    });\n});\nconst chord = createTest(['(d4 e4 f4)/2, (cn4 f#4 a4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1, 2],\n        lastIndexes: [0, 1, 2],\n    });\n});\nconst stemUp = createTest(['(d4 e4 f4)/2, (cn4 f#4 a4)', { stem: 'up' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1, 2],\n        lastIndexes: [0, 1, 2],\n    });\n});\nconst noEndNote1 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes, stave) => {\n    stave.addEndClef('treble');\n    f.StaveTie({\n        from: notes[1],\n        firstIndexes: [2],\n        lastIndexes: [2],\n        text: 'slow.',\n    });\n});\nconst noEndNote2 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[1],\n        firstIndexes: [2],\n        lastIndexes: [2],\n        text: 'slow.',\n    });\n});\nconst noStartNote1 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes, stave) => {\n    stave.addClef('treble');\n    f.StaveTie({\n        to: notes[0],\n        firstIndexes: [2],\n        lastIndexes: [2],\n        text: 'H',\n    });\n});\nconst noStartNote2 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        to: notes[0],\n        firstIndexes: [2],\n        lastIndexes: [2],\n        text: 'H',\n    });\n});\nconst setDirectionDown = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n        options: { direction: Stem.DOWN },\n    });\n});\nconst setDirectionUp = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\n    f.StaveTie({\n        from: notes[0],\n        to: notes[1],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n        options: { direction: Stem.UP },\n    });\n});\nVexFlowTests.register(StaveTieTests);\nexport { StaveTieTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// StringNumber Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Element } from '../src/element';\nimport { Renderer } from '../src/renderer';\nimport { Stave } from '../src/stave';\nimport { BarlineType } from '../src/stavebarline';\nimport { Stroke } from '../src/strokes';\nconst StringNumberTests = {\n    Start() {\n        QUnit.module('StringNumber');\n        const run = VexFlowTests.runTests;\n        run('String Number In Notation', drawMultipleMeasures);\n        run('String Number In Notation - no circle', drawMultipleMeasures, { drawCircle: false });\n        run('Fret Hand Finger In Notation', drawFretHandFingers);\n        run('Multi Voice With Strokes, String & Finger Numbers', multi);\n        run('Complex Measure With String & Finger Numbers', drawAccidentals);\n        run('Shifted Notehead, Multiple Modifiers', shiftedNoteheadMultipleModifiers);\n    },\n};\nfunction drawMultipleMeasures(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\n    const f = VexFlowTests.makeFactory(options, 775, 200);\n    const score = f.EasyScore();\n    // bar 1\n    const stave1 = f.Stave({ width: 300 }).setEndBarType(BarlineType.DOUBLE).addClef('treble');\n    const notes1 = score.notes('(c4 e4 g4)/4., (c5 e5 g5)/8, (c4 f4 g4)/4, (c4 f4 g4)/4', { stem: 'down' });\n    notes1[0]\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_a = options.params) === null || _a === void 0 ? void 0 : _a.drawCircle), 0)\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }, (_b = options.params) === null || _b === void 0 ? void 0 : _b.drawCircle), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_c = options.params) === null || _c === void 0 ? void 0 : _c.drawCircle), 2);\n    notes1[1]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_d = options.params) === null || _d === void 0 ? void 0 : _d.drawCircle), 0)\n        .addModifier(f.Accidental({ type: '#' }).setAsCautionary(), 1)\n        .addModifier(f\n        .StringNumber({ number: '3', position: 'above' }, (_e = options.params) === null || _e === void 0 ? void 0 : _e.drawCircle)\n        .setLastNote(notes1[3])\n        .setLineEndType(Renderer.LineEndType.DOWN), 2);\n    notes1[2]\n        .addModifier(f.StringNumber({ number: '5', position: 'left' }, (_f = options.params) === null || _f === void 0 ? void 0 : _f.drawCircle), 0)\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_g = options.params) === null || _g === void 0 ? void 0 : _g.drawCircle), 2)\n        .addModifier(f.Accidental({ type: '#' }), 1);\n    notes1[3]\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_h = options.params) === null || _h === void 0 ? void 0 : _h.drawCircle).setOffsetY(7), 0)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_j = options.params) === null || _j === void 0 ? void 0 : _j.drawCircle).setOffsetY(6), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_k = options.params) === null || _k === void 0 ? void 0 : _k.drawCircle).setOffsetY(-6), 2);\n    const voice1 = score.voice(notes1);\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n    // bar 2 - juxtaposing second bar next to first bar\n    const stave2 = f\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\n        .setEndBarType(BarlineType.DOUBLE);\n    const notes2 = score.notes('(c4 e4 g4)/4, (c5 e5 g5), (c4 f4 g4), (c4 f4 g4)', { stem: 'up' });\n    notes2[0]\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_l = options.params) === null || _l === void 0 ? void 0 : _l.drawCircle), 0)\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }, (_m = options.params) === null || _m === void 0 ? void 0 : _m.drawCircle), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_o = options.params) === null || _o === void 0 ? void 0 : _o.drawCircle), 2);\n    notes2[1]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_p = options.params) === null || _p === void 0 ? void 0 : _p.drawCircle), 0)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f\n        .StringNumber({ number: '3', position: 'above' }, (_q = options.params) === null || _q === void 0 ? void 0 : _q.drawCircle)\n        .setLastNote(notes2[3])\n        .setDashed(false), 2);\n    notes2[2]\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_r = options.params) === null || _r === void 0 ? void 0 : _r.drawCircle), 2)\n        .addModifier(f.Accidental({ type: '#' }), 1);\n    notes2[3]\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_s = options.params) === null || _s === void 0 ? void 0 : _s.drawCircle).setOffsetY(7), 0)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_t = options.params) === null || _t === void 0 ? void 0 : _t.drawCircle).setOffsetY(6), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_u = options.params) === null || _u === void 0 ? void 0 : _u.drawCircle).setOffsetY(-6), 2);\n    const voice2 = score.voice(notes2);\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\n    // bar 3 - juxtaposing third bar next to second bar\n    const stave3 = f\n        .Stave({ x: stave2.getWidth() + stave2.getX(), y: stave2.getY(), width: 150 })\n        .setEndBarType(BarlineType.END);\n    const notesBar3 = score.notes('(c4 e4 g4 a4)/1.');\n    notesBar3[0]\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_v = options.params) === null || _v === void 0 ? void 0 : _v.drawCircle), 0)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_w = options.params) === null || _w === void 0 ? void 0 : _w.drawCircle), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_x = options.params) === null || _x === void 0 ? void 0 : _x.drawCircle), 2)\n        .addModifier(f.StringNumber({ number: '2', position: 'above' }, (_y = options.params) === null || _y === void 0 ? void 0 : _y.drawCircle), 3);\n    const voice3 = score.voice(notesBar3, { time: '6/4' });\n    f.Formatter().joinVoices([voice3]).formatToStave([voice3], stave3);\n    f.draw();\n    options.assert.ok(true, 'String Number');\n}\nfunction drawFretHandFingers(options) {\n    const f = VexFlowTests.makeFactory(options, 725, 200);\n    const score = f.EasyScore();\n    // bar 1\n    const stave1 = f.Stave({ width: 350 }).setEndBarType(BarlineType.DOUBLE).addClef('treble');\n    const notes1 = score.notes('(c4 e4 g4)/4, (c5 e5 g5), (c4 f4 g4), (c4 f4 g4)', { stem: 'down' });\n    notes1[0]\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\n    notes1[1]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\n    notes1[2]\n        .addModifier(f.Fingering({ number: '3', position: 'below' }), 0)\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 1);\n    notes1[3]\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }).setOffsetY(7), 0)\n        .addModifier(f.Fingering({ number: '4', position: 'right' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }).setOffsetY(6), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'right' }).setOffsetY(-5), 2)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }).setOffsetY(-6), 2);\n    const voice1 = score.voice(notes1);\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n    // bar 2 - juxtaposing second bar next to first bar\n    const stave2 = f\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 350 })\n        .setEndBarType(BarlineType.END);\n    const notes2 = score.notes('(c4 e4 g4)/4., (c5 e5 g5)/8, (c4 f4 g4)/8, (c4 f4 g4)/4.[stem=\"down\"]', {\n        stem: 'up',\n    });\n    notes2[0]\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 2);\n    notes2[1]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\n    notes2[2]\n        .addModifier(f.Fingering({ number: '3', position: 'below' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\n        .addModifier(f.Fingering({ number: '1', position: 'right' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 2);\n    notes2[3]\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }).setOffsetY(7), 0)\n        .addModifier(f.Fingering({ number: '4', position: 'right' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }).setOffsetY(6), 1)\n        .addModifier(f.Fingering({ number: '1', position: 'right' }).setOffsetY(-6), 2)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }).setOffsetY(-6), 2);\n    const voice2 = score.voice(notes2);\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\n    f.draw();\n    options.assert.ok(true, 'String Number');\n}\nfunction multi(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 200);\n    const score = f.EasyScore();\n    const stave = f.Stave();\n    const notes1 = score.notes('(c4 e4 g4)/4, (a3 e4 g4), (c4 d4 a4), (c4 d4 a4)', { stem: 'up' });\n    notes1[0]\n        .addStroke(0, new Stroke(5))\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'above' }), 2);\n    notes1[1]\n        .addStroke(0, new Stroke(6))\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\n        .addModifier(f.StringNumber({ number: '3', position: 'above' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 2);\n    notes1[2]\n        .addStroke(0, new Stroke(2))\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '0', position: 'right' }), 1)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\n        .addModifier(f.Fingering({ number: '1', position: 'left' }), 2)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 2);\n    notes1[3]\n        .addStroke(0, new Stroke(1))\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }), 2)\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1);\n    const notes2 = score.notes('e3/8, e3, e3, e3, e3, e3, e3, e3', { stem: 'down' });\n    notes2[0]\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\n        .addModifier(f.StringNumber({ number: '6', position: 'below' }), 0);\n    notes2[2].addModifier(f.Accidental({ type: '#' }), 0);\n    notes2[4].addModifier(f.Fingering({ number: '0', position: 'left' }), 0);\n    // Position string number 6 beneath the strum arrow: left (15) and down (18)\n    notes2[4].addModifier(f.StringNumber({ number: '6', position: 'left' }).setOffsetX(15).setOffsetY(18), 0);\n    // Important Note: notes2 must come first, otherwise ledger lines from notes2 will be drawn on top of notes from notes1!\n    // BUG: VexFlow draws TWO ledger lines for middle C, because both notes1 and notes2 require the middle C ledger line.\n    const voices = [score.voice(notes2), score.voice(notes1)];\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.Beam({ notes: notes2.slice(0, 4) });\n    f.Beam({ notes: notes2.slice(4, 8) });\n    f.draw();\n    options.assert.ok(true, 'Strokes Test Multi Voice');\n}\nfunction drawAccidentals(options) {\n    const f = VexFlowTests.makeFactory(options, 750);\n    const el = new Element();\n    el.setText(String.fromCharCode(0xe050));\n    el.measureText();\n    const clefWidth = el.getWidth(); // widest clef\n    const notes = [\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5', 'e/5', 'g/5'], stemDirection: 1, duration: '4' }),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stemDirection: 1, duration: '4' }),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stemDirection: -1, duration: '4' }),\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stemDirection: -1, duration: '4' }),\n    ];\n    notes[0]\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 3)\n        .addModifier(f.Accidental({ type: '#' }), 3)\n        .addModifier(f.Fingering({ number: '2', position: 'right' }), 4)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 4)\n        .addModifier(f.Accidental({ type: '#' }), 4)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 5)\n        .addModifier(f.Accidental({ type: '#' }), 5);\n    notes[1]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 3)\n        .addModifier(f.Accidental({ type: '#' }), 4)\n        .addModifier(f.Accidental({ type: '#' }), 5);\n    notes[2]\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\n        .addModifier(f.StringNumber({ number: '2', position: 'left' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 3)\n        .addModifier(f.Accidental({ type: '#' }), 3)\n        .addModifier(f.Fingering({ number: '2', position: 'right' }), 4)\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 4)\n        .addModifier(f.Accidental({ type: '#' }), 4)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 5)\n        .addModifier(f.Accidental({ type: '#' }), 5);\n    notes[3]\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 3)\n        .addModifier(f.Accidental({ type: '#' }), 4)\n        .addModifier(f.Accidental({ type: '#' }), 5);\n    const voice = f.Voice().addTickables(notes);\n    const ctx = f.getContext();\n    const formatter = f.Formatter().joinVoices([voice]);\n    const stavePadding = clefWidth + Stave.defaultPadding + 10;\n    const nwidth = Math.max(formatter.preCalculateMinTotalWidth([voice]), 490 - stavePadding);\n    formatter.format([voice], nwidth);\n    const stave = f\n        .Stave({ x: 0, y: 0, width: nwidth + stavePadding })\n        .setContext(ctx)\n        .setEndBarType(BarlineType.DOUBLE)\n        .addClef('treble')\n        .draw();\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'String Number');\n}\nfunction shiftedNoteheadMultipleModifiers(options) {\n    const f = VexFlowTests.makeFactory(options, 900, 150);\n    const score = f.EasyScore();\n    score.set({ time: '6/4' });\n    const stave = f.Stave({ width: 900 }).setEndBarType(BarlineType.END).addClef('treble');\n    const notes = ['A4 B4', 'B4 C5', 'A4 B#4', 'B4 C#5', 'A#4 B#4', 'B#4 C#5']\n        .map((keys) => score.notes(`(${keys})/q`))\n        .flat();\n    notes.forEach((note) => {\n        note\n            .addModifier(f.StringNumber({ number: '2', position: 'left' }, true), 1)\n            .addModifier(f.StringNumber({ number: '2', position: 'right' }, true), 1);\n    });\n    const voice = score.voice(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'String Number');\n}\nVexFlowTests.register(StringNumberTests);\nexport { StringNumberTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Strokes Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Barline, Beam, Bend, Stroke } from '../src/index';\nconst StrokesTests = {\n    Start() {\n        QUnit.module('Strokes');\n        const run = VexFlowTests.runTests;\n        // TODO: Rename tests by removing 'Strokes - ' since it is redundant with the module name.\n        // This will make flow.html easier to read.\n        run('Strokes - Brush/Roll/Rasquedo', brushRollRasquedo);\n        run('Strokes - Arpeggio directionless (without arrows)', arpeggioDirectionless);\n        run('Strokes - Multi Voice', multiVoice);\n        run('Strokes - Notation and Tab', notesWithTab);\n        run('Strokes - Multi-Voice Notation and Tab', multiNotationAndTab);\n    },\n};\nfunction brushRollRasquedo(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const score = f.EasyScore();\n    // bar 1\n    const stave1 = f.Stave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\n    const notes1 = score.notes('(a3 e4 a4)/4, (c4 e4 g4), (c4 e4 g4), (c4 e4 g4)', { stem: 'up' });\n    notes1[0].addStroke(0, new Stroke(1));\n    notes1[1]\n        .addStroke(0, new Stroke(2))\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 0);\n    notes1[2].addStroke(0, new Stroke(1));\n    notes1[3].addStroke(0, new Stroke(2));\n    const voice1 = score.voice(notes1);\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n    // bar 2\n    const stave2 = f\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\n        .setEndBarType(Barline.type.DOUBLE);\n    const notes2 = score.notes('(c4 d4 g4)/4, (c4 d4 g4), (c4 d4 g4), (c4 d4 a4)', { stem: 'up' });\n    notes2[0].addStroke(0, new Stroke(3));\n    notes2[1].addStroke(0, new Stroke(4));\n    notes2[2].addStroke(0, new Stroke(5));\n    notes2[3]\n        .addStroke(0, new Stroke(6))\n        .addModifier(f.Accidental({ type: 'bb' }), 0)\n        .addModifier(f.Accidental({ type: 'bb' }), 1)\n        .addModifier(f.Accidental({ type: 'bb' }), 2);\n    const voice2 = score.voice(notes2);\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\n    f.draw();\n    options.assert.ok(true, 'Brush/Roll/Rasquedo');\n}\nfunction arpeggioDirectionless(options) {\n    const f = VexFlowTests.makeFactory(options, 700, 200);\n    const score = f.EasyScore();\n    // bar 1\n    const stave1 = f.Stave({ x: 100, width: 500 }).setEndBarType(Barline.type.DOUBLE);\n    const notes1 = score.notes('(g4 b4 d5)/4, (g4 b4 d5 g5), (g4 b4 d5 g5), (g4 b4 d5)', { stem: 'up' });\n    const graceNoteStructs = [\n        { keys: ['e/4'], duration: '32' },\n        { keys: ['f/4'], duration: '32' },\n        { keys: ['g/4'], duration: '32' },\n    ];\n    const graceNotes = graceNoteStructs.map((graceNoteStruct) => f.GraceNote(graceNoteStruct));\n    const graceNoteGroup = f.GraceNoteGroup({ notes: graceNotes, slur: false });\n    graceNoteGroup.beamNotes();\n    notes1[0].addStroke(0, new Stroke(7));\n    notes1[1]\n        .addStroke(0, new Stroke(7))\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 1)\n        .addModifier(f.Accidental({ type: '#' }), 2)\n        .addModifier(f.Accidental({ type: '#' }), 3);\n    notes1[2]\n        .addStroke(0, new Stroke(7))\n        .addModifier(f.Accidental({ type: 'b' }), 1)\n        .addModifier(graceNoteGroup, 0);\n    notes1[3].addStroke(0, new Stroke(7)).addModifier(f.NoteSubGroup({\n        notes: [f.ClefNote({ type: 'treble', options: { size: 'default', annotation: '8va' } })],\n    }), 0);\n    const voice1 = score.voice(notes1);\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n    f.draw();\n    options.assert.ok(true, 'Arpeggio directionless (without arrows)');\n}\nfunction multiVoice(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 200);\n    const score = f.EasyScore();\n    const stave = f.Stave();\n    const notes1 = score.notes('(c4 e4 g4)/4, (c4 e4 g4), (c4 d4 a4), (c4 d4 a4)', { stem: 'up' });\n    notes1[0].addStroke(0, new Stroke(5));\n    notes1[1]\n        .addStroke(0, new Stroke(6))\n        .addModifier(f.Accidental({ type: '#' }), 0)\n        .addModifier(f.Accidental({ type: '#' }), 2);\n    notes1[2].addStroke(0, new Stroke(2));\n    notes1[3].addStroke(0, new Stroke(1));\n    const notes2 = score.notes('e3/8, e3, e3, e3, e3, e3, e3, e3', { stem: 'down' });\n    f.Beam({ notes: notes2.slice(0, 4) });\n    f.Beam({ notes: notes2.slice(4, 8) });\n    const voices = [notes1, notes2].map((notes) => score.voice(notes));\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Strokes Test Multi Voice');\n}\nfunction multiNotationAndTab(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 275);\n    const score = f.EasyScore();\n    const stave = f.Stave().addClef('treble');\n    // notation upper voice notes\n    const notes1 = score.notes('(g4 b4 e5)/4, (g4 b4 e5), (g4 b4 e5), (g4 b4 e5)', { stem: 'up' });\n    notes1[0].addStroke(0, new Stroke(3, { allVoices: false }));\n    notes1[1].addStroke(0, new Stroke(6));\n    notes1[2].addStroke(0, new Stroke(2, { allVoices: false }));\n    notes1[3].addStroke(0, new Stroke(1));\n    const notes2 = score.notes('g3/4, g3, g3, g3', { stem: 'down' });\n    f.TabStave({ y: 100 }).addClef('tab').setNoteStartX(stave.getNoteStartX());\n    // tablature upper voice notes\n    const tabNotes1 = [\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 0 },\n                { str: 2, fret: 0 },\n                { str: 1, fret: 1 },\n            ],\n            duration: '4',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 0 },\n                { str: 2, fret: 0 },\n                { str: 1, fret: 1 },\n            ],\n            duration: '4',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 0 },\n                { str: 2, fret: 0 },\n                { str: 1, fret: 1 },\n            ],\n            duration: '4',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 0 },\n                { str: 2, fret: 0 },\n                { str: 1, fret: 1 },\n            ],\n            duration: '4',\n        }),\n    ];\n    tabNotes1[0].addStroke(0, new Stroke(3, { allVoices: false }));\n    tabNotes1[1].addStroke(0, new Stroke(6));\n    tabNotes1[2].addStroke(0, new Stroke(2, { allVoices: false }));\n    tabNotes1[3].addStroke(0, new Stroke(1));\n    const tabNotes2 = [\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\n    ];\n    const voices = [notes1, notes2, tabNotes1, tabNotes2].map((notes) => score.voice(notes));\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\n    f.draw();\n    options.assert.ok(true, 'Strokes Test Notation & Tab Multi Voice');\n}\n/*\nfunction drawTabStrokes(options: TestOptions): void {\n  const f = VexFlowTests.makeFactory(options, 600, 200);\n  const stave1 = f.TabStave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\n\n  const tabNotes1 = [\n    f.TabNote({\n      positions: [\n        { str: 2, fret: 8 },\n        { str: 3, fret: 9 },\n        { str: 4, fret: 10 },\n      ],\n      duration: '4',\n    }),\n    f.TabNote({\n      positions: [\n        { str: 3, fret: 7 },\n        { str: 4, fret: 8 },\n        { str: 5, fret: 9 },\n      ],\n      duration: '4',\n    }),\n    f.TabNote({\n      positions: [\n        { str: 1, fret: 5 },\n        { str: 2, fret: 6 },\n        { str: 3, fret: 7 },\n        { str: 4, fret: 7 },\n        { str: 5, fret: 5 },\n        { str: 6, fret: 5 },\n      ],\n      duration: '4',\n    }),\n    f.TabNote({\n      positions: [\n        { str: 4, fret: 3 },\n        { str: 5, fret: 4 },\n        { str: 6, fret: 5 },\n      ],\n      duration: '4',\n    }),\n  ];\n\n  tabNotes1[0].addStroke(0, new Stroke(1));\n  tabNotes1[1].addStroke(0, new Stroke(2));\n  tabNotes1[2].addStroke(0, new Stroke(3));\n  tabNotes1[3].addStroke(0, new Stroke(4));\n\n  const tabVoice1 = f.Voice().addTickables(tabNotes1);\n\n  f.Formatter().joinVoices([tabVoice1]).formatToStave([tabVoice1], stave1);\n\n  // bar 2\n  const stave2 = f.TabStave({ x: stave1.getWidth() + stave1.getX(), width: 300 }).setEndBarType(Barline.type.DOUBLE);\n\n  const tabNotes2 = [\n    f.TabNote({\n      positions: [\n        { str: 2, fret: 7 },\n        { str: 3, fret: 8 },\n        { str: 4, fret: 9 },\n      ],\n      duration: '2',\n    }),\n    f.TabNote({\n      positions: [\n        { str: 1, fret: 5 },\n        { str: 2, fret: 6 },\n        { str: 3, fret: 7 },\n        { str: 4, fret: 7 },\n        { str: 5, fret: 5 },\n        { str: 6, fret: 5 },\n      ],\n      duration: '2',\n    }),\n  ];\n\n  tabNotes2[0].addStroke(0, new Stroke(6));\n  tabNotes2[1].addStroke(0, new Stroke(5));\n\n  const tabVoice2 = f.Voice().addTickables(tabNotes2);\n\n  f.Formatter().joinVoices([tabVoice2]).formatToStave([tabVoice2], stave2);\n\n  f.draw();\n\n  options.assert.ok(true, 'Strokes Tab test');\n}\n*/\nfunction notesWithTab(options) {\n    const f = VexFlowTests.makeFactory(options, 500, 300);\n    const stave = f.Stave({ x: 15, y: 40, width: 450 }).addClef('treble');\n    const notes = [\n        f\n            .StaveNote({ keys: ['b/4', 'd/5', 'g/5'], stemDirection: -1, duration: '4' })\n            .addModifier(f.Accidental({ type: 'b' }), 1)\n            .addModifier(f.Accidental({ type: 'b' }), 0),\n        f.StaveNote({ keys: ['c/5', 'd/5'], stemDirection: -1, duration: '4' }),\n        f.StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5'], stemDirection: 1, duration: '8' }),\n        f\n            .StaveNote({ keys: ['a/3', 'e/4', 'a/4', 'c/5', 'e/5', 'a/5'], stemDirection: 1, duration: '8' })\n            .addModifier(f.Accidental({ type: '#' }), 3),\n        f.StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5'], stemDirection: 1, duration: '8' }),\n        f\n            .StaveNote({ keys: ['a/3', 'e/4', 'a/4', 'c/5', 'f/5', 'a/5'], stemDirection: 1, duration: '8' })\n            .addModifier(f.Accidental({ type: '#' }), 3)\n            .addModifier(f.Accidental({ type: '#' }), 4),\n    ];\n    const tabstave = f\n        .TabStave({ x: stave.getX(), y: 140, width: 450 })\n        .addClef('tab')\n        .setNoteStartX(stave.getNoteStartX());\n    const tabNotes = [\n        f\n            .TabNote({\n            positions: [\n                { str: 1, fret: 3 },\n                { str: 2, fret: 2 },\n                { str: 3, fret: 3 },\n            ],\n            duration: '4',\n        })\n            .addModifier(new Bend([{ type: Bend.UP, text: 'Full' }]), 0),\n        f\n            .TabNote({\n            positions: [\n                { str: 2, fret: 3 },\n                { str: 3, fret: 5 },\n            ],\n            duration: '4',\n        })\n            .addModifier(new Bend([{ type: Bend.UP, text: 'Unison' }]), 1),\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 7 },\n                { str: 4, fret: 7 },\n                { str: 5, fret: 7 },\n                { str: 6, fret: 7 },\n            ],\n            duration: '8',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 1, fret: 5 },\n                { str: 2, fret: 5 },\n                { str: 3, fret: 6 },\n                { str: 4, fret: 7 },\n                { str: 5, fret: 7 },\n                { str: 6, fret: 5 },\n            ],\n            duration: '8',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 3, fret: 7 },\n                { str: 4, fret: 7 },\n                { str: 5, fret: 7 },\n                { str: 6, fret: 7 },\n            ],\n            duration: '8',\n        }),\n        f.TabNote({\n            positions: [\n                { str: 1, fret: 5 },\n                { str: 2, fret: 5 },\n                { str: 3, fret: 6 },\n                { str: 4, fret: 7 },\n                { str: 5, fret: 7 },\n                { str: 6, fret: 5 },\n            ],\n            duration: '8',\n        }),\n    ];\n    notes[0].addStroke(0, new Stroke(1));\n    notes[1].addStroke(0, new Stroke(2));\n    notes[2].addStroke(0, new Stroke(3));\n    notes[3].addStroke(0, new Stroke(4));\n    notes[4].addStroke(0, new Stroke(5));\n    notes[5].addStroke(0, new Stroke(6));\n    tabNotes[0].addStroke(0, new Stroke(1));\n    tabNotes[1].addStroke(0, new Stroke(2));\n    tabNotes[2].addStroke(0, new Stroke(3));\n    tabNotes[3].addStroke(0, new Stroke(4));\n    tabNotes[4].addStroke(0, new Stroke(5));\n    tabNotes[5].addStroke(0, new Stroke(6));\n    f.StaveConnector({\n        topStave: stave,\n        bottomStave: tabstave,\n        type: 'bracket',\n    });\n    f.StaveConnector({\n        topStave: stave,\n        bottomStave: tabstave,\n        type: 'single',\n    });\n    const voice = f.Voice().addTickables(notes);\n    const tabVoice = f.Voice().addTickables(tabNotes);\n    const beams = Beam.applyAndGetBeams(voice);\n    f.Formatter().joinVoices([voice]).joinVoices([tabVoice]).formatToStave([voice, tabVoice], stave);\n    f.draw();\n    beams.forEach(function (beam) {\n        beam.setContext(f.getContext()).draw();\n    });\n    options.assert.ok(true);\n}\nVexFlowTests.register(StrokesTests);\nexport { StrokesTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Style Tests\n// TODO: The .addStroke(0, new Stroke(...)) in the tab test case shows a NO GLYPH for the Petaluma font.\n// TODO: Changing ctx.font seems to have no effect in the tab test case. Should it?\n//       Annotation sets its own font.\n//       TabNote sets its own font.\n//       Is there a way to set all the text fonts in one go?\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Annotation } from '../src/annotation';\nimport { Articulation } from '../src/articulation';\nimport { Bend } from '../src/bend';\nimport { Formatter } from '../src/formatter';\nimport { KeySignature } from '../src/keysignature';\nimport { NoteSubGroup } from '../src/notesubgroup';\nimport { Ornament } from '../src/ornament';\nimport { StaveModifierPosition } from '../src/stavemodifier';\nimport { Stroke } from '../src/strokes';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { TimeSignature } from '../src/timesignature';\nconst StyleTests = {\n    Start() {\n        QUnit.module('Style');\n        const run = VexFlowTests.runTests;\n        run('Basic Style', stave);\n        run('TabNote modifiers Style', tab);\n    },\n};\n/**\n * Helper function to create a ElementStyle options object of the form { fillStyle: XXX, strokeStyle: YYY }.\n * Used for updating the fillStyle and optionally the strokeStyle.\n */\nfunction FS(fillStyle, strokeStyle) {\n    const ret = { fillStyle };\n    if (strokeStyle) {\n        ret.strokeStyle = strokeStyle;\n    }\n    return ret;\n}\n/**\n * Color elements on a stave.\n */\nfunction stave(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 150);\n    const stave = f.Stave({ x: 25, y: 20, width: 500 });\n    // Stave modifiers test.\n    const keySig = new KeySignature('D');\n    keySig.addToStave(stave);\n    keySig.setStyle(FS('blue'));\n    stave.addTimeSignature('4/4');\n    const timeSig = stave.getModifiers(StaveModifierPosition.BEGIN, TimeSignature.CATEGORY);\n    timeSig[0].setStyle(FS('brown'));\n    const notes = [\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: 1, duration: '4' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: 1, duration: '4' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f.StaveNote({ keys: ['e/4'], stemDirection: 1, duration: '4' }),\n        f.StaveNote({ keys: ['f/4'], stemDirection: 1, duration: '8' }),\n        // voice.draw() test.\n        f.TextDynamics({ text: 'sfz', duration: '16' }).setStyle(FS('blue')),\n        // GhostNote modifiers test.\n        f.GhostNote({ duration: '16' }).addModifier(new Annotation('GhostNote green text').setStyle(FS('green')), 0),\n    ];\n    const notes0 = notes[0];\n    const notes1 = notes[1];\n    notes0.setKeyStyle(0, FS('red'));\n    notes1.setKeyStyle(0, FS('red'));\n    // StaveNote modifiers test.\n    const mods1 = notes1.getModifiers();\n    mods1[0].setStyle(FS('green'));\n    notes0.addModifier(new Articulation('a.').setPosition(4).setStyle(FS('green')), 0);\n    notes0.addModifier(new Ornament('mordent').setStyle(FS('lightgreen')), 0);\n    notes1.addModifier(new Annotation('blue').setStyle(FS('blue')), 0);\n    notes1.addModifier(new NoteSubGroup([f.ClefNote({ options: { size: 'small' } }).setStyle(FS('blue'))]), 0);\n    const voice = f.Voice().addTickables(notes);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Basic Style');\n}\n/**\n * Color elements on a guitar tab.\n */\nfunction tab(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 140);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 450).addTabGlyph();\n    stave.getModifiers()[2].setStyle(FS('blue'));\n    stave.setContext(ctx).draw();\n    const tabNote = (noteStruct) => new TabNote(noteStruct);\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'h',\n        }).addModifier(new Annotation('green text').setStyle(FS('green')), 0),\n        tabNote({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'h',\n        })\n            .addModifier(new Bend([{ type: Bend.UP, text: 'Full' }]).setStyle(FS('brown')), 0)\n            .addStroke(0, new Stroke(1, { allVoices: false }).setStyle(FS('blue'))),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'TabNote Modifiers Style');\n}\nVexFlowTests.register(StyleTests);\nexport { StyleTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TabNote Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Dot } from '../src/dot';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { Stave } from '../src/stave';\nimport { Tables } from '../src/tables';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { TickContext } from '../src/tickcontext';\nimport { Voice, VoiceMode } from '../src/voice';\nconst TabNoteTests = {\n    Start() {\n        QUnit.module('TabNote');\n        QUnit.test('Tick', ticks);\n        QUnit.test('TabStave Line', tabStaveLine);\n        QUnit.test('Width', width);\n        const run = VexFlowTests.runTests;\n        run('TabNote Draw', draw);\n        run('TabNote Stems Up', drawStemsUp);\n        run('TabNote Stems Down', drawStemsDown);\n        run('TabNote Stems Up Through Stave', drawStemsUpThrough);\n        run('TabNote Stems Down Through Stave', drawStemsDownThrough);\n        run('TabNote Stems with Dots', drawStemsDotted);\n    },\n};\nfunction ticks(assert) {\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\n    let note = new TabNote({ positions: [{ str: 6, fret: 6 }], duration: '1' });\n    assert.equal(note.getTicks().value(), BEAT * 4, 'Whole note has 4 beats');\n    note = new TabNote({ positions: [{ str: 3, fret: 4 }], duration: '4' });\n    assert.equal(note.getTicks().value(), BEAT, 'Quarter note has 1 beat');\n}\nfunction tabStaveLine(assert) {\n    const note = new TabNote({\n        positions: [\n            { str: 6, fret: 6 },\n            { str: 4, fret: 5 },\n        ],\n        duration: '1',\n    });\n    const positions = note.getPositions();\n    assert.equal(positions[0].str, 6, 'String 6, Fret 6');\n    assert.equal(positions[0].fret, 6, 'String 6, Fret 6');\n    assert.equal(positions[1].str, 4, 'String 4, Fret 5');\n    assert.equal(positions[1].fret, 5, 'String 4, Fret 5');\n    const stave = new Stave(10, 10, 300);\n    note.setStave(stave);\n    const ys = note.getYs();\n    assert.equal(ys.length, 2, 'Chord should be rendered on two lines');\n    assert.equal(ys[0], 100, 'Line for String 6, Fret 6');\n    assert.equal(ys[1], 80, 'Line for String 4, Fret 5');\n}\nfunction width(assert) {\n    assert.expect(1);\n    const note = new TabNote({\n        positions: [\n            { str: 6, fret: 6 },\n            { str: 4, fret: 5 },\n        ],\n        duration: '1',\n    });\n    assert.throws(() => note.getWidth(), /UnformattedNote/, 'Unformatted note should have no width');\n}\nfunction draw(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 140);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const notes = [\n        { positions: [{ str: 6, fret: 6 }], duration: '4' },\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 'x' },\n                { str: 5, fret: 15 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 'x' },\n                { str: 5, fret: 5 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 6, fret: 0 },\n                { str: 5, fret: 5 },\n                { str: 4, fret: 5 },\n                { str: 3, fret: 4 },\n                { str: 2, fret: 3 },\n                { str: 1, fret: 0 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '4',\n        },\n    ];\n    // Helper function\n    function showNote(noteStruct, stave, ctx, x) {\n        const tabNote = new TabNote(noteStruct);\n        const tickContext = new TickContext();\n        tickContext.addTickable(tabNote).preFormat().setX(x);\n        tabNote.setContext(ctx).setStave(stave);\n        tabNote.draw();\n        return tabNote;\n    }\n    for (let i = 0; i < notes.length; ++i) {\n        const note = notes[i];\n        const tabNote = showNote(note, stave, ctx, (i + 1) * 25);\n        options.assert.ok(tabNote.getX() > 0, 'Note ' + i + ' has X value');\n        options.assert.ok(tabNote.getYs().length > 0, 'Note ' + i + ' has Y values');\n    }\n}\nfunction drawStemsUp(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 30, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '32',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '128',\n        },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = new TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        return tabNote;\n    });\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'TabNotes successfully drawn');\n}\nfunction drawStemsDown(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '32',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '128',\n        },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = new TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.setStemDirection(-1);\n        return tabNote;\n    });\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'All objects have been drawn');\n}\nfunction drawStemsUpThrough(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 30, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '32',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '128',\n        },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = new TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.renderOptions.drawStemThroughStave = true;\n        return tabNote;\n    });\n    ctx.setFont(Tables.lookupMetric('fontFamily'), 10, 'bold');\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'TabNotes successfully drawn');\n}\nfunction drawStemsDownThrough(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 250);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 550, { numLines: 8 });\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n                { str: 6, fret: 10 },\n            ],\n            duration: '32',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '64',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 3, fret: 5 },\n                { str: 5, fret: 5 },\n                { str: 7, fret: 5 },\n            ],\n            duration: '128',\n        },\n    ];\n    const notes = specs.map((struct) => {\n        const tabNote = new TabNote(struct);\n        tabNote.renderOptions.drawStem = true;\n        tabNote.renderOptions.drawStemThroughStave = true;\n        tabNote.setStemDirection(-1);\n        return tabNote;\n    });\n    ctx.setFont('Arial', 10, 'bold');\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'All objects have been drawn');\n}\nfunction drawStemsDotted(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 200);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 550);\n    stave.setContext(ctx);\n    stave.draw();\n    const specs = [\n        {\n            positions: [\n                { str: 3, fret: 6 },\n                { str: 4, fret: 25 },\n            ],\n            duration: '4d',\n        },\n        {\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 5, fret: 12 },\n            ],\n            duration: '8',\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '4dd',\n            stemDirection: -1,\n        },\n        {\n            positions: [\n                { str: 1, fret: 6 },\n                { str: 4, fret: 5 },\n            ],\n            duration: '16',\n            stemDirection: -1,\n        },\n    ];\n    const notes = specs.map((struct) => new TabNote(struct, true /* drawStem */));\n    Dot.buildAndAttach([notes[0], notes[2], notes[2]]);\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    voice.draw(ctx, stave);\n    options.assert.ok(true, 'TabNotes successfully drawn');\n}\nVexFlowTests.register(TabNoteTests);\nexport { TabNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TabSlide Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { TabNote } from '../src/tabnote';\nimport { TabSlide } from '../src/tabslide';\nimport { TabStave } from '../src/tabstave';\nimport { Voice } from '../src/voice';\nconst TabSlideTests = {\n    Start() {\n        QUnit.module('TabSlide');\n        const run = VexFlowTests.runTests;\n        run('Simple TabSlide', simple);\n        run('Slide Up', slideUp);\n        run('Slide Down', slideDown);\n    },\n};\nfunction tieNotes(notes, indexes, stave, ctx) {\n    const voice = new Voice(Flow.TIME4_4);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).format([voice], 100);\n    voice.draw(ctx, stave);\n    const tie = new TabSlide({\n        firstNote: notes[0],\n        lastNote: notes[1],\n        firstIndexes: indexes,\n        lastIndexes: indexes,\n    }, TabSlide.SLIDE_UP);\n    tie.setContext(ctx);\n    tie.draw();\n}\nfunction setupContext(options, width) {\n    // eslint-disable-next-line\n    const context = options.contextBuilder(options.elementId, 350, 140);\n    context.scale(0.9, 0.9);\n    context.font = '10pt Arial';\n    const stave = new TabStave(10, 10, width || 350).addTabGlyph().setContext(context).draw();\n    return { context, stave };\n}\n// Helper function to create TabNote objects.\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\n/**\n * Test Case\n */\nfunction simple(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    const { stave, context } = setupContext(options);\n    tieNotes([\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'h' }),\n        tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' }),\n    ], [0], stave, context);\n    options.assert.ok(true, 'Simple Test');\n}\n/**\n * The slideUp and slideDown tests pass in a builder function: TabSlide.createSlideUp | TabSlide.createSlideDown.\n */\nfunction multiTest(options, buildTabSlide) {\n    const { context, stave } = setupContext(options, 440);\n    const notes = [\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\n        tabNote({\n            positions: [\n                { str: 4, fret: 4 },\n                { str: 5, fret: 4 },\n            ],\n            duration: '8',\n        }),\n        tabNote({\n            positions: [\n                { str: 4, fret: 6 },\n                { str: 5, fret: 6 },\n            ],\n            duration: '8',\n        }),\n        tabNote({ positions: [{ str: 2, fret: 14 }], duration: '8' }),\n        tabNote({ positions: [{ str: 2, fret: 16 }], duration: '8' }),\n        tabNote({\n            positions: [\n                { str: 2, fret: 14 },\n                { str: 3, fret: 14 },\n            ],\n            duration: '8',\n        }),\n        tabNote({\n            positions: [\n                { str: 2, fret: 16 },\n                { str: 3, fret: 16 },\n            ],\n            duration: '8',\n        }),\n    ];\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\n    new Formatter().joinVoices([voice]).format([voice], 300);\n    voice.draw(context, stave);\n    buildTabSlide({\n        firstNote: notes[0],\n        lastNote: notes[1],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Single note');\n    buildTabSlide({\n        firstNote: notes[2],\n        lastNote: notes[3],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Chord');\n    buildTabSlide({\n        firstNote: notes[4],\n        lastNote: notes[5],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Single note high-fret');\n    buildTabSlide({\n        firstNote: notes[6],\n        lastNote: notes[7],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Chord high-fret');\n}\nfunction slideUp(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    multiTest(options, TabSlide.createSlideUp);\n}\nfunction slideDown(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    multiTest(options, TabSlide.createSlideDown);\n}\nVexFlowTests.register(TabSlideTests);\nexport { TabSlideTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TabStave Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { TabStave } from '../src/tabstave';\nconst TabStaveTests = {\n    Start() {\n        QUnit.module('TabStave');\n        const run = VexFlowTests.runTests;\n        run('TabStave Draw Test', draw);\n    },\n};\nfunction draw(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 160);\n    const stave = new TabStave(10, 10, 300);\n    stave.setNumLines(6);\n    stave.setContext(ctx);\n    stave.draw();\n    options.assert.equal(stave.getYForNote(0), 127, 'getYForNote(0)');\n    options.assert.equal(stave.getYForLine(5), 127, 'getYForLine(5)');\n    options.assert.equal(stave.getYForLine(0), 62, 'getYForLine(0) - Top Line');\n    options.assert.equal(stave.getYForLine(4), 114, 'getYForLine(4) - Bottom Line');\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(TabStaveTests);\nexport { TabStaveTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TabTie Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Annotation } from '../src/annotation';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { TabNote } from '../src/tabnote';\nimport { TabStave } from '../src/tabstave';\nimport { TabTie } from '../src/tabtie';\nimport { Voice } from '../src/voice';\nconst TabTieTests = {\n    Start() {\n        QUnit.module('TabTie');\n        const run = VexFlowTests.runTests;\n        run('Simple TabTie', simple);\n        run('Hammerons', simpleHammerOn);\n        run('Pulloffs', simplePullOff);\n        run('Tapping', tap);\n        run('Continuous', continuous);\n    },\n};\n/**\n * Helper function to create TabNote objects.\n */\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\n/**\n * Helper function to create a RenderContext and TabStave.\n */\nfunction setupContext(options, w = 0, h = 0) {\n    // eslint-disable-next-line\n    const context = options.contextBuilder(options.elementId, w || 350, h || 160);\n    context.setFont('Arial', VexFlowTests.Font.size);\n    const stave = new TabStave(10, 10, w || 350).addTabGlyph().setContext(context).draw();\n    return { context, stave };\n}\n/**\n * Helper function to create the TabTie between two Note objects.\n */\nfunction tieNotes(notes, indexes, stave, ctx, text) {\n    const voice = new Voice(Flow.TIME4_4);\n    voice.addTickables(notes);\n    new Formatter().joinVoices([voice]).format([voice], 100);\n    voice.draw(ctx, stave);\n    const tie = new TabTie({\n        firstNote: notes[0],\n        lastNote: notes[1],\n        firstIndexes: indexes,\n        lastIndexes: indexes,\n    }, text !== null && text !== void 0 ? text : 'Annotation');\n    tie.setContext(ctx);\n    tie.draw();\n}\n/**\n * Two notes on string 4 with a tie drawn between them.\n */\nfunction simple(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    const { context, stave } = setupContext(options);\n    const note1 = tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'h' });\n    const note2 = tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' });\n    tieNotes([note1, note2], [0], stave, context);\n    options.assert.ok(true, 'Simple Test');\n}\nfunction simpleHammerOn(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    multiTest(options, TabTie.createHammeron);\n}\nfunction simplePullOff(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    multiTest(options, TabTie.createPulloff);\n}\n/**\n * Helper function for the two test cases above (simpleHammerOn and simplePullOff).\n */\nfunction multiTest(options, createTabTie) {\n    const { context, stave } = setupContext(options, 440, 140);\n    const notes = [\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\n        tabNote({\n            positions: [\n                { str: 4, fret: 4 },\n                { str: 5, fret: 4 },\n            ],\n            duration: '8',\n        }),\n        tabNote({\n            positions: [\n                { str: 4, fret: 6 },\n                { str: 5, fret: 6 },\n            ],\n            duration: '8',\n        }),\n        tabNote({ positions: [{ str: 2, fret: 14 }], duration: '8' }),\n        tabNote({ positions: [{ str: 2, fret: 16 }], duration: '8' }),\n        tabNote({\n            positions: [\n                { str: 2, fret: 14 },\n                { str: 3, fret: 14 },\n            ],\n            duration: '8',\n        }),\n        tabNote({\n            positions: [\n                { str: 2, fret: 16 },\n                { str: 3, fret: 16 },\n            ],\n            duration: '8',\n        }),\n    ];\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\n    new Formatter().joinVoices([voice]).format([voice], 300);\n    voice.draw(context, stave);\n    createTabTie({\n        firstNote: notes[0],\n        lastNote: notes[1],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Single note');\n    createTabTie({\n        firstNote: notes[2],\n        lastNote: notes[3],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Chord');\n    createTabTie({\n        firstNote: notes[4],\n        lastNote: notes[5],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Single note high-fret');\n    createTabTie({\n        firstNote: notes[6],\n        lastNote: notes[7],\n        firstIndexes: [0, 1],\n        lastIndexes: [0, 1],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Chord high-fret');\n}\nfunction tap(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    const { context, stave } = setupContext(options);\n    const note1 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: 'h' }).addModifier(new Annotation('T'), 0);\n    const note2 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: 'h' });\n    tieNotes([note1, note2], [0], stave, context, 'P');\n    options.assert.ok(true, 'Tapping Test');\n}\nfunction continuous(options, contextBuilder) {\n    options.contextBuilder = contextBuilder;\n    const { context, stave } = setupContext(options, 440, 140);\n    const notes = [\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'q' }),\n        tabNote({ positions: [{ str: 4, fret: 5 }], duration: 'q' }),\n        tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' }),\n    ];\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\n    new Formatter().joinVoices([voice]).format([voice], 300);\n    voice.draw(context, stave);\n    TabTie.createHammeron({\n        firstNote: notes[0],\n        lastNote: notes[1],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    TabTie.createPulloff({\n        firstNote: notes[1],\n        lastNote: notes[2],\n        firstIndexes: [0],\n        lastIndexes: [0],\n    })\n        .setContext(context)\n        .draw();\n    options.assert.ok(true, 'Continuous Hammeron');\n}\nVexFlowTests.register(TabTieTests);\nexport { TabTieTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TextBracket Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nconst TextBracketTests = {\n    Start() {\n        QUnit.module('TextBracket');\n        const run = VexFlowTests.runTests;\n        run('Simple TextBracket', simple0);\n        run('TextBracket Styles', simple1);\n    },\n};\nfunction simple0(options) {\n    const f = VexFlowTests.makeFactory(options, 550);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const notes = score.notes('c4/4, c4, c4, c4, c4', { stem: 'up' });\n    const voice = score.voice(notes, { time: '5/4' });\n    f.TextBracket({\n        from: notes[0],\n        to: notes[4],\n        text: '15',\n        options: {\n            superscript: 'va',\n            position: 'top',\n        },\n    });\n    f.TextBracket({\n        from: notes[0],\n        to: notes[4],\n        text: '8',\n        options: {\n            superscript: 'vb',\n            position: 'bottom',\n            line: 3,\n        },\n    });\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction simple1(options) {\n    const f = VexFlowTests.makeFactory(options, 550);\n    const stave = f.Stave();\n    const score = f.EasyScore();\n    const notes = score.notes('c4/4, c4, c4, c4, c4', { stem: 'up' });\n    const voice = score.voice(notes, { time: '5/4' });\n    const topOctaves = [\n        f.TextBracket({\n            from: notes[0],\n            to: notes[1],\n            text: 'Cool notes',\n            options: {\n                superscript: '',\n                position: 'top',\n            },\n        }),\n        f.TextBracket({\n            from: notes[2],\n            to: notes[4],\n            text: 'Testing',\n            options: {\n                position: 'top',\n                superscript: 'superscript',\n                // weight & style below can be left undefined. They will fall back to the default defined in textbracket.ts.\n                font: { family: 'Arial', size: 15, weight: 'normal', style: 'normal' },\n            },\n        }),\n    ];\n    const bottomOctaves = [\n        f.TextBracket({\n            from: notes[0],\n            to: notes[1],\n            text: '8',\n            options: {\n                superscript: 'vb',\n                position: 'bottom',\n                line: 3,\n                font: { size: 30 },\n            },\n        }),\n        f.TextBracket({\n            from: notes[2],\n            to: notes[4],\n            text: 'Not cool notes',\n            options: {\n                superscript: ' super uncool',\n                position: 'bottom',\n                line: 4,\n            },\n        }),\n    ];\n    topOctaves[1].renderOptions.lineWidth = 2;\n    topOctaves[1].renderOptions.showBracket = false;\n    bottomOctaves[0].renderOptions.underlineSuperscript = false;\n    bottomOctaves[0].setDashed(false);\n    bottomOctaves[1].renderOptions.bracketHeight = 40;\n    bottomOctaves[1].setDashed(true, [2, 2]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(TextBracketTests);\nexport { TextBracketTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Text Note Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Crescendo } from '../src/crescendo';\nimport { Flow } from '../src/flow';\nimport { Note } from '../src/note';\nimport { Stave } from '../src/stave';\nimport { TextNote } from '../src/textnote';\nconst TextNoteTests = {\n    Start() {\n        QUnit.module('TextNote');\n        const run = VexFlowTests.runTests;\n        run('TextNote Formatting', formatTextNotes);\n        run('TextNote Formatting 2', formatTextNotes2);\n        run('TextNote Superscript and Subscript', superscriptAndSubscript);\n        run('TextNote Formatting With Glyphs 0', formatTextGlyphs0);\n        run('TextNote Formatting With Glyphs 1', formatTextGlyphs1);\n        run('Crescendo', crescendo);\n        run('Text Dynamics', textDynamics);\n    },\n};\nfunction formatTextNotes(options) {\n    const f = VexFlowTests.makeFactory(options, 400, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice1 = score.voice([\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: -1, duration: 'h' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: -1, duration: 'q' }),\n        f\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: 'q' })\n            .addModifier(f.Accidental({ type: 'n' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n    ]);\n    const voice2 = score.voice([\n        f.TextNote({ text: 'Center Justification', duration: 'h' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ text: 'Left Line 1', duration: 'q' }).setLine(1),\n        f.TextNote({ text: 'Right', duration: 'q' }).setJustification(TextNote.Justification.RIGHT),\n    ]);\n    const formatter = f.Formatter();\n    formatter.joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction formatTextNotes2(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice1 = score.voice([\n        f.StaveNote({ keys: ['g/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5', 'a/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5', 'a/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/5', 'a/5'], stemDirection: -1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4', 'a/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4', 'a/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4', 'a/4'], stemDirection: 1, duration: '16' }),\n        f.StaveNote({ keys: ['g/4', 'a/4'], stemDirection: 1, duration: 'q' }),\n    ]);\n    const voice2 = score.voice([\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ text: 'L', duration: '16' }),\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ text: 'L', duration: '16' }),\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ text: 'L', duration: '16' }),\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ text: 'L', duration: '16' }),\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\n        f.TextNote({ text: 'R', duration: 'q' }).setJustification(TextNote.Justification.RIGHT),\n    ]);\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    voice2.getTickables().forEach((note) => Note.plotMetrics(f.getContext(), note, 170));\n    f.draw();\n    options.assert.ok(true);\n}\nfunction superscriptAndSubscript(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 230);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice1 = score.voice([\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: 1, duration: 'h' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: 1, duration: 'q' }),\n        f\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: 1, duration: 'q' })\n            .addModifier(f.Accidental({ type: 'n' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n    ]);\n    const notes2 = [\n        f.TextNote({ text: Flow.unicode.flat + 'I', superscript: '+5', duration: '8' }),\n        f.TextNote({ text: 'D' + Flow.unicode.sharp + '/F', duration: '4d', superscript: 'sus2' }),\n        f.TextNote({ text: 'ii', superscript: '6', subscript: '4', duration: '8' }),\n        f.TextNote({ text: 'C', superscript: Flow.unicode.triangle + '7', subscript: '', duration: '8' }),\n        f.TextNote({ text: 'vii', superscript: Flow.unicode['o-with-slash'] + '7', duration: '8' }),\n        f.TextNote({ text: 'V', superscript: '7', duration: '8' }),\n    ];\n    options.assert.equal(notes2[0].getText(), Flow.unicode.flat + 'I', 'TextNote.getText() return .text');\n    const voice2 = score.voice(notes2);\n    voice2.getTickables().forEach((note) => {\n        const textNote = note;\n        textNote.setFontSize(15);\n        textNote.setLine(13);\n        textNote.setJustification(TextNote.Justification.LEFT);\n    });\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction formatTextGlyphs0(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 230);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice1 = score.voice([\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: -1, duration: 'h' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n    ]);\n    const voice2 = score.voice([\n        f.TextNote({ text: 'Center', duration: '8' }).setJustification(TextNote.Justification.CENTER),\n        f.TextNote({ glyph: 'f', duration: '8' }),\n        f.TextNote({ glyph: 'p', duration: '8' }),\n        f.TextNote({ glyph: 'm', duration: '8' }),\n        f.TextNote({ glyph: 'z', duration: '8' }),\n        f.TextNote({ glyph: 'mordentUpper', duration: '16' }),\n        f.TextNote({ glyph: 'mordentLower', duration: '16' }),\n        f.TextNote({ glyph: 'segno', duration: '8' }),\n        f.TextNote({ glyph: 'coda', duration: '8' }),\n    ]);\n    voice2.getTickables().forEach((n) => n.setJustification(TextNote.Justification.CENTER));\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction formatTextGlyphs1(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 230);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice1 = score.voice([\n        f\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stemDirection: -1, duration: 'h' })\n            .addModifier(f.Accidental({ type: 'b' }), 0)\n            .addModifier(f.Accidental({ type: '#' }), 1),\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stemDirection: -1, duration: '8' }),\n    ]);\n    const voice2 = score.voice([\n        f.TextNote({ glyph: 'turn', duration: '16' }),\n        f.TextNote({ glyph: 'turnInverted', duration: '16' }),\n        f.TextNote({ glyph: 'pedalOpen', duration: '8' }).setLine(10),\n        f.TextNote({ glyph: 'pedalClose', duration: '8' }).setLine(10),\n        f.TextNote({ glyph: 'caesuraCurved', duration: '8' }).setLine(3),\n        f.TextNote({ glyph: 'caesuraStraight', duration: '8' }).setLine(3),\n        f.TextNote({ glyph: 'breath', duration: '8' }).setLine(2),\n        f.TextNote({ glyph: 'tick', duration: '8' }).setLine(3),\n        f.TextNote({ glyph: 'tr', duration: '8', smooth: true }).setJustification(TextNote.Justification.CENTER),\n    ]);\n    voice2.getTickables().forEach((n) => n.setJustification(TextNote.Justification.CENTER));\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction crescendo(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 230);\n    const stave = f.Stave({ y: 40 });\n    const score = f.EasyScore();\n    const voice = score.voice([\n        f.TextNote({ glyph: 'p', duration: '16' }),\n        new Crescendo({ duration: '4d' }).setLine(0).setHeight(25).setStave(stave),\n        f.TextNote({ glyph: 'f', duration: '16' }),\n        new Crescendo({ duration: '4' }).setLine(5).setStave(stave),\n        new Crescendo({ duration: '4' }).setLine(10).setDecrescendo(true).setHeight(5).setStave(stave),\n    ]);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction textDynamics(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 230);\n    const score = f.EasyScore();\n    const voice = score.voice([\n        f.TextDynamics({ text: 'sfz', duration: '4' }),\n        f.TextDynamics({ text: 'rfz', duration: '4' }),\n        f.TextDynamics({ text: 'mp', duration: '4' }),\n        f.TextDynamics({ text: 'ppp', duration: '4' }),\n        f.TextDynamics({ text: 'fff', duration: '4' }),\n        f.TextDynamics({ text: 'mf', duration: '4' }),\n        f.TextDynamics({ text: 'sff', duration: '4' }),\n    ], { time: '7/4' });\n    // This is refactored to use preCalculateMinWidth... to exercise\n    // a bug fix when textDynamic got formatted more than once.\n    const formatter = f.Formatter();\n    formatter.joinVoices([voice]);\n    // const width = 250; //formatter.preCalculateMinTotalWidth([voice]);\n    const width = formatter.preCalculateMinTotalWidth([voice]);\n    formatter.format([voice]);\n    const stave = f.Stave({ y: 40, width: width + Stave.defaultPadding });\n    stave.draw();\n    voice.draw(f.getContext(), stave);\n    options.assert.ok(true);\n}\nVexFlowTests.register(TextNoteTests);\nexport { TextNoteTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Three Voices Tests - Three voices in single staff.\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\nimport { Beam } from '../src/beam';\nconst ThreeVoicesTests = {\n    Start() {\n        // TODO: Rename the module to 'Three Voices', because we aren't really testing rests.\n        QUnit.module('Three Voice Rests');\n        const run = VexFlowTests.runTests;\n        run('Three Voices - #1', threeVoices1);\n        run('Three Voices - #2 Complex', threeVoices2);\n        run('Three Voices - #3', threeVoices3);\n        run('Auto Adjust Rest Positions - Two Voices', autoRestTwoVoices);\n        run('Auto Adjust Rest Positions - Three Voices #1', autoRestThreeVoices1);\n        run('Auto Adjust Rest Positions - Three Voices #2', autoRestThreeVoices2);\n    },\n};\n/**\n * Helper for setting up the first three test cases: threeVoices1, threeVoices2, threeVoices3.\n */\nfunction createThreeVoicesTest(noteGroup1, noteGroup2, noteGroup3, setup) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options, 600, 200);\n        const stave = factory.Stave().addClef('treble').addTimeSignature('4/4');\n        const score = factory.EasyScore();\n        // Convert each noteGroup array to StaveNote[].\n        const noteGroups = [noteGroup1, noteGroup2, noteGroup3].map((args) => score.notes(...args));\n        const voices = noteGroups.map((notes) => score.voice(notes));\n        setup(factory, voices);\n        const beams = [\n            Beam.applyAndGetBeams(voices[0], +1),\n            Beam.applyAndGetBeams(voices[1], -1),\n            Beam.applyAndGetBeams(voices[2], -1),\n        ].reduce(concat);\n        // Set option to position rests near the notes in each voice.\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\n        factory.draw();\n        for (let i = 0; i < beams.length; i++) {\n            beams[i].setContext(factory.getContext()).draw();\n        }\n        options.assert.ok(true);\n    };\n}\n/**\n *\n */\nconst threeVoices1 = createThreeVoicesTest(['e5/2, e5', { stem: 'up' }], ['(d4 a4 d#5)/8, b4, (d4 a4 c5), b4, (d4 a4 c5), b4, (d4 a4 c5), b4', { stem: 'down' }], ['b3/4, e3, f3, a3', { stem: 'down' }], (f, voices) => {\n    voices[0].getTickables()[0].addModifier(f.Fingering({ number: '0', position: 'left' }), 0);\n    voices[1]\n        .getTickables()[0]\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1);\n});\n/**\n * Lots of beamed notes. A beam and notehead overlap.\n */\nconst threeVoices2 = createThreeVoicesTest(['(a4 e5)/16, e5, e5, e5, e5/8, e5, e5/2', { stem: 'up' }], ['(d4 d#5)/16, (b4 c5), d5, e5, (d4 a4 c5)/8, b4, (d4 a4 c5), b4, (d4 a4 c5), b4', { stem: 'down' }], ['b3/8, b3, e3/4, f3, a3', { stem: 'down' }], (f, voices) => {\n    voices[0]\n        .getTickables()[0]\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 1);\n    voices[1]\n        .getTickables()[0]\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1);\n});\n/**\n *\n */\nconst threeVoices3 = createThreeVoicesTest(['(g4 e5)/4, e5, (g4 e5)/2', { stem: 'up' }], ['c#5/4, b4/8, b4/8/r, a4/4., g4/8', { stem: 'down' }], ['c4/4, b3, a3, g3', { stem: 'down' }], (f, voices) => {\n    voices[0]\n        .getTickables()[0]\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 1);\n    voices[1].getTickables()[0].addModifier(f.Fingering({ number: '1', position: 'left' }), 0);\n    voices[2].getTickables()[0].addModifier(f.Fingering({ number: '3', position: 'left' }), 0);\n});\nfunction autoRestTwoVoices(options) {\n    const f = VexFlowTests.makeFactory(options, 900, 200);\n    const score = f.EasyScore();\n    let x = 10;\n    let beams = [];\n    function createMeasure(measureTitle, width, alignRests) {\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\n        x += width;\n        const noteArrays = [\n            score.notes('b4/8/r, e5/16, b4/r, b4/8/r, e5/16, b4/r, b4/8/r, d5/16, b4/r, e5/4', { stem: 'up' }),\n            score.notes('c5/16, c4, b4/r, d4, e4, f4, b4/r, g4, g4[stem=\"up\"], a4[stem=\"up\"], b4/r, b4[stem=\"up\"], e4/4', {\n                stem: 'down',\n            }),\n            [f.TextNote({ text: measureTitle, line: -1, duration: '1', smooth: true })],\n        ];\n        const voices = noteArrays.map((notes) => score.voice(notes));\n        beams = beams.concat(Beam.applyAndGetBeams(voices[0], 1)).concat(Beam.applyAndGetBeams(voices[1], -1));\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { alignRests });\n    }\n    createMeasure('Default Rest Positions', 400, false);\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\n    f.draw();\n    for (let i = 0; i < beams.length; i++) {\n        beams[i].setContext(f.getContext()).draw();\n    }\n    options.assert.ok(true, 'Auto Adjust Rests - Two Voices');\n}\nfunction autoRestThreeVoices1(options) {\n    const f = VexFlowTests.makeFactory(options, 850, 200);\n    const score = f.EasyScore();\n    let x = 10;\n    function createMeasure(measureTitle, width, alignRests) {\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\n        const voices = [\n            score.voice(score.notes('b4/4/r, e5, e5/r, e5/r, e5, e5, e5, e5/r', { stem: 'up' }), { time: '8/4' }),\n            score.voice(score.notes('b4/4/r, b4/r, b4/r, b4, b4/r, b4/r, b4, b4', { stem: 'down' }), { time: '8/4' }),\n            score.voice(score.notes('e4/4/r, e4/r, f4, b4/r, g4, c4, e4/r, c4', { stem: 'down' }), { time: '8/4' }),\n            score.voice([\n                f.TextNote({ text: measureTitle, duration: '1', line: -1, smooth: true }),\n                f.TextNote({ text: '', duration: '1', line: -1, smooth: true }),\n            ], { time: '8/4' }),\n        ];\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { alignRests });\n        x += width;\n    }\n    createMeasure('Default Rest Positions', 400, false);\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\n    f.draw();\n    options.assert.ok(true);\n}\nfunction autoRestThreeVoices2(options) {\n    const f = VexFlowTests.makeFactory(options, 850, 200);\n    const score = f.EasyScore();\n    let x = 10;\n    function createMeasure(measureTitle, width, alignRests) {\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\n        const voices = [\n            score.voice(score.notes('b4/16/r, e5, e5/r, e5/r, e5, e5, e5, e5/r'), { time: '2/4' }),\n            score.voice(score.notes('b4/16/r, b4/r, b4/r, b4, b4/r, b4/r, b4, b4'), { time: '2/4' }),\n            score.voice(score.notes('e4/16/r, e4/r, f4, b4/r, g4, c4, e4/r, c4'), { time: '2/4' }),\n            score.voice([f.TextNote({ text: measureTitle, duration: 'h', line: -1, smooth: true })], { time: '2/4' }),\n        ];\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { alignRests });\n        x += width;\n    }\n    createMeasure('Default Rest Positions', 400, false);\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\n    f.draw();\n    options.assert.ok(true);\n}\nVexFlowTests.register(ThreeVoicesTests);\nexport { ThreeVoicesTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TickContext Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { TickContext } from '../src/tickcontext';\nimport { MockTickable } from './mocks';\nconst TickContextTests = {\n    Start() {\n        QUnit.module('TickContext');\n        QUnit.test('Current Tick Test', currentTick);\n        QUnit.test('Tracking Test', tracking);\n    },\n};\nfunction currentTick(assert) {\n    const tc = new TickContext();\n    assert.equal(tc.getCurrentTick().value(), 0, 'New tick context has no ticks');\n}\nfunction tracking(assert) {\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\n    const tickables = [\n        new MockTickable().setTicks(BEAT).setWidth(10),\n        new MockTickable().setTicks(BEAT * 2).setWidth(20),\n        new MockTickable().setTicks(BEAT).setWidth(30),\n    ];\n    const tc = new TickContext();\n    tc.setPadding(0);\n    tc.addTickable(tickables[0]);\n    assert.equal(tc.getMaxTicks().value(), BEAT);\n    tc.addTickable(tickables[1]);\n    assert.equal(tc.getMaxTicks().value(), BEAT * 2);\n    tc.addTickable(tickables[2]);\n    assert.equal(tc.getMaxTicks().value(), BEAT * 2);\n    assert.equal(tc.getWidth(), 0);\n    tc.preFormat();\n    assert.equal(tc.getWidth(), 30);\n}\nVexFlowTests.register(TickContextTests);\nexport { TickContextTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// TimeSignature Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Stave } from '../src/stave';\nimport { StaveConnector } from '../src/staveconnector';\nimport { TimeSignature } from '../src/timesignature';\nconst TimeSignatureTests = {\n    Start() {\n        QUnit.module('TimeSignature');\n        QUnit.test('Time Signature Parser', parser);\n        const run = VexFlowTests.runTests;\n        run('Basic Time Signatures', basic);\n        run('Big Signature Test', big);\n        run('Additive Signature Test', additive);\n        run('Alternating Signature Test', alternating);\n        run('Interchangeable Signature Test', interchangeable);\n        run('Aggregate Signature Test', agregate);\n        run('Complex Signature Test', complex);\n        run('Time Signature multiple staves alignment test', multiple);\n        run('Time Signature Change Test', change);\n    },\n};\nfunction parser(assert) {\n    const timeSig = new TimeSignature();\n    assert.equal(timeSig.getTimeSpec(), '4/4', 'default time signature is 4/4');\n    const mustFail = ['asdf', '123/', '/10', '/', '4567', 'C+', '1+', '+1', '(3+', '+3)', '()', '(+)'];\n    mustFail.forEach((invalidString) => {\n        assert.throws(() => new TimeSignature(invalidString), /BadTimeSignature/);\n    });\n    const mustPass = ['4/4', '10/12', '1/8', '1234567890/1234567890', 'C', 'C|', '+'];\n    mustPass.forEach((validString) => new TimeSignature(validString));\n    timeSig.setTimeSig('4/4');\n    assert.equal(timeSig.getIsNumeric(), true, '4/4 is numeric');\n    assert.equal(timeSig.getLine(), 0, 'digits are on line 0');\n    timeSig.setTimeSig('C|');\n    assert.equal(timeSig.getTimeSpec(), 'C|', 'timeSpec changed to C|');\n    assert.equal(timeSig.getIsNumeric(), false, 'cut time is not numeric');\n    assert.equal(timeSig.getLine(), 2, 'cut/common are on line 2');\n    assert.ok(true, 'all pass');\n}\nfunction basic(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 600, 120);\n    new Stave(10, 10, 500)\n        .addTimeSignature('2/2')\n        .addTimeSignature('3/4')\n        .addTimeSignature('4/4')\n        .addTimeSignature('6/8')\n        .addTimeSignature('C')\n        .addTimeSignature('C|')\n        .addEndTimeSignature('2/2')\n        .addEndTimeSignature('3/4')\n        .addEndTimeSignature('4/4')\n        .addEndClef('treble')\n        .addEndTimeSignature('6/8')\n        .addEndTimeSignature('C')\n        .addEndTimeSignature('C|')\n        .setContext(ctx)\n        .draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction big(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300)\n        .addTimeSignature('12/8')\n        .addTimeSignature('7/16')\n        .addTimeSignature('1234567/890')\n        .addTimeSignature('987/654321')\n        .setContext(ctx)\n        .draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction additive(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300).addTimeSignature('2+3+2/8').setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction alternating(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300).addTimeSignature('6/8').addTimeSignature('+').addTimeSignature('3/4').setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction interchangeable(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300).addTimeSignature('3/4').addTimeSignature('-').addTimeSignature('2/4').setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction agregate(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300)\n        .addTimeSignature('2/4')\n        .addTimeSignature('+')\n        .addTimeSignature('3/8')\n        .addTimeSignature('+')\n        .addTimeSignature('5/4')\n        .setContext(ctx)\n        .draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction complex(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 120);\n    new Stave(10, 10, 300)\n        .addTimeSignature('(2+3)/16')\n        .addTimeSignature('+')\n        .addTimeSignature('3/8')\n        .setContext(ctx)\n        .draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction multiple(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 400, 350);\n    // Each StaveLineConfig object is of the form { visible: boolean }.\n    const stave1LineConfig = [false, false, true, false, false].map((visible) => ({ visible }));\n    const stave1 = new Stave(15, 0, 300)\n        .setConfigForLines(stave1LineConfig)\n        .addClef('percussion')\n        .addTimeSignature('4/4', 25) // passing the custom padding in pixels\n        .setContext(ctx)\n        .draw();\n    const stave2 = new Stave(15, 110, 300).addClef('treble').addTimeSignature('4/4').setContext(ctx).draw();\n    const stave3 = new Stave(15, 220, 300).addClef('bass').addTimeSignature('4/4').setContext(ctx).draw();\n    Stave.formatBegModifiers([stave1, stave2, stave3]);\n    new StaveConnector(stave1, stave2).setType('single').setContext(ctx).draw();\n    new StaveConnector(stave2, stave3).setType('single').setContext(ctx).draw();\n    new StaveConnector(stave2, stave3).setType('brace').setContext(ctx).draw();\n    options.assert.ok(true, 'all pass');\n}\nfunction change(options) {\n    const f = VexFlowTests.makeFactory(options, 900);\n    const stave = f.Stave({ x: 0, y: 0 }).addClef('treble').addTimeSignature('C|');\n    const tickables = [\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\n        f.TimeSigNote({ time: '3/4' }),\n        f.StaveNote({ keys: ['d/4'], duration: '4', clef: 'alto' }),\n        f.StaveNote({ keys: ['b/3'], duration: '4r', clef: 'alto' }),\n        f.TimeSigNote({ time: 'C' }),\n        f.StaveNote({ keys: ['c/3', 'e/3', 'g/3'], duration: '4', clef: 'bass' }),\n        f.TimeSigNote({ time: '9/8' }),\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\n    ];\n    const voice = f.Voice().setStrict(false).addTickables(tickables);\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'all pass');\n}\nVexFlowTests.register(TimeSignatureTests);\nexport { TimeSignatureTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Tremolo Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Barline } from '../src/stavebarline';\nimport { Tremolo } from '../src/tremolo';\nconst TremoloTests = {\n    Start() {\n        QUnit.module('Tremolo');\n        const run = VexFlowTests.runTests;\n        run('Tremolo - Basic', tremoloBasic);\n    },\n};\nfunction tremoloBasic(options) {\n    const f = VexFlowTests.makeFactory(options, 600, 200);\n    const score = f.EasyScore();\n    // bar 1\n    const stave1 = f.Stave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\n    const notes1 = score.notes('e4/4, e4, e4, e4', { stem: 'up' });\n    notes1[0].addModifier(new Tremolo(3), 0);\n    notes1[1].addModifier(new Tremolo(2), 0);\n    notes1[2].addModifier(new Tremolo(1), 0);\n    const voice1 = score.voice(notes1);\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\n    // bar 2\n    const stave2 = f\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\n        .setEndBarType(Barline.type.DOUBLE);\n    const notes2 = score.notes('e5/4, e5, e5, e5', { stem: 'down' });\n    notes2[1].addModifier(new Tremolo(1), 0);\n    notes2[2].addModifier(new Tremolo(2), 0);\n    notes2[3].addModifier(new Tremolo(3), 0);\n    const voice2 = score.voice(notes2);\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\n    f.draw();\n    options.assert.ok(true, 'Tremolo - Basic');\n}\nVexFlowTests.register(TremoloTests);\nexport { TremoloTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Tuning Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Tuning } from '../src/tuning';\nconst TuningTests = {\n    Start() {\n        QUnit.module('Tuning');\n        QUnit.test('Standard Tuning', standard);\n        QUnit.test('Standard Banjo Tuning', banjo);\n        QUnit.test('Return note for fret', noteForFret);\n    },\n};\n/**\n * Helper function to verify that the provided tuning matches a standard 6-string guitar.\n */\nfunction checkStandard(assert, tuning) {\n    assert.throws(() => tuning.getValueForString(0), /BadArguments/, 'String 0');\n    assert.throws(() => tuning.getValueForString(9), /BadArguments/, 'String 9');\n    // TODO: Tuning constructor has a bug in that the default tuning has 8 strings.\n    // See: 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2' in tuning.ts constructor.\n    // assert.throws(() => tuning.getValueForString(7), /BadArguments/, 'String 7');\n    // Tuning.getValueForString() returns a note number where the value 60 corresponds to middle C.\n    assert.equal(tuning.getValueForString(6), 40, 'Low E string');\n    assert.equal(tuning.getValueForString(5), 45, 'A string');\n    assert.equal(tuning.getValueForString(4), 50, 'D string');\n    assert.equal(tuning.getValueForString(3), 55, 'G string');\n    assert.equal(tuning.getValueForString(2), 59, 'B string');\n    assert.equal(tuning.getValueForString(1), 64, 'High E string');\n}\n/**\n * Helper function to verify that the provided tuning matches a standard 5-string banjo.\n */\nfunction checkStandardBanjo(assert, tuning) {\n    assert.throws(() => tuning.getValueForString(0), /BadArguments/, 'String 0');\n    assert.throws(() => tuning.getValueForString(6), /BadArguments/, 'String 6');\n    assert.equal(tuning.getValueForString(5), 67, 'High G string');\n    assert.equal(tuning.getValueForString(4), 50, 'D string');\n    assert.equal(tuning.getValueForString(3), 55, 'G string');\n    assert.equal(tuning.getValueForString(2), 59, 'B string');\n    assert.equal(tuning.getValueForString(1), 62, 'High D string');\n}\nfunction standard(assert) {\n    assert.expect(16);\n    const tuning = new Tuning();\n    checkStandard(assert, tuning);\n    // Set the tuning by specifying a name: 'standard'.\n    tuning.setTuning('standard');\n    checkStandard(assert, tuning);\n}\nfunction banjo(assert) {\n    assert.expect(7);\n    const tuning = new Tuning();\n    tuning.setTuning('standardBanjo');\n    checkStandardBanjo(assert, tuning);\n}\nfunction noteForFret(assert) {\n    assert.expect(8);\n    const tuning = new Tuning('E/5,B/4,G/4,D/4,A/3,E/3');\n    assert.throws(() => tuning.getNoteForFret(-1, 1), /BadArguments/, 'Fret = -1');\n    assert.throws(() => tuning.getNoteForFret(1, -1), /BadArguments/, 'String = -1');\n    assert.equal(tuning.getNoteForFret(0, 1), 'E/5', 'High E string');\n    assert.equal(tuning.getNoteForFret(5, 1), 'A/5', 'High E string, fret 5');\n    assert.equal(tuning.getNoteForFret(0, 2), 'B/4', 'B string');\n    assert.equal(tuning.getNoteForFret(0, 3), 'G/4', 'G string');\n    assert.equal(tuning.getNoteForFret(12, 2), 'B/5', 'B string, fret 12');\n    assert.equal(tuning.getNoteForFret(0, 6), 'E/3', 'Low E string');\n}\nVexFlowTests.register(TuningTests);\nexport { TuningTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Tuplet Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Dot } from '../src/dot';\nimport { Formatter } from '../src/formatter';\nimport { Stem } from '../src/stem';\nimport { Tuplet } from '../src/tuplet';\nconst TupletTests = {\n    Start() {\n        QUnit.module('Tuplet');\n        const run = VexFlowTests.runTests;\n        run('Simple Tuplet', simple);\n        run('Beamed Tuplet', beamed);\n        run('Ratioed Tuplet', ratio);\n        run('Bottom Tuplet', bottom);\n        run('Bottom Ratioed Tuplet', bottomRatio);\n        run('Awkward Tuplet', awkward);\n        run('Complex Tuplet', complex);\n        run('Mixed Stem Direction Tuplet', mixedTop);\n        run('Mixed Stem Direction Bottom Tuplet', mixedBottom);\n        run('Nested Tuplets', nested);\n        run('Single Tuplets', single);\n    },\n};\n// Helper Functions to set the stem direction and duration of the options objects (i.e., StaveNoteStruct)\n// that are ultimately passed into Factory.StaveNote().\n// eslint-disable-next-line\nconst set = (key) => (value) => (object) => {\n    object[key] = value;\n    return object;\n};\nconst setStemDirection = set('stemDirection');\nconst setStemUp = setStemDirection(Stem.UP);\nconst setStemDown = setStemDirection(Stem.DOWN);\nconst setDurationToQuarterNote = set('duration')('4');\n/**\n * Simple test case with one ascending triplet and one descending triplet.\n */\nfunction simple(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('3/4');\n    const notes = [\n        { keys: ['g/4'], duration: '4' },\n        { keys: ['a/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['b/4'], duration: '8' },\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['g/4'], duration: '8' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Tuplet({ notes: notes.slice(0, 3) });\n    f.Tuplet({ notes: notes.slice(3, 6) });\n    // 3/4 time\n    const voice = f\n        .Voice({ time: { numBeats: 3, beatValue: 4 } })\n        .setStrict(true)\n        .addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Simple Test');\n}\nfunction beamed(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('3/8');\n    const notes = [\n        { keys: ['b/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['f/4'], duration: '8' },\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['f/4'], duration: '8' },\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['f/4'], duration: '8' },\n        { keys: ['g/4'], duration: '8' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Beam({ notes: notes.slice(0, 3) });\n    f.Beam({ notes: notes.slice(3, 10) });\n    f.Tuplet({ notes: notes.slice(0, 3) });\n    f.Tuplet({ notes: notes.slice(3, 10) });\n    // 3/8 time\n    const voice = f\n        .Voice({ time: { numBeats: 3, beatValue: 8 } })\n        .setStrict(true)\n        .addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Beamed Test');\n}\nfunction ratio(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('4/4');\n    const notes = [\n        { keys: ['f/4'], duration: '4' },\n        { keys: ['a/4'], duration: '4' },\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['g/4'], duration: '8' },\n        { keys: ['e/4'], duration: '8' },\n        { keys: ['g/4'], duration: '8' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Beam({\n        notes: notes.slice(3, 6),\n    });\n    f.Tuplet({\n        notes: notes.slice(0, 3),\n        options: {\n            ratioed: true,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(3, 6),\n        options: {\n            ratioed: true,\n            notesOccupied: 4,\n        },\n    });\n    const voice = f.Voice().setStrict(true).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Ratioed Test');\n}\nfunction bottom(options) {\n    const f = VexFlowTests.makeFactory(options, 350, 160);\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('3/4');\n    const notes = [\n        { keys: ['f/4'], duration: '4' },\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['g/4'], duration: '4' },\n        { keys: ['d/5'], duration: '8' },\n        { keys: ['g/3'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n    ]\n        .map(setStemDown)\n        .map(f.StaveNote.bind(f));\n    f.Beam({\n        notes: notes.slice(3, 6),\n    });\n    f.Tuplet({\n        notes: notes.slice(0, 3),\n        options: { location: Tuplet.LOCATION_BOTTOM },\n    });\n    f.Tuplet({\n        notes: notes.slice(3, 6),\n        options: { location: Tuplet.LOCATION_BOTTOM },\n    });\n    const voice = f\n        .Voice({ time: { numBeats: 3, beatValue: 4 } })\n        .setStrict(true)\n        .addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Bottom Test');\n}\nfunction bottomRatio(options) {\n    const f = VexFlowTests.makeFactory(options, 350, 160);\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('5/8');\n    const notes = [\n        { keys: ['f/4'], duration: '4' },\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['d/4'], duration: '4' },\n        { keys: ['d/5'], duration: '8' },\n        { keys: ['g/5'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n    ]\n        .map(setStemDown)\n        .map(f.StaveNote.bind(f));\n    f.Beam({\n        notes: notes.slice(3, 6),\n    });\n    f.Tuplet({\n        notes: notes.slice(0, 3),\n        options: {\n            location: Tuplet.LOCATION_BOTTOM,\n            ratioed: true,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(3, 6),\n        options: {\n            location: Tuplet.LOCATION_BOTTOM,\n            notesOccupied: 1,\n        },\n    });\n    const voice = f\n        .Voice({ time: { numBeats: 5, beatValue: 8 } })\n        .setStrict(true)\n        .addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Bottom Ratioed Test');\n}\nfunction awkward(options) {\n    const f = VexFlowTests.makeFactory(options, 370, 160);\n    const stave = f.Stave({ x: 10, y: 10 });\n    const notes = [\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['b/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['f/4'], duration: '16' },\n        { keys: ['e/4'], duration: '16' },\n        { keys: ['c/4'], duration: '16' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['f/4'], duration: '16' },\n        { keys: ['e/4'], duration: '16' },\n        { keys: ['c/4'], duration: '8' },\n        { keys: ['d/4'], duration: '8' },\n        { keys: ['e/4'], duration: '8' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Beam({ notes: notes.slice(0, 12) });\n    f.Tuplet({\n        notes: notes.slice(0, 12),\n        options: {\n            notesOccupied: 142,\n            ratioed: true,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(12, 15),\n        options: {\n            ratioed: true,\n        },\n    }).setBracketed(true);\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Awkward Test');\n}\nfunction complex(options) {\n    const f = VexFlowTests.makeFactory(options, 600);\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\n    const notes1 = [\n        { keys: ['b/4'], duration: '8d' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['g/4'], duration: '8' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['b/4'], duration: '16r' },\n        { keys: ['g/4'], duration: '32' },\n        { keys: ['f/4'], duration: '32' },\n        { keys: ['g/4'], duration: '32' },\n        { keys: ['f/4'], duration: '32' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['f/4'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n        { keys: ['a/4'], duration: '8' },\n        { keys: ['g/4'], duration: '8' },\n        { keys: ['b/4'], duration: '8' },\n        { keys: ['a/4'], duration: '8' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    Dot.buildAndAttach([notes1[0]], { all: true });\n    const notes2 = [{ keys: ['c/4'] }, { keys: ['c/4'] }, { keys: ['c/4'] }, { keys: ['c/4'] }]\n        .map(setDurationToQuarterNote)\n        .map(setStemDown)\n        .map(f.StaveNote.bind(f));\n    f.Beam({ notes: notes1.slice(0, 3) });\n    f.Beam({ notes: notes1.slice(5, 9) });\n    f.Beam({ notes: notes1.slice(11, 16) });\n    f.Tuplet({\n        notes: notes1.slice(0, 3),\n    });\n    f.Tuplet({\n        notes: notes1.slice(3, 11),\n        options: {\n            numNotes: 7,\n            notesOccupied: 4,\n            ratioed: false,\n        },\n    });\n    f.Tuplet({\n        notes: notes1.slice(11, 16),\n        options: {\n            notesOccupied: 4,\n        },\n    });\n    const voice1 = f.Voice().setStrict(true).addTickables(notes1);\n    const voice2 = f.Voice().setStrict(true).addTickables(notes2);\n    new Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\n    f.draw();\n    options.assert.ok(true, 'Complex Test');\n}\nfunction mixedTop(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10 });\n    const notes = [\n        { keys: ['a/4'], stemDirection: 1 },\n        { keys: ['c/6'], stemDirection: -1 },\n        { keys: ['a/4'], stemDirection: 1 },\n        { keys: ['f/5'], stemDirection: 1 },\n        { keys: ['a/4'], stemDirection: -1 },\n        { keys: ['c/6'], stemDirection: -1 },\n    ]\n        .map(setDurationToQuarterNote)\n        .map(f.StaveNote.bind(f));\n    f.Tuplet({\n        notes: notes.slice(0, 2),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(2, 4),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(4, 6),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Mixed Stem Direction Tuplet');\n}\nfunction mixedBottom(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10 });\n    const notes = [\n        { keys: ['f/3'], stemDirection: 1 },\n        { keys: ['a/5'], stemDirection: -1 },\n        { keys: ['a/4'], stemDirection: 1 },\n        { keys: ['f/3'], stemDirection: 1 },\n        { keys: ['a/4'], stemDirection: -1 },\n        { keys: ['c/4'], stemDirection: -1 },\n    ]\n        .map(setDurationToQuarterNote)\n        .map(f.StaveNote.bind(f));\n    f.Tuplet({\n        notes: notes.slice(0, 2),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(2, 4),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(4, 6),\n        options: {\n            notesOccupied: 3,\n        },\n    });\n    const voice = f.Voice().setStrict(false).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Mixed Stem Direction Bottom Tuplet');\n}\nfunction nested(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\n    const notes = [\n        // Big triplet 1:\n        { keys: ['b/4'], duration: '4' },\n        { keys: ['a/4'], duration: '4' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['f/4'], duration: '16' },\n        { keys: ['a/4'], duration: '16' },\n        { keys: ['g/4'], duration: '16' },\n        { keys: ['b/4'], duration: '2' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Beam({\n        notes: notes.slice(2, 7),\n    });\n    f.Tuplet({\n        notes: notes.slice(0, 7),\n        options: {\n            notesOccupied: 2,\n            numNotes: 3,\n        },\n    });\n    f.Tuplet({\n        notes: notes.slice(2, 7),\n        options: {\n            notesOccupied: 4,\n            numNotes: 5,\n        },\n    });\n    // 4/4 time\n    const voice = f.Voice().setStrict(true).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Nested Tuplets');\n}\nfunction single(options) {\n    const f = VexFlowTests.makeFactory(options);\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\n    const notes = [\n        // Big triplet 1:\n        { keys: ['c/4'], duration: '4' },\n        { keys: ['d/4'], duration: '8' },\n        { keys: ['e/4'], duration: '8' },\n        { keys: ['f/4'], duration: '8' },\n        { keys: ['g/4'], duration: '8' },\n        { keys: ['a/4'], duration: '2' },\n        { keys: ['b/4'], duration: '4' },\n    ]\n        .map(setStemUp)\n        .map(f.StaveNote.bind(f));\n    f.Beam({\n        notes: notes.slice(1, 4),\n    });\n    // big quartuplet\n    f.Tuplet({\n        notes: notes.slice(0, -1),\n        options: {\n            numNotes: 4,\n            notesOccupied: 3,\n            ratioed: true,\n            bracketed: true,\n        },\n    });\n    // first singleton\n    f.Tuplet({\n        notes: notes.slice(0, 1),\n        options: {\n            numNotes: 3,\n            notesOccupied: 2,\n            ratioed: true,\n        },\n    });\n    // eighth note triplet\n    f.Tuplet({\n        notes: notes.slice(1, 4),\n        options: {\n            numNotes: 3,\n            notesOccupied: 2,\n        },\n    });\n    // second singleton\n    f.Tuplet({\n        notes: notes.slice(4, 5),\n        options: {\n            numNotes: 3,\n            notesOccupied: 2,\n            ratioed: true,\n            bracketed: true,\n        },\n    });\n    // 4/4 time\n    const voice = f\n        .Voice({ time: { numBeats: 4, beatValue: 4 } })\n        .setStrict(true)\n        .addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    f.draw();\n    options.assert.ok(true, 'Nested Tuplets');\n}\nVexFlowTests.register(TupletTests);\nexport { TupletTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// TypeGuard Tests\n// eslint-disable-next-line\n// @ts-nocheck to support ES5 style class declaration in the fakeES5() test case.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { CanvasContext } from '../src/canvascontext';\nimport { StaveNote } from '../src/stavenote';\nimport { StemmableNote } from '../src/stemmablenote';\nimport { TabNote } from '../src/tabnote';\nimport { isCategory, isNote, isRenderContext, isStaveNote, isStemmableNote, isTabNote } from '../src/typeguard';\nconst TypeGuardTests = {\n    Start() {\n        QUnit.module('TypeGuard');\n        QUnit.test('Real VexFlow Types', real);\n        QUnit.test('Fake VexFlow Types in ES5', fakeES5);\n        QUnit.test('Fake VexFlow Types in ES6', fakeES6);\n        QUnit.test('Edge Case ES5/ES6', edgeCaseES5vsES6);\n    },\n};\nfunction real(assert) {\n    const s = new StaveNote({ keys: ['c/4'], duration: 'w' });\n    assert.ok(isStaveNote(s), 'isStaveNote helper function');\n    assert.ok(isCategory(s, 'StaveNote'), 'Use isCategory(s, \"StaveNote\") directly');\n    assert.notOk(isTabNote(s), 'isTabNote helper function. s is NOT a TabNote.');\n    const t = new TabNote({ positions: [{ str: 2, fret: 1 }], duration: '1' });\n    assert.ok(isTabNote(t), 'isTabNote helper function');\n    assert.notOk(isStaveNote(t), 't is NOT a StaveNote');\n    assert.ok(isNote(s), 'StaveNote extends StemmableNote which extends Note, so s is a Note');\n    assert.ok(isStemmableNote(t), 'TabNote extends StemmableNote');\n    assert.ok(isNote(t), 'TabNote extends StemmableNote which extends Note, so t is a Note');\n    const canvas = document.createElement('canvas');\n    canvas.width = 800;\n    canvas.height = 400;\n    const ctx = new CanvasContext(canvas.getContext('2d'));\n    assert.ok(isRenderContext(ctx), 'ctx is a RenderContext');\n}\n/**\n * Helper function to test the fake VexFlow objects we create in fakeES5() and fakeES6().\n */\nfunction checkFakeObjects(assert, fakeStemmableNote, fakeStaveNote) {\n    assert.ok(isStemmableNote(fakeStemmableNote), 'Fake StemmableNote is a StemmableNote.');\n    assert.notOk(isNote(fakeStemmableNote), 'Fake StemmableNote is not a Note (no ancestors with the correct CATEGORY).');\n    assert.ok(isCategory(fakeStaveNote, 'StaveNote'), 'Fake StaveNote is a StaveNote.');\n    assert.ok(isStaveNote(fakeStaveNote), 'Fake StaveNote is a StaveNote (via helper function).');\n    assert.ok(isCategory(fakeStaveNote, 'StemmableNote'), 'Fake StaveNote is also a StemmableNote (via inheritance).');\n    assert.notOk(isNote(fakeStaveNote), 'Fake StaveNote is not a Note. CATEGORY does not match.');\n}\n/**\n * Demonstrate that an object (ES5-style) can pass the isCategory(...) test if it\n * has the correct static .CATEGORY property.\n */\nfunction fakeES5(assert) {\n    function FakeStemmableNote() {\n        this.isFake = true;\n    }\n    FakeStemmableNote.CATEGORY = StemmableNote.CATEGORY;\n    function FakeStaveNote() {\n        FakeStemmableNote.call(this);\n    }\n    FakeStaveNote.CATEGORY = StaveNote.CATEGORY;\n    FakeStaveNote.prototype = Object.create(FakeStemmableNote.prototype);\n    FakeStaveNote.prototype.constructor = FakeStaveNote;\n    const fakeStemmableNote = new FakeStemmableNote();\n    const fakeStaveNote = new FakeStaveNote();\n    checkFakeObjects(assert, fakeStemmableNote, fakeStaveNote);\n}\n/**\n * Demonstrate that an object (ES6-style) can pass the isCategory(...) test if it\n * or its ancestor has the correct static .CATEGORY property.\n */\nfunction fakeES6(assert) {\n    class FakeStemmableNote {\n    }\n    FakeStemmableNote.CATEGORY = StemmableNote.CATEGORY;\n    class FakeStaveNote extends FakeStemmableNote {\n    }\n    FakeStaveNote.CATEGORY = StaveNote.CATEGORY;\n    const fakeStemmableNote = new FakeStemmableNote();\n    const fakeStaveNote = new FakeStaveNote();\n    checkFakeObjects(assert, fakeStemmableNote, fakeStaveNote);\n}\n/**\n * The tsconfig.json target is ES6 (as of August 18, 2021), so isCategory() works even when the root class \"extends Object\".\n */\nfunction edgeCaseES5vsES6(assert) {\n    class Z extends Object {\n    }\n    class Y extends Z {\n    }\n    class X extends Y {\n    }\n    const zInstance = new Z();\n    const xInstance = new X();\n    assert.ok(xInstance instanceof Object, 'es5 & es6: x IS an instanceof Object');\n    // If targeting es5, these three assertions only pass if we remove \"extends Object\" from the class Z definition.\n    assert.ok(zInstance instanceof Z, 'es6: z IS an instanceof Z');\n    assert.ok(xInstance instanceof Y, 'es6: x IS an instanceof Y');\n    assert.ok(xInstance instanceof Z, 'es6: x IS an instanceof Z');\n}\nVexFlowTests.register(TypeGuardTests);\nexport { TypeGuardTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Unison Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Tables } from '../src/tables';\nconst UnisonTests = {\n    Start() {\n        QUnit.module('Unison');\n        const run = VexFlowTests.runTests;\n        run('Simple(true)', simple, { unison: true, voice1: 'e4/q, e4/q, e4/h', voice2: 'e4/8, e4/8, e4/q, e4/h' });\n        run('Simple(false)', simple, { unison: false, voice1: 'e4/q, e4/q, e4/h', voice2: 'e4/8, e4/8, e4/q, e4/h' });\n        run('Accidentals(true)', simple, {\n            unison: true,\n            voice1: 'e4/q, e#4/q, e#4/h',\n            voice2: 'e4/8, e4/8, eb4/q, eb4/h',\n        });\n        run('Accidentals(false)', simple, {\n            unison: false,\n            voice1: 'e4/q, e#4/q, e#4/h',\n            voice2: 'e4/8, e4/8, eb4/q, eb4/h',\n        });\n        run('Dots(true)', simple, { unison: true, voice1: 'e4/q.., e4/16, e4/h', voice2: '(a4 e4)/q., e4/8, e4/h' });\n        run('Dots(false)', simple, { unison: false, voice1: 'e4/q.., e4/16, e4/h', voice2: '(a4 e4)/q., e4/8, e4/h' });\n        run('Breve(true)', breve, { unison: true });\n        run('Breve(false)', breve, { unison: false });\n        run('Style(true)', style, { unison: true });\n        run('Style(false)', style, { unison: false });\n    },\n};\nfunction simple(options) {\n    Tables.UNISON = options.params.unison;\n    const vf = VexFlowTests.makeFactory(options, 500, 200);\n    const score = vf.EasyScore();\n    const system = vf.System({ y: 40, x: 10, width: 400 });\n    system.addStave({\n        voices: [score.voice(score.notes(options.params.voice1)), score.voice(score.notes(options.params.voice2))],\n    });\n    system.getStaves()[0].setClef('treble');\n    system.getStaves()[0].setTimeSignature('4/4');\n    vf.draw();\n    options.assert.expect(0);\n}\nfunction style(options) {\n    Tables.UNISON = options.params.unison;\n    const vf = VexFlowTests.makeFactory(options, 500, 200);\n    const score = vf.EasyScore();\n    const system = vf.System({ y: 40, x: 10, width: 400 });\n    const notes1 = score.notes('e4/q, e4/q, e4/h');\n    const notes2 = score.notes('e4/8, e4/8, e4/q, e4/h');\n    notes1[2].setStyle({ fillStyle: 'blue', strokeStyle: 'blue' });\n    notes2[3].setStyle({ fillStyle: 'green', strokeStyle: 'green' });\n    system.addStave({\n        voices: [score.voice(notes1), score.voice(notes2)],\n    });\n    system.getStaves()[0].setClef('treble');\n    system.getStaves()[0].setTimeSignature('4/4');\n    vf.draw();\n    options.assert.expect(0);\n}\nfunction breve(options) {\n    Tables.UNISON = options.params.unison;\n    const vf = VexFlowTests.makeFactory(options, 500, 200);\n    const score = vf.EasyScore();\n    const system = vf.System({ y: 40, x: 10, width: 400 });\n    system.addStave({\n        voices: [\n            score.voice([vf.StaveNote({ keys: ['e/4'], duration: '1/2' })], { time: '8/4' }),\n            score.voice(score.notes('e4/1, e4/1'), { time: '8/4' }),\n        ],\n    });\n    system.getStaves()[0].setClef('treble');\n    system.getStaves()[0].setTimeSignature('8/4');\n    vf.draw();\n    options.assert.expect(0);\n}\nVexFlowTests.register(UnisonTests);\nexport { UnisonTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// VexFlow Test Support Library\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _VexFlowTests_NEXT_TEST_ID;\nimport { Factory, Flow, Font, Renderer } from '../src/index';\nimport { globalObject } from '../src/util';\nconst global = globalObject();\n// Each test case will switch through the available fonts, and then restore the original font when done.\nlet originalFontNames;\nfunction useTempFontStack(fontName) {\n    originalFontNames = Flow.getMusicFont();\n    Flow.setMusicFont(...VexFlowTests.FONT_STACKS[fontName]);\n}\nfunction restoreOriginalFontStack() {\n    Flow.setMusicFont(...originalFontNames);\n}\n// A micro util inspired by jQuery.\nif (!global.$) {\n    // generate_png_images.js uses jsdom and does not include jQuery.\n    global.$ = (param) => {\n        let element;\n        if (typeof param !== 'string') {\n            element = param;\n        }\n        else if (param.startsWith('<')) {\n            // Extract the tag name: e.g., <div/> => div\n            // Assume param.match returns something (! operator).\n            // eslint-disable-next-line\n            const tagName = param.match(/[A-Za-z]+/g)[0];\n            element = document.createElement(tagName);\n        }\n        else {\n            element = document.querySelector(param);\n        }\n        const $element = {\n            // eslint-disable-next-line\n            get(index) {\n                return element;\n            },\n            addClass(c) {\n                element.classList.add(c);\n                return $element;\n            },\n            text(t) {\n                element.textContent = t;\n                return $element;\n            },\n            html(h) {\n                if (!h) {\n                    return element.innerHTML;\n                }\n                else {\n                    element.innerHTML = h;\n                    return $element;\n                }\n            },\n            append(...elementsToAppend) {\n                elementsToAppend.forEach((e) => {\n                    element.appendChild(e);\n                });\n                return $element;\n            },\n            attr(attrName, val) {\n                element.setAttribute(attrName, val);\n                return $element;\n            },\n        };\n        return $element;\n    };\n}\n/** Allow `name` to be used inside file names. */\nfunction sanitizeName(name) {\n    return name.replace(/[^a-zA-Z0-9]/g, '_');\n}\nconst CANVAS_TEST_CONFIG = {\n    backend: Renderer.Backends.CANVAS,\n    tagName: 'canvas',\n    testType: 'Canvas',\n    fontStacks: ['Bravura'],\n};\nconst CANVAS_TEXT_CONFIG = {\n    backend: Renderer.Backends.CANVAS,\n    tagName: 'canvas',\n    testType: 'Canvas',\n    fontStacks: ['Bravura'],\n};\nconst SVG_TEST_CONFIG = {\n    backend: Renderer.Backends.SVG,\n    tagName: 'div',\n    testType: 'SVG',\n    fontStacks: [\n        'Bravura',\n        'Finale Ash',\n        'Finale Broadway',\n        'Finale Maestro',\n        'Gonville',\n        'Gootville',\n        'Leland',\n        'MuseJazz',\n        'Petaluma',\n    ],\n};\nconst SVG_TEXT_CONFIG = {\n    backend: Renderer.Backends.SVG,\n    tagName: 'div',\n    testType: 'SVG',\n    fontStacks: ['Bravura'],\n};\nconst NODE_TEST_CONFIG = {\n    backend: Renderer.Backends.CANVAS,\n    tagName: 'canvas',\n    testType: 'NodeCanvas',\n    fontStacks: ['Bravura', 'Gonville', 'Petaluma', 'Leland'],\n};\nexport class VexFlowTests {\n    // Call this at the end of a `tests/xxxx_tests.ts` file to register the module.\n    static register(test) {\n        VexFlowTests.tests.push(test);\n    }\n    static parseJobOptions(runOptions) {\n        let { jobs, job } = runOptions || { jobs: 1, job: 0 };\n        if (window) {\n            const { location } = window;\n            if (location) {\n                const sps = new URLSearchParams(location.search);\n                const jobsParam = sps.get('jobs');\n                const jobParam = sps.get('job');\n                if (jobsParam) {\n                    jobs = parseInt(jobsParam, 10);\n                }\n                if (jobParam) {\n                    job = parseInt(jobParam, 10);\n                }\n            }\n        }\n        return {\n            jobs,\n            job,\n        };\n    }\n    // flow.html calls this to invoke all the tests.\n    static run(runOptions) {\n        const { jobs, job } = VexFlowTests.parseJobOptions(runOptions);\n        VexFlowTests.tests.forEach((test, idx) => {\n            if (jobs === 1 || idx % jobs === job) {\n                test.Start();\n            }\n        });\n    }\n    static set NODE_FONT_STACKS(fontStacks) {\n        NODE_TEST_CONFIG.fontStacks = fontStacks;\n    }\n    /** Return a unique ID for a test. */\n    static generateTestID(prefix) {\n        var _b, _c, _d;\n        return prefix + '_' + (__classPrivateFieldSet(_b = VexFlowTests, _a, (_d = __classPrivateFieldGet(_b, _a, \"f\", _VexFlowTests_NEXT_TEST_ID), _c = _d++, _d), \"f\", _VexFlowTests_NEXT_TEST_ID), _c);\n    }\n    /**\n     * Run `func` inside a QUnit test for each of the enabled rendering backends.\n     * @param name\n     * @param testFunc\n     * @param params\n     */\n    // eslint-disable-next-line\n    static runTests(name, testFunc, params) {\n        VexFlowTests.runCanvasTest(name, testFunc, params);\n        VexFlowTests.runSVGTest(name, testFunc, params);\n        VexFlowTests.runNodeTest(name, testFunc, params);\n    }\n    // eslint-disable-next-line\n    static runTextTests(name, testFunc, params) {\n        VexFlowTests.runCanvasText(name, testFunc, params);\n        VexFlowTests.runSVGText(name, testFunc, params);\n    }\n    /**\n     * Append a <div/> which contains the test case title and rendered output. See tests/flow.html.\n     * @param elementId\n     * @param testTitle\n     * @param tagName\n     */\n    static createTest(elementId, testTitle, tagName, titleId = '') {\n        const anchorTestTitle = `<a href=\"#${titleId}\">${testTitle}</a>`;\n        const title = $('<div/>').addClass('name').attr('id', titleId).html(anchorTestTitle).get(0);\n        const vexOutput = $(`<${tagName}/>`).addClass('vex-tabdiv').attr('id', elementId).get(0);\n        const container = $('<div/>').addClass('testcanvas').append(title, vexOutput).get(0);\n        $('#qunit-tests').append(container);\n        return vexOutput;\n    }\n    static makeFactory(options, width = 450, height = 140) {\n        const { elementId, backend } = options;\n        return new Factory({ renderer: { elementId, backend, width, height } });\n    }\n    // eslint-disable-next-line\n    static runCanvasTest(name, testFunc, params) {\n        if (VexFlowTests.RUN_CANVAS_TESTS) {\n            const helper = null;\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, CANVAS_TEST_CONFIG), { name, testFunc, params, helper }));\n        }\n    }\n    // eslint-disable-next-line\n    static runCanvasText(name, testFunc, params) {\n        if (VexFlowTests.RUN_CANVAS_TESTS) {\n            const helper = null;\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, CANVAS_TEXT_CONFIG), { name, testFunc, params, helper }));\n        }\n    }\n    // eslint-disable-next-line\n    static runSVGTest(name, testFunc, params) {\n        if (VexFlowTests.RUN_SVG_TESTS) {\n            const helper = null;\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, SVG_TEST_CONFIG), { name, testFunc, params, helper }));\n        }\n    }\n    // eslint-disable-next-line\n    static runSVGText(name, testFunc, params) {\n        if (VexFlowTests.RUN_SVG_TESTS) {\n            const helper = null;\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, SVG_TEXT_CONFIG), { name, testFunc, params, helper }));\n        }\n    }\n    // eslint-disable-next-line\n    static runNodeTest(name, testFunc, params) {\n        if (VexFlowTests.RUN_NODE_TESTS) {\n            const helper = VexFlowTests.runNodeTestHelper;\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, NODE_TEST_CONFIG), { name, testFunc, params, helper }));\n        }\n    }\n    /**\n     * Save the PNG file.\n     * @param fontName\n     * @param element\n     */\n    static runNodeTestHelper(fontName, element) {\n        if (Renderer.lastContext !== undefined) {\n            const moduleName = sanitizeName(QUnit.module.name);\n            const testName = sanitizeName(QUnit.test.name);\n            // If we are only testing Bravura, we OMIT the font name from the\n            // output image file name, which allows visual diffs against\n            // the previous release: version 3.0.9. In the future, if we decide\n            // to test all fonts by default, we can remove this check.\n            const onlyBravura = NODE_TEST_CONFIG.fontStacks.length === 1 && fontName === 'Bravura';\n            const fontInfo = onlyBravura ? '' : `.${fontName}`;\n            const fileName = `${VexFlowTests.NODE_IMAGEDIR}/${moduleName}.${testName}${fontInfo}.png`;\n            const imageData = element.toDataURL().split(';base64,').pop();\n            const imageBuffer = Buffer.from(imageData, 'base64');\n            VexFlowTests.shims.fs.writeFileSync(fileName, imageBuffer, { encoding: 'base64' });\n        }\n    }\n    /** Run QUnit.test(...) for each font. */\n    // eslint-disable-next-line\n    static runWithParams({ fontStacks, testFunc, name, params, backend, tagName, testType, helper }) {\n        if (name === undefined) {\n            throw new Error('Test name is undefined.');\n        }\n        const testTypeLowerCase = testType.toLowerCase();\n        fontStacks.forEach((fontStackName) => {\n            // eslint-disable-next-line\n            QUnit.test(name, (assert) => {\n                useTempFontStack(fontStackName);\n                const elementId = VexFlowTests.generateTestID(`${testTypeLowerCase}_` + fontStackName);\n                const moduleName = assert.test.module.name;\n                const title = moduleName + ' › ' + name + ` › ${testType} + ${fontStackName}`;\n                // Add an element id for the title div, so that we can scroll directly to a test case.\n                // Add a fragment identifier to the url (e.g., #Stave.Multiple_Stave_Barline_Test.Bravura)\n                // This titleId will match the name of the PNGs generated by visual regression tests\n                // (without the _Current.png or _Reference.png).\n                let prefix = '';\n                if (testTypeLowerCase === 'canvas') {\n                    prefix = testTypeLowerCase + '_';\n                }\n                else {\n                    // DO NOT ADD A PREFIX TO SVG TESTS\n                    // The canvas prefix above is for making sure our element ids are unique,\n                    // since we have a canvas+bravura test case and a svg+bravura test case\n                    // that would otherwise have the same titleId.\n                }\n                const titleId = `${prefix}${sanitizeName(moduleName)}.${sanitizeName(name)}.${fontStackName}`;\n                const element = VexFlowTests.createTest(elementId, title, tagName, titleId);\n                const options = { elementId, params, assert, backend };\n                const isSVG = backend === Renderer.Backends.SVG;\n                const contextBuilder = isSVG ? Renderer.getSVGContext : Renderer.getCanvasContext;\n                testFunc(options, contextBuilder);\n                restoreOriginalFontStack();\n                if (helper)\n                    helper(fontStackName, element);\n            });\n        });\n    }\n    /**\n     * @param ctx\n     * @param x\n     * @param y\n     */\n    static plotLegendForNoteWidth(ctx, x, y) {\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        const spacing = 12;\n        let lastY = y;\n        function legend(color, text) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(10);\n            ctx.moveTo(x, lastY - 4);\n            ctx.lineTo(x + 10, lastY - 4);\n            ctx.stroke();\n            ctx.setFillStyle('black');\n            ctx.fillText(text, x + 15, lastY);\n            lastY += spacing;\n        }\n        legend('green', 'Note + Flag');\n        legend('red', 'Modifiers');\n        legend('#999', 'Displaced Head');\n        legend('#DDD', 'Formatter Shift');\n        ctx.restore();\n    }\n}\n_a = VexFlowTests;\nVexFlowTests.tests = [];\nVexFlowTests.RUN_CANVAS_TESTS = true;\nVexFlowTests.RUN_SVG_TESTS = true;\nVexFlowTests.RUN_NODE_TESTS = false;\n// Default font properties for tests.\nVexFlowTests.Font = { size: 10 };\n/**\n * Each font stack is a prioritized list of font names.\n */\nVexFlowTests.FONT_STACKS = {\n    Bravura: ['Bravura', 'Roboto Slab'],\n    Gonville: ['GonvilleSmufl', 'Bravura', 'Roboto Slab'],\n    Petaluma: ['Petaluma', 'Bravura', 'Petaluma Script'],\n    Leland: ['Leland', 'Bravura', 'Roboto Slab'],\n    MuseJazz: ['MuseJazz', 'Bravura', 'Academico'],\n    Gootville: ['Gootville', 'Bravura', 'Academico'],\n    'Finale Ash': ['Finale Ash', 'Bravura', 'Academico'],\n    'Finale Broadway': ['Finale Broadway', 'Bravura', 'Academico'],\n    'Finale Maestro': ['Finale Maestro', 'Bravura', 'Academico'],\n};\n_VexFlowTests_NEXT_TEST_ID = { value: 0 };\n/**\n * Used with array.reduce(...) to flatten arrays of arrays in the tests.\n */\n// eslint-disable-next-line\nexport const concat = (a, b) => a.concat(b);\n/** Used in KeySignature and ClefKeySignature Tests. */\nexport const MAJOR_KEYS = [\n    //\n    'C',\n    'F',\n    'Bb',\n    'Eb',\n    'Ab',\n    'Db',\n    'Gb',\n    'Cb',\n    'G',\n    'D',\n    'A',\n    'E',\n    'B',\n    'F#',\n    'C#',\n];\nexport const MINOR_KEYS = [\n    'Am',\n    'Dm',\n    'Gm',\n    'Cm',\n    'Fm',\n    'Bbm',\n    'Ebm',\n    'Abm',\n    'Em',\n    'Bm',\n    'F#m',\n    'C#m',\n    'G#m',\n    'D#m',\n    'A#m',\n];\n// VexFlow classes can be accessed via Vex.Flow.* or by directly importing a library class.\n// Tests can be accessed via Vex.Flow.Test.* or by directly importing a test class.\n// Here we set Vex.Flow.Test = VexFlowTests.\n// eslint-disable-next-line\n// @ts-ignore\nFlow.Test = VexFlowTests;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// VF.* Prefix Tests\n//\n// VexFlow classes are available under the global Vex.Flow.* namespace.\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Accidental, Annotation, Articulation, Barline, BarNote, Beam, Bend, BoundingBox, ChordSymbol, Clef, ClefNote, Crescendo, Curve, Dot, EasyScore, Element, Factory, Flow, Font, Formatter, Fraction, FretHandFinger, GhostNote, GlyphNote, GraceNote, GraceNoteGroup, GraceTabNote, KeyManager, KeySignature, KeySigNote, Modifier, ModifierContext, MultiMeasureRest, Music, Note, NoteHead, NoteSubGroup, Ornament, Parser, PedalMarking, Registry, Renderer, RepeatNote, Repetition, Stave, StaveConnector, StaveHairpin, StaveLine, StaveModifier, StaveNote, StaveTempo, StaveText, StaveTie, Stem, StringNumber, Stroke, System, TabNote, TabSlide, TabStave, TabTie, TextBracket, TextDynamics, TextNote, TickContext, TimeSignature, TimeSigNote, Tremolo, Tuning, Tuplet, Vibrato, VibratoBracket, Voice, Volta, } from '../src/index';\nconst VFPrefixTests = {\n    Start() {\n        QUnit.module('VF.* API');\n        QUnit.test('VF.* API', VFPrefix);\n        QUnit.test('VF Alias', VFAlias);\n    },\n};\nfunction VFPrefix(assert) {\n    // Intentionally use Vex.Flow here so we can verify that the Vex.Flow.* API\n    // is equivalent to using the individual classes in TypeScript.\n    const VF = Vex.Flow;\n    assert.equal(Accidental, VF.Accidental);\n    assert.equal(Annotation, VF.Annotation);\n    assert.equal(Articulation, VF.Articulation);\n    assert.equal(Barline, VF.Barline);\n    assert.equal(BarNote, VF.BarNote);\n    assert.equal(Beam, VF.Beam);\n    assert.equal(Bend, VF.Bend);\n    assert.equal(BoundingBox, VF.BoundingBox);\n    assert.equal(ChordSymbol, VF.ChordSymbol);\n    assert.equal(Clef, VF.Clef);\n    assert.equal(ClefNote, VF.ClefNote);\n    assert.equal(Crescendo, VF.Crescendo);\n    assert.equal(Curve, VF.Curve);\n    assert.equal(Dot, VF.Dot);\n    assert.equal(EasyScore, VF.EasyScore);\n    assert.equal(Element, VF.Element);\n    assert.equal(Factory, VF.Factory);\n    assert.equal(Flow.RESOLUTION, VF.RESOLUTION);\n    assert.equal(Font, VF.Font);\n    assert.equal(Formatter, VF.Formatter);\n    assert.propEqual(new Formatter(), new VF.Formatter(), 'new Formatter()');\n    assert.equal(Fraction, VF.Fraction);\n    assert.equal(FretHandFinger, VF.FretHandFinger);\n    assert.equal(GhostNote, VF.GhostNote);\n    assert.equal(GlyphNote, VF.GlyphNote);\n    assert.equal(GraceNote, VF.GraceNote);\n    assert.equal(GraceNoteGroup, VF.GraceNoteGroup);\n    assert.equal(GraceTabNote, VF.GraceTabNote);\n    assert.equal(KeyManager, VF.KeyManager);\n    assert.equal(KeySignature, VF.KeySignature);\n    assert.equal(KeySigNote, VF.KeySigNote);\n    assert.equal(Modifier, VF.Modifier);\n    assert.equal(ModifierContext, VF.ModifierContext);\n    assert.equal(MultiMeasureRest, VF.MultiMeasureRest);\n    assert.equal(Music, VF.Music);\n    assert.equal(Note, VF.Note);\n    assert.equal(NoteHead, VF.NoteHead);\n    assert.equal(NoteSubGroup, VF.NoteSubGroup);\n    assert.equal(Ornament, VF.Ornament);\n    assert.equal(Parser, VF.Parser);\n    assert.equal(PedalMarking, VF.PedalMarking);\n    assert.equal(Registry, VF.Registry);\n    assert.equal(Renderer, VF.Renderer);\n    assert.equal(RepeatNote, VF.RepeatNote);\n    assert.equal(Repetition, VF.Repetition);\n    assert.equal(Stave, VF.Stave);\n    assert.notEqual(Stave, VF.StaveNote);\n    assert.equal(StaveConnector, VF.StaveConnector);\n    assert.equal(StaveHairpin, VF.StaveHairpin);\n    assert.equal(StaveLine, VF.StaveLine);\n    assert.equal(StaveModifier, VF.StaveModifier);\n    assert.equal(StaveNote, VF.StaveNote);\n    assert.equal(StaveTempo, VF.StaveTempo);\n    assert.equal(StaveText, VF.StaveText);\n    assert.equal(StaveTie, VF.StaveTie);\n    assert.equal(Stem, VF.Stem);\n    assert.equal(StringNumber, VF.StringNumber);\n    assert.equal(Stroke, VF.Stroke);\n    assert.equal(System, VF.System);\n    assert.equal(TabNote, VF.TabNote);\n    assert.equal(TabSlide, VF.TabSlide);\n    assert.equal(TabStave, VF.TabStave);\n    assert.equal(TabTie, VF.TabTie);\n    assert.equal(TextBracket, VF.TextBracket);\n    assert.equal(TextDynamics, VF.TextDynamics);\n    assert.equal(TextNote, VF.TextNote);\n    assert.equal(TickContext, VF.TickContext);\n    assert.equal(TimeSignature, VF.TimeSignature);\n    assert.equal(TimeSigNote, VF.TimeSigNote);\n    assert.equal(Tremolo, VF.Tremolo);\n    assert.equal(Tuning, VF.Tuning);\n    assert.equal(Tuplet, VF.Tuplet);\n    assert.equal(Vibrato, VF.Vibrato);\n    assert.equal(VibratoBracket, VF.VibratoBracket);\n    assert.equal(Voice, VF.Voice);\n    assert.equal(Volta, VF.Volta);\n}\n/**\n * If you have name collisions with VexFlow classes, consider extracting classes from Vex.Flow\n * and renaming them with a VF prefix.\n */\nfunction VFAlias(assert) {\n    const Flow = Vex.Flow;\n    const VFAliases = {\n        get VFAccidental() {\n            return Flow.Accidental;\n        },\n        get VFAnnotation() {\n            return Flow.Annotation;\n        },\n        get VFVibrato() {\n            return Flow.Vibrato;\n        },\n    };\n    const { VFVibrato, VFAccidental, VFAnnotation } = VFAliases;\n    assert.equal(Accidental, VFAccidental);\n    assert.equal(Annotation, VFAnnotation);\n    const vibrato = new VFVibrato();\n    assert.ok(vibrato);\n    const acc1 = new VFAccidental('##');\n    const acc2 = new Accidental('##');\n    assert.equal(acc1.type, acc2.type);\n}\nVexFlowTests.register(VFPrefixTests);\nexport { VFPrefixTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Vibrato Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Bend, Font, Formatter, TabNote, TabStave, Vibrato } from '../src/index';\nconst VibratoTests = {\n    Start() {\n        QUnit.module('Vibrato');\n        const run = VexFlowTests.runTests;\n        run('Simple Vibrato', simple);\n        run('Harsh Vibrato', harsh);\n        run('Vibrato with Bend', withBend);\n    },\n};\n// Helper function to create TabNote objects.\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\n/**\n * Default vibrato symbol (wavy line) on top of a tab with two notes fretted.\n */\nfunction simple(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'h',\n        }).addModifier(new Vibrato(), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'h',\n        }).addModifier(new Vibrato(), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Simple Vibrato');\n}\n/**\n * The harsh vibrato symbol is a zig zag line with sharp points.\n * This test is nearly identical to the 'simple' test above.\n * The only difference is that we call .setHarsh(true) on each Vibrato object.\n */\nfunction harsh(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.5, 1.5);\n    ctx.font = '10pt Arial';\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 10 },\n                { str: 4, fret: 9 },\n            ],\n            duration: 'h',\n        }).addModifier(new Vibrato().setVibratoCode(0xeae2), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'h',\n        }).addModifier(new Vibrato().setVibratoCode(0xeac0), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Harsh Vibrato');\n}\nfunction withBend(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 500, 240);\n    ctx.scale(1.3, 1.3);\n    ctx.setFont(Font.SANS_SERIF, VexFlowTests.Font.size);\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\n    const notes = [\n        tabNote({\n            positions: [\n                { str: 2, fret: 9 },\n                { str: 3, fret: 9 },\n            ],\n            duration: 'q',\n        })\n            .addModifier(new Bend([\n            { type: Bend.UP, text: '1/2' },\n            { type: Bend.DOWN, text: '' },\n        ]), 0)\n            .addModifier(new Bend([\n            { type: Bend.UP, text: '1/2' },\n            { type: Bend.DOWN, text: '' },\n        ]), 1)\n            .addModifier(new Vibrato(), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'q',\n        })\n            .addModifier(new Bend([{ type: Bend.UP, text: 'Full' }]), 0)\n            .addModifier(new Vibrato().setVibratoWidth(60), 0),\n        tabNote({\n            positions: [{ str: 2, fret: 10 }],\n            duration: 'h',\n        }).addModifier(new Vibrato().setVibratoWidth(120).setVibratoCode(0xeae2), 0),\n    ];\n    Formatter.FormatAndDraw(ctx, stave, notes);\n    options.assert.ok(true, 'Vibrato with Bend');\n}\nVexFlowTests.register(VibratoTests);\nexport { VibratoTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Balazs Forian-Szabo\n//\n// VibratoBracket Tests\n// TODO: It's annoying to have to cast \"as Note\" or \"as Note[]\". Could we add a method to Voice to get the tickables as Note[]? Voice.getTickables() vs Voice.getNotes()?\nimport { VexFlowTests } from './vexflow_test_helpers';\nconst VibratoBracketTests = {\n    Start() {\n        QUnit.module('VibratoBracket');\n        const run = VexFlowTests.runTests;\n        run('Simple VibratoBracket', simple);\n        run('Harsh VibratoBracket Without End Note', withoutEndNote);\n        run('Harsh VibratoBracket Without Start Note', withoutStartNote);\n    },\n};\n// Helper function to set up the stave, easyscore, voice, and to format & draw.\nfunction createTest(noteGroup, setupVibratoBracket) {\n    return (options) => {\n        const factory = VexFlowTests.makeFactory(options, 650, 200);\n        const stave = factory.Stave();\n        const score = factory.EasyScore();\n        const voice = score.voice(score.notes(noteGroup));\n        setupVibratoBracket(factory, voice.getTickables());\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\n        factory.draw();\n        options.assert.ok(true);\n    };\n}\nconst simple = createTest('c4/4, c4, c4, c4', (factory, notes) => {\n    factory.VibratoBracket({\n        from: notes[0],\n        to: notes[3],\n        options: { line: 2 },\n    });\n});\nconst withoutEndNote = createTest('c4/4, c4, c4, c4', (factory, notes) => {\n    factory.VibratoBracket({\n        from: notes[2],\n        to: null,\n        options: { line: 2, code: 0xeae2 },\n    });\n});\nconst withoutStartNote = createTest('c4/4, c4, c4, c4', (factory, notes) => {\n    factory.VibratoBracket({\n        from: null,\n        to: notes[2],\n        options: { line: 2, code: 0xeae2 },\n    });\n});\nVexFlowTests.register(VibratoBracketTests);\nexport { VibratoBracketTests };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// Voice Tests\nimport { VexFlowTests } from './vexflow_test_helpers';\nimport { Flow } from '../src/flow';\nimport { Formatter } from '../src/formatter';\nimport { Stave } from '../src/stave';\nimport { Barline } from '../src/stavebarline';\nimport { StaveNote } from '../src/stavenote';\nimport { Voice } from '../src/voice';\nimport { MockTickable } from './mocks';\nconst VoiceTests = {\n    Start() {\n        QUnit.module('Voice');\n        QUnit.test('Strict Test', strict);\n        QUnit.test('Ignore Test', ignore);\n        VexFlowTests.runTests('Full Voice Mode Test', full);\n    },\n};\nconst BEAT = (1 * Flow.RESOLUTION) / 4;\n// Helper function to create a tickable with a preset number of ticks.\nconst createTickable = () => new MockTickable().setTicks(BEAT);\nfunction strict(assert) {\n    assert.expect(8);\n    const tickables = [createTickable(), createTickable(), createTickable()];\n    const voice = new Voice(Flow.TIME4_4);\n    assert.equal(voice.getTotalTicks().value(), BEAT * 4, '4/4 Voice has 4 beats');\n    assert.equal(voice.getTicksUsed().value(), BEAT * 0, 'No beats in voice');\n    voice.addTickables(tickables);\n    assert.equal(voice.getTicksUsed().value(), BEAT * 3, 'Three beats in voice');\n    voice.addTickable(createTickable());\n    assert.equal(voice.getTicksUsed().value(), BEAT * 4, 'Four beats in voice');\n    assert.equal(voice.isComplete(), true, 'Voice is complete');\n    const numeratorBeforeException = voice.getTicksUsed().numerator;\n    assert.throws(() => voice.addTickable(createTickable()), /BadArgument/, '\"Too many ticks\" exception');\n    // Verify that adding too many ticks does not affect the `ticksUsed` property of the voice.\n    // See voice.ts: this.ticksUsed.subtract(ticks);\n    assert.equal(voice.getTicksUsed().numerator, numeratorBeforeException, 'Revert `ticksUsed` after a \"Too many ticks\" exception');\n    assert.equal(voice.getSmallestTickCount().value(), BEAT, 'Smallest tick count is BEAT');\n}\nfunction ignore(assert) {\n    const tickables = [\n        createTickable(),\n        createTickable(),\n        createTickable().setIgnoreTicks(true),\n        createTickable(),\n        createTickable().setIgnoreTicks(true),\n        createTickable(),\n    ];\n    const voice = new Voice(Flow.TIME4_4);\n    voice.addTickables(tickables);\n    assert.ok(true, 'all pass');\n}\nfunction full(options, contextBuilder) {\n    const ctx = contextBuilder(options.elementId, 550, 200);\n    const stave = new Stave(10, 50, 500).addClef('treble').addTimeSignature('4/4').setEndBarType(Barline.type.END);\n    const notes = [\n        new StaveNote({ keys: ['c/4'], duration: '4' }),\n        new StaveNote({ keys: ['d/4'], duration: '4' }),\n        new StaveNote({ keys: ['r/4'], duration: '4r' }),\n    ];\n    notes.forEach((note) => note.setStave(stave));\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.FULL).addTickables(notes);\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\n    stave.setContext(ctx).draw();\n    voice.draw(ctx);\n    const bb = voice.getBoundingBox();\n    if (bb) {\n        ctx.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n    }\n    ctx.stroke();\n    options.assert.throws(() => voice.addTickable(new StaveNote({ keys: ['c/4'], duration: '2' })), /BadArgument/, 'Voice cannot exceed full amount of ticks');\n}\nVexFlowTests.register(VoiceTests);\nexport { VoiceTests };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// vexflow-debug-with-tests.ts is the entry point for the build output file vexflow-debug-with-tests.js.\n// It statically bundles all the music engraving fonts, and also includes the tests from vexflow/tests/.\n// The output file is used by flow.html & flow-headless-browser.html to run the tests.\nimport * as VexSrc from '../src/index';\nimport * as VexTests from '../tests/index';\nimport { Flow } from '../src/flow';\nFlow.setMusicFont('Bravura', 'Roboto Slab');\n// Re-export all exports from src/index.ts and tests/index.ts.\nexport * from '../src/index';\nexport * from '../tests/index';\n// Also collect all exports into a default export for CJS projects.\nexport default Object.assign(Object.assign({}, VexSrc), VexTests);\n"],"names":[],"sourceRoot":""}